/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersGetCurrentUser } from "../funcs/usersGetCurrentUser.js";
import { usersGetUser } from "../funcs/usersGetUser.js";
import { usersListUsers } from "../funcs/usersListUsers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  /**
   * List users
   *
   * @remarks
   * Retrieve a list of all users in an organization
   */
  async listUsers(
    request: operations.ListUsersRequest,
    options?: RequestOptions,
  ): Promise<components.UserEntityPaginated> {
    return unwrapAsync(usersListUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a user
   *
   * @remarks
   * Retrieve a single user by ID
   */
  async getUser(
    request: operations.GetUserRequest,
    options?: RequestOptions,
  ): Promise<components.UserEntity> {
    return unwrapAsync(usersGetUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the currently authenticated user
   *
   * @remarks
   * Retrieve the current user
   */
  async getCurrentUser(
    options?: RequestOptions,
  ): Promise<components.CurrentUserEntity> {
    return unwrapAsync(usersGetCurrentUser(
      this,
      options,
    ));
  }
}
