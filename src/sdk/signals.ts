/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { signalsCopyOnCallScheduleRotation } from "../funcs/signalsCopyOnCallScheduleRotation.js";
import { signalsCreateNotificationPolicy } from "../funcs/signalsCreateNotificationPolicy.js";
import { signalsCreateOnCallScheduleRotation } from "../funcs/signalsCreateOnCallScheduleRotation.js";
import { signalsCreateOnCallShift } from "../funcs/signalsCreateOnCallShift.js";
import { signalsCreateSignalsAlertGroupingConfiguration } from "../funcs/signalsCreateSignalsAlertGroupingConfiguration.js";
import { signalsCreateSignalsEmailTarget } from "../funcs/signalsCreateSignalsEmailTarget.js";
import { signalsCreateSignalsEventSource } from "../funcs/signalsCreateSignalsEventSource.js";
import { signalsCreateSignalsWebhookTarget } from "../funcs/signalsCreateSignalsWebhookTarget.js";
import { signalsCreateTeamEscalationPolicy } from "../funcs/signalsCreateTeamEscalationPolicy.js";
import { signalsCreateTeamOnCallSchedule } from "../funcs/signalsCreateTeamOnCallSchedule.js";
import { signalsCreateTeamSignalRule } from "../funcs/signalsCreateTeamSignalRule.js";
import { signalsDebugSignalsExpression } from "../funcs/signalsDebugSignalsExpression.js";
import { signalsDeleteNotificationPolicy } from "../funcs/signalsDeleteNotificationPolicy.js";
import { signalsDeleteOnCallScheduleRotation } from "../funcs/signalsDeleteOnCallScheduleRotation.js";
import { signalsDeleteOnCallShift } from "../funcs/signalsDeleteOnCallShift.js";
import { signalsDeleteSignalsAlertGroupingConfiguration } from "../funcs/signalsDeleteSignalsAlertGroupingConfiguration.js";
import { signalsDeleteSignalsEmailTarget } from "../funcs/signalsDeleteSignalsEmailTarget.js";
import { signalsDeleteSignalsEventSource } from "../funcs/signalsDeleteSignalsEventSource.js";
import { signalsDeleteSignalsWebhookTarget } from "../funcs/signalsDeleteSignalsWebhookTarget.js";
import { signalsDeleteTeamEscalationPolicy } from "../funcs/signalsDeleteTeamEscalationPolicy.js";
import { signalsDeleteTeamOnCallSchedule } from "../funcs/signalsDeleteTeamOnCallSchedule.js";
import { signalsDeleteTeamSignalRule } from "../funcs/signalsDeleteTeamSignalRule.js";
import { signalsGetNotificationPolicy } from "../funcs/signalsGetNotificationPolicy.js";
import { signalsGetOnCallScheduleRotation } from "../funcs/signalsGetOnCallScheduleRotation.js";
import { signalsGetOnCallShift } from "../funcs/signalsGetOnCallShift.js";
import { signalsGetSignalsAlertGroupingConfiguration } from "../funcs/signalsGetSignalsAlertGroupingConfiguration.js";
import { signalsGetSignalsEmailTarget } from "../funcs/signalsGetSignalsEmailTarget.js";
import { signalsGetSignalsEventSource } from "../funcs/signalsGetSignalsEventSource.js";
import { signalsGetSignalsHackerMode } from "../funcs/signalsGetSignalsHackerMode.js";
import { signalsGetSignalsIngestUrl } from "../funcs/signalsGetSignalsIngestUrl.js";
import { signalsGetSignalsWebhookTarget } from "../funcs/signalsGetSignalsWebhookTarget.js";
import { signalsGetTeamEscalationPolicy } from "../funcs/signalsGetTeamEscalationPolicy.js";
import { signalsGetTeamOnCallSchedule } from "../funcs/signalsGetTeamOnCallSchedule.js";
import { signalsGetTeamSignalRule } from "../funcs/signalsGetTeamSignalRule.js";
import { signalsListNotificationPolicySettings } from "../funcs/signalsListNotificationPolicySettings.js";
import { signalsListOrganizationOnCallSchedules } from "../funcs/signalsListOrganizationOnCallSchedules.js";
import { signalsListSignalsAlertGroupingConfigurations } from "../funcs/signalsListSignalsAlertGroupingConfigurations.js";
import { signalsListSignalsEmailTargets } from "../funcs/signalsListSignalsEmailTargets.js";
import { signalsListSignalsEventSources } from "../funcs/signalsListSignalsEventSources.js";
import { signalsListSignalsTransposers } from "../funcs/signalsListSignalsTransposers.js";
import { signalsListSignalsWebhookTargets } from "../funcs/signalsListSignalsWebhookTargets.js";
import { signalsListTeamEscalationPolicies } from "../funcs/signalsListTeamEscalationPolicies.js";
import { signalsListTeamOnCallSchedules } from "../funcs/signalsListTeamOnCallSchedules.js";
import { signalsListTeamSignalRules } from "../funcs/signalsListTeamSignalRules.js";
import { signalsOverrideOnCallScheduleRotationShifts } from "../funcs/signalsOverrideOnCallScheduleRotationShifts.js";
import { signalsPreviewOnCallScheduleRotation } from "../funcs/signalsPreviewOnCallScheduleRotation.js";
import { signalsPreviewTeamOnCallSchedule } from "../funcs/signalsPreviewTeamOnCallSchedule.js";
import { signalsUpdateNotificationPolicy } from "../funcs/signalsUpdateNotificationPolicy.js";
import { signalsUpdateOnCallScheduleRotation } from "../funcs/signalsUpdateOnCallScheduleRotation.js";
import { signalsUpdateOnCallShift } from "../funcs/signalsUpdateOnCallShift.js";
import { signalsUpdateSignalsAlertGroupingConfiguration } from "../funcs/signalsUpdateSignalsAlertGroupingConfiguration.js";
import { signalsUpdateSignalsEmailTarget } from "../funcs/signalsUpdateSignalsEmailTarget.js";
import { signalsUpdateSignalsWebhookTarget } from "../funcs/signalsUpdateSignalsWebhookTarget.js";
import { signalsUpdateTeamEscalationPolicy } from "../funcs/signalsUpdateTeamEscalationPolicy.js";
import { signalsUpdateTeamOnCallSchedule } from "../funcs/signalsUpdateTeamOnCallSchedule.js";
import { signalsUpdateTeamSignalRule } from "../funcs/signalsUpdateTeamSignalRule.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Signals extends ClientSDK {
  /**
   * List escalation policies for a team
   *
   * @remarks
   * List all Signals escalation policies for a team.
   */
  async listTeamEscalationPolicies(
    request: operations.ListTeamEscalationPoliciesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEscalationPolicyEntityPaginated> {
    return unwrapAsync(signalsListTeamEscalationPolicies(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an escalation policy for a team
   *
   * @remarks
   * Create a Signals escalation policy for a team.
   */
  async createTeamEscalationPolicy(
    request: operations.CreateTeamEscalationPolicyRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEscalationPolicyEntity> {
    return unwrapAsync(signalsCreateTeamEscalationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an escalation policy for a team
   *
   * @remarks
   * Get a Signals escalation policy by ID
   */
  async getTeamEscalationPolicy(
    request: operations.GetTeamEscalationPolicyRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEscalationPolicyEntity> {
    return unwrapAsync(signalsGetTeamEscalationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an escalation policy for a team
   *
   * @remarks
   * Delete a Signals escalation policy by ID
   */
  async deleteTeamEscalationPolicy(
    request: operations.DeleteTeamEscalationPolicyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteTeamEscalationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an escalation policy for a team
   *
   * @remarks
   * Update a Signals escalation policy by ID
   */
  async updateTeamEscalationPolicy(
    request: operations.UpdateTeamEscalationPolicyRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEscalationPolicyEntity> {
    return unwrapAsync(signalsUpdateTeamEscalationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Preview a new on-call schedule for a team
   *
   * @remarks
   * Preview a new on-call schedule based on the provided rotations, allowing you to see how the schedule will look before saving it.
   */
  async previewTeamOnCallSchedule(
    request: operations.PreviewTeamOnCallScheduleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallSchedulePreviewEntity> {
    return unwrapAsync(signalsPreviewTeamOnCallSchedule(
      this,
      request,
      options,
    ));
  }

  /**
   * List on-call schedules for a team
   *
   * @remarks
   * List all Signals on-call schedules for a team.
   */
  async listTeamOnCallSchedules(
    request: operations.ListTeamOnCallSchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallScheduleEntityPaginated> {
    return unwrapAsync(signalsListTeamOnCallSchedules(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an on-call schedule for a team
   *
   * @remarks
   * Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.
   */
  async createTeamOnCallSchedule(
    request: operations.CreateTeamOnCallScheduleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallScheduleEntity> {
    return unwrapAsync(signalsCreateTeamOnCallSchedule(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an on-call schedule for a team
   *
   * @remarks
   * Get a Signals on-call schedule by ID
   */
  async getTeamOnCallSchedule(
    request: operations.GetTeamOnCallScheduleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallScheduleEntity> {
    return unwrapAsync(signalsGetTeamOnCallSchedule(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an on-call schedule for a team
   *
   * @remarks
   * Delete a Signals on-call schedule by ID
   */
  async deleteTeamOnCallSchedule(
    request: operations.DeleteTeamOnCallScheduleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteTeamOnCallSchedule(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an on-call schedule for a team
   *
   * @remarks
   * Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for
   * `name` and `description` will be ignored if the schedule has more than one rotation. If the schedule
   * has only one rotation, you can continue to update that rotation using the rotation-specific parameters.
   */
  async updateTeamOnCallSchedule(
    request: operations.UpdateTeamOnCallScheduleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallScheduleEntity> {
    return unwrapAsync(signalsUpdateTeamOnCallSchedule(
      this,
      request,
      options,
    ));
  }

  /**
   * Preview an on-call rotation
   *
   * @remarks
   * Preview a new on-call rotation orchanges to an existing on-call rotation
   */
  async previewOnCallScheduleRotation(
    request: operations.PreviewOnCallScheduleRotationRequest,
    options?: RequestOptions,
  ): Promise<
    components.SignalsAPIOnCallSchedulePreviewEntityRotationPreviewEntity
  > {
    return unwrapAsync(signalsPreviewOnCallScheduleRotation(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new on-call rotation
   *
   * @remarks
   * Add a new rotation to an existing on-call schedule
   */
  async createOnCallScheduleRotation(
    request: operations.CreateOnCallScheduleRotationRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallRotationEntity> {
    return unwrapAsync(signalsCreateOnCallScheduleRotation(
      this,
      request,
      options,
    ));
  }

  /**
   * Copy an on-call schedule's rotation
   *
   * @remarks
   * Copy an on-call rotation into a different schedule, allowing you to merge them together safely.
   */
  async copyOnCallScheduleRotation(
    request: operations.CopyOnCallScheduleRotationRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallRotationEntity> {
    return unwrapAsync(signalsCopyOnCallScheduleRotation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an on-call rotation
   *
   * @remarks
   * Get an on-call rotation by ID
   */
  async getOnCallScheduleRotation(
    request: operations.GetOnCallScheduleRotationRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallRotationEntity> {
    return unwrapAsync(signalsGetOnCallScheduleRotation(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an on-call schedule's rotation
   *
   * @remarks
   * Delete an on-call schedule's rotation by ID
   */
  async deleteOnCallScheduleRotation(
    request: operations.DeleteOnCallScheduleRotationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteOnCallScheduleRotation(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an on-call schedule's rotation
   *
   * @remarks
   * Update an on-call schedule's rotation by ID
   */
  async updateOnCallScheduleRotation(
    request: operations.UpdateOnCallScheduleRotationRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallRotationEntity> {
    return unwrapAsync(signalsUpdateOnCallScheduleRotation(
      this,
      request,
      options,
    ));
  }

  /**
   * Override one or more shifts in an on-call rotation
   *
   * @remarks
   * Create an override covering a specific time period in an on-call rotation, re-assigning that period to a specific user.
   */
  async overrideOnCallScheduleRotationShifts(
    request: operations.OverrideOnCallScheduleRotationShiftsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallShiftEntity> {
    return unwrapAsync(signalsOverrideOnCallScheduleRotationShifts(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a shift for an on-call schedule
   *
   * @remarks
   * Create a Signals on-call shift in a schedule.
   */
  async createOnCallShift(
    request: operations.CreateOnCallShiftRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallShiftEntity> {
    return unwrapAsync(signalsCreateOnCallShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an on-call shift for a team schedule
   *
   * @remarks
   * Get a Signals on-call shift by ID
   */
  async getOnCallShift(
    request: operations.GetOnCallShiftRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallShiftEntity> {
    return unwrapAsync(signalsGetOnCallShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an on-call shift from a team schedule
   *
   * @remarks
   * Delete a Signals on-call shift by ID
   */
  async deleteOnCallShift(
    request: operations.DeleteOnCallShiftRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteOnCallShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an on-call shift for a team schedule
   *
   * @remarks
   * Update a Signals on-call shift by ID
   */
  async updateOnCallShift(
    request: operations.UpdateOnCallShiftRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOnCallShiftEntity> {
    return unwrapAsync(signalsUpdateOnCallShift(
      this,
      request,
      options,
    ));
  }

  /**
   * List Signals rules
   *
   * @remarks
   * List all Signals rules for a team.
   */
  async listTeamSignalRules(
    request: operations.ListTeamSignalRulesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIRuleEntityPaginated> {
    return unwrapAsync(signalsListTeamSignalRules(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Signals rule
   *
   * @remarks
   * Create a Signals rule for a team.
   */
  async createTeamSignalRule(
    request: operations.CreateTeamSignalRuleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIRuleEntity> {
    return unwrapAsync(signalsCreateTeamSignalRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Signals rule
   *
   * @remarks
   * Get a Signals rule by ID.
   */
  async getTeamSignalRule(
    request: operations.GetTeamSignalRuleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIRuleEntity> {
    return unwrapAsync(signalsGetTeamSignalRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Signals rule
   *
   * @remarks
   * Delete a Signals rule by ID
   */
  async deleteTeamSignalRule(
    request: operations.DeleteTeamSignalRuleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteTeamSignalRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Signals rule
   *
   * @remarks
   * Update a Signals rule by ID
   */
  async updateTeamSignalRule(
    request: operations.UpdateTeamSignalRuleRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIRuleEntity> {
    return unwrapAsync(signalsUpdateTeamSignalRule(
      this,
      request,
      options,
    ));
  }

  /**
   * List event sources for Signals
   *
   * @remarks
   * List all Signals event sources for the authenticated user.
   */
  async listSignalsEventSources(
    request: operations.ListSignalsEventSourcesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPITransposerListEntity> {
    return unwrapAsync(signalsListSignalsEventSources(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an event source for Signals
   *
   * @remarks
   * Create a Signals event source for the authenticated user.
   */
  async createSignalsEventSource(
    request: components.CreateSignalsEventSource,
    options?: RequestOptions,
  ): Promise<components.SignalsAPITransposerEntity> {
    return unwrapAsync(signalsCreateSignalsEventSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an event source for Signals
   *
   * @remarks
   * Get a Signals event source by slug
   */
  async getSignalsEventSource(
    request: operations.GetSignalsEventSourceRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPITransposerEntity> {
    return unwrapAsync(signalsGetSignalsEventSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an event source for Signals
   *
   * @remarks
   * Delete a Signals event source by slug
   */
  async deleteSignalsEventSource(
    request: operations.DeleteSignalsEventSourceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteSignalsEventSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get hacker mode status
   *
   * @remarks
   * Get the status of the hacker mode for the current user
   */
  async getSignalsHackerMode(
    options?: RequestOptions,
  ): Promise<components.SignalsAPIHackerModeEntity> {
    return unwrapAsync(signalsGetSignalsHackerMode(
      this,
      options,
    ));
  }

  /**
   * List alert grouping configurations.
   *
   * @remarks
   * List all Signals alert grouping rules for the organization.
   */
  async listSignalsAlertGroupingConfigurations(
    options?: RequestOptions,
  ): Promise<components.SignalsAPIGroupingEntityPaginated> {
    return unwrapAsync(signalsListSignalsAlertGroupingConfigurations(
      this,
      options,
    ));
  }

  /**
   * Create an alert grouping configuration.
   *
   * @remarks
   * Create a Signals alert grouping rule for the organization.
   */
  async createSignalsAlertGroupingConfiguration(
    request: components.CreateSignalsAlertGroupingConfiguration,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIGroupingEntity> {
    return unwrapAsync(signalsCreateSignalsAlertGroupingConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an alert grouping configuration.
   *
   * @remarks
   * Get a Signals alert grouping rule by ID.
   */
  async getSignalsAlertGroupingConfiguration(
    request: operations.GetSignalsAlertGroupingConfigurationRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIGroupingEntity> {
    return unwrapAsync(signalsGetSignalsAlertGroupingConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an alert grouping configuration.
   *
   * @remarks
   * Delete a Signals alert grouping rule by ID.
   */
  async deleteSignalsAlertGroupingConfiguration(
    request: operations.DeleteSignalsAlertGroupingConfigurationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteSignalsAlertGroupingConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an alert grouping configuration.
   *
   * @remarks
   * Update a Signals alert grouping rule for the organization.
   */
  async updateSignalsAlertGroupingConfiguration(
    request: operations.UpdateSignalsAlertGroupingConfigurationRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIGroupingEntity> {
    return unwrapAsync(signalsUpdateSignalsAlertGroupingConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * List email targets for signals
   *
   * @remarks
   * List all Signals email targets for a team.
   */
  async listSignalsEmailTargets(
    request: operations.ListSignalsEmailTargetsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEmailTargetEntityPaginated> {
    return unwrapAsync(signalsListSignalsEmailTargets(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an email target for signals
   *
   * @remarks
   * Create a Signals email target for a team.
   */
  async createSignalsEmailTarget(
    request: components.CreateSignalsEmailTarget,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEmailTargetEntity> {
    return unwrapAsync(signalsCreateSignalsEmailTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a signal email target
   *
   * @remarks
   * Get a Signals email target by ID
   */
  async getSignalsEmailTarget(
    request: operations.GetSignalsEmailTargetRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEmailTargetEntity> {
    return unwrapAsync(signalsGetSignalsEmailTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a signal email target
   *
   * @remarks
   * Delete a Signals email target by ID
   */
  async deleteSignalsEmailTarget(
    request: operations.DeleteSignalsEmailTargetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteSignalsEmailTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an email target
   *
   * @remarks
   * Update a Signals email target by ID
   */
  async updateSignalsEmailTarget(
    request: operations.UpdateSignalsEmailTargetRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIEmailTargetEntity> {
    return unwrapAsync(signalsUpdateSignalsEmailTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * List webhook targets
   *
   * @remarks
   * List all Signals webhook targets.
   */
  async listSignalsWebhookTargets(
    request: operations.ListSignalsWebhookTargetsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIWebhookTargetEntityPaginated> {
    return unwrapAsync(signalsListSignalsWebhookTargets(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a webhook target
   *
   * @remarks
   * Create a Signals webhook target.
   */
  async createSignalsWebhookTarget(
    request: components.CreateSignalsWebhookTarget,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIWebhookTargetEntity> {
    return unwrapAsync(signalsCreateSignalsWebhookTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a webhook target
   *
   * @remarks
   * Get a Signals webhook target by ID
   */
  async getSignalsWebhookTarget(
    request: operations.GetSignalsWebhookTargetRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIWebhookTargetEntity> {
    return unwrapAsync(signalsGetSignalsWebhookTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook target
   *
   * @remarks
   * Delete a Signals webhook target by ID
   */
  async deleteSignalsWebhookTarget(
    request: operations.DeleteSignalsWebhookTargetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteSignalsWebhookTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook target
   *
   * @remarks
   * Update a Signals webhook target by ID
   */
  async updateSignalsWebhookTarget(
    request: operations.UpdateSignalsWebhookTargetRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIWebhookTargetEntity> {
    return unwrapAsync(signalsUpdateSignalsWebhookTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * List notification policies
   *
   * @remarks
   * List all Signals notification policies.
   */
  async listNotificationPolicySettings(
    request: operations.ListNotificationPolicySettingsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPINotificationPolicyItemEntityPaginated> {
    return unwrapAsync(signalsListNotificationPolicySettings(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a notification policy
   *
   * @remarks
   * Create a Signals notification policy.
   */
  async createNotificationPolicy(
    request: operations.CreateNotificationPolicyRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPINotificationPolicyItemEntity> {
    return unwrapAsync(signalsCreateNotificationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a notification policy
   *
   * @remarks
   * Get a Signals notification policy by ID
   */
  async getNotificationPolicy(
    request: operations.GetNotificationPolicyRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPINotificationPolicyItemEntity> {
    return unwrapAsync(signalsGetNotificationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a notification policy
   *
   * @remarks
   * Delete a Signals notification policy by ID
   */
  async deleteNotificationPolicy(
    request: operations.DeleteNotificationPolicyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDeleteNotificationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a notification policy
   *
   * @remarks
   * Update a Signals notification policy by ID
   */
  async updateNotificationPolicy(
    request: operations.UpdateNotificationPolicyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsUpdateNotificationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * List signal transposers
   *
   * @remarks
   * List all transposers for your organization
   */
  async listSignalsTransposers(
    options?: RequestOptions,
  ): Promise<components.SignalsAPITransposerListEntity> {
    return unwrapAsync(signalsListSignalsTransposers(
      this,
      options,
    ));
  }

  /**
   * Get the signals ingestion URL
   *
   * @remarks
   * Retrieve the url for ingesting signals for your organization
   */
  async getSignalsIngestUrl(
    request: operations.GetSignalsIngestUrlRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIIngestKeyEntity> {
    return unwrapAsync(signalsGetSignalsIngestUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Debug Signals expressions
   *
   * @remarks
   * Debug Signals expressions
   */
  async debugSignalsExpression(
    request: components.DebugSignalsExpression,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(signalsDebugSignalsExpression(
      this,
      request,
      options,
    ));
  }

  /**
   * List who's on call for the organization
   *
   * @remarks
   * List all users who are currently on-call across the entire organization.
   */
  async listOrganizationOnCallSchedules(
    request: operations.ListOrganizationOnCallSchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIOrganizationOnCallScheduleEntityPaginated> {
    return unwrapAsync(signalsListOrganizationOnCallSchedules(
      this,
      request,
      options,
    ));
  }
}
