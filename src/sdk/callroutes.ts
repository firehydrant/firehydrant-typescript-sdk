/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { callRoutesCreateTeamCallRoute } from "../funcs/callRoutesCreateTeamCallRoute.js";
import { callRoutesDeleteCallRoute } from "../funcs/callRoutesDeleteCallRoute.js";
import { callRoutesGetCallRoute } from "../funcs/callRoutesGetCallRoute.js";
import { callRoutesListCallRoutes } from "../funcs/callRoutesListCallRoutes.js";
import { callRoutesListTeamCallRoutes } from "../funcs/callRoutesListTeamCallRoutes.js";
import { callRoutesUpdateCallRoute } from "../funcs/callRoutesUpdateCallRoute.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CallRoutes extends ClientSDK {
  /**
   * List call routes for a team
   *
   * @remarks
   * List call routes for a team
   */
  async listTeamCallRoutes(
    request: operations.ListTeamCallRoutesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPICallRouteEntityPaginated> {
    return unwrapAsync(callRoutesListTeamCallRoutes(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a call route for a team
   *
   * @remarks
   * Create a call route for a team
   */
  async createTeamCallRoute(
    request: operations.CreateTeamCallRouteRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPICallRouteEntity> {
    return unwrapAsync(callRoutesCreateTeamCallRoute(
      this,
      request,
      options,
    ));
  }

  /**
   * List call routes
   *
   * @remarks
   * List call routes for the organization
   */
  async listCallRoutes(
    request: operations.ListCallRoutesRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPICallRouteEntityPaginated> {
    return unwrapAsync(callRoutesListCallRoutes(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a call route
   *
   * @remarks
   * Retrieve a call route by ID
   */
  async getCallRoute(
    request: operations.GetCallRouteRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPICallRouteEntity> {
    return unwrapAsync(callRoutesGetCallRoute(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a call route
   *
   * @remarks
   * Delete a call route by ID
   */
  async deleteCallRoute(
    request: operations.DeleteCallRouteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(callRoutesDeleteCallRoute(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a call route
   *
   * @remarks
   * Update a call route by ID
   */
  async updateCallRoute(
    request: operations.UpdateCallRouteRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPICallRouteEntity> {
    return unwrapAsync(callRoutesUpdateCallRoute(
      this,
      request,
      options,
    ));
  }
}
