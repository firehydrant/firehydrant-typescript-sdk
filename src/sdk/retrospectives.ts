/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { retrospectivesCreateIncidentRetrospective } from "../funcs/retrospectivesCreateIncidentRetrospective.js";
import { retrospectivesCreateIncidentRetrospectiveDynamicInput } from "../funcs/retrospectivesCreateIncidentRetrospectiveDynamicInput.js";
import { retrospectivesCreateIncidentRetrospectiveField } from "../funcs/retrospectivesCreateIncidentRetrospectiveField.js";
import { retrospectivesCreatePostMortemReason } from "../funcs/retrospectivesCreatePostMortemReason.js";
import { retrospectivesCreatePostMortemReport } from "../funcs/retrospectivesCreatePostMortemReport.js";
import { retrospectivesCreateRetrospectiveTemplate } from "../funcs/retrospectivesCreateRetrospectiveTemplate.js";
import { retrospectivesDeleteIncidentRetrospectiveDynamicInput } from "../funcs/retrospectivesDeleteIncidentRetrospectiveDynamicInput.js";
import { retrospectivesDeletePostMortemReason } from "../funcs/retrospectivesDeletePostMortemReason.js";
import { retrospectivesDeleteRetrospectiveTemplate } from "../funcs/retrospectivesDeleteRetrospectiveTemplate.js";
import { retrospectivesExportIncidentRetrospectives } from "../funcs/retrospectivesExportIncidentRetrospectives.js";
import { retrospectivesGetIncidentRetrospectiveField } from "../funcs/retrospectivesGetIncidentRetrospectiveField.js";
import { retrospectivesGetPostMortemQuestion } from "../funcs/retrospectivesGetPostMortemQuestion.js";
import { retrospectivesGetPostMortemReport } from "../funcs/retrospectivesGetPostMortemReport.js";
import { retrospectivesGetRetrospectiveTemplate } from "../funcs/retrospectivesGetRetrospectiveTemplate.js";
import { retrospectivesListIncidentRetrospectives } from "../funcs/retrospectivesListIncidentRetrospectives.js";
import { retrospectivesListPostMortemQuestions } from "../funcs/retrospectivesListPostMortemQuestions.js";
import { retrospectivesListPostMortemReasons } from "../funcs/retrospectivesListPostMortemReasons.js";
import { retrospectivesListPostMortemReports } from "../funcs/retrospectivesListPostMortemReports.js";
import { retrospectivesListRetrospectives } from "../funcs/retrospectivesListRetrospectives.js";
import { retrospectivesListRetrospectiveTemplates } from "../funcs/retrospectivesListRetrospectiveTemplates.js";
import { retrospectivesPublishPostMortemReport } from "../funcs/retrospectivesPublishPostMortemReport.js";
import { retrospectivesReorderPostMortemReasons } from "../funcs/retrospectivesReorderPostMortemReasons.js";
import { retrospectivesShareIncidentRetrospectives } from "../funcs/retrospectivesShareIncidentRetrospectives.js";
import { retrospectivesUpdateIncidentRetrospective } from "../funcs/retrospectivesUpdateIncidentRetrospective.js";
import { retrospectivesUpdateIncidentRetrospectiveField } from "../funcs/retrospectivesUpdateIncidentRetrospectiveField.js";
import { retrospectivesUpdatePostMortemField } from "../funcs/retrospectivesUpdatePostMortemField.js";
import { retrospectivesUpdatePostMortemQuestions } from "../funcs/retrospectivesUpdatePostMortemQuestions.js";
import { retrospectivesUpdatePostMortemReason } from "../funcs/retrospectivesUpdatePostMortemReason.js";
import { retrospectivesUpdatePostMortemReport } from "../funcs/retrospectivesUpdatePostMortemReport.js";
import { retrospectivesUpdateRetrospectiveTemplate } from "../funcs/retrospectivesUpdateRetrospectiveTemplate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Retrospectives extends ClientSDK {
  /**
   * Share an incident's retrospective
   *
   * @remarks
   * Share incident retrospectives with users or teams
   */
  async shareIncidentRetrospectives(
    request: operations.ShareIncidentRetrospectivesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsShareRetrospectivesResultEntity> {
    return unwrapAsync(retrospectivesShareIncidentRetrospectives(
      this,
      request,
      options,
    ));
  }

  /**
   * Export an incident's retrospective(s)
   *
   * @remarks
   * Export incident's retrospective(s) using their templates
   */
  async exportIncidentRetrospectives(
    request: operations.ExportIncidentRetrospectivesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsExportRetrospectivesResultEntity> {
    return unwrapAsync(retrospectivesExportIncidentRetrospectives(
      this,
      request,
      options,
    ));
  }

  /**
   * All attached retrospectives for an incident
   *
   * @remarks
   * Retrieve retrospectives attached to an incident
   */
  async listIncidentRetrospectives(
    request: operations.ListIncidentRetrospectivesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveEntityPaginated> {
    return unwrapAsync(retrospectivesListIncidentRetrospectives(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new retrospective on the incident using the template
   *
   * @remarks
   * Create a new retrospective for an incident
   */
  async createIncidentRetrospective(
    request: operations.CreateIncidentRetrospectiveRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveEntity> {
    return unwrapAsync(retrospectivesCreateIncidentRetrospective(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a retrospective on the incident
   *
   * @remarks
   * Update a retrospective attached to an incident
   */
  async updateIncidentRetrospective(
    request: operations.UpdateIncidentRetrospectiveRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveEntity> {
    return unwrapAsync(retrospectivesUpdateIncidentRetrospective(
      this,
      request,
      options,
    ));
  }

  /**
   * Appends a new incident retrospective field to an incident retrospective
   *
   * @remarks
   * Add a new field to an incident retrospective
   */
  async createIncidentRetrospectiveField(
    request: operations.CreateIncidentRetrospectiveFieldRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveFieldEntity> {
    return unwrapAsync(retrospectivesCreateIncidentRetrospectiveField(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a retrospective field
   *
   * @remarks
   * Retrieve a field on an incident retrospective
   */
  async getIncidentRetrospectiveField(
    request: operations.GetIncidentRetrospectiveFieldRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveFieldEntity> {
    return unwrapAsync(retrospectivesGetIncidentRetrospectiveField(
      this,
      request,
      options,
    ));
  }

  /**
   * Update the value on a retrospective field
   *
   * @remarks
   * Update retrospective field value
   */
  async updateIncidentRetrospectiveField(
    request: operations.UpdateIncidentRetrospectiveFieldRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveFieldEntity> {
    return unwrapAsync(retrospectivesUpdateIncidentRetrospectiveField(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a new dynamic input field to a retrospective's dynamic input group field
   *
   * @remarks
   * Add a new dynamic input field to a dynamic input group
   */
  async createIncidentRetrospectiveDynamicInput(
    request: operations.CreateIncidentRetrospectiveDynamicInputRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveFieldEntity> {
    return unwrapAsync(retrospectivesCreateIncidentRetrospectiveDynamicInput(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a dynamic input from a retrospective's dynamic input group field
   *
   * @remarks
   * Delete a dynamic input on a dynamic input group
   */
  async deleteIncidentRetrospectiveDynamicInput(
    request: operations.DeleteIncidentRetrospectiveDynamicInputRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveFieldEntity> {
    return unwrapAsync(retrospectivesDeleteIncidentRetrospectiveDynamicInput(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective reports
   *
   * @remarks
   * List all retrospective reports
   */
  async listRetrospectives(
    request: operations.ListRetrospectivesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRetrospectiveEntityPaginated> {
    return unwrapAsync(retrospectivesListRetrospectives(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective reports
   *
   * @remarks
   * List all reports
   */
  async listPostMortemReports(
    request: operations.ListPostMortemReportsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntityPaginated> {
    return unwrapAsync(retrospectivesListPostMortemReports(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a retrospective report
   *
   * @remarks
   * Create a report
   */
  async createPostMortemReport(
    request: components.CreatePostMortemReport,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesCreatePostMortemReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a retrospective report
   *
   * @remarks
   * Get a report
   */
  async getPostMortemReport(
    request: operations.GetPostMortemReportRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesGetPostMortemReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a retrospective report
   *
   * @remarks
   * Update a report
   */
  async updatePostMortemReport(
    request: operations.UpdatePostMortemReportRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesUpdatePostMortemReport(
      this,
      request,
      options,
    ));
  }

  /**
   * List contributing factors for a retrospective report
   *
   * @remarks
   * List all contributing factors to an incident
   */
  async listPostMortemReasons(
    request: operations.ListPostMortemReasonsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntityPaginated> {
    return unwrapAsync(retrospectivesListPostMortemReasons(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a contributing factor for a retrospective report
   *
   * @remarks
   * Add a new contributing factor to an incident
   */
  async createPostMortemReason(
    request: operations.CreatePostMortemReasonRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesCreatePostMortemReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a contributing factor from a retrospective report
   *
   * @remarks
   * Delete a contributing factor
   */
  async deletePostMortemReason(
    request: operations.DeletePostMortemReasonRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesDeletePostMortemReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contributing factor in a retrospective report
   *
   * @remarks
   * Update a contributing factor
   */
  async updatePostMortemReason(
    request: operations.UpdatePostMortemReasonRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesUpdatePostMortemReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Reorder a contributing factor for a retrospective report
   *
   * @remarks
   * Update the order of contributing factors in a retrospective report
   */
  async reorderPostMortemReasons(
    request: operations.ReorderPostMortemReasonsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesReorderPostMortemReasons(
      this,
      request,
      options,
    ));
  }

  /**
   * Publish a retrospective report
   *
   * @remarks
   * Marks an incident retrospective as published and emails all of the participants in the report the summary
   */
  async publishPostMortemReport(
    request: operations.PublishPostMortemReportRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesPublishPostMortemReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a retrospective field
   *
   * @remarks
   * Update a field value on a post mortem report
   */
  async updatePostMortemField(
    request: operations.UpdatePostMortemFieldRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsSectionFieldEntity> {
    return unwrapAsync(retrospectivesUpdatePostMortemField(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective questions
   *
   * @remarks
   * List the questions configured to be provided and filled out on each retrospective report.
   */
  async listPostMortemQuestions(
    request: operations.ListPostMortemQuestionsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsQuestionTypeEntityPaginated> {
    return unwrapAsync(retrospectivesListPostMortemQuestions(
      this,
      request,
      options,
    ));
  }

  /**
   * Update retrospective questions
   *
   * @remarks
   * Update the questions configured to be provided and filled out on future retrospective reports.
   */
  async updatePostMortemQuestions(
    request: components.UpdatePostMortemQuestions,
    options?: RequestOptions,
  ): Promise<components.PostMortemsQuestionTypeEntity> {
    return unwrapAsync(retrospectivesUpdatePostMortemQuestions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a retrospective question
   *
   * @remarks
   * Get an incident retrospective question configured to be provided and filled out on each retrospective report.
   */
  async getPostMortemQuestion(
    request: operations.GetPostMortemQuestionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(retrospectivesGetPostMortemQuestion(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective templates
   *
   * @remarks
   * List all retrospective templates
   */
  async listRetrospectiveTemplates(
    request: operations.ListRetrospectiveTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.RetrospectivesIndexTemplateEntityPaginated> {
    return unwrapAsync(retrospectivesListRetrospectiveTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a retrospective template
   *
   * @remarks
   * Create a new retrospective template
   */
  async createRetrospectiveTemplate(
    request: operations.CreateRetrospectiveTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.RetrospectivesTemplateEntity> {
    return unwrapAsync(retrospectivesCreateRetrospectiveTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a retrospective template
   *
   * @remarks
   * Retrieve a single retrospective template by ID
   */
  async getRetrospectiveTemplate(
    request: operations.GetRetrospectiveTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.RetrospectivesTemplateEntity> {
    return unwrapAsync(retrospectivesGetRetrospectiveTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a retrospective template
   *
   * @remarks
   * Delete a single retrospective template
   */
  async deleteRetrospectiveTemplate(
    request: operations.DeleteRetrospectiveTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.RetrospectivesTemplateEntity> {
    return unwrapAsync(retrospectivesDeleteRetrospectiveTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a retrospective template
   *
   * @remarks
   * Update a single retrospective template
   */
  async updateRetrospectiveTemplate(
    request: operations.UpdateRetrospectiveTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.RetrospectivesTemplateEntity> {
    return unwrapAsync(retrospectivesUpdateRetrospectiveTemplate(
      this,
      request,
      options,
    ));
  }
}
