/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { retrospectivesCreateReason } from "../funcs/retrospectivesCreateReason.js";
import { retrospectivesCreateReport } from "../funcs/retrospectivesCreateReport.js";
import { retrospectivesDeleteReason } from "../funcs/retrospectivesDeleteReason.js";
import { retrospectivesGetQuestion } from "../funcs/retrospectivesGetQuestion.js";
import { retrospectivesGetReport } from "../funcs/retrospectivesGetReport.js";
import { retrospectivesListQuestions } from "../funcs/retrospectivesListQuestions.js";
import { retrospectivesListReportReasons } from "../funcs/retrospectivesListReportReasons.js";
import { retrospectivesListReports } from "../funcs/retrospectivesListReports.js";
import { retrospectivesPublishReport } from "../funcs/retrospectivesPublishReport.js";
import { retrospectivesUpdateField } from "../funcs/retrospectivesUpdateField.js";
import { retrospectivesUpdateQuestions } from "../funcs/retrospectivesUpdateQuestions.js";
import { retrospectivesUpdateReason } from "../funcs/retrospectivesUpdateReason.js";
import { retrospectivesUpdateReport } from "../funcs/retrospectivesUpdateReport.js";
import { retrospectivesUpdateReportReasonOrder } from "../funcs/retrospectivesUpdateReportReasonOrder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Retrospectives extends ClientSDK {
  /**
   * List retrospective questions
   *
   * @remarks
   * List the questions configured to be provided and filled out on each retrospective report.
   */
  async listQuestions(
    request: operations.ListRetrospectiveQuestionsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsQuestionTypeEntityPaginated> {
    return unwrapAsync(retrospectivesListQuestions(
      this,
      request,
      options,
    ));
  }

  /**
   * Update retrospective questions
   *
   * @remarks
   * Update the questions configured to be provided and filled out on future retrospective reports.
   */
  async updateQuestions(
    request: components.PutV1PostMortemsQuestions,
    options?: RequestOptions,
  ): Promise<components.PostMortemsQuestionTypeEntity> {
    return unwrapAsync(retrospectivesUpdateQuestions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a retrospective question
   *
   * @remarks
   * Get an incident retrospective question
   */
  async getQuestion(
    request: operations.GetRetrospectiveQuestionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(retrospectivesGetQuestion(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective reports
   *
   * @remarks
   * List all reports
   */
  async listReports(
    request: operations.ListRetrospectiveReportsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntityPaginated> {
    return unwrapAsync(retrospectivesListReports(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a retrospective report
   *
   * @remarks
   * Create a report
   */
  async createReport(
    request: components.PostV1PostMortemsReports,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesCreateReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a retrospective report
   *
   * @remarks
   * Get a report
   */
  async getReport(
    request: operations.GetPostMortemReportRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesGetReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a retrospective report
   *
   * @remarks
   * Update a report
   */
  async updateReport(
    request: operations.UpdatePostMortemReportRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesUpdateReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a retrospective field
   *
   * @remarks
   * Update a field value on a post mortem report
   */
  async updateField(
    request: operations.UpdateRetrospectiveFieldRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsSectionFieldEntity> {
    return unwrapAsync(retrospectivesUpdateField(
      this,
      request,
      options,
    ));
  }

  /**
   * Publish a retrospective report
   *
   * @remarks
   * Marks an incident retrospective as published and emails all of the participants in the report the summary
   */
  async publishReport(
    request: operations.PublishRetrospectiveReportRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsPostMortemReportEntity> {
    return unwrapAsync(retrospectivesPublishReport(
      this,
      request,
      options,
    ));
  }

  /**
   * List contributing factors for a retrospective report
   *
   * @remarks
   * List all contributing factors to an incident
   */
  async listReportReasons(
    request: operations.ListRetrospectiveReportReasonsRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntityPaginated> {
    return unwrapAsync(retrospectivesListReportReasons(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a contributing factor for a retrospective report
   *
   * @remarks
   * Add a new contributing factor to an incident
   */
  async createReason(
    request: operations.CreateRetrospectiveReportReasonRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesCreateReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Update the order of contributing factors in a retrospective report
   *
   * @remarks
   * Reorder a contributing factor
   */
  async updateReportReasonOrder(
    request: operations.UpdateRetrospectiveReportReasonOrderRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesUpdateReportReasonOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a contributing factor from a retrospective report
   *
   * @remarks
   * Delete a contributing factor
   */
  async deleteReason(
    request: operations.DeleteRetrospectiveReasonRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesDeleteReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contributing factor in a retrospective report
   *
   * @remarks
   * Update a contributing factor
   */
  async updateReason(
    request: operations.UpdateRetrospectiveReasonRequest,
    options?: RequestOptions,
  ): Promise<components.PostMortemsReasonEntity> {
    return unwrapAsync(retrospectivesUpdateReason(
      this,
      request,
      options,
    ));
  }
}
