/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountSettingsDeleteSavedSearch } from "../funcs/accountSettingsDeleteSavedSearch.js";
import { accountSettingsGetAiPreferences } from "../funcs/accountSettingsGetAiPreferences.js";
import { accountSettingsGetBootstrap } from "../funcs/accountSettingsGetBootstrap.js";
import { accountSettingsGetSavedSearch } from "../funcs/accountSettingsGetSavedSearch.js";
import { accountSettingsListEntitlements } from "../funcs/accountSettingsListEntitlements.js";
import { accountSettingsPing } from "../funcs/accountSettingsPing.js";
import { accountSettingsUpdateAiPreferences } from "../funcs/accountSettingsUpdateAiPreferences.js";
import { accountSettingsUpdateSavedSearch } from "../funcs/accountSettingsUpdateSavedSearch.js";
import { accountSettingsVoteOnIncidentSummary } from "../funcs/accountSettingsVoteOnIncidentSummary.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AccountSettings extends ClientSDK {
  /**
   * Get AI preferences
   *
   * @remarks
   * Retrieves the current AI preferences
   */
  async getAiPreferences(
    options?: RequestOptions,
  ): Promise<components.AIEntitiesPreferencesEntity> {
    return unwrapAsync(accountSettingsGetAiPreferences(
      this,
      options,
    ));
  }

  /**
   * Update AI preferences
   *
   * @remarks
   * Updates the AI preferences
   */
  async updateAiPreferences(
    request?: operations.UpdateAiPreferencesRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.AIEntitiesPreferencesEntity> {
    return unwrapAsync(accountSettingsUpdateAiPreferences(
      this,
      request,
      options,
    ));
  }

  /**
   * Vote on an AI-generated incident summary
   */
  async voteOnIncidentSummary(
    request: operations.VoteOnIncidentSummaryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(accountSettingsVoteOnIncidentSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * Get initial application configuration and settings
   */
  async getBootstrap(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(accountSettingsGetBootstrap(
      this,
      options,
    ));
  }

  /**
   * List entitlements
   *
   * @remarks
   * Retrieve all entitlements
   */
  async listEntitlements(
    request: operations.ListEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<components.EntitlementEntityPaginated> {
    return unwrapAsync(accountSettingsListEntitlements(
      this,
      request,
      options,
    ));
  }

  /**
   * Check API connectivity
   *
   * @remarks
   * Simple endpoint to verify your API connection is working
   */
  async ping(
    options?: RequestOptions,
  ): Promise<components.PongEntity> {
    return unwrapAsync(accountSettingsPing(
      this,
      options,
    ));
  }

  /**
   * Get a saved search
   *
   * @remarks
   * Retrieve a specific save search
   */
  async getSavedSearch(
    request: operations.GetSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(accountSettingsGetSavedSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a saved search
   *
   * @remarks
   * Delete a specific saved search
   */
  async deleteSavedSearch(
    request: operations.DeleteSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(accountSettingsDeleteSavedSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a saved search
   *
   * @remarks
   * Update a specific saved search
   */
  async updateSavedSearch(
    request: operations.UpdateSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(accountSettingsUpdateSavedSearch(
      this,
      request,
      options,
    ));
  }
}
