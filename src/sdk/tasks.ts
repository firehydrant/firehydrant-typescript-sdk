/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tasksConvertToFollowup } from "../funcs/tasksConvertToFollowup.js";
import { tasksCreate } from "../funcs/tasksCreate.js";
import { tasksCreateChecklistTemplate } from "../funcs/tasksCreateChecklistTemplate.js";
import { tasksCreateList } from "../funcs/tasksCreateList.js";
import { tasksDelete } from "../funcs/tasksDelete.js";
import { tasksDeleteChecklistTemplate } from "../funcs/tasksDeleteChecklistTemplate.js";
import { tasksGet } from "../funcs/tasksGet.js";
import { tasksGetForIncident } from "../funcs/tasksGetForIncident.js";
import { tasksListChecklistTemplates } from "../funcs/tasksListChecklistTemplates.js";
import { tasksListForIncident } from "../funcs/tasksListForIncident.js";
import { tasksListTasks } from "../funcs/tasksListTasks.js";
import { tasksUpdate } from "../funcs/tasksUpdate.js";
import { tasksUpdateChecklistTemplate } from "../funcs/tasksUpdateChecklistTemplate.js";
import { tasksUpdateTask } from "../funcs/tasksUpdateTask.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { List } from "./list.js";

export class Tasks extends ClientSDK {
  private _list?: List;
  get list(): List {
    return (this._list ??= new List(this._options));
  }

  /**
   * List checklist templates
   *
   * @remarks
   * List all of the checklist templates that have been added to the organization
   */
  async listChecklistTemplates(
    request: operations.ListChecklistTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntityPaginated> {
    return unwrapAsync(tasksListChecklistTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a checklist template
   *
   * @remarks
   * Creates a checklist template for the organization
   */
  async createChecklistTemplate(
    request: components.PostV1ChecklistTemplates,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksCreateChecklistTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a checklist template
   *
   * @remarks
   * Archive a checklist template
   */
  async deleteChecklistTemplate(
    request: operations.DeleteChecklistTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksDeleteChecklistTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a checklist template
   *
   * @remarks
   * Update a checklist templates attributes
   */
  async updateChecklistTemplate(
    request: operations.UpdateChecklistTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksUpdateChecklistTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * List tasks for an incident
   *
   * @remarks
   * Retrieve a list of all tasks for a specific incident
   */
  async listForIncident(
    request: operations.ListIncidentTasksRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntityPaginated> {
    return unwrapAsync(tasksListForIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a task for an incident
   *
   * @remarks
   * Create a task
   */
  async create(
    request: operations.CreateIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntity> {
    return unwrapAsync(tasksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a task for an incident
   *
   * @remarks
   * Retrieve a single task for an incident
   */
  async getForIncident(
    request: operations.GetIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tasksGetForIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a task from an incident
   *
   * @remarks
   * Delete a task
   */
  async delete(
    request: operations.DeleteIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tasksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a task for an incident
   *
   * @remarks
   * Update a task's attributes
   */
  async updateTask(
    request: operations.UpdateIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntity> {
    return unwrapAsync(tasksUpdateTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Convert a task to a follow-up
   *
   * @remarks
   * Convert a task to a follow-up
   */
  async convertToFollowup(
    request: operations.ConvertIncidentTaskToFollowupRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntityPaginated> {
    return unwrapAsync(tasksConvertToFollowup(
      this,
      request,
      options,
    ));
  }

  /**
   * List task lists
   *
   * @remarks
   * Lists all task lists for your organization
   */
  async listTasks(
    request: operations.ListTaskListsRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksListTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a task list
   *
   * @remarks
   * Creates a new task list
   */
  async createList(
    request: components.PostV1TaskLists,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksCreateList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a task list
   *
   * @remarks
   * Retrieves a single task list by ID
   */
  async get(
    request: operations.GetTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a task list
   *
   * @remarks
   * Updates a task list's attributes and task list items
   */
  async update(
    request: operations.UpdateTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksUpdate(
      this,
      request,
      options,
    ));
  }
}
