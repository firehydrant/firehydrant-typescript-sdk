/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tasksConvertIncidentTask } from "../funcs/tasksConvertIncidentTask.js";
import { tasksCreateChecklistTemplate } from "../funcs/tasksCreateChecklistTemplate.js";
import { tasksCreateIncidentTask } from "../funcs/tasksCreateIncidentTask.js";
import { tasksCreateIncidentTaskList } from "../funcs/tasksCreateIncidentTaskList.js";
import { tasksCreateTaskList } from "../funcs/tasksCreateTaskList.js";
import { tasksDeleteChecklistTemplate } from "../funcs/tasksDeleteChecklistTemplate.js";
import { tasksDeleteIncidentTask } from "../funcs/tasksDeleteIncidentTask.js";
import { tasksDeleteTaskList } from "../funcs/tasksDeleteTaskList.js";
import { tasksGetChecklistTemplate } from "../funcs/tasksGetChecklistTemplate.js";
import { tasksGetIncidentTask } from "../funcs/tasksGetIncidentTask.js";
import { tasksGetTaskList } from "../funcs/tasksGetTaskList.js";
import { tasksListChecklistTemplates } from "../funcs/tasksListChecklistTemplates.js";
import { tasksListIncidentTasks } from "../funcs/tasksListIncidentTasks.js";
import { tasksListTaskLists } from "../funcs/tasksListTaskLists.js";
import { tasksUpdateChecklistTemplate } from "../funcs/tasksUpdateChecklistTemplate.js";
import { tasksUpdateIncidentTask } from "../funcs/tasksUpdateIncidentTask.js";
import { tasksUpdateTaskList } from "../funcs/tasksUpdateTaskList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tasks extends ClientSDK {
  /**
   * Add tasks from a task list to an incident
   *
   * @remarks
   * Add all tasks from list to incident
   */
  async createIncidentTaskList(
    request: operations.CreateIncidentTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntity> {
    return unwrapAsync(tasksCreateIncidentTaskList(
      this,
      request,
      options,
    ));
  }

  /**
   * List tasks for an incident
   *
   * @remarks
   * Retrieve a list of all tasks for a specific incident
   */
  async listIncidentTasks(
    request: operations.ListIncidentTasksRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntityPaginated> {
    return unwrapAsync(tasksListIncidentTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an incident task
   *
   * @remarks
   * Create a task
   */
  async createIncidentTask(
    request: operations.CreateIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntity> {
    return unwrapAsync(tasksCreateIncidentTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident task
   *
   * @remarks
   * Retrieve a single task for an incident
   */
  async getIncidentTask(
    request: operations.GetIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tasksGetIncidentTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an incident task
   *
   * @remarks
   * Delete a task
   */
  async deleteIncidentTask(
    request: operations.DeleteIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tasksDeleteIncidentTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident task
   *
   * @remarks
   * Update a task's attributes
   */
  async updateIncidentTask(
    request: operations.UpdateIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntity> {
    return unwrapAsync(tasksUpdateIncidentTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Convert a task to a follow-up
   *
   * @remarks
   * Convert a task to a follow-up
   */
  async convertIncidentTask(
    request: operations.ConvertIncidentTaskRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntityPaginated> {
    return unwrapAsync(tasksConvertIncidentTask(
      this,
      request,
      options,
    ));
  }

  /**
   * List task lists
   *
   * @remarks
   * Lists all task lists for your organization
   */
  async listTaskLists(
    request: operations.ListTaskListsRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksListTaskLists(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a task list
   *
   * @remarks
   * Creates a new task list
   */
  async createTaskList(
    request: components.CreateTaskList,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksCreateTaskList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a task list
   *
   * @remarks
   * Retrieves a single task list by ID
   */
  async getTaskList(
    request: operations.GetTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksGetTaskList(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a task list
   *
   * @remarks
   * Delete a task list
   */
  async deleteTaskList(
    request: operations.DeleteTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksDeleteTaskList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a task list
   *
   * @remarks
   * Updates a task list's attributes and task list items
   */
  async updateTaskList(
    request: operations.UpdateTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskListEntity> {
    return unwrapAsync(tasksUpdateTaskList(
      this,
      request,
      options,
    ));
  }

  /**
   * List checklist templates
   *
   * @remarks
   * List all of the checklist templates that have been added to the organization
   */
  async listChecklistTemplates(
    request: operations.ListChecklistTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntityPaginated> {
    return unwrapAsync(tasksListChecklistTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a checklist template
   *
   * @remarks
   * Creates a checklist template for the organization
   */
  async createChecklistTemplate(
    request: components.CreateChecklistTemplate,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksCreateChecklistTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a checklist template
   *
   * @remarks
   * Retrieves a single checklist template by ID
   */
  async getChecklistTemplate(
    request: operations.GetChecklistTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksGetChecklistTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a checklist template
   *
   * @remarks
   * Archive a checklist template
   */
  async deleteChecklistTemplate(
    request: operations.DeleteChecklistTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksDeleteChecklistTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a checklist template
   *
   * @remarks
   * Update a checklist templates attributes
   */
  async updateChecklistTemplate(
    request: operations.UpdateChecklistTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.ChecklistTemplateEntity> {
    return unwrapAsync(tasksUpdateChecklistTemplate(
      this,
      request,
      options,
    ));
  }
}
