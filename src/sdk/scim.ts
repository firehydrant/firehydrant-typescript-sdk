/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scimCreateSCIMGroup } from "../funcs/scimCreateSCIMGroup.js";
import { scimCreateSCIMUser } from "../funcs/scimCreateSCIMUser.js";
import { scimDeleteSCIMGroup } from "../funcs/scimDeleteSCIMGroup.js";
import { scimDeleteSCIMUser } from "../funcs/scimDeleteSCIMUser.js";
import { scimGetSCIMGroup } from "../funcs/scimGetSCIMGroup.js";
import { scimGetSCIMUser } from "../funcs/scimGetSCIMUser.js";
import { scimListSCIMGroups } from "../funcs/scimListSCIMGroups.js";
import { scimListSCIMUsers } from "../funcs/scimListSCIMUsers.js";
import { scimPatchSCIMGroup } from "../funcs/scimPatchSCIMGroup.js";
import { scimPatchSCIMUser } from "../funcs/scimPatchSCIMUser.js";
import { scimUpdateSCIMGroup } from "../funcs/scimUpdateSCIMGroup.js";
import { scimUpdateSCIMUser } from "../funcs/scimUpdateSCIMUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Scim extends ClientSDK {
  /**
   * Get a SCIM group
   *
   * @remarks
   * SCIM endpoint that lists a Team (Colloquial for Group in the SCIM protocol)
   */
  async getScimGroup(
    request: operations.GetScimGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimGetSCIMGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a SCIM group and assign members
   *
   * @remarks
   * SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.
   */
  async updateScimGroup(
    request: operations.UpdateScimGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimUpdateSCIMGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a SCIM group
   *
   * @remarks
   * SCIM endpoint to delete a Team (Colloquial for Group in the SCIM protocol).
   */
  async deleteScimGroup(
    request: operations.DeleteScimGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimDeleteSCIMGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Partially update a SCIM group
   *
   * @remarks
   * SCIM endpoint to partially update a Team (Colloquial for Group in the SCIM protocol). Supports adding, removing, or replacing members using SCIM PATCH operations.
   */
  async patchScimGroup(
    request: operations.PatchScimGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimPatchSCIMGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * List SCIM groups
   *
   * @remarks
   * SCIM endpoint that lists all Teams (Colloquial for Group in the SCIM protocol)
   */
  async listScimGroups(
    request: operations.ListScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimListSCIMGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a SCIM group and assign members
   *
   * @remarks
   * SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.
   */
  async createScimGroup(
    request: components.CreateScimGroup,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimCreateSCIMGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a SCIM user
   *
   * @remarks
   * SCIM endpoint that lists a User
   */
  async getScimUser(
    request: operations.GetScimUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimGetSCIMUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a User from SCIM data
   *
   * @remarks
   * PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.
   */
  async updateScimUser(
    request: operations.UpdateScimUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimUpdateSCIMUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a User matching SCIM data
   *
   * @remarks
   * SCIM endpoint to delete a User. This endpoint will deactivate a confirmed User record in our system.
   */
  async deleteScimUser(
    request: operations.DeleteScimUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimDeleteSCIMUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a User from SCIM data
   *
   * @remarks
   * PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.
   */
  async patchScimUser(
    request: operations.PatchScimUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimPatchSCIMUser(
      this,
      request,
      options,
    ));
  }

  /**
   * List SCIM users
   *
   * @remarks
   * SCIM endpoint that lists users. This endpoint will display a list of Users currently in the system.
   */
  async listScimUsers(
    request: operations.ListScimUsersRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimListSCIMUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a User from SCIM data
   *
   * @remarks
   * SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.
   */
  async createScimUser(
    request: components.CreateScimUser,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimCreateSCIMUser(
      this,
      request,
      options,
    ));
  }
}
