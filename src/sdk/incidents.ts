/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { incidentsBulkUpdateIncidentMilestones } from "../funcs/incidentsBulkUpdateIncidentMilestones.js";
import { incidentsCloseIncident } from "../funcs/incidentsCloseIncident.js";
import { incidentsCreateIncident } from "../funcs/incidentsCreateIncident.js";
import { incidentsCreateIncidentAttachment } from "../funcs/incidentsCreateIncidentAttachment.js";
import { incidentsCreateIncidentChangeEvent } from "../funcs/incidentsCreateIncidentChangeEvent.js";
import { incidentsCreateIncidentChatMessage } from "../funcs/incidentsCreateIncidentChatMessage.js";
import { incidentsCreateIncidentImpact } from "../funcs/incidentsCreateIncidentImpact.js";
import { incidentsCreateIncidentLink } from "../funcs/incidentsCreateIncidentLink.js";
import { incidentsCreateIncidentNote } from "../funcs/incidentsCreateIncidentNote.js";
import { incidentsCreateIncidentRoleAssignment } from "../funcs/incidentsCreateIncidentRoleAssignment.js";
import { incidentsCreateIncidentStatusPage } from "../funcs/incidentsCreateIncidentStatusPage.js";
import { incidentsCreateIncidentTeamAssignment } from "../funcs/incidentsCreateIncidentTeamAssignment.js";
import { incidentsCreateScheduledMaintenance } from "../funcs/incidentsCreateScheduledMaintenance.js";
import { incidentsDeleteIncident } from "../funcs/incidentsDeleteIncident.js";
import { incidentsDeleteIncidentChatMessage } from "../funcs/incidentsDeleteIncidentChatMessage.js";
import { incidentsDeleteIncidentEvent } from "../funcs/incidentsDeleteIncidentEvent.js";
import { incidentsDeleteIncidentImpact } from "../funcs/incidentsDeleteIncidentImpact.js";
import { incidentsDeleteIncidentLink } from "../funcs/incidentsDeleteIncidentLink.js";
import { incidentsDeleteIncidentRoleAssignment } from "../funcs/incidentsDeleteIncidentRoleAssignment.js";
import { incidentsDeleteIncidentTeamAssignment } from "../funcs/incidentsDeleteIncidentTeamAssignment.js";
import { incidentsDeleteScheduledMaintenance } from "../funcs/incidentsDeleteScheduledMaintenance.js";
import { incidentsDeleteTranscriptEntry } from "../funcs/incidentsDeleteTranscriptEntry.js";
import { incidentsGetAiIncidentSummaryVoteStatus } from "../funcs/incidentsGetAiIncidentSummaryVoteStatus.js";
import { incidentsGetConferenceBridgeTranslation } from "../funcs/incidentsGetConferenceBridgeTranslation.js";
import { incidentsGetIncident } from "../funcs/incidentsGetIncident.js";
import { incidentsGetIncidentChannel } from "../funcs/incidentsGetIncidentChannel.js";
import { incidentsGetIncidentEvent } from "../funcs/incidentsGetIncidentEvent.js";
import { incidentsGetIncidentRelationships } from "../funcs/incidentsGetIncidentRelationships.js";
import { incidentsGetIncidentUser } from "../funcs/incidentsGetIncidentUser.js";
import { incidentsGetScheduledMaintenance } from "../funcs/incidentsGetScheduledMaintenance.js";
import { incidentsListIncidentAttachments } from "../funcs/incidentsListIncidentAttachments.js";
import { incidentsListIncidentChangeEvents } from "../funcs/incidentsListIncidentChangeEvents.js";
import { incidentsListIncidentConferenceBridges } from "../funcs/incidentsListIncidentConferenceBridges.js";
import { incidentsListIncidentEvents } from "../funcs/incidentsListIncidentEvents.js";
import { incidentsListIncidentImpacts } from "../funcs/incidentsListIncidentImpacts.js";
import { incidentsListIncidentLinks } from "../funcs/incidentsListIncidentLinks.js";
import { incidentsListIncidentMilestones } from "../funcs/incidentsListIncidentMilestones.js";
import { incidentsListIncidentRoleAssignments } from "../funcs/incidentsListIncidentRoleAssignments.js";
import { incidentsListIncidents } from "../funcs/incidentsListIncidents.js";
import { incidentsListIncidentStatusPages } from "../funcs/incidentsListIncidentStatusPages.js";
import { incidentsListScheduledMaintenances } from "../funcs/incidentsListScheduledMaintenances.js";
import { incidentsListSimilarIncidents } from "../funcs/incidentsListSimilarIncidents.js";
import { incidentsListTranscriptEntries } from "../funcs/incidentsListTranscriptEntries.js";
import { incidentsResolveIncident } from "../funcs/incidentsResolveIncident.js";
import { incidentsUnarchiveIncident } from "../funcs/incidentsUnarchiveIncident.js";
import { incidentsUpdateIncident } from "../funcs/incidentsUpdateIncident.js";
import { incidentsUpdateIncidentChangeEvent } from "../funcs/incidentsUpdateIncidentChangeEvent.js";
import { incidentsUpdateIncidentChatMessage } from "../funcs/incidentsUpdateIncidentChatMessage.js";
import { incidentsUpdateIncidentEvent } from "../funcs/incidentsUpdateIncidentEvent.js";
import { incidentsUpdateIncidentImpactPatch } from "../funcs/incidentsUpdateIncidentImpactPatch.js";
import { incidentsUpdateIncidentImpactPut } from "../funcs/incidentsUpdateIncidentImpactPut.js";
import { incidentsUpdateIncidentLink } from "../funcs/incidentsUpdateIncidentLink.js";
import { incidentsUpdateIncidentNote } from "../funcs/incidentsUpdateIncidentNote.js";
import { incidentsUpdateScheduledMaintenance } from "../funcs/incidentsUpdateScheduledMaintenance.js";
import { incidentsUpdateTranscriptAttribution } from "../funcs/incidentsUpdateTranscriptAttribution.js";
import { incidentsVoteAiIncidentSummary } from "../funcs/incidentsVoteAiIncidentSummary.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Incidents extends ClientSDK {
  /**
   * List incidents
   *
   * @remarks
   * List all of the incidents in the organization
   */
  async listIncidents(
    request: operations.ListIncidentsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntityPaginated> {
    return unwrapAsync(incidentsListIncidents(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an incident
   *
   * @remarks
   * Create a new incident
   */
  async createIncident(
    request: components.CreateIncident,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsCreateIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Get chat channel information for an incident
   *
   * @remarks
   * Gives chat channel information for the specified incident
   */
  async getIncidentChannel(
    request: operations.GetIncidentChannelRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsChannelEntity> {
    return unwrapAsync(incidentsGetIncidentChannel(
      this,
      request,
      options,
    ));
  }

  /**
   * Close an incident
   *
   * @remarks
   * Closes an incident and optionally close all children
   */
  async closeIncident(
    request: operations.CloseIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsCloseIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Resolve an incident
   *
   * @remarks
   * Resolves a currently active incident
   */
  async resolveIncident(
    request: operations.ResolveIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsResolveIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident
   *
   * @remarks
   * Retrieve a single incident from its ID
   */
  async getIncident(
    request: operations.GetIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsGetIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive an incident
   *
   * @remarks
   * Archives an incident which will hide it from lists and metrics
   */
  async deleteIncident(
    request: operations.DeleteIncidentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident
   *
   * @remarks
   * Updates an incident with provided parameters
   */
  async updateIncident(
    request: operations.UpdateIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUpdateIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Unarchive an incident
   *
   * @remarks
   * Unarchive an incident
   */
  async unarchiveIncident(
    request: operations.UnarchiveIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUnarchiveIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Update milestone times
   *
   * @remarks
   * Update milestone times in bulk for a given incident. All milestone
   * times for an incident must occur in chronological order
   * corresponding to the configured order of milestones. If the result
   * of this request would cause any milestone(s) to appear out of place,
   * a 422 response will instead be returned. This includes milestones
   * not explicitly submitted or updated in this request.
   */
  async bulkUpdateIncidentMilestones(
    request: operations.BulkUpdateIncidentMilestonesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsMilestoneEntityPaginated> {
    return unwrapAsync(incidentsBulkUpdateIncidentMilestones(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident milestones
   *
   * @remarks
   * List times and durations for each milestone on an incident
   */
  async listIncidentMilestones(
    request: operations.ListIncidentMilestonesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsMilestoneEntityPaginated> {
    return unwrapAsync(incidentsListIncidentMilestones(
      this,
      request,
      options,
    ));
  }

  /**
   * List related changes on an incident
   *
   * @remarks
   * List related changes that have been attached to an incident
   */
  async listIncidentChangeEvents(
    request: operations.ListIncidentChangeEventsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelatedChangeEventEntityPaginated> {
    return unwrapAsync(incidentsListIncidentChangeEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a related change to an incident
   *
   * @remarks
   * Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
   */
  async createIncidentChangeEvent(
    request: operations.CreateIncidentChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelatedChangeEventEntity> {
    return unwrapAsync(incidentsCreateIncidentChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a change attached to an incident
   *
   * @remarks
   * Update a change attached to an incident
   */
  async updateIncidentChangeEvent(
    request: operations.UpdateIncidentChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelatedChangeEventEntity> {
    return unwrapAsync(incidentsUpdateIncidentChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * List status pages for an incident
   *
   * @remarks
   * List status pages that are attached to an incident
   */
  async listIncidentStatusPages(
    request: operations.ListIncidentStatusPagesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsStatusPageEntityPaginated> {
    return unwrapAsync(incidentsListIncidentStatusPages(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a status page to an incident
   *
   * @remarks
   * Add a status page to an incident.
   */
  async createIncidentStatusPage(
    request: operations.CreateIncidentStatusPageRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsStatusPageEntity> {
    return unwrapAsync(incidentsCreateIncidentStatusPage(
      this,
      request,
      options,
    ));
  }

  /**
   * List links on an incident
   *
   * @remarks
   * List all the editable, external incident links attached to an incident
   */
  async listIncidentLinks(
    request: operations.ListIncidentLinksRequest,
    options?: RequestOptions,
  ): Promise<components.AttachmentsLinkEntityPaginated> {
    return unwrapAsync(incidentsListIncidentLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a link to an incident
   *
   * @remarks
   * Allows adding adhoc links to an incident as an attachment
   */
  async createIncidentLink(
    request: operations.CreateIncidentLinkRequest,
    options?: RequestOptions,
  ): Promise<components.AttachmentsLinkEntity> {
    return unwrapAsync(incidentsCreateIncidentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update the external incident link
   *
   * @remarks
   * Update the external incident link attributes
   */
  async updateIncidentLink(
    request: operations.UpdateIncidentLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsUpdateIncidentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a link from an incident
   *
   * @remarks
   * Remove a link from an incident
   */
  async deleteIncidentLink(
    request: operations.DeleteIncidentLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncidentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update the attribution of a transcript
   *
   * @remarks
   * Update the attribution of a transcript
   */
  async updateTranscriptAttribution(
    request: operations.UpdateTranscriptAttributionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsUpdateTranscriptAttribution(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists all of the messages in the incident's transcript
   *
   * @remarks
   * Retrieve the transcript for a specific incident
   */
  async listTranscriptEntries(
    request: operations.ListTranscriptEntriesRequest,
    options?: RequestOptions,
  ): Promise<components.PublicApiv1IncidentsTranscriptEntity> {
    return unwrapAsync(incidentsListTranscriptEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a transcript from an incident
   *
   * @remarks
   * Delete a transcript from an incident
   */
  async deleteTranscriptEntry(
    request: operations.DeleteTranscriptEntryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteTranscriptEntry(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve all conference bridges for an incident
   *
   * @remarks
   * Retrieve all conference bridges for an incident
   */
  async listIncidentConferenceBridges(
    request: operations.ListIncidentConferenceBridgesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsConferenceBridgeEntity> {
    return unwrapAsync(incidentsListIncidentConferenceBridges(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the translations for a specific conference bridge
   *
   * @remarks
   * Retrieve the translations for a specific conference bridge
   */
  async getConferenceBridgeTranslation(
    request: operations.GetConferenceBridgeTranslationRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsConferenceBridgeEntity> {
    return unwrapAsync(incidentsGetConferenceBridgeTranslation(
      this,
      request,
      options,
    ));
  }

  /**
   * List similar incidents
   *
   * @remarks
   * Retrieve a list of similar incidents
   */
  async listSimilarIncidents(
    request: operations.ListSimilarIncidentsRequest,
    options?: RequestOptions,
  ): Promise<components.SimilarIncidentEntityPaginated> {
    return unwrapAsync(incidentsListSimilarIncidents(
      this,
      request,
      options,
    ));
  }

  /**
   * List attachments for an incident
   *
   * @remarks
   * List attachments for an incident
   */
  async listIncidentAttachments(
    request: operations.ListIncidentAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<components.AttachmentsTypedAttachmentEntityPaginated> {
    return unwrapAsync(incidentsListIncidentAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * Add an attachment to the incident timeline
   *
   * @remarks
   * Allows adding image attachments to an incident
   */
  async createIncidentAttachment(
    request: operations.CreateIncidentAttachmentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentAttachmentEntity> {
    return unwrapAsync(incidentsCreateIncidentAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * List events for an incident
   *
   * @remarks
   * List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type.
   */
  async listIncidentEvents(
    request: operations.ListIncidentEventsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntityPaginated> {
    return unwrapAsync(incidentsListIncidentEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident event
   *
   * @remarks
   * Retrieve a single event for an incident
   */
  async getIncidentEvent(
    request: operations.GetIncidentEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntity> {
    return unwrapAsync(incidentsGetIncidentEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an incident event
   *
   * @remarks
   * Delete an event for an incident
   */
  async deleteIncidentEvent(
    request: operations.DeleteIncidentEventRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncidentEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident event
   *
   * @remarks
   * Update a single event for an incident
   */
  async updateIncidentEvent(
    request: operations.UpdateIncidentEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntity> {
    return unwrapAsync(incidentsUpdateIncidentEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update impacts for an incident
   *
   * @remarks
   * Allows updating an incident's impacted infrastructure, with the option to
   * move the incident into a different milestone and provide a note to update
   * the incident timeline and any attached status pages. If this method is
   * requested with the PUT verb, impacts will be completely replaced with the
   * information in the request body, even if not provided (effectively clearing
   * all impacts). If this method is requested with the PATCH verb, the provided
   * impacts will be added or updated, but no impacts will be removed.
   */
  async updateIncidentImpactPut(
    request: operations.UpdateIncidentImpactPutRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUpdateIncidentImpactPut(
      this,
      request,
      options,
    ));
  }

  /**
   * Update impacts for an incident
   *
   * @remarks
   * Allows updating an incident's impacted infrastructure, with the option to
   * move the incident into a different milestone and provide a note to update
   * the incident timeline and any attached status pages. If this method is
   * requested with the PUT verb, impacts will be completely replaced with the
   * information in the request body, even if not provided (effectively clearing
   * all impacts). If this method is requested with the PATCH verb, the provided
   * impacts will be added or updated, but no impacts will be removed.
   */
  async updateIncidentImpactPatch(
    request: operations.UpdateIncidentImpactPatchRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUpdateIncidentImpactPatch(
      this,
      request,
      options,
    ));
  }

  /**
   * List impacted infrastructure for an incident
   *
   * @remarks
   * List impacted infrastructure on an incident by specifying type
   */
  async listIncidentImpacts(
    request: operations.ListIncidentImpactsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentImpactEntityPaginated> {
    return unwrapAsync(incidentsListIncidentImpacts(
      this,
      request,
      options,
    ));
  }

  /**
   * Add impacted infrastructure to an incident
   *
   * @remarks
   * Add impacted infrastructure to an incident
   */
  async createIncidentImpact(
    request: operations.CreateIncidentImpactRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentImpactEntity> {
    return unwrapAsync(incidentsCreateIncidentImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove impacted infrastructure from an incident
   *
   * @remarks
   * Remove impacted infrastructure from an incident
   */
  async deleteIncidentImpact(
    request: operations.DeleteIncidentImpactRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncidentImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a note to an incident
   *
   * @remarks
   * Create a new note on for an incident. The visibility field on a note determines where it gets posted.
   */
  async createIncidentNote(
    request: operations.CreateIncidentNoteRequest,
    options?: RequestOptions,
  ): Promise<components.EventNoteEntity> {
    return unwrapAsync(incidentsCreateIncidentNote(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a note
   *
   * @remarks
   * Updates the body of a note
   */
  async updateIncidentNote(
    request: operations.UpdateIncidentNoteRequest,
    options?: RequestOptions,
  ): Promise<components.EventNoteEntity> {
    return unwrapAsync(incidentsUpdateIncidentNote(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a chat message to an incident
   *
   * @remarks
   * Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
   */
  async createIncidentChatMessage(
    request: operations.CreateIncidentChatMessageRequest,
    options?: RequestOptions,
  ): Promise<components.EventGenericChatMessageEntity> {
    return unwrapAsync(incidentsCreateIncidentChatMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a chat message from an incident
   *
   * @remarks
   * Delete an existing generic chat message on an incident.
   */
  async deleteIncidentChatMessage(
    request: operations.DeleteIncidentChatMessageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncidentChatMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a chat message on an incident
   *
   * @remarks
   * Update an existing generic chat message on an incident.
   */
  async updateIncidentChatMessage(
    request: operations.UpdateIncidentChatMessageRequest,
    options?: RequestOptions,
  ): Promise<components.EventGenericChatMessageEntity> {
    return unwrapAsync(incidentsUpdateIncidentChatMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident assignees
   *
   * @remarks
   * Retrieve a list of all of the current role assignments for the incident
   */
  async listIncidentRoleAssignments(
    request: operations.ListIncidentRoleAssignmentsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntityPaginated> {
    return unwrapAsync(incidentsListIncidentRoleAssignments(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a user to an incident
   *
   * @remarks
   * Assign a role to a user for this incident
   */
  async createIncidentRoleAssignment(
    request: operations.CreateIncidentRoleAssignmentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntity> {
    return unwrapAsync(incidentsCreateIncidentRoleAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Unassign a user from an incident
   *
   * @remarks
   * Unassign a role from a user
   */
  async deleteIncidentRoleAssignment(
    request: operations.DeleteIncidentRoleAssignmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncidentRoleAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a team to an incident
   *
   * @remarks
   * Assign a team for this incident
   */
  async createIncidentTeamAssignment(
    request: operations.CreateIncidentTeamAssignmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsCreateIncidentTeamAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Unassign a team from an incident
   *
   * @remarks
   * Unassign a team from an incident
   */
  async deleteIncidentTeamAssignment(
    request: operations.DeleteIncidentTeamAssignmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteIncidentTeamAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the current user's incident role
   *
   * @remarks
   * Retrieve a user with current roles for an incident
   */
  async getIncidentUser(
    request: operations.GetIncidentUserRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntity> {
    return unwrapAsync(incidentsGetIncidentUser(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident relationships
   *
   * @remarks
   * List any parent/child relationships for an incident
   */
  async getIncidentRelationships(
    request: operations.GetIncidentRelationshipsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelationshipsEntity> {
    return unwrapAsync(incidentsGetIncidentRelationships(
      this,
      request,
      options,
    ));
  }

  /**
   * List scheduled maintenance events
   *
   * @remarks
   * Lists all scheduled maintenance events
   */
  async listScheduledMaintenances(
    request: operations.ListScheduledMaintenancesRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduledMaintenanceEntity> {
    return unwrapAsync(incidentsListScheduledMaintenances(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a scheduled maintenance event
   *
   * @remarks
   * Create a new scheduled maintenance event
   */
  async createScheduledMaintenance(
    request: components.CreateScheduledMaintenance,
    options?: RequestOptions,
  ): Promise<components.ScheduledMaintenanceEntity> {
    return unwrapAsync(incidentsCreateScheduledMaintenance(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a scheduled maintenance event
   *
   * @remarks
   * Fetch the details of a scheduled maintenance event.
   */
  async getScheduledMaintenance(
    request: operations.GetScheduledMaintenanceRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduledMaintenanceEntity> {
    return unwrapAsync(incidentsGetScheduledMaintenance(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a scheduled maintenance event
   *
   * @remarks
   * Delete a scheduled maintenance event, preventing it from taking place.
   */
  async deleteScheduledMaintenance(
    request: operations.DeleteScheduledMaintenanceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteScheduledMaintenance(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a scheduled maintenance event
   *
   * @remarks
   * Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.
   */
  async updateScheduledMaintenance(
    request: operations.UpdateScheduledMaintenanceRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduledMaintenanceEntity> {
    return unwrapAsync(incidentsUpdateScheduledMaintenance(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the current user's vote status for an AI-generated incident summary
   *
   * @remarks
   * Get the current user's vote status for an AI-generated incident summary
   */
  async getAiIncidentSummaryVoteStatus(
    request: operations.GetAiIncidentSummaryVoteStatusRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsGetAiIncidentSummaryVoteStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Vote on an AI-generated incident summary
   *
   * @remarks
   * Vote on an AI-generated incident summary for the current user
   */
  async voteAiIncidentSummary(
    request: operations.VoteAiIncidentSummaryRequest,
    options?: RequestOptions,
  ): Promise<components.AIEntitiesIncidentSummaryEntity> {
    return unwrapAsync(incidentsVoteAiIncidentSummary(
      this,
      request,
      options,
    ));
  }
}
