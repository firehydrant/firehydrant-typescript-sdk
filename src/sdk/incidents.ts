/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { incidentsAddStatusPage } from "../funcs/incidentsAddStatusPage.js";
import { incidentsArchive } from "../funcs/incidentsArchive.js";
import { incidentsClose } from "../funcs/incidentsClose.js";
import { incidentsCreate } from "../funcs/incidentsCreate.js";
import { incidentsCreateAttachment } from "../funcs/incidentsCreateAttachment.js";
import { incidentsCreateGenericChatMessage } from "../funcs/incidentsCreateGenericChatMessage.js";
import { incidentsCreateImpact } from "../funcs/incidentsCreateImpact.js";
import { incidentsCreateLink } from "../funcs/incidentsCreateLink.js";
import { incidentsCreateNote } from "../funcs/incidentsCreateNote.js";
import { incidentsCreateRelatedChange } from "../funcs/incidentsCreateRelatedChange.js";
import { incidentsCreateRoleAssignment } from "../funcs/incidentsCreateRoleAssignment.js";
import { incidentsCreateTaskList } from "../funcs/incidentsCreateTaskList.js";
import { incidentsCreateTeamAssignment } from "../funcs/incidentsCreateTeamAssignment.js";
import { incidentsDeleteAlert } from "../funcs/incidentsDeleteAlert.js";
import { incidentsDeleteChatMessage } from "../funcs/incidentsDeleteChatMessage.js";
import { incidentsDeleteEvent } from "../funcs/incidentsDeleteEvent.js";
import { incidentsDeleteImpact } from "../funcs/incidentsDeleteImpact.js";
import { incidentsDeleteLink } from "../funcs/incidentsDeleteLink.js";
import { incidentsDeleteRoleAssignment } from "../funcs/incidentsDeleteRoleAssignment.js";
import { incidentsDeleteTeamAssignment } from "../funcs/incidentsDeleteTeamAssignment.js";
import { incidentsDeleteTranscript } from "../funcs/incidentsDeleteTranscript.js";
import { incidentsGet } from "../funcs/incidentsGet.js";
import { incidentsGetAiSummaryVoteStatus } from "../funcs/incidentsGetAiSummaryVoteStatus.js";
import { incidentsGetChannel } from "../funcs/incidentsGetChannel.js";
import { incidentsGetEvent } from "../funcs/incidentsGetEvent.js";
import { incidentsGetEventVoteStatus } from "../funcs/incidentsGetEventVoteStatus.js";
import { incidentsGetRelationships } from "../funcs/incidentsGetRelationships.js";
import { incidentsGetTranscript } from "../funcs/incidentsGetTranscript.js";
import { incidentsGetUserRole } from "../funcs/incidentsGetUserRole.js";
import { incidentsList } from "../funcs/incidentsList.js";
import { incidentsListAttachments } from "../funcs/incidentsListAttachments.js";
import { incidentsListEvents } from "../funcs/incidentsListEvents.js";
import { incidentsListImpact } from "../funcs/incidentsListImpact.js";
import { incidentsListLinks } from "../funcs/incidentsListLinks.js";
import { incidentsListMilestones } from "../funcs/incidentsListMilestones.js";
import { incidentsListRelatedChangeEvents } from "../funcs/incidentsListRelatedChangeEvents.js";
import { incidentsListRoleAssignments } from "../funcs/incidentsListRoleAssignments.js";
import { incidentsListSimilar } from "../funcs/incidentsListSimilar.js";
import { incidentsListStatusPages } from "../funcs/incidentsListStatusPages.js";
import { incidentsPartialUpdateImpacts } from "../funcs/incidentsPartialUpdateImpacts.js";
import { incidentsResolve } from "../funcs/incidentsResolve.js";
import { incidentsSetAlertAsPrimary } from "../funcs/incidentsSetAlertAsPrimary.js";
import { incidentsUnarchive } from "../funcs/incidentsUnarchive.js";
import { incidentsUpdate } from "../funcs/incidentsUpdate.js";
import { incidentsUpdateChatMessage } from "../funcs/incidentsUpdateChatMessage.js";
import { incidentsUpdateEvent } from "../funcs/incidentsUpdateEvent.js";
import { incidentsUpdateEventVotes } from "../funcs/incidentsUpdateEventVotes.js";
import { incidentsUpdateImpacts } from "../funcs/incidentsUpdateImpacts.js";
import { incidentsUpdateLink } from "../funcs/incidentsUpdateLink.js";
import { incidentsUpdateMilestonesBulk } from "../funcs/incidentsUpdateMilestonesBulk.js";
import { incidentsUpdateNote } from "../funcs/incidentsUpdateNote.js";
import { incidentsUpdateRelatedChangeEvent } from "../funcs/incidentsUpdateRelatedChangeEvent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Incidents extends ClientSDK {
  /**
   * Get the vote status for an AI-generated incident summary
   */
  async getAiSummaryVoteStatus(
    request: operations.GetIncidentAiSummaryVoteStatusRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsGetAiSummaryVoteStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * List incidents
   *
   * @remarks
   * List all of the incidents in the organization
   */
  async list(
    request: operations.ListIncidentsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntityPaginated> {
    return unwrapAsync(incidentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an incident
   *
   * @remarks
   * Create a new incident
   */
  async create(
    request: components.PostV1Incidents,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident
   *
   * @remarks
   * Retrieve a single incident from its ID
   */
  async get(
    request: operations.GetIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive an incident
   *
   * @remarks
   * Archives an incident which will hide it from lists and metrics
   */
  async archive(
    request: operations.ArchiveIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsArchive(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident
   *
   * @remarks
   * Updates an incident with provided parameters
   */
  async update(
    request: operations.UpdateIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an alert from an incident
   *
   * @remarks
   * Remove an alert from an incident
   */
  async deleteAlert(
    request: operations.DeleteIncidentAlertRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteAlert(
      this,
      request,
      options,
    ));
  }

  /**
   * Set an alert as primary for an incident
   *
   * @remarks
   * Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.
   */
  async setAlertAsPrimary(
    request: operations.SetIncidentAlertAsPrimaryRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsAlertEntity> {
    return unwrapAsync(incidentsSetAlertAsPrimary(
      this,
      request,
      options,
    ));
  }

  /**
   * List attachments for an incident
   */
  async listAttachments(
    request: operations.ListIncidentAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an attachment for an incident
   *
   * @remarks
   * Allows adding image attachments to an incident
   */
  async createAttachment(
    request: operations.CreateIncidentAttachmentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentAttachmentEntity> {
    return unwrapAsync(incidentsCreateAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get chat channel information for an incident
   *
   * @remarks
   * Gives chat channel information for the specified incident
   */
  async getChannel(
    request: operations.GetIncidentChannelRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsChannelEntity> {
    return unwrapAsync(incidentsGetChannel(
      this,
      request,
      options,
    ));
  }

  /**
   * Close an incident
   *
   * @remarks
   * Closes an incident and optionally close all children
   */
  async close(
    request: operations.CloseIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsClose(
      this,
      request,
      options,
    ));
  }

  /**
   * List events for an incident
   *
   * @remarks
   * List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type.
   */
  async listEvents(
    request: operations.ListIncidentEventsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntityPaginated> {
    return unwrapAsync(incidentsListEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident event
   *
   * @remarks
   * Retrieve a single event for an incident
   */
  async getEvent(
    request: operations.GetIncidentEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntity> {
    return unwrapAsync(incidentsGetEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an incident event
   *
   * @remarks
   * Delete a single event for an incident
   */
  async deleteEvent(
    request: operations.DeleteIncidentEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntity> {
    return unwrapAsync(incidentsDeleteEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident event
   *
   * @remarks
   * Update a single event for an incident
   */
  async updateEvent(
    request: operations.UpdateIncidentEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEventEntity> {
    return unwrapAsync(incidentsUpdateEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update votes for an incident event
   *
   * @remarks
   * Allows for upvoting or downvoting an event
   */
  async updateEventVotes(
    request: operations.UpdateIncidentEventVotesRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(incidentsUpdateEventVotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get vote counts for an incident event
   *
   * @remarks
   * Returns the current vote counts for an object
   */
  async getEventVoteStatus(
    request: operations.GetIncidentEventVoteStatusRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(incidentsGetEventVoteStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a chat message for an incident
   *
   * @remarks
   * Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
   */
  async createGenericChatMessage(
    request: operations.CreateIncidentGenericChatMessageRequest,
    options?: RequestOptions,
  ): Promise<components.EventGenericChatMessageEntity> {
    return unwrapAsync(incidentsCreateGenericChatMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a chat message from an incident
   *
   * @remarks
   * Delete an existing generic chat message on an incident.
   */
  async deleteChatMessage(
    request: operations.DeleteIncidentChatMessageRequest,
    options?: RequestOptions,
  ): Promise<components.EventGenericChatMessageEntity> {
    return unwrapAsync(incidentsDeleteChatMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a chat message in an incident
   *
   * @remarks
   * Update an existing generic chat message on an incident.
   */
  async updateChatMessage(
    request: operations.UpdateIncidentChatMessageRequest,
    options?: RequestOptions,
  ): Promise<components.EventGenericChatMessageEntity> {
    return unwrapAsync(incidentsUpdateChatMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Replace all impacts for an incident
   *
   * @remarks
   * Allows updating an incident's impacted infrastructure, with the option to
   * move the incident into a different milestone and provide a note to update
   * the incident timeline and any attached status pages. If this method is
   * requested with the PUT verb, impacts will be completely replaced with the
   * information in the request body, even if not provided (effectively clearing
   * all impacts). If this method is requested with the PATCH verb, the provided
   * impacts will be added or updated, but no impacts will be removed.
   */
  async updateImpacts(
    request: operations.UpdateIncidentImpactsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUpdateImpacts(
      this,
      request,
      options,
    ));
  }

  /**
   * Update impacts for an incident
   *
   * @remarks
   * Allows updating an incident's impacted infrastructure, with the option to
   * move the incident into a different milestone and provide a note to update
   * the incident timeline and any attached status pages. If this method is
   * requested with the PUT verb, impacts will be completely replaced with the
   * information in the request body, even if not provided (effectively clearing
   * all impacts). If this method is requested with the PATCH verb, the provided
   * impacts will be added or updated, but no impacts will be removed.
   */
  async partialUpdateImpacts(
    request: operations.PartialUpdateIncidentImpactsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsPartialUpdateImpacts(
      this,
      request,
      options,
    ));
  }

  /**
   * List impacted infrastructure for an incident
   *
   * @remarks
   * List impacted infrastructure on an incident by specifying type
   */
  async listImpact(
    request: operations.ListIncidentImpactRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentImpactEntityPaginated> {
    return unwrapAsync(incidentsListImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Add impacted infrastructure to an incident
   *
   * @remarks
   * Add impacted infrastructure to an incident
   */
  async createImpact(
    request: operations.CreateIncidentImpactRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentImpactEntity> {
    return unwrapAsync(incidentsCreateImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove impacted infrastructure from an incident
   *
   * @remarks
   * Remove impacted infrastructure on an incident
   */
  async deleteImpact(
    request: operations.DeleteIncidentImpactRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * List links for an incident
   *
   * @remarks
   * List all the editable, external incident links attached to an incident
   */
  async listLinks(
    request: operations.ListIncidentLinksRequest,
    options?: RequestOptions,
  ): Promise<components.AttachmentsLinkEntityPaginated> {
    return unwrapAsync(incidentsListLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a link for an incident
   *
   * @remarks
   * Allows adding adhoc links to an incident as an attachment
   */
  async createLink(
    request: operations.CreateIncidentLinkRequest,
    options?: RequestOptions,
  ): Promise<components.AttachmentsLinkEntity> {
    return unwrapAsync(incidentsCreateLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an external link for an incident
   *
   * @remarks
   * Updates the external incident link attributes
   */
  async updateLink(
    request: operations.UpdateIncidentLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsUpdateLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an external link from an incident
   *
   * @remarks
   * Deletes the external incident link
   */
  async deleteLink(
    request: operations.DeleteIncidentLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteLink(
      this,
      request,
      options,
    ));
  }

  /**
   * List milestones for an incident
   *
   * @remarks
   * List times and durations for each milestone on an incident
   */
  async listMilestones(
    request: operations.ListIncidentMilestonesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsMilestoneEntityPaginated> {
    return unwrapAsync(incidentsListMilestones(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk update milestone timestamps for an incident
   *
   * @remarks
   * Update milestone times in bulk for a given incident. All milestone
   * times for an incident must occur in chronological order
   * corresponding to the configured order of milestones. If the result
   * of this request would cause any milestone(s) to appear out of place,
   * a 422 response will instead be returned. This includes milestones
   * not explicitly submitted or updated in this request.
   */
  async updateMilestonesBulk(
    request: operations.UpdateIncidentMilestonesBulkRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsMilestoneEntityPaginated> {
    return unwrapAsync(incidentsUpdateMilestonesBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a note for an incident
   *
   * @remarks
   * Create a new note on for an incident. The visibility field on a note determines where it gets posted.
   */
  async createNote(
    request: operations.CreateIncidentNoteRequest,
    options?: RequestOptions,
  ): Promise<components.EventNoteEntity> {
    return unwrapAsync(incidentsCreateNote(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a note for an incident
   *
   * @remarks
   * Updates the body of a note
   */
  async updateNote(
    request: operations.UpdateIncidentNoteRequest,
    options?: RequestOptions,
  ): Promise<components.EventNoteEntity> {
    return unwrapAsync(incidentsUpdateNote(
      this,
      request,
      options,
    ));
  }

  /**
   * List related changes for an incident
   *
   * @remarks
   * List related changes that have been attached to an incident
   */
  async listRelatedChangeEvents(
    request: operations.ListIncidentRelatedChangesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelatedChangeEventEntityPaginated> {
    return unwrapAsync(incidentsListRelatedChangeEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a related change to an incident
   *
   * @remarks
   * Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
   */
  async createRelatedChange(
    request: operations.CreateIncidentRelatedChangeRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelatedChangeEventEntity> {
    return unwrapAsync(incidentsCreateRelatedChange(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a related change event for an incident
   *
   * @remarks
   * Update a change attached to an incident
   */
  async updateRelatedChangeEvent(
    request: operations.UpdateIncidentRelatedChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelatedChangeEventEntity> {
    return unwrapAsync(incidentsUpdateRelatedChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident relationships
   *
   * @remarks
   * List any parent/child relationships for an incident
   */
  async getRelationships(
    request: operations.GetIncidentRelationshipsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRelationshipsEntity> {
    return unwrapAsync(incidentsGetRelationships(
      this,
      request,
      options,
    ));
  }

  /**
   * Resolve an incident
   *
   * @remarks
   * Resolves a currently active incident
   */
  async resolve(
    request: operations.ResolveIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsResolve(
      this,
      request,
      options,
    ));
  }

  /**
   * List role assignments for an incident
   *
   * @remarks
   * Retrieve a list of all of the current role assignments for the incident
   */
  async listRoleAssignments(
    request: operations.ListIncidentRoleAssignmentsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntityPaginated> {
    return unwrapAsync(incidentsListRoleAssignments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a role assignment for an incident
   *
   * @remarks
   * Assign a role to a user for this incident
   */
  async createRoleAssignment(
    request: operations.CreateIncidentRoleAssignmentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntity> {
    return unwrapAsync(incidentsCreateRoleAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a role assignment from an incident
   *
   * @remarks
   * Unassign a role from a user
   */
  async deleteRoleAssignment(
    request: operations.DeleteIncidentRoleAssignmentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntity> {
    return unwrapAsync(incidentsDeleteRoleAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * List similar incidents
   */
  async listSimilar(
    request: operations.GetSimilarIncidentsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsListSimilar(
      this,
      request,
      options,
    ));
  }

  /**
   * List status pages for an incident
   *
   * @remarks
   * List status pages that are attached to an incident
   */
  async listStatusPages(
    request: operations.ListIncidentStatusPagesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsStatusPageEntityPaginated> {
    return unwrapAsync(incidentsListStatusPages(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a status page to an incident
   *
   * @remarks
   * Add a status page to an incident.
   */
  async addStatusPage(
    request: operations.CreateIncidentStatusPageRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsStatusPageEntity> {
    return unwrapAsync(incidentsAddStatusPage(
      this,
      request,
      options,
    ));
  }

  /**
   * Add tasks from a task list to an incident
   *
   * @remarks
   * Add all tasks from list to incident
   */
  async createTaskList(
    request: operations.CreateIncidentTaskListRequest,
    options?: RequestOptions,
  ): Promise<components.TaskEntity> {
    return unwrapAsync(incidentsCreateTaskList(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a team to an incident
   *
   * @remarks
   * Assign a team for this incident
   */
  async createTeamAssignment(
    request: operations.CreateIncidentTeamAssignmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsCreateTeamAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a team assignment from an incident
   *
   * @remarks
   * Unassign a team from an incident
   */
  async deleteTeamAssignment(
    request: operations.DeleteIncidentTeamAssignmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteTeamAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * List transcript messages for an incident
   *
   * @remarks
   * Retrieve the transcript for a specific incident
   */
  async getTranscript(
    request: operations.GetIncidentTranscriptRequest,
    options?: RequestOptions,
  ): Promise<components.PublicApiv1IncidentsTranscriptEntity> {
    return unwrapAsync(incidentsGetTranscript(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a transcript from an incident
   */
  async deleteTranscript(
    request: operations.DeleteIncidentTranscriptRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentsDeleteTranscript(
      this,
      request,
      options,
    ));
  }

  /**
   * Unarchive an incident
   *
   * @remarks
   * Unarchives an incident
   */
  async unarchive(
    request: operations.UnarchiveIncidentRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentEntity> {
    return unwrapAsync(incidentsUnarchive(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a user's role in an incident
   *
   * @remarks
   * Retrieve a user with current roles for an incident
   */
  async getUserRole(
    request: operations.GetIncidentUserRoleRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsRoleAssignmentEntity> {
    return unwrapAsync(incidentsGetUserRole(
      this,
      request,
      options,
    ));
  }
}
