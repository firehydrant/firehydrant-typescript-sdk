/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { servicesCreate } from "../funcs/servicesCreate.js";
import { servicesCreateChecklistResponse } from "../funcs/servicesCreateChecklistResponse.js";
import { servicesCreateDependency } from "../funcs/servicesCreateDependency.js";
import { servicesCreateLinks } from "../funcs/servicesCreateLinks.js";
import { servicesDelete } from "../funcs/servicesDelete.js";
import { servicesDeleteDependency } from "../funcs/servicesDeleteDependency.js";
import { servicesDeleteLink } from "../funcs/servicesDeleteLink.js";
import { servicesGet } from "../funcs/servicesGet.js";
import { servicesGetAvailableDownstreamDependencies } from "../funcs/servicesGetAvailableDownstreamDependencies.js";
import { servicesGetDependency } from "../funcs/servicesGetDependency.js";
import { servicesList } from "../funcs/servicesList.js";
import { servicesListAvailableUpstreamDependencies } from "../funcs/servicesListAvailableUpstreamDependencies.js";
import { servicesListDependencies } from "../funcs/servicesListDependencies.js";
import { servicesListForUser } from "../funcs/servicesListForUser.js";
import { servicesPatch } from "../funcs/servicesPatch.js";
import { servicesUpdate } from "../funcs/servicesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Catalogs } from "./catalogs.js";

export class Services extends ClientSDK {
  private _catalogs?: Catalogs;
  get catalogs(): Catalogs {
    return (this._catalogs ??= new Catalogs(this._options));
  }

  /**
   * Create a dependency relationship between services
   *
   * @remarks
   * Creates a service dependency relationship between two services
   */
  async createDependency(
    request: components.PostV1ServiceDependencies,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(servicesCreateDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a service dependency
   *
   * @remarks
   * Retrieves a single service dependency by ID
   */
  async getDependency(
    request: operations.GetServiceDependencyRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(servicesGetDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a service dependency
   *
   * @remarks
   * Deletes a single service dependency
   */
  async deleteDependency(
    request: operations.DeleteServiceDependencyRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(servicesDeleteDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a service dependency
   *
   * @remarks
   * Update the notes of the service dependency
   */
  async update(
    request: operations.UpdateServiceDependencyRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(servicesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List services
   *
   * @remarks
   * List all of the services that have been added to the organization.
   */
  async list(
    request: operations.ListServicesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntityPaginated> {
    return unwrapAsync(servicesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a service
   *
   * @remarks
   * Creates a service for the organization, you may also create or attach functionalities to the service on create.
   */
  async create(
    request: components.PostV1Services,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(servicesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create multiple services and link them to external services
   *
   * @remarks
   * Creates a service with the appropriate integration for each external service ID passed
   */
  async createLinks(
    request: components.PostV1ServicesServiceLinks,
    options?: RequestOptions,
  ): Promise<Array<components.ServiceLinkEntity>> {
    return unwrapAsync(servicesCreateLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a service
   *
   * @remarks
   * Retrieves a single service by ID
   */
  async get(
    request: operations.GetServiceRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(servicesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a service
   *
   * @remarks
   * Deletes the service from FireHydrant.
   */
  async delete(
    request: operations.DeleteServiceRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(servicesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a service
   *
   * @remarks
   * Update a services attributes, you may also add or remove functionalities from the service as well.
   * Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
   */
  async patch(
    request: operations.UpdateServiceRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(servicesPatch(
      this,
      request,
      options,
    ));
  }

  /**
   * List available downstream service dependencies
   *
   * @remarks
   * Retrieves all services that are available to be downstream dependencies
   */
  async getAvailableDownstreamDependencies(
    request: operations.ListServiceAvailableDownstreamDependenciesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntityLite> {
    return unwrapAsync(servicesGetAvailableDownstreamDependencies(
      this,
      request,
      options,
    ));
  }

  /**
   * List available upstream service dependencies
   *
   * @remarks
   * Retrieves all services that are available to be upstream dependencies
   */
  async listAvailableUpstreamDependencies(
    request: operations.ListServiceAvailableUpstreamDependenciesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntityLite> {
    return unwrapAsync(servicesListAvailableUpstreamDependencies(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a checklist response for a service
   *
   * @remarks
   * Creates a response for a checklist item
   */
  async createChecklistResponse(
    request: operations.CreateServiceChecklistResponseRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(servicesCreateChecklistResponse(
      this,
      request,
      options,
    ));
  }

  /**
   * List dependencies for a service
   *
   * @remarks
   * Retrieves a service's dependencies
   */
  async listDependencies(
    request: operations.GetServiceDependenciesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceWithAllDependenciesEntity> {
    return unwrapAsync(servicesListDependencies(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a service link
   *
   * @remarks
   * Deletes a service link from FireHydrant.
   */
  async deleteLink(
    request: operations.DeleteServiceLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(servicesDeleteLink(
      this,
      request,
      options,
    ));
  }

  /**
   * List services for a user's teams
   *
   * @remarks
   * Retrieves a list of services owned by the teams a user is on
   */
  async listForUser(
    request: operations.ListUserServicesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.TeamEntityPaginated>> {
    return unwrapAsync(servicesListForUser(
      this,
      request,
      options,
    ));
  }
}
