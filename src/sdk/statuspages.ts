/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { statusPagesCreate } from "../funcs/statusPagesCreate.js";
import { statusPagesCreateComponentGroup } from "../funcs/statusPagesCreateComponentGroup.js";
import { statusPagesCreateLink } from "../funcs/statusPagesCreateLink.js";
import { statusPagesCreateSubscribers } from "../funcs/statusPagesCreateSubscribers.js";
import { statusPagesCreateSubscription } from "../funcs/statusPagesCreateSubscription.js";
import { statusPagesDelete } from "../funcs/statusPagesDelete.js";
import { statusPagesDeleteComponentGroup } from "../funcs/statusPagesDeleteComponentGroup.js";
import { statusPagesDeleteImage } from "../funcs/statusPagesDeleteImage.js";
import { statusPagesDeleteIncident } from "../funcs/statusPagesDeleteIncident.js";
import { statusPagesDeleteLink } from "../funcs/statusPagesDeleteLink.js";
import { statusPagesDeleteSubscribers } from "../funcs/statusPagesDeleteSubscribers.js";
import { statusPagesDeleteSubscription } from "../funcs/statusPagesDeleteSubscription.js";
import { statusPagesGet } from "../funcs/statusPagesGet.js";
import { statusPagesList } from "../funcs/statusPagesList.js";
import { statusPagesListSubscribers } from "../funcs/statusPagesListSubscribers.js";
import { statusPagesUpdate } from "../funcs/statusPagesUpdate.js";
import { statusPagesUpdateComponentGroup } from "../funcs/statusPagesUpdateComponentGroup.js";
import { statusPagesUpdateImage } from "../funcs/statusPagesUpdateImage.js";
import { statusPagesUpdateLink } from "../funcs/statusPagesUpdateLink.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class StatusPages extends ClientSDK {
  /**
   * Remove a status page from an incident
   *
   * @remarks
   * Remove a status page incident attached to an incident
   */
  async deleteIncident(
    request: operations.DeleteIncidentStatusPageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(statusPagesDeleteIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a status page subscription
   *
   * @remarks
   * Subscribe to status page updates
   */
  async createSubscription(
    request: components.PostV1NuncSubscriptions,
    options?: RequestOptions,
  ): Promise<components.NuncNuncSubscription> {
    return unwrapAsync(statusPagesCreateSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Unsubscribe from status page notifications
   *
   * @remarks
   * Unsubscribe from status page updates
   */
  async deleteSubscription(
    request: operations.DeleteNuncSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.NuncNuncSubscription> {
    return unwrapAsync(statusPagesDeleteSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * List status pages
   *
   * @remarks
   * Lists the information displayed as part of your FireHydrant hosted status pages.
   */
  async list(
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntityPaginated> {
    return unwrapAsync(statusPagesList(
      this,
      options,
    ));
  }

  /**
   * Create a status page
   *
   * @remarks
   * Create a new FireHydrant hosted status page for customer facing statuses.
   */
  async create(
    request: operations.CreateStatusPageRequestBody,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a status page
   *
   * @remarks
   * Retrieve the information displayed as part of your FireHydrant hosted status page.
   */
  async get(
    request: operations.GetStatusPageRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a status page
   *
   * @remarks
   * Update your company's information and other components in the specified FireHydrant hosted status page.
   */
  async update(
    request: operations.UpdateStatusPageRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a status page
   *
   * @remarks
   * Delete a FireHydrant hosted status page, stopping updates of your incidents to it.
   */
  async delete(
    request: operations.DeleteStatusPageRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a component group for a status page
   *
   * @remarks
   * Add a component group to be displayed on a FireHydrant status page
   */
  async createComponentGroup(
    request: operations.CreateStatusPageComponentGroupRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesCreateComponentGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a status page component group
   *
   * @remarks
   * Delete a component group displayed on a FireHydrant status page
   */
  async deleteComponentGroup(
    request: operations.DeleteStatusPageComponentGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(statusPagesDeleteComponentGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a status page component group
   *
   * @remarks
   * Update a component group to be displayed on a FireHydrant status page
   */
  async updateComponentGroup(
    request: operations.UpdateStatusPageComponentGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(statusPagesUpdateComponentGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload an image for a status page
   *
   * @remarks
   * Add or replace an image attached to a FireHydrant status page
   */
  async updateImage(
    request: operations.UpdateStatusPageImageRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesUpdateImage(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an image from a status page
   *
   * @remarks
   * Delete an image attached to a FireHydrant status page
   */
  async deleteImage(
    request: operations.DeleteStatusPageImageRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesDeleteImage(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a link for a status page
   *
   * @remarks
   * Add a link to be displayed on a FireHydrant status page
   */
  async createLink(
    request: operations.CreateStatusPageLinkRequest,
    options?: RequestOptions,
  ): Promise<components.NuncConnectionEntity> {
    return unwrapAsync(statusPagesCreateLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a status page link
   *
   * @remarks
   * Delete a link displayed on a FireHydrant status page
   */
  async deleteLink(
    request: operations.DeleteStatusPageLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(statusPagesDeleteLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a status page link
   *
   * @remarks
   * Update a link to be displayed on a FireHydrant status page
   */
  async updateLink(
    request: operations.UpdateStatusPageLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(statusPagesUpdateLink(
      this,
      request,
      options,
    ));
  }

  /**
   * List status page subscribers
   *
   * @remarks
   * Retrieves the list of subscribers for a status page.
   */
  async listSubscribers(
    request: operations.ListStatusPageSubscribersRequest,
    options?: RequestOptions,
  ): Promise<components.NuncEmailSubscribersEntity> {
    return unwrapAsync(statusPagesListSubscribers(
      this,
      request,
      options,
    ));
  }

  /**
   * Add subscribers to a status page
   *
   * @remarks
   * Subscribes a comma-separated string of emails to status page updates
   */
  async createSubscribers(
    request: operations.CreateStatusPageSubscribersRequest,
    options?: RequestOptions,
  ): Promise<components.NuncEmailSubscribersEntity> {
    return unwrapAsync(statusPagesCreateSubscribers(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove subscribers from a status page
   *
   * @remarks
   * Unsubscribes one or more status page subscribers.
   */
  async deleteSubscribers(
    request: operations.DeleteStatusPageSubscribersRequest,
    options?: RequestOptions,
  ): Promise<components.NuncEmailSubscribersEntity> {
    return unwrapAsync(statusPagesDeleteSubscribers(
      this,
      request,
      options,
    ));
  }
}
