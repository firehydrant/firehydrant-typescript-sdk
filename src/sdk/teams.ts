/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { teamsArchive } from "../funcs/teamsArchive.js";
import { teamsCreate } from "../funcs/teamsCreate.js";
import { teamsCreateEscalationPolicy } from "../funcs/teamsCreateEscalationPolicy.js";
import { teamsCreateOnCallSchedule } from "../funcs/teamsCreateOnCallSchedule.js";
import { teamsCreateShift } from "../funcs/teamsCreateShift.js";
import { teamsDeleteScheduleShift } from "../funcs/teamsDeleteScheduleShift.js";
import { teamsGet } from "../funcs/teamsGet.js";
import { teamsGetScheduleShift } from "../funcs/teamsGetScheduleShift.js";
import { teamsList } from "../funcs/teamsList.js";
import { teamsListOnCallSchedules } from "../funcs/teamsListOnCallSchedules.js";
import { teamsListSchedules } from "../funcs/teamsListSchedules.js";
import { teamsUpdate } from "../funcs/teamsUpdate.js";
import { teamsUpdateEscalationPolicy } from "../funcs/teamsUpdateEscalationPolicy.js";
import { teamsUpdateScheduleShift } from "../funcs/teamsUpdateScheduleShift.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Teams extends ClientSDK {
  /**
   * List schedules
   *
   * @remarks
   * List all known schedules in FireHydrant as pulled from external sources
   */
  async listSchedules(
    request: operations.ListSchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduleEntityPaginated> {
    return unwrapAsync(teamsListSchedules(
      this,
      request,
      options,
    ));
  }

  /**
   * List teams
   *
   * @remarks
   * List all of the teams in the organization
   */
  async list(
    request: operations.ListTeamsRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntityPaginated> {
    return unwrapAsync(teamsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a team
   *
   * @remarks
   * Create a new team
   */
  async create(
    request: components.PostV1Teams,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a team
   *
   * @remarks
   * Retrieve a single team from its ID
   */
  async get(
    request: operations.GetTeamRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a team
   *
   * @remarks
   * Archives an team which will hide it from lists and metrics
   */
  async archive(
    request: operations.ArchiveTeamRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsArchive(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a team
   *
   * @remarks
   * Update a single team from its ID
   */
  async update(
    request: operations.UpdateTeamRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List on-call schedules for a team
   *
   * @remarks
   * List all Signals on-call schedules for a team.
   */
  async listOnCallSchedules(
    request: operations.ListTeamOnCallSchedulesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsListOnCallSchedules(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an on-call schedule for a team
   *
   * @remarks
   * Create a Signals on-call schedule for a team.
   */
  async createOnCallSchedule(
    request: operations.CreateTeamOnCallScheduleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsCreateOnCallSchedule(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an on-call shift for a team schedule
   *
   * @remarks
   * Get a Signals on-call shift by ID
   */
  async getScheduleShift(
    request: operations.GetTeamScheduleShiftRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsGetScheduleShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an on-call shift from a team schedule
   *
   * @remarks
   * Delete a Signals on-call shift by ID
   */
  async deleteScheduleShift(
    request: operations.DeleteTeamScheduleShiftRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsDeleteScheduleShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an on-call shift in a team schedule
   *
   * @remarks
   * Update a Signals on-call shift by ID
   */
  async updateScheduleShift(
    request: operations.UpdateTeamScheduleShiftRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsUpdateScheduleShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an escalation policy for a team
   *
   * @remarks
   * Create a Signals escalation policy for a team.
   */
  async createEscalationPolicy(
    request: operations.CreateTeamEscalationPolicyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsCreateEscalationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an escalation policy for a team
   *
   * @remarks
   * Update a Signals escalation policy by ID
   */
  async updateEscalationPolicy(
    request: operations.UpdateTeamEscalationPolicyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsUpdateEscalationPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a shift for an on-call schedule
   *
   * @remarks
   * Create a Signals on-call shift in a schedule.
   */
  async createShift(
    request: operations.CreateTeamOnCallScheduleShiftRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(teamsCreateShift(
      this,
      request,
      options,
    ));
  }
}
