/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { teamsCreateTeam } from "../funcs/teamsCreateTeam.js";
import { teamsDeleteTeam } from "../funcs/teamsDeleteTeam.js";
import { teamsGetTeam } from "../funcs/teamsGetTeam.js";
import { teamsListSchedules } from "../funcs/teamsListSchedules.js";
import { teamsListTeams } from "../funcs/teamsListTeams.js";
import { teamsUpdateTeam } from "../funcs/teamsUpdateTeam.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Teams extends ClientSDK {
  /**
   * List teams
   *
   * @remarks
   * List all of the teams in the organization
   */
  async listTeams(
    request: operations.ListTeamsRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntityPaginated> {
    return unwrapAsync(teamsListTeams(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a team
   *
   * @remarks
   * Create a new team
   */
  async createTeam(
    request: components.CreateTeam,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsCreateTeam(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a team
   *
   * @remarks
   * Retrieve a single team from its ID
   */
  async getTeam(
    request: operations.GetTeamRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsGetTeam(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a team
   *
   * @remarks
   * Archives an team which will hide it from lists and metrics
   */
  async deleteTeam(
    request: operations.DeleteTeamRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsDeleteTeam(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a team
   *
   * @remarks
   * Update a single team from its ID
   */
  async updateTeam(
    request: operations.UpdateTeamRequest,
    options?: RequestOptions,
  ): Promise<components.TeamEntity> {
    return unwrapAsync(teamsUpdateTeam(
      this,
      request,
      options,
    ));
  }

  /**
   * List schedules
   *
   * @remarks
   * List all known schedules in FireHydrant as pulled from external sources
   */
  async listSchedules(
    request: operations.ListSchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduleEntityPaginated> {
    return unwrapAsync(teamsListSchedules(
      this,
      request,
      options,
    ));
  }
}
