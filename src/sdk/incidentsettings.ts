/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { incidentSettingsCreateCustomFieldDefinition } from "../funcs/incidentSettingsCreateCustomFieldDefinition.js";
import { incidentSettingsCreateIncidentRole } from "../funcs/incidentSettingsCreateIncidentRole.js";
import { incidentSettingsCreateIncidentType } from "../funcs/incidentSettingsCreateIncidentType.js";
import { incidentSettingsCreateLifecycleMeasurementDefinition } from "../funcs/incidentSettingsCreateLifecycleMeasurementDefinition.js";
import { incidentSettingsCreateLifecycleMilestone } from "../funcs/incidentSettingsCreateLifecycleMilestone.js";
import { incidentSettingsCreatePriority } from "../funcs/incidentSettingsCreatePriority.js";
import { incidentSettingsCreateSeverity } from "../funcs/incidentSettingsCreateSeverity.js";
import { incidentSettingsCreateSeverityMatrixCondition } from "../funcs/incidentSettingsCreateSeverityMatrixCondition.js";
import { incidentSettingsCreateSeverityMatrixImpact } from "../funcs/incidentSettingsCreateSeverityMatrixImpact.js";
import { incidentSettingsDeleteCustomFieldDefinition } from "../funcs/incidentSettingsDeleteCustomFieldDefinition.js";
import { incidentSettingsDeleteIncidentRole } from "../funcs/incidentSettingsDeleteIncidentRole.js";
import { incidentSettingsDeleteIncidentType } from "../funcs/incidentSettingsDeleteIncidentType.js";
import { incidentSettingsDeleteLifecycleMeasurementDefinition } from "../funcs/incidentSettingsDeleteLifecycleMeasurementDefinition.js";
import { incidentSettingsDeleteLifecycleMilestone } from "../funcs/incidentSettingsDeleteLifecycleMilestone.js";
import { incidentSettingsDeletePriority } from "../funcs/incidentSettingsDeletePriority.js";
import { incidentSettingsDeleteSeverity } from "../funcs/incidentSettingsDeleteSeverity.js";
import { incidentSettingsDeleteSeverityMatrixCondition } from "../funcs/incidentSettingsDeleteSeverityMatrixCondition.js";
import { incidentSettingsDeleteSeverityMatrixImpact } from "../funcs/incidentSettingsDeleteSeverityMatrixImpact.js";
import { incidentSettingsGetFormConfiguration } from "../funcs/incidentSettingsGetFormConfiguration.js";
import { incidentSettingsGetIncidentRole } from "../funcs/incidentSettingsGetIncidentRole.js";
import { incidentSettingsGetIncidentType } from "../funcs/incidentSettingsGetIncidentType.js";
import { incidentSettingsGetLifecycleMeasurementDefinition } from "../funcs/incidentSettingsGetLifecycleMeasurementDefinition.js";
import { incidentSettingsGetPriority } from "../funcs/incidentSettingsGetPriority.js";
import { incidentSettingsGetSeverity } from "../funcs/incidentSettingsGetSeverity.js";
import { incidentSettingsGetSeverityMatrix } from "../funcs/incidentSettingsGetSeverityMatrix.js";
import { incidentSettingsGetSeverityMatrixCondition } from "../funcs/incidentSettingsGetSeverityMatrixCondition.js";
import { incidentSettingsListCustomFieldDefinitions } from "../funcs/incidentSettingsListCustomFieldDefinitions.js";
import { incidentSettingsListCustomFieldSelectOptions } from "../funcs/incidentSettingsListCustomFieldSelectOptions.js";
import { incidentSettingsListIncidentRoles } from "../funcs/incidentSettingsListIncidentRoles.js";
import { incidentSettingsListIncidentTags } from "../funcs/incidentSettingsListIncidentTags.js";
import { incidentSettingsListIncidentTypes } from "../funcs/incidentSettingsListIncidentTypes.js";
import { incidentSettingsListLifecycleMeasurementDefinitions } from "../funcs/incidentSettingsListLifecycleMeasurementDefinitions.js";
import { incidentSettingsListLifecyclePhases } from "../funcs/incidentSettingsListLifecyclePhases.js";
import { incidentSettingsListPriorities } from "../funcs/incidentSettingsListPriorities.js";
import { incidentSettingsListSeverities } from "../funcs/incidentSettingsListSeverities.js";
import { incidentSettingsListSeverityMatrixConditions } from "../funcs/incidentSettingsListSeverityMatrixConditions.js";
import { incidentSettingsListSeverityMatrixImpacts } from "../funcs/incidentSettingsListSeverityMatrixImpacts.js";
import { incidentSettingsUpdateCustomFieldDefinition } from "../funcs/incidentSettingsUpdateCustomFieldDefinition.js";
import { incidentSettingsUpdateIncidentRole } from "../funcs/incidentSettingsUpdateIncidentRole.js";
import { incidentSettingsUpdateIncidentType } from "../funcs/incidentSettingsUpdateIncidentType.js";
import { incidentSettingsUpdateLifecycleMeasurementDefinition } from "../funcs/incidentSettingsUpdateLifecycleMeasurementDefinition.js";
import { incidentSettingsUpdateLifecycleMilestone } from "../funcs/incidentSettingsUpdateLifecycleMilestone.js";
import { incidentSettingsUpdatePriority } from "../funcs/incidentSettingsUpdatePriority.js";
import { incidentSettingsUpdateSeverity } from "../funcs/incidentSettingsUpdateSeverity.js";
import { incidentSettingsUpdateSeverityMatrix } from "../funcs/incidentSettingsUpdateSeverityMatrix.js";
import { incidentSettingsUpdateSeverityMatrixCondition } from "../funcs/incidentSettingsUpdateSeverityMatrixCondition.js";
import { incidentSettingsUpdateSeverityMatrixImpact } from "../funcs/incidentSettingsUpdateSeverityMatrixImpact.js";
import { incidentSettingsValidateIncidentTags } from "../funcs/incidentSettingsValidateIncidentTags.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IncidentSettings extends ClientSDK {
  /**
   * List incident roles
   *
   * @remarks
   * List all of the incident roles in the organization
   */
  async listIncidentRoles(
    request: operations.ListIncidentRolesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentRoleEntityPaginated> {
    return unwrapAsync(incidentSettingsListIncidentRoles(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an incident role
   *
   * @remarks
   * Create a new incident role
   */
  async createIncidentRole(
    request: components.CreateIncidentRole,
    options?: RequestOptions,
  ): Promise<components.IncidentRoleEntity> {
    return unwrapAsync(incidentSettingsCreateIncidentRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident role
   *
   * @remarks
   * Retrieve a single incident role from its ID
   */
  async getIncidentRole(
    request: operations.GetIncidentRoleRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentRoleEntity> {
    return unwrapAsync(incidentSettingsGetIncidentRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive an incident role
   *
   * @remarks
   * Archives an incident role which will hide it from lists and metrics
   */
  async deleteIncidentRole(
    request: operations.DeleteIncidentRoleRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentRoleEntity> {
    return unwrapAsync(incidentSettingsDeleteIncidentRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident role
   *
   * @remarks
   * Update a single incident role from its ID
   */
  async updateIncidentRole(
    request: operations.UpdateIncidentRoleRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentRoleEntity> {
    return unwrapAsync(incidentSettingsUpdateIncidentRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Validate incident tags
   *
   * @remarks
   * Validate the format of a list of tags
   */
  async validateIncidentTags(
    request: Array<string>,
    options?: RequestOptions,
  ): Promise<components.TagEntity> {
    return unwrapAsync(incidentSettingsValidateIncidentTags(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident tags
   *
   * @remarks
   * List all of the incident tags in the organization
   */
  async listIncidentTags(
    request: operations.ListIncidentTagsRequest,
    options?: RequestOptions,
  ): Promise<components.TagEntityPaginated> {
    return unwrapAsync(incidentSettingsListIncidentTags(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident types
   *
   * @remarks
   * List all of the incident types in the organization
   */
  async listIncidentTypes(
    request: operations.ListIncidentTypesRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentTypeEntityPaginated> {
    return unwrapAsync(incidentSettingsListIncidentTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an incident type
   *
   * @remarks
   * Create a new incident type
   */
  async createIncidentType(
    request: components.CreateIncidentType,
    options?: RequestOptions,
  ): Promise<components.IncidentTypeEntity> {
    return unwrapAsync(incidentSettingsCreateIncidentType(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an incident type
   *
   * @remarks
   * Retrieve a single incident type from its ID
   */
  async getIncidentType(
    request: operations.GetIncidentTypeRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentTypeEntity> {
    return unwrapAsync(incidentSettingsGetIncidentType(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive an incident type
   *
   * @remarks
   * Archives an incident type which will hide it from lists and metrics
   */
  async deleteIncidentType(
    request: operations.DeleteIncidentTypeRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentTypeEntity> {
    return unwrapAsync(incidentSettingsDeleteIncidentType(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an incident type
   *
   * @remarks
   * Update a single incident type from its ID
   */
  async updateIncidentType(
    request: operations.UpdateIncidentTypeRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentTypeEntity> {
    return unwrapAsync(incidentSettingsUpdateIncidentType(
      this,
      request,
      options,
    ));
  }

  /**
   * List measurement definitions
   *
   * @remarks
   * List all of the measurement definitions in the organization
   */
  async listLifecycleMeasurementDefinitions(
    request: operations.ListLifecycleMeasurementDefinitionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentSettingsListLifecycleMeasurementDefinitions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a measurement definition
   *
   * @remarks
   * Create a new measurement definition
   */
  async createLifecycleMeasurementDefinition(
    request: operations.CreateLifecycleMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentSettingsCreateLifecycleMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a measurement definition
   *
   * @remarks
   * Retrieve a single measurement definition from its ID
   */
  async getLifecycleMeasurementDefinition(
    request: operations.GetLifecycleMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentSettingsGetLifecycleMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a measurement definition
   *
   * @remarks
   * Archives a measurement definition which will hide it from lists and metrics
   */
  async deleteLifecycleMeasurementDefinition(
    request: operations.DeleteLifecycleMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentSettingsDeleteLifecycleMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a measurement definition
   *
   * @remarks
   * Update a single measurement definition from its ID
   */
  async updateLifecycleMeasurementDefinition(
    request: operations.UpdateLifecycleMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(incidentSettingsUpdateLifecycleMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * List phases and milestones
   *
   * @remarks
   * List all of the lifecycle phases and milestones in the organization
   */
  async listLifecyclePhases(
    options?: RequestOptions,
  ): Promise<components.LifecyclesPhaseEntityList> {
    return unwrapAsync(incidentSettingsListLifecyclePhases(
      this,
      options,
    ));
  }

  /**
   * Create a milestone
   *
   * @remarks
   * Create a new milestone
   */
  async createLifecycleMilestone(
    request: operations.CreateLifecycleMilestoneRequest,
    options?: RequestOptions,
  ): Promise<components.LifecyclesPhaseEntityList> {
    return unwrapAsync(incidentSettingsCreateLifecycleMilestone(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a milestone
   *
   * @remarks
   * Delete a milestone
   */
  async deleteLifecycleMilestone(
    request: operations.DeleteLifecycleMilestoneRequest,
    options?: RequestOptions,
  ): Promise<components.LifecyclesPhaseEntity> {
    return unwrapAsync(incidentSettingsDeleteLifecycleMilestone(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a milestone
   *
   * @remarks
   * Update a milestone
   */
  async updateLifecycleMilestone(
    request: operations.UpdateLifecycleMilestoneRequest,
    options?: RequestOptions,
  ): Promise<components.LifecyclesPhaseEntity> {
    return unwrapAsync(incidentSettingsUpdateLifecycleMilestone(
      this,
      request,
      options,
    ));
  }

  /**
   * List priorities
   *
   * @remarks
   * Lists priorities
   */
  async listPriorities(
    request: operations.ListPrioritiesRequest,
    options?: RequestOptions,
  ): Promise<components.PriorityEntity> {
    return unwrapAsync(incidentSettingsListPriorities(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a priority
   *
   * @remarks
   * Create a new priority
   */
  async createPriority(
    request: components.CreatePriority,
    options?: RequestOptions,
  ): Promise<components.PriorityEntity> {
    return unwrapAsync(incidentSettingsCreatePriority(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a priority
   *
   * @remarks
   * Retrieve a specific priority
   */
  async getPriority(
    request: operations.GetPriorityRequest,
    options?: RequestOptions,
  ): Promise<components.PriorityEntity> {
    return unwrapAsync(incidentSettingsGetPriority(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a priority
   *
   * @remarks
   * Delete a specific priority
   */
  async deletePriority(
    request: operations.DeletePriorityRequest,
    options?: RequestOptions,
  ): Promise<components.PriorityEntity> {
    return unwrapAsync(incidentSettingsDeletePriority(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a priority
   *
   * @remarks
   * Update a specific priority
   */
  async updatePriority(
    request: operations.UpdatePriorityRequest,
    options?: RequestOptions,
  ): Promise<components.PriorityEntity> {
    return unwrapAsync(incidentSettingsUpdatePriority(
      this,
      request,
      options,
    ));
  }

  /**
   * List severities
   *
   * @remarks
   * Lists severities
   */
  async listSeverities(
    request: operations.ListSeveritiesRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityEntityPaginated> {
    return unwrapAsync(incidentSettingsListSeverities(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a severity
   *
   * @remarks
   * Create a new severity
   */
  async createSeverity(
    request: components.CreateSeverity,
    options?: RequestOptions,
  ): Promise<components.SeverityEntity> {
    return unwrapAsync(incidentSettingsCreateSeverity(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a severity
   *
   * @remarks
   * Retrieve a specific severity
   */
  async getSeverity(
    request: operations.GetSeverityRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityEntity> {
    return unwrapAsync(incidentSettingsGetSeverity(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a severity
   *
   * @remarks
   * Delete a specific severity
   */
  async deleteSeverity(
    request: operations.DeleteSeverityRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityEntity> {
    return unwrapAsync(incidentSettingsDeleteSeverity(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a severity
   *
   * @remarks
   * Update a specific severity
   */
  async updateSeverity(
    request: operations.UpdateSeverityRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityEntity> {
    return unwrapAsync(incidentSettingsUpdateSeverity(
      this,
      request,
      options,
    ));
  }

  /**
   * Get severity matrix
   *
   * @remarks
   * Retrieve the Severity matrix for your organization and its components and configured severities.
   */
  async getSeverityMatrix(
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixSeverityMatrixEntity> {
    return unwrapAsync(incidentSettingsGetSeverityMatrix(
      this,
      options,
    ));
  }

  /**
   * Update severity matrix
   *
   * @remarks
   * Update available severities and impacts in your organization's severity matrix.
   */
  async updateSeverityMatrix(
    request: components.UpdateSeverityMatrix,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixSeverityMatrixEntity> {
    return unwrapAsync(incidentSettingsUpdateSeverityMatrix(
      this,
      request,
      options,
    ));
  }

  /**
   * List severity matrix conditions
   *
   * @remarks
   * Lists conditions
   */
  async listSeverityMatrixConditions(
    request: operations.ListSeverityMatrixConditionsRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixConditionEntity> {
    return unwrapAsync(incidentSettingsListSeverityMatrixConditions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a severity matrix condition
   *
   * @remarks
   * Create a new condition
   */
  async createSeverityMatrixCondition(
    request: components.CreateSeverityMatrixCondition,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixConditionEntity> {
    return unwrapAsync(incidentSettingsCreateSeverityMatrixCondition(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a severity matrix condition
   *
   * @remarks
   * Retrieve a specific condition
   */
  async getSeverityMatrixCondition(
    request: operations.GetSeverityMatrixConditionRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixConditionEntity> {
    return unwrapAsync(incidentSettingsGetSeverityMatrixCondition(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a severity matrix condition
   *
   * @remarks
   * Delete a specific condition
   */
  async deleteSeverityMatrixCondition(
    request: operations.DeleteSeverityMatrixConditionRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixConditionEntity> {
    return unwrapAsync(incidentSettingsDeleteSeverityMatrixCondition(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a severity matrix condition
   *
   * @remarks
   * Update a severity matrix condition
   */
  async updateSeverityMatrixCondition(
    request: operations.UpdateSeverityMatrixConditionRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixConditionEntity> {
    return unwrapAsync(incidentSettingsUpdateSeverityMatrixCondition(
      this,
      request,
      options,
    ));
  }

  /**
   * List severity matrix impacts
   *
   * @remarks
   * Lists impacts
   */
  async listSeverityMatrixImpacts(
    request: operations.ListSeverityMatrixImpactsRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixImpactEntity> {
    return unwrapAsync(incidentSettingsListSeverityMatrixImpacts(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a severity matrix impact
   *
   * @remarks
   * Create a new impact
   */
  async createSeverityMatrixImpact(
    request: components.CreateSeverityMatrixImpact,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixImpactEntity> {
    return unwrapAsync(incidentSettingsCreateSeverityMatrixImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a severity matrix impact
   *
   * @remarks
   * Delete a specific impact
   */
  async deleteSeverityMatrixImpact(
    request: operations.DeleteSeverityMatrixImpactRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixImpactEntity> {
    return unwrapAsync(incidentSettingsDeleteSeverityMatrixImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a severity matrix impact
   *
   * @remarks
   * Update a severity matrix impact
   */
  async updateSeverityMatrixImpact(
    request: operations.UpdateSeverityMatrixImpactRequest,
    options?: RequestOptions,
  ): Promise<components.SeverityMatrixImpactEntity> {
    return unwrapAsync(incidentSettingsUpdateSeverityMatrixImpact(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a custom field definition
   *
   * @remarks
   * Delete a custom field definition
   */
  async deleteCustomFieldDefinition(
    request: operations.DeleteCustomFieldDefinitionRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationsCustomFieldDefinitionEntity> {
    return unwrapAsync(incidentSettingsDeleteCustomFieldDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a custom field definition
   *
   * @remarks
   * Update a single custom field definition
   */
  async updateCustomFieldDefinition(
    request: operations.UpdateCustomFieldDefinitionRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationsCustomFieldDefinitionEntity> {
    return unwrapAsync(incidentSettingsUpdateCustomFieldDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * List custom field definitions
   *
   * @remarks
   * List all custom field definitions
   */
  async listCustomFieldDefinitions(
    options?: RequestOptions,
  ): Promise<components.OrganizationsCustomFieldDefinitionEntity> {
    return unwrapAsync(incidentSettingsListCustomFieldDefinitions(
      this,
      options,
    ));
  }

  /**
   * Create a custom field definition
   *
   * @remarks
   * Create a new custom field definition
   */
  async createCustomFieldDefinition(
    request: components.CreateCustomFieldDefinition,
    options?: RequestOptions,
  ): Promise<components.OrganizationsCustomFieldDefinitionEntity> {
    return unwrapAsync(incidentSettingsCreateCustomFieldDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Get available values for a custom field
   *
   * @remarks
   * Get the permissible values for the a currently active custom select or multi-select field.
   */
  async listCustomFieldSelectOptions(
    request: operations.ListCustomFieldSelectOptionsRequest,
    options?: RequestOptions,
  ): Promise<components.OrganizationsCustomFieldDefinitionEntity> {
    return unwrapAsync(incidentSettingsListCustomFieldSelectOptions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a form configuration
   *
   * @remarks
   * Get a form configuration
   */
  async getFormConfiguration(
    request: operations.GetFormConfigurationRequest,
    options?: RequestOptions,
  ): Promise<components.FormConfigurationEntity> {
    return unwrapAsync(incidentSettingsGetFormConfiguration(
      this,
      request,
      options,
    ));
  }
}
