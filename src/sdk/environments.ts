/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { environmentsCreate } from "../funcs/environmentsCreate.js";
import { environmentsDelete } from "../funcs/environmentsDelete.js";
import { environmentsGet } from "../funcs/environmentsGet.js";
import { environmentsList } from "../funcs/environmentsList.js";
import { environmentsUpdate } from "../funcs/environmentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Environments extends ClientSDK {
  /**
   * List environments
   *
   * @remarks
   * List all of the environments that have been added to the organiation
   */
  async list(
    request: operations.ListEnvironmentsRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntityPaginated> {
    return unwrapAsync(environmentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an environment
   *
   * @remarks
   * Creates an environment for the organization
   */
  async create(
    request: components.PostV1Environments,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(environmentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an environment
   *
   * @remarks
   * Retrieves a single environment by ID
   */
  async get(
    request: operations.GetEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(environmentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive an environment
   *
   * @remarks
   * Archive an environment
   */
  async delete(
    request: operations.DeleteEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(environmentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an environment
   *
   * @remarks
   * Update a environments attributes
   */
  async update(
    request: operations.UpdateEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(environmentsUpdate(
      this,
      request,
      options,
    ));
  }
}
