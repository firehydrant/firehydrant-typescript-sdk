/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { changesCreateChange } from "../funcs/changesCreateChange.js";
import { changesCreateChangeEvent } from "../funcs/changesCreateChangeEvent.js";
import { changesCreateChangeIdentity } from "../funcs/changesCreateChangeIdentity.js";
import { changesDeleteChange } from "../funcs/changesDeleteChange.js";
import { changesDeleteChangeEvent } from "../funcs/changesDeleteChangeEvent.js";
import { changesDeleteChangeIdentity } from "../funcs/changesDeleteChangeIdentity.js";
import { changesGetChangeEvent } from "../funcs/changesGetChangeEvent.js";
import { changesListChangeEvents } from "../funcs/changesListChangeEvents.js";
import { changesListChangeIdentities } from "../funcs/changesListChangeIdentities.js";
import { changesListChanges } from "../funcs/changesListChanges.js";
import { changesListChangeTypes } from "../funcs/changesListChangeTypes.js";
import { changesUpdateChange } from "../funcs/changesUpdateChange.js";
import { changesUpdateChangeEvent } from "../funcs/changesUpdateChangeEvent.js";
import { changesUpdateChangeIdentity } from "../funcs/changesUpdateChangeIdentity.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Changes extends ClientSDK {
  /**
   * List changes
   *
   * @remarks
   * List changes for the organization
   */
  async listChanges(
    request: operations.ListChangesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesListChanges(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new change entry
   *
   * @remarks
   * Create a new change entry
   */
  async createChange(
    request: components.CreateChange,
    options?: RequestOptions,
  ): Promise<components.ChangeEntity> {
    return unwrapAsync(changesCreateChange(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a change entry
   *
   * @remarks
   * Archive a change entry
   */
  async deleteChange(
    request: operations.DeleteChangeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesDeleteChange(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a change entry
   *
   * @remarks
   * Update a change entry
   */
  async updateChange(
    request: operations.UpdateChangeRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEntity> {
    return unwrapAsync(changesUpdateChange(
      this,
      request,
      options,
    ));
  }

  /**
   * List identities for a change entry
   *
   * @remarks
   * Retrieve all identities for the change entry
   */
  async listChangeIdentities(
    request: operations.ListChangeIdentitiesRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeIdentityEntityPaginated> {
    return unwrapAsync(changesListChangeIdentities(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an identity for a change entry
   *
   * @remarks
   * Create an identity for the change entry
   */
  async createChangeIdentity(
    request: operations.CreateChangeIdentityRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeIdentityEntity> {
    return unwrapAsync(changesCreateChangeIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an identity from a change entry
   *
   * @remarks
   * Delete an identity from the change entry
   */
  async deleteChangeIdentity(
    request: operations.DeleteChangeIdentityRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesDeleteChangeIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an identity for a change entry
   *
   * @remarks
   * Update an identity for the change entry
   */
  async updateChangeIdentity(
    request: operations.UpdateChangeIdentityRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeIdentityEntity> {
    return unwrapAsync(changesUpdateChangeIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * List change events
   *
   * @remarks
   * List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it
   */
  async listChangeEvents(
    request: operations.ListChangeEventsRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventSlimEntityPaginated> {
    return unwrapAsync(changesListChangeEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a change event
   *
   * @remarks
   * Create a change event
   */
  async createChangeEvent(
    request: components.CreateChangeEvent,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(changesCreateChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a change event
   *
   * @remarks
   * Retrieve a change event
   */
  async getChangeEvent(
    request: operations.GetChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(changesGetChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a change event
   *
   * @remarks
   * Delete a change event
   */
  async deleteChangeEvent(
    request: operations.DeleteChangeEventRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesDeleteChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a change event
   *
   * @remarks
   * Update a change event
   */
  async updateChangeEvent(
    request: operations.UpdateChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(changesUpdateChangeEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * List change types
   *
   * @remarks
   * List change types for the organization
   */
  async listChangeTypes(
    request: operations.ListChangeTypesRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeTypeEntityPaginated> {
    return unwrapAsync(changesListChangeTypes(
      this,
      request,
      options,
    ));
  }
}
