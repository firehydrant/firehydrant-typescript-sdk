/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { changesCreate } from "../funcs/changesCreate.js";
import { changesCreateEvent } from "../funcs/changesCreateEvent.js";
import { changesCreateIdentity } from "../funcs/changesCreateIdentity.js";
import { changesDelete } from "../funcs/changesDelete.js";
import { changesDeleteEvent } from "../funcs/changesDeleteEvent.js";
import { changesDeleteIdentity } from "../funcs/changesDeleteIdentity.js";
import { changesGet } from "../funcs/changesGet.js";
import { changesGetEvent } from "../funcs/changesGetEvent.js";
import { changesList } from "../funcs/changesList.js";
import { changesListEvents } from "../funcs/changesListEvents.js";
import { changesListIdentities } from "../funcs/changesListIdentities.js";
import { changesListTypes } from "../funcs/changesListTypes.js";
import { changesUpdate } from "../funcs/changesUpdate.js";
import { changesUpdateEvent } from "../funcs/changesUpdateEvent.js";
import { changesUpdateIdentity } from "../funcs/changesUpdateIdentity.js";
import { changesUpdateScheduledMaintenance } from "../funcs/changesUpdateScheduledMaintenance.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Changes extends ClientSDK {
  /**
   * List change types
   *
   * @remarks
   * Lists all change types
   */
  async listTypes(
    request: operations.ListChangeTypesRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeTypeEntityPaginated> {
    return unwrapAsync(changesListTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * List changes
   *
   * @remarks
   * Lists all changes
   */
  async list(
    request: operations.ListChangesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a change
   *
   * @remarks
   * Create a new change entry
   */
  async create(
    request: components.PostV1Changes,
    options?: RequestOptions,
  ): Promise<components.ChangeEntity> {
    return unwrapAsync(changesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List change events
   *
   * @remarks
   * List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it
   */
  async listEvents(
    request: operations.ListChangeEventsRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventSlimEntityPaginated> {
    return unwrapAsync(changesListEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a change event
   *
   * @remarks
   * Create a change event
   */
  async createEvent(
    request: components.ChangesEvents,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(changesCreateEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a change event
   *
   * @remarks
   * Retrieve a change event
   */
  async getEvent(
    request: operations.GetChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(changesGetEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a change event
   *
   * @remarks
   * Delete a change event
   */
  async deleteEvent(
    request: operations.DeleteChangeEventRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesDeleteEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a change event
   *
   * @remarks
   * Update a change event
   */
  async updateEvent(
    request: operations.UpdateChangeEventRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(changesUpdateEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a change
   *
   * @remarks
   * Archive a change entry
   */
  async delete(
    request: operations.DeleteChangeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a change
   *
   * @remarks
   * Update a change entry
   */
  async update(
    request: operations.UpdateChangeRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEntity> {
    return unwrapAsync(changesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List identities for a change
   *
   * @remarks
   * Retrieve all identities for the change
   */
  async listIdentities(
    request: operations.ListChangeIdentitiesRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeIdentityEntityPaginated> {
    return unwrapAsync(changesListIdentities(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an identity for a change
   *
   * @remarks
   * Create an identity for this change
   */
  async createIdentity(
    request: operations.CreateChangeIdentityRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeIdentityEntity> {
    return unwrapAsync(changesCreateIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an identity from a change
   *
   * @remarks
   * Delete an identity
   */
  async deleteIdentity(
    request: operations.DeleteChangeIdentityRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(changesDeleteIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an identity for a change
   *
   * @remarks
   * Update an identity
   */
  async updateIdentity(
    request: operations.UpdateChangeIdentityRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeIdentityEntity> {
    return unwrapAsync(changesUpdateIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a scheduled maintenance event
   *
   * @remarks
   * Fetch the details of a scheduled maintenance event.
   */
  async get(
    request: operations.GetScheduledMaintenanceRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduledMaintenanceEntity> {
    return unwrapAsync(changesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a scheduled maintenance event
   *
   * @remarks
   * Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.
   */
  async updateScheduledMaintenance(
    request: operations.UpdateScheduledMaintenanceRequest,
    options?: RequestOptions,
  ): Promise<components.ScheduledMaintenanceEntity> {
    return unwrapAsync(changesUpdateScheduledMaintenance(
      this,
      request,
      options,
    ));
  }
}
