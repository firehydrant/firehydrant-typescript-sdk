/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsReportingCreateMeasurementDefinition } from "../funcs/metricsReportingCreateMeasurementDefinition.js";
import { metricsReportingCreateSavedSearch } from "../funcs/metricsReportingCreateSavedSearch.js";
import { metricsReportingDeleteMeasurementDefinition } from "../funcs/metricsReportingDeleteMeasurementDefinition.js";
import { metricsReportingGetMeanTime } from "../funcs/metricsReportingGetMeanTime.js";
import { metricsReportingGetMeasurementDefinition } from "../funcs/metricsReportingGetMeasurementDefinition.js";
import { metricsReportingListIncidentMetrics } from "../funcs/metricsReportingListIncidentMetrics.js";
import { metricsReportingListInfrastructureMetrics } from "../funcs/metricsReportingListInfrastructureMetrics.js";
import { metricsReportingListMeasurementDefinitions } from "../funcs/metricsReportingListMeasurementDefinitions.js";
import { metricsReportingListRetrospectives } from "../funcs/metricsReportingListRetrospectives.js";
import { metricsReportingListSavedSearches } from "../funcs/metricsReportingListSavedSearches.js";
import { metricsReportingListUserInvolvementMetrics } from "../funcs/metricsReportingListUserInvolvementMetrics.js";
import { metricsReportingUpdateMeasurementDefinition } from "../funcs/metricsReportingUpdateMeasurementDefinition.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MetricsReporting extends ClientSDK {
  /**
   * List measurement definitions
   *
   * @remarks
   * List all of the measurement definitions in the organization
   */
  async listMeasurementDefinitions(
    request: operations.ListMeasurementDefinitionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsReportingListMeasurementDefinitions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a measurement definition
   *
   * @remarks
   * Create a new measurement definition
   */
  async createMeasurementDefinition(
    request: operations.CreateMeasurementDefinitionRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsReportingCreateMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a measurement definition
   *
   * @remarks
   * Retrieve a single measurement definition from its ID
   */
  async getMeasurementDefinition(
    request: operations.GetMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsReportingGetMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a measurement definition
   *
   * @remarks
   * Archives a measurement definition which will hide it from lists and metrics
   */
  async deleteMeasurementDefinition(
    request: operations.DeleteMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsReportingDeleteMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a measurement definition
   *
   * @remarks
   * Update a single measurement definition from its ID
   */
  async updateMeasurementDefinition(
    request: operations.UpdateMeasurementDefinitionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsReportingUpdateMeasurementDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident metrics and analytics
   *
   * @remarks
   * Returns a report with time bucketed analytics data
   */
  async listIncidentMetrics(
    request: operations.ListIncidentMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsMetricsEntity> {
    return unwrapAsync(metricsReportingListIncidentMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective metrics for a date range
   *
   * @remarks
   * Returns a report with retrospective analytics data
   */
  async listRetrospectives(
    request: operations.ListRetrospectiveMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsRetrospectiveEntity> {
    return unwrapAsync(metricsReportingListRetrospectives(
      this,
      request,
      options,
    ));
  }

  /**
   * List user involvement metrics
   *
   * @remarks
   * Returns a report with time bucketed analytics data
   */
  async listUserInvolvementMetrics(
    request: operations.ListUserInvolvementMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsMetricsEntity> {
    return unwrapAsync(metricsReportingListUserInvolvementMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List metrics for all services, environments, functionalities, or customers
   *
   * @remarks
   * Returns metrics for all components of a given type
   */
  async listInfrastructureMetrics(
    request: operations.ListInfrastructureMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsInfrastructureListEntity> {
    return unwrapAsync(metricsReportingListInfrastructureMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get mean time metrics for incidents
   *
   * @remarks
   * Returns a report with time bucketed analytics data
   */
  async getMeanTime(
    request: operations.GetMeanTimeReportRequest,
    options?: RequestOptions,
  ): Promise<components.ReportEntity> {
    return unwrapAsync(metricsReportingGetMeanTime(
      this,
      request,
      options,
    ));
  }

  /**
   * List saved searches
   *
   * @remarks
   * Lists save searches
   */
  async listSavedSearches(
    request: operations.ListSavedSearchesRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(metricsReportingListSavedSearches(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a saved search
   *
   * @remarks
   * Create a new saved search for a particular resource type
   */
  async createSavedSearch(
    request: operations.CreateSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(metricsReportingCreateSavedSearch(
      this,
      request,
      options,
    ));
  }
}
