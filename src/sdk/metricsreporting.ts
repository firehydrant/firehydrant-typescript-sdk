/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsReportingCreateSavedSearch } from "../funcs/metricsReportingCreateSavedSearch.js";
import { metricsReportingDeleteSavedSearch } from "../funcs/metricsReportingDeleteSavedSearch.js";
import { metricsReportingGetMeanTimeReport } from "../funcs/metricsReportingGetMeanTimeReport.js";
import { metricsReportingGetSavedSearch } from "../funcs/metricsReportingGetSavedSearch.js";
import { metricsReportingGetSignalsGroupedMetrics } from "../funcs/metricsReportingGetSignalsGroupedMetrics.js";
import { metricsReportingGetSignalsMttxAnalytics } from "../funcs/metricsReportingGetSignalsMttxAnalytics.js";
import { metricsReportingGetSignalsNoiseAnalytics } from "../funcs/metricsReportingGetSignalsNoiseAnalytics.js";
import { metricsReportingGetSignalsTimeseriesAnalytics } from "../funcs/metricsReportingGetSignalsTimeseriesAnalytics.js";
import { metricsReportingListIncidentMetrics } from "../funcs/metricsReportingListIncidentMetrics.js";
import { metricsReportingListInfrastructureMetrics } from "../funcs/metricsReportingListInfrastructureMetrics.js";
import { metricsReportingListInfrastructureTypeMetrics } from "../funcs/metricsReportingListInfrastructureTypeMetrics.js";
import { metricsReportingListRetrospectiveMetrics } from "../funcs/metricsReportingListRetrospectiveMetrics.js";
import { metricsReportingListSavedSearches } from "../funcs/metricsReportingListSavedSearches.js";
import { metricsReportingListUserInvolvementMetrics } from "../funcs/metricsReportingListUserInvolvementMetrics.js";
import { metricsReportingUpdateSavedSearch } from "../funcs/metricsReportingUpdateSavedSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MetricsReporting extends ClientSDK {
  /**
   * Get mean time metrics for incidents
   *
   * @remarks
   * Returns a report with time bucketed analytics data
   */
  async getMeanTimeReport(
    request: operations.GetMeanTimeReportRequest,
    options?: RequestOptions,
  ): Promise<components.ReportEntity> {
    return unwrapAsync(metricsReportingGetMeanTimeReport(
      this,
      request,
      options,
    ));
  }

  /**
   * List retrospective metrics
   *
   * @remarks
   * Returns a report with retrospective analytics data
   */
  async listRetrospectiveMetrics(
    request: operations.ListRetrospectiveMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsRetrospectiveEntity> {
    return unwrapAsync(metricsReportingListRetrospectiveMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List user metrics
   *
   * @remarks
   * Returns a report with time bucketed analytics data
   */
  async listUserInvolvementMetrics(
    request: operations.ListUserInvolvementMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsMetricsEntity> {
    return unwrapAsync(metricsReportingListUserInvolvementMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List incident metrics and analytics
   *
   * @remarks
   * Returns a report with time bucketed analytics data
   */
  async listIncidentMetrics(
    request: operations.ListIncidentMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsMetricsEntity> {
    return unwrapAsync(metricsReportingListIncidentMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * List metrics for a component type
   *
   * @remarks
   * Returns metrics for all components of a given type
   */
  async listInfrastructureTypeMetrics(
    request: operations.ListInfrastructureTypeMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsInfrastructureListEntity> {
    return unwrapAsync(metricsReportingListInfrastructureTypeMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metrics for a component
   *
   * @remarks
   * Return metrics for a specific component
   */
  async listInfrastructureMetrics(
    request: operations.ListInfrastructureMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsInfrastructureMetricsEntity> {
    return unwrapAsync(metricsReportingListInfrastructureMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a saved search
   *
   * @remarks
   * Retrieve a specific save search
   */
  async getSavedSearch(
    request: operations.GetSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(metricsReportingGetSavedSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a saved search
   *
   * @remarks
   * Delete a specific saved search
   */
  async deleteSavedSearch(
    request: operations.DeleteSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsReportingDeleteSavedSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a saved search
   *
   * @remarks
   * Update a specific saved search
   */
  async updateSavedSearch(
    request: operations.UpdateSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(metricsReportingUpdateSavedSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * List saved searches
   *
   * @remarks
   * Lists saved searches
   */
  async listSavedSearches(
    request: operations.ListSavedSearchesRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(metricsReportingListSavedSearches(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a saved search
   *
   * @remarks
   * Create a new saved search for a particular resource type
   */
  async createSavedSearch(
    request: operations.CreateSavedSearchRequest,
    options?: RequestOptions,
  ): Promise<components.SavedSearchEntity> {
    return unwrapAsync(metricsReportingCreateSavedSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate timeseries alert metrics
   *
   * @remarks
   * Generate a timeseries-based report of metrics for Signals alerts
   */
  async getSignalsTimeseriesAnalytics(
    request: operations.GetSignalsTimeseriesAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIAnalyticsTimeseriesPointEntity> {
    return unwrapAsync(metricsReportingGetSignalsTimeseriesAnalytics(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate grouped alert metrics
   *
   * @remarks
   * Generate a report of grouped metrics for Signals alerts
   */
  async getSignalsGroupedMetrics(
    request: operations.GetSignalsGroupedMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIAnalyticsGroupedMetricsEntity> {
    return unwrapAsync(metricsReportingGetSignalsGroupedMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get MTTX analytics for signals
   *
   * @remarks
   * Get mean-time-to-acknowledged (MTTA) and mean-time-to-resolved (MTTR) metrics for Signals alerts
   */
  async getSignalsMttxAnalytics(
    request: operations.GetSignalsMttxAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIAnalyticsMttxMetricsEntity> {
    return unwrapAsync(metricsReportingGetSignalsMttxAnalytics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get noise analytics for signals
   *
   * @remarks
   * Get noise metrics for Signals alerts
   */
  async getSignalsNoiseAnalytics(
    request: operations.GetSignalsNoiseAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<components.SignalsAPIAnalyticsNoiseMetricsEntity> {
    return unwrapAsync(metricsReportingGetSignalsNoiseAnalytics(
      this,
      request,
      options,
    ));
  }
}
