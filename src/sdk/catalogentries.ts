/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { catalogEntriesCreateEnvironment } from "../funcs/catalogEntriesCreateEnvironment.js";
import { catalogEntriesCreateFunctionality } from "../funcs/catalogEntriesCreateFunctionality.js";
import { catalogEntriesCreateService } from "../funcs/catalogEntriesCreateService.js";
import { catalogEntriesCreateServiceChecklistResponse } from "../funcs/catalogEntriesCreateServiceChecklistResponse.js";
import { catalogEntriesCreateServiceDependency } from "../funcs/catalogEntriesCreateServiceDependency.js";
import { catalogEntriesCreateServiceLinks } from "../funcs/catalogEntriesCreateServiceLinks.js";
import { catalogEntriesDeleteEnvironment } from "../funcs/catalogEntriesDeleteEnvironment.js";
import { catalogEntriesDeleteFunctionality } from "../funcs/catalogEntriesDeleteFunctionality.js";
import { catalogEntriesDeleteService } from "../funcs/catalogEntriesDeleteService.js";
import { catalogEntriesDeleteServiceDependency } from "../funcs/catalogEntriesDeleteServiceDependency.js";
import { catalogEntriesDeleteServiceLink } from "../funcs/catalogEntriesDeleteServiceLink.js";
import { catalogEntriesGetEnvironment } from "../funcs/catalogEntriesGetEnvironment.js";
import { catalogEntriesGetFunctionality } from "../funcs/catalogEntriesGetFunctionality.js";
import { catalogEntriesGetService } from "../funcs/catalogEntriesGetService.js";
import { catalogEntriesGetServiceDependencies } from "../funcs/catalogEntriesGetServiceDependencies.js";
import { catalogEntriesGetServiceDependency } from "../funcs/catalogEntriesGetServiceDependency.js";
import { catalogEntriesIngestCatalogData } from "../funcs/catalogEntriesIngestCatalogData.js";
import { catalogEntriesListEnvironments } from "../funcs/catalogEntriesListEnvironments.js";
import { catalogEntriesListFunctionalities } from "../funcs/catalogEntriesListFunctionalities.js";
import { catalogEntriesListFunctionalityServices } from "../funcs/catalogEntriesListFunctionalityServices.js";
import { catalogEntriesListInfrastructures } from "../funcs/catalogEntriesListInfrastructures.js";
import { catalogEntriesListServiceAvailableDownstreamDependencies } from "../funcs/catalogEntriesListServiceAvailableDownstreamDependencies.js";
import { catalogEntriesListServiceAvailableUpstreamDependencies } from "../funcs/catalogEntriesListServiceAvailableUpstreamDependencies.js";
import { catalogEntriesListServices } from "../funcs/catalogEntriesListServices.js";
import { catalogEntriesListUserOwnedServices } from "../funcs/catalogEntriesListUserOwnedServices.js";
import { catalogEntriesRefreshCatalog } from "../funcs/catalogEntriesRefreshCatalog.js";
import { catalogEntriesUpdateEnvironment } from "../funcs/catalogEntriesUpdateEnvironment.js";
import { catalogEntriesUpdateFunctionality } from "../funcs/catalogEntriesUpdateFunctionality.js";
import { catalogEntriesUpdateService } from "../funcs/catalogEntriesUpdateService.js";
import { catalogEntriesUpdateServiceDependency } from "../funcs/catalogEntriesUpdateServiceDependency.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CatalogEntries extends ClientSDK {
  /**
   * List environments
   *
   * @remarks
   * List all of the environments that have been added to the organiation
   */
  async listEnvironments(
    request: operations.ListEnvironmentsRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntityPaginated> {
    return unwrapAsync(catalogEntriesListEnvironments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an environment
   *
   * @remarks
   * Creates an environment for the organization
   */
  async createEnvironment(
    request: components.CreateEnvironment,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(catalogEntriesCreateEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an environment
   *
   * @remarks
   * Retrieves a single environment by ID
   */
  async getEnvironment(
    request: operations.GetEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(catalogEntriesGetEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive an environment
   *
   * @remarks
   * Archive an environment
   */
  async deleteEnvironment(
    request: operations.DeleteEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesDeleteEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an environment
   *
   * @remarks
   * Update a environments attributes
   */
  async updateEnvironment(
    request: operations.UpdateEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.EnvironmentEntryEntity> {
    return unwrapAsync(catalogEntriesUpdateEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * List services
   *
   * @remarks
   * List all of the services that have been added to the organization.
   */
  async listServices(
    request: operations.ListServicesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntityPaginated> {
    return unwrapAsync(catalogEntriesListServices(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a service
   *
   * @remarks
   * Creates a service for the organization, you may also create or attach functionalities to the service on create.
   */
  async createService(
    request: components.CreateService,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(catalogEntriesCreateService(
      this,
      request,
      options,
    ));
  }

  /**
   * Create multiple services linked to external services
   *
   * @remarks
   * Creates a service with the appropriate integration for each external service ID passed
   */
  async createServiceLinks(
    request: components.CreateServiceLinks,
    options?: RequestOptions,
  ): Promise<Array<components.ServiceLinkEntity>> {
    return unwrapAsync(catalogEntriesCreateServiceLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a service
   *
   * @remarks
   * Retrieves a single service by ID
   */
  async getService(
    request: operations.GetServiceRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(catalogEntriesGetService(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a service
   *
   * @remarks
   * Deletes the service from FireHydrant.
   */
  async deleteService(
    request: operations.DeleteServiceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesDeleteService(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a service
   *
   * @remarks
   * Update a services attributes, you may also add or remove functionalities from the service as well.
   * Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
   */
  async updateService(
    request: operations.UpdateServiceRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntity> {
    return unwrapAsync(catalogEntriesUpdateService(
      this,
      request,
      options,
    ));
  }

  /**
   * List dependencies for a service
   *
   * @remarks
   * Retrieves a service's dependencies
   */
  async getServiceDependencies(
    request: operations.GetServiceDependenciesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceWithAllDependenciesEntity> {
    return unwrapAsync(catalogEntriesGetServiceDependencies(
      this,
      request,
      options,
    ));
  }

  /**
   * List available upstream service dependencies
   *
   * @remarks
   * Retrieves all services that are available to be upstream dependencies
   */
  async listServiceAvailableUpstreamDependencies(
    request: operations.ListServiceAvailableUpstreamDependenciesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntityLite> {
    return unwrapAsync(catalogEntriesListServiceAvailableUpstreamDependencies(
      this,
      request,
      options,
    ));
  }

  /**
   * List available downstream service dependencies
   *
   * @remarks
   * Retrieves all services that are available to be downstream dependencies
   */
  async listServiceAvailableDownstreamDependencies(
    request: operations.ListServiceAvailableDownstreamDependenciesRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceEntityLite> {
    return unwrapAsync(catalogEntriesListServiceAvailableDownstreamDependencies(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a service link
   *
   * @remarks
   * Deletes a service link from FireHydrant.
   */
  async deleteServiceLink(
    request: operations.DeleteServiceLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesDeleteServiceLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Record a response for a checklist item
   *
   * @remarks
   * Creates a response for a checklist item
   */
  async createServiceChecklistResponse(
    request: operations.CreateServiceChecklistResponseRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesCreateServiceChecklistResponse(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a service dependency
   *
   * @remarks
   * Creates a service dependency relationship between two services
   */
  async createServiceDependency(
    request: components.CreateServiceDependency,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(catalogEntriesCreateServiceDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a service dependency
   *
   * @remarks
   * Retrieves a single service dependency by ID
   */
  async getServiceDependency(
    request: operations.GetServiceDependencyRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(catalogEntriesGetServiceDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a service dependency
   *
   * @remarks
   * Deletes a single service dependency
   */
  async deleteServiceDependency(
    request: operations.DeleteServiceDependencyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesDeleteServiceDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a service dependency
   *
   * @remarks
   * Update the notes of the service dependency
   */
  async updateServiceDependency(
    request: operations.UpdateServiceDependencyRequest,
    options?: RequestOptions,
  ): Promise<components.ServiceDependencyEntity> {
    return unwrapAsync(catalogEntriesUpdateServiceDependency(
      this,
      request,
      options,
    ));
  }

  /**
   * List functionalities
   *
   * @remarks
   * List all of the functionalities that have been added to the organiation
   */
  async listFunctionalities(
    request: operations.ListFunctionalitiesRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntityPaginated> {
    return unwrapAsync(catalogEntriesListFunctionalities(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a functionality
   *
   * @remarks
   * Creates a functionality for the organization
   */
  async createFunctionality(
    request: components.CreateFunctionality,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(catalogEntriesCreateFunctionality(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a functionality
   *
   * @remarks
   * Retrieves a single functionality by ID
   */
  async getFunctionality(
    request: operations.GetFunctionalityRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(catalogEntriesGetFunctionality(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a functionality
   *
   * @remarks
   * Archive a functionality
   */
  async deleteFunctionality(
    request: operations.DeleteFunctionalityRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesDeleteFunctionality(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a functionality
   *
   * @remarks
   * Update a functionalities attributes
   */
  async updateFunctionality(
    request: operations.UpdateFunctionalityRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(catalogEntriesUpdateFunctionality(
      this,
      request,
      options,
    ));
  }

  /**
   * List services for a functionality
   *
   * @remarks
   * List services for a functionality
   */
  async listFunctionalityServices(
    request: operations.ListFunctionalityServicesRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityWithAllServicesEntity> {
    return unwrapAsync(catalogEntriesListFunctionalityServices(
      this,
      request,
      options,
    ));
  }

  /**
   * List services owned by a user's teams
   *
   * @remarks
   * Retrieves a list of services owned by the teams a user is on
   */
  async listUserOwnedServices(
    request: operations.ListUserOwnedServicesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.TeamEntityPaginated>> {
    return unwrapAsync(catalogEntriesListUserOwnedServices(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists functionality, service and environment objects
   *
   * @remarks
   * Lists functionality, service and environment objects
   */
  async listInfrastructures(
    request: operations.ListInfrastructuresRequest,
    options?: RequestOptions,
  ): Promise<components.InfrastructureSearchEntity> {
    return unwrapAsync(catalogEntriesListInfrastructures(
      this,
      request,
      options,
    ));
  }

  /**
   * Refresh a service catalog
   *
   * @remarks
   * Schedules an async task to re-import catalog info and update catalog data accordingly.
   */
  async refreshCatalog(
    request: operations.RefreshCatalogRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(catalogEntriesRefreshCatalog(
      this,
      request,
      options,
    ));
  }

  /**
   * Ingest service catalog data
   *
   * @remarks
   * Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.
   */
  async ingestCatalogData(
    request: operations.IngestCatalogDataRequest,
    options?: RequestOptions,
  ): Promise<components.ImportsImportEntity> {
    return unwrapAsync(catalogEntriesIngestCatalogData(
      this,
      request,
      options,
    ));
  }
}
