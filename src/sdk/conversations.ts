/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { conversationsCreateComment } from "../funcs/conversationsCreateComment.js";
import { conversationsCreateCommentReaction } from "../funcs/conversationsCreateCommentReaction.js";
import { conversationsDeleteComment } from "../funcs/conversationsDeleteComment.js";
import { conversationsDeleteCommentReaction } from "../funcs/conversationsDeleteCommentReaction.js";
import { conversationsGetComment } from "../funcs/conversationsGetComment.js";
import { conversationsGetVoteStatus } from "../funcs/conversationsGetVoteStatus.js";
import { conversationsListCommentReactions } from "../funcs/conversationsListCommentReactions.js";
import { conversationsListComments } from "../funcs/conversationsListComments.js";
import { conversationsUpdateComment } from "../funcs/conversationsUpdateComment.js";
import { conversationsUpdateVote } from "../funcs/conversationsUpdateVote.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Conversations extends ClientSDK {
  /**
   * Get votes
   *
   * @remarks
   * Get an object's current vote counts
   */
  async getVoteStatus(
    request: operations.GetVoteStatusRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(conversationsGetVoteStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Update votes
   *
   * @remarks
   * Upvote or downvote an object
   */
  async updateVote(
    request: operations.UpdateVoteRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(conversationsUpdateVote(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a reaction from a conversation comment
   *
   * @remarks
   * Archive a reaction
   */
  async deleteCommentReaction(
    request: operations.DeleteCommentReactionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsDeleteCommentReaction(
      this,
      request,
      options,
    ));
  }

  /**
   * List reactions for a conversation comment
   *
   * @remarks
   * List all of the reactions that have been added to a comment
   */
  async listCommentReactions(
    request: operations.ListCommentReactionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsListCommentReactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a reaction for a conversation comment
   *
   * @remarks
   * Create a reaction on a comment
   */
  async createCommentReaction(
    request: operations.CreateCommentReactionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsCreateCommentReaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a conversation comment
   *
   * @remarks
   * Retrieves a single comment by ID
   */
  async getComment(
    request: operations.GetCommentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsGetComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a conversation comment
   *
   * @remarks
   * Archive a comment
   */
  async deleteComment(
    request: operations.DeleteCommentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsDeleteComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a conversation comment
   *
   * @remarks
   * Update a comment's attributes
   */
  async updateComment(
    request: operations.UpdateCommentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsUpdateComment(
      this,
      request,
      options,
    ));
  }

  /**
   * List comments for a conversation
   *
   * @remarks
   * List all of the comments that have been added to the organization
   */
  async listComments(
    request: operations.ListCommentsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsListComments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a conversation comment
   *
   * @remarks
   * Creates a comment for a project
   */
  async createComment(
    request: operations.CreateCommentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(conversationsCreateComment(
      this,
      request,
      options,
    ));
  }
}
