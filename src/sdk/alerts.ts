/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { alertsCreateIncidentAlert } from "../funcs/alertsCreateIncidentAlert.js";
import { alertsDeleteIncidentAlert } from "../funcs/alertsDeleteIncidentAlert.js";
import { alertsGetAlert } from "../funcs/alertsGetAlert.js";
import { alertsListAlerts } from "../funcs/alertsListAlerts.js";
import { alertsListIncidentAlerts } from "../funcs/alertsListIncidentAlerts.js";
import { alertsListProcessingLogEntries } from "../funcs/alertsListProcessingLogEntries.js";
import { alertsUpdateIncidentAlertPrimary } from "../funcs/alertsUpdateIncidentAlertPrimary.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Alerts extends ClientSDK {
  /**
   * List alerts for an incident
   *
   * @remarks
   * List alerts that have been attached to an incident
   */
  async listIncidentAlerts(
    request: operations.ListIncidentAlertsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsAlertEntityPaginated> {
    return unwrapAsync(alertsListIncidentAlerts(
      this,
      request,
      options,
    ));
  }

  /**
   * Attach an alert to an incident
   *
   * @remarks
   * Add an alert to an incident. FireHydrant needs to have ingested the alert from a third party system in order to attach it to the incident.
   */
  async createIncidentAlert(
    request: operations.CreateIncidentAlertRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(alertsCreateIncidentAlert(
      this,
      request,
      options,
    ));
  }

  /**
   * Set an alert as primary for an incident
   *
   * @remarks
   * Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.
   */
  async updateIncidentAlertPrimary(
    request: operations.UpdateIncidentAlertPrimaryRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsAlertEntity> {
    return unwrapAsync(alertsUpdateIncidentAlertPrimary(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an alert from an incident
   *
   * @remarks
   * Remove an alert from an incident
   */
  async deleteIncidentAlert(
    request: operations.DeleteIncidentAlertRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(alertsDeleteIncidentAlert(
      this,
      request,
      options,
    ));
  }

  /**
   * List alerts
   *
   * @remarks
   * Retrieve all alerts from third parties
   */
  async listAlerts(
    request: operations.ListAlertsRequest,
    options?: RequestOptions,
  ): Promise<components.AlertsAlertEntityPaginated> {
    return unwrapAsync(alertsListAlerts(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an alert
   *
   * @remarks
   * Retrieve a single alert
   */
  async getAlert(
    request: operations.GetAlertRequest,
    options?: RequestOptions,
  ): Promise<components.AlertsAlertEntity> {
    return unwrapAsync(alertsGetAlert(
      this,
      request,
      options,
    ));
  }

  /**
   * List alert processing log entries
   *
   * @remarks
   * Processing Log Entries for a specific alert
   */
  async listProcessingLogEntries(
    request: operations.ListProcessingLogEntriesRequest,
    options?: RequestOptions,
  ): Promise<components.AlertsProcessingLogEntryEntityPaginated> {
    return unwrapAsync(alertsListProcessingLogEntries(
      this,
      request,
      options,
    ));
  }
}
