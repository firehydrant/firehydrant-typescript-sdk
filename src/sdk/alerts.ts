/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { alertsCreate } from "../funcs/alertsCreate.js";
import { alertsGet } from "../funcs/alertsGet.js";
import { alertsList } from "../funcs/alertsList.js";
import { alertsListForIncident } from "../funcs/alertsListForIncident.js";
import { alertsListProcessingLogs } from "../funcs/alertsListProcessingLogs.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Alerts extends ClientSDK {
  /**
   * List alerts
   *
   * @remarks
   * Retrieve all alerts from third parties
   */
  async list(
    request: operations.ListAlertsRequest,
    options?: RequestOptions,
  ): Promise<components.AlertsAlertEntityPaginated> {
    return unwrapAsync(alertsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an alert
   *
   * @remarks
   * Retrieve a single alert
   */
  async get(
    request: operations.GetAlertRequest,
    options?: RequestOptions,
  ): Promise<components.AlertsAlertEntity> {
    return unwrapAsync(alertsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List alerts for an incident
   *
   * @remarks
   * List alerts that have been attached to an incident
   */
  async listForIncident(
    request: operations.ListIncidentAlertsRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentsAlertEntityPaginated> {
    return unwrapAsync(alertsListForIncident(
      this,
      request,
      options,
    ));
  }

  /**
   * Attach alerts to an incident
   *
   * @remarks
   * Add an alert to an incident. FireHydrant needs to have ingested the alert from a third party system in order to attach it to the incident.
   */
  async create(
    request: operations.CreateIncidentAlertsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(alertsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List alert processing log entries
   *
   * @remarks
   * Processing Log Entries for a specific alert
   */
  async listProcessingLogs(
    request: operations.ListAlertProcessingLogsRequest,
    options?: RequestOptions,
  ): Promise<components.AlertsProcessingLogEntryEntityPaginated> {
    return unwrapAsync(alertsListProcessingLogs(
      this,
      request,
      options,
    ));
  }
}
