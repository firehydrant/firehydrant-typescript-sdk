/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { runbooksCreateRunbook } from "../funcs/runbooksCreateRunbook.js";
import { runbooksCreateRunbookExecution } from "../funcs/runbooksCreateRunbookExecution.js";
import { runbooksDeleteRunbook } from "../funcs/runbooksDeleteRunbook.js";
import { runbooksDeleteRunbookExecution } from "../funcs/runbooksDeleteRunbookExecution.js";
import { runbooksGetRunbook } from "../funcs/runbooksGetRunbook.js";
import { runbooksGetRunbookActionFieldOptions } from "../funcs/runbooksGetRunbookActionFieldOptions.js";
import { runbooksGetRunbookExecution } from "../funcs/runbooksGetRunbookExecution.js";
import { runbooksGetRunbookExecutionStepScript } from "../funcs/runbooksGetRunbookExecutionStepScript.js";
import { runbooksListRunbookActions } from "../funcs/runbooksListRunbookActions.js";
import { runbooksListRunbookAudits } from "../funcs/runbooksListRunbookAudits.js";
import { runbooksListRunbookExecutions } from "../funcs/runbooksListRunbookExecutions.js";
import { runbooksListRunbooks } from "../funcs/runbooksListRunbooks.js";
import { runbooksUpdateRunbook } from "../funcs/runbooksUpdateRunbook.js";
import { runbooksUpdateRunbookExecutionStep } from "../funcs/runbooksUpdateRunbookExecutionStep.js";
import { runbooksUpdateRunbookExecutionStepScript } from "../funcs/runbooksUpdateRunbookExecutionStepScript.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Runbooks extends ClientSDK {
  /**
   * List runbook actions
   *
   * @remarks
   * List all runbook actions available through your connected integrations
   */
  async listRunbookActions(
    request: operations.ListRunbookActionsRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksActionsEntityPaginated> {
    return unwrapAsync(runbooksListRunbookActions(
      this,
      request,
      options,
    ));
  }

  /**
   * List runbook executions
   *
   * @remarks
   * List all runbook executions across all runbooks
   */
  async listRunbookExecutions(
    request: operations.ListRunbookExecutionsRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntityPaginated> {
    return unwrapAsync(runbooksListRunbookExecutions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a runbook execution
   *
   * @remarks
   * Attaches a runbook to an incident and executes it
   */
  async createRunbookExecution(
    request: components.CreateRunbookExecution,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksCreateRunbookExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a runbook execution
   *
   * @remarks
   * Retrieve a runbook execution by ID
   */
  async getRunbookExecution(
    request: operations.GetRunbookExecutionRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksGetRunbookExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Terminate a runbook execution
   *
   * @remarks
   * Terminates a runbook execution, preventing any further steps from being executed
   */
  async deleteRunbookExecution(
    request: operations.DeleteRunbookExecutionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(runbooksDeleteRunbookExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a runbook step execution
   *
   * @remarks
   * Updates a runbook step execution, especially for changing the state of a step execution.
   */
  async updateRunbookExecutionStep(
    request: operations.UpdateRunbookExecutionStepRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksUpdateRunbookExecutionStep(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a step's bash script
   *
   * @remarks
   * Retrieves the bash script from a "script" step.
   */
  async getRunbookExecutionStepScript(
    request: operations.GetRunbookExecutionStepScriptRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksGetRunbookExecutionStepScript(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a script step's execution status
   *
   * @remarks
   * Updates the execution's step.
   */
  async updateRunbookExecutionStepScript(
    request: operations.UpdateRunbookExecutionStepScriptRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksUpdateRunbookExecutionStepScript(
      this,
      request,
      options,
    ));
  }

  /**
   * List select options for a runbook integration action field
   *
   * @remarks
   * List select options for a runbook integration action field
   */
  async getRunbookActionFieldOptions(
    request: operations.GetRunbookActionFieldOptionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(runbooksGetRunbookActionFieldOptions(
      this,
      request,
      options,
    ));
  }

  /**
   * List runbooks
   *
   * @remarks
   * Lists all available runbooks.
   */
  async listRunbooks(
    request: operations.ListRunbooksRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksListRunbooks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a runbook
   *
   * @remarks
   * Create a new runbook for use with incidents.
   */
  async createRunbook(
    request: components.CreateRunbook,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksCreateRunbook(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a runbook
   *
   * @remarks
   * Get a runbook and all its configuration
   */
  async getRunbook(
    request: operations.GetRunbookRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksGetRunbook(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a runbook
   *
   * @remarks
   * Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
   * about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
   */
  async updateRunbook(
    request: operations.UpdateRunbookRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksUpdateRunbook(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a runbook
   *
   * @remarks
   * Delete a runbook and make it unavailable for any future incidents.
   */
  async deleteRunbook(
    request: operations.DeleteRunbookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(runbooksDeleteRunbook(
      this,
      request,
      options,
    ));
  }

  /**
   * List runbook audits
   *
   * @remarks
   * This endpoint is deprecated.
   */
  async listRunbookAudits(
    request: operations.ListRunbookAuditsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(runbooksListRunbookAudits(
      this,
      request,
      options,
    ));
  }
}
