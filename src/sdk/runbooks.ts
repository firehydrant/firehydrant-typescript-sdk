/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { runbooksCreate } from "../funcs/runbooksCreate.js";
import { runbooksCreateExecution } from "../funcs/runbooksCreateExecution.js";
import { runbooksDelete } from "../funcs/runbooksDelete.js";
import { runbooksGet } from "../funcs/runbooksGet.js";
import { runbooksGetExecution } from "../funcs/runbooksGetExecution.js";
import { runbooksGetExecutionStepScript } from "../funcs/runbooksGetExecutionStepScript.js";
import { runbooksGetExecutionVoteStatus } from "../funcs/runbooksGetExecutionVoteStatus.js";
import { runbooksGetStepVoteStatus } from "../funcs/runbooksGetStepVoteStatus.js";
import { runbooksList } from "../funcs/runbooksList.js";
import { runbooksListActions } from "../funcs/runbooksListActions.js";
import { runbooksListAudits } from "../funcs/runbooksListAudits.js";
import { runbooksListExecutions } from "../funcs/runbooksListExecutions.js";
import { runbooksListSelectOptions } from "../funcs/runbooksListSelectOptions.js";
import { runbooksUpdate } from "../funcs/runbooksUpdate.js";
import { runbooksUpdateExecutionStep } from "../funcs/runbooksUpdateExecutionStep.js";
import { runbooksUpdateExecutionStepScriptState } from "../funcs/runbooksUpdateExecutionStepScriptState.js";
import { runbooksUpdateExecutionStepVotes } from "../funcs/runbooksUpdateExecutionStepVotes.js";
import { runbooksUpdateExecutionVotes } from "../funcs/runbooksUpdateExecutionVotes.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Executions } from "./executions.js";

export class Runbooks extends ClientSDK {
  private _executions?: Executions;
  get executions(): Executions {
    return (this._executions ??= new Executions(this._options));
  }

  /**
   * List runbook audits
   *
   * @remarks
   * Please contact support to enable audit logging for your account.
   */
  async listAudits(
    request: operations.ListRunbookAuditsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(runbooksListAudits(
      this,
      request,
      options,
    ));
  }

  /**
   * List runbooks
   *
   * @remarks
   * Lists all available runbooks.
   */
  async list(
    request: operations.ListRunbooksRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a runbook
   *
   * @remarks
   * Create a new runbook for use with incidents.
   */
  async create(
    request: components.PostV1Runbooks,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List runbook actions
   *
   * @remarks
   * List all Runbook actions available through your connected integrations
   */
  async listActions(
    request: operations.ListRunbookActionsRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksActionsEntityPaginated> {
    return unwrapAsync(runbooksListActions(
      this,
      request,
      options,
    ));
  }

  /**
   * List runbook executions
   *
   * @remarks
   * List all Runbook executions across all Runbooks
   */
  async listExecutions(
    request: operations.ListRunbookExecutionsRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntityPaginated> {
    return unwrapAsync(runbooksListExecutions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a runbook execution
   *
   * @remarks
   * Attaches a runbook to an incident and executes it
   */
  async createExecution(
    request: components.PostV1RunbooksExecutions,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksCreateExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a runbook execution
   *
   * @remarks
   * Retrieve a runbook execution by ID
   */
  async getExecution(
    request: operations.GetRunbookExecutionRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksGetExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a runbook execution step
   *
   * @remarks
   * Updates a runbook step execution, especially for changing the state of a step execution.
   */
  async updateExecutionStep(
    request: operations.UpdateRunbookExecutionStepRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksUpdateExecutionStep(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a runbook execution step script
   *
   * @remarks
   * Retrieves the bash script from a "script" step.
   */
  async getExecutionStepScript(
    request: operations.GetRunbookExecutionStepScriptRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksGetExecutionStepScript(
      this,
      request,
      options,
    ));
  }

  /**
   * Update the script state for a runbook execution step
   *
   * @remarks
   * Updates the execution's step.
   */
  async updateExecutionStepScriptState(
    request: operations.UpdateRunbookExecutionStepScriptStateRequest,
    options?: RequestOptions,
  ): Promise<components.RunbooksExecutionEntity> {
    return unwrapAsync(runbooksUpdateExecutionStepScriptState(
      this,
      request,
      options,
    ));
  }

  /**
   * Update votes for a runbook execution step
   *
   * @remarks
   * Allows for upvoting or downvoting an event
   */
  async updateExecutionStepVotes(
    request: operations.UpdateRunbookExecutionStepVotesRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(runbooksUpdateExecutionStepVotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get vote counts for a runbook step
   *
   * @remarks
   * Returns the current vote counts for an object
   */
  async getStepVoteStatus(
    request: operations.GetRunbookStepVoteStatusRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(runbooksGetStepVoteStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Vote on a runbook execution
   *
   * @remarks
   * Allows for upvoting or downvoting an event
   */
  async updateExecutionVotes(
    request: operations.UpdateRunbookExecutionVotesRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(runbooksUpdateExecutionVotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get vote counts for a runbook execution
   *
   * @remarks
   * Returns the current vote counts for an object
   */
  async getExecutionVoteStatus(
    request: operations.GetRunbookExecutionVoteStatusRequest,
    options?: RequestOptions,
  ): Promise<components.VotesEntity> {
    return unwrapAsync(runbooksGetExecutionVoteStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * List select options for a runbook integration action field
   */
  async listSelectOptions(
    request: operations.GetRunbookSelectOptionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(runbooksListSelectOptions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a runbook
   *
   * @remarks
   * Get a runbook and all its configuration
   */
  async get(
    request: operations.GetRunbookRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a runbook
   *
   * @remarks
   * Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
   * about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
   */
  async update(
    request: operations.UpdateRunbookRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a runbook
   *
   * @remarks
   * Delete a runbook and make it unavailable for any future incidents.
   */
  async delete(
    request: operations.DeleteRunbookRequest,
    options?: RequestOptions,
  ): Promise<components.RunbookEntity> {
    return unwrapAsync(runbooksDelete(
      this,
      request,
      options,
    ));
  }
}
