/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { audiencesArchiveAudience } from "../funcs/audiencesArchiveAudience.js";
import { audiencesCreateAudience } from "../funcs/audiencesCreateAudience.js";
import { audiencesGenerateAudienceSummary } from "../funcs/audiencesGenerateAudienceSummary.js";
import { audiencesGetAudience } from "../funcs/audiencesGetAudience.js";
import { audiencesGetAudienceSummary } from "../funcs/audiencesGetAudienceSummary.js";
import { audiencesGetMemberDefaultAudience } from "../funcs/audiencesGetMemberDefaultAudience.js";
import { audiencesListAudiences } from "../funcs/audiencesListAudiences.js";
import { audiencesListAudienceSummaries } from "../funcs/audiencesListAudienceSummaries.js";
import { audiencesRestoreAudience } from "../funcs/audiencesRestoreAudience.js";
import { audiencesSetMemberDefaultAudience } from "../funcs/audiencesSetMemberDefaultAudience.js";
import { audiencesUpdateAudience } from "../funcs/audiencesUpdateAudience.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Audiences extends ClientSDK {
  /**
   * List audiences
   *
   * @remarks
   * List all audiences
   */
  async listAudiences(
    request: operations.ListAudiencesRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesListAudiences(
      this,
      request,
      options,
    ));
  }

  /**
   * Create audience
   *
   * @remarks
   * Create a new audience
   */
  async createAudience(
    request: operations.CreateAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesCreateAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Get audience
   *
   * @remarks
   * Get audience details
   */
  async getAudience(
    request: operations.GetAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesGetAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive audience
   *
   * @remarks
   * Archive an audience
   */
  async archiveAudience(
    request: operations.ArchiveAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesArchiveAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Update audience
   *
   * @remarks
   * Update an existing audience
   */
  async updateAudience(
    request: operations.UpdateAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesUpdateAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Restore audience
   *
   * @remarks
   * Restore a previously archived audience
   */
  async restoreAudience(
    request: operations.RestoreAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesRestoreAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Get default audience
   *
   * @remarks
   * Get member's default audience
   */
  async getMemberDefaultAudience(
    request: operations.GetMemberDefaultAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesGetMemberDefaultAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Set default audience
   *
   * @remarks
   * Set member's default audience
   */
  async setMemberDefaultAudience(
    request: operations.SetMemberDefaultAudienceRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceEntity> {
    return unwrapAsync(audiencesSetMemberDefaultAudience(
      this,
      request,
      options,
    ));
  }

  /**
   * Get latest summary
   *
   * @remarks
   * Get the latest audience-specific summary for an incident
   */
  async getAudienceSummary(
    request: operations.GetAudienceSummaryRequest,
    options?: RequestOptions,
  ): Promise<components.AIEntitiesIncidentSummaryEntity> {
    return unwrapAsync(audiencesGetAudienceSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate summary
   *
   * @remarks
   * Generate a new audience-specific summary for an incident
   */
  async generateAudienceSummary(
    request: operations.GenerateAudienceSummaryRequest,
    options?: RequestOptions,
  ): Promise<components.AIEntitiesIncidentSummaryEntity> {
    return unwrapAsync(audiencesGenerateAudienceSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * List audience summaries
   *
   * @remarks
   * List all audience summaries for an incident
   */
  async listAudienceSummaries(
    request: operations.ListAudienceSummariesRequest,
    options?: RequestOptions,
  ): Promise<components.AudiencesEntitiesAudienceSummariesEntity> {
    return unwrapAsync(audiencesListAudienceSummaries(
      this,
      request,
      options,
    ));
  }
}
