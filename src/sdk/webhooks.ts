/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksListDeliveries } from "../funcs/webhooksListDeliveries.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List webhooks
   *
   * @remarks
   * Lists webhooks
   */
  async list(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a webhook
   *
   * @remarks
   * Create a new webhook
   */
  async create(
    request: components.PostV1Webhooks,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a webhook
   *
   * @remarks
   * Retrieve a specific webhook
   */
  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook
   *
   * @remarks
   * Delete a specific webhook
   */
  async delete(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook
   *
   * @remarks
   * Update a specific webhook
   */
  async update(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List webhook deliveries
   */
  async listDeliveries(
    request: operations.ListWebhookDeliveriesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksListDeliveries(
      this,
      request,
      options,
    ));
  }
}
