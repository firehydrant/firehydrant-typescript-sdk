/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreateWebhook } from "../funcs/webhooksCreateWebhook.js";
import { webhooksDeleteWebhook } from "../funcs/webhooksDeleteWebhook.js";
import { webhooksGetWebhook } from "../funcs/webhooksGetWebhook.js";
import { webhooksListWebhookDeliveries } from "../funcs/webhooksListWebhookDeliveries.js";
import { webhooksListWebhooks } from "../funcs/webhooksListWebhooks.js";
import { webhooksUpdateWebhook } from "../funcs/webhooksUpdateWebhook.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List webhooks
   *
   * @remarks
   * Lists webhooks
   */
  async listWebhooks(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksListWebhooks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a webhook
   *
   * @remarks
   * Create a new webhook
   */
  async createWebhook(
    request: components.CreateWebhook,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksCreateWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * List webhook deliveries
   *
   * @remarks
   * Get webhook deliveries
   */
  async listWebhookDeliveries(
    request: operations.ListWebhookDeliveriesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksListWebhookDeliveries(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a webhook
   *
   * @remarks
   * Retrieve a specific webhook
   */
  async getWebhook(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksGetWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook
   *
   * @remarks
   * Delete a specific webhook
   */
  async deleteWebhook(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook
   *
   * @remarks
   * Update a specific webhook
   */
  async updateWebhook(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.WebhooksEntitiesWebhookEntity> {
    return unwrapAsync(webhooksUpdateWebhook(
      this,
      request,
      options,
    ));
  }
}
