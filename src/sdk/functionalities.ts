/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { functionalitiesCreate } from "../funcs/functionalitiesCreate.js";
import { functionalitiesDelete } from "../funcs/functionalitiesDelete.js";
import { functionalitiesGet } from "../funcs/functionalitiesGet.js";
import { functionalitiesList } from "../funcs/functionalitiesList.js";
import { functionalitiesListServices } from "../funcs/functionalitiesListServices.js";
import { functionalitiesUpdate } from "../funcs/functionalitiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Functionalities extends ClientSDK {
  /**
   * List functionalities
   *
   * @remarks
   * List all of the functionalities that have been added to the organiation
   */
  async list(
    request: operations.ListFunctionalitiesRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntityPaginated> {
    return unwrapAsync(functionalitiesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a functionality
   *
   * @remarks
   * Creates a functionality for the organization
   */
  async create(
    request: components.PostV1Functionalities,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(functionalitiesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a functionality
   *
   * @remarks
   * Retrieves a single functionality by ID
   */
  async get(
    request: operations.GetFunctionalityRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(functionalitiesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a functionality
   *
   * @remarks
   * Archive a functionality
   */
  async delete(
    request: operations.DeleteFunctionalityRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(functionalitiesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a functionality
   *
   * @remarks
   * Update a functionalities attributes
   */
  async update(
    request: operations.UpdateFunctionalityRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionalityEntity> {
    return unwrapAsync(functionalitiesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List services for a functionality
   */
  async listServices(
    request: operations.GetFunctionalityServicesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(functionalitiesListServices(
      this,
      request,
      options,
    ));
  }
}
