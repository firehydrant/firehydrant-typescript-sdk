/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rolesCreateRole } from "../funcs/rolesCreateRole.js";
import { rolesDeleteRole } from "../funcs/rolesDeleteRole.js";
import { rolesGetRole } from "../funcs/rolesGetRole.js";
import { rolesListRoles } from "../funcs/rolesListRoles.js";
import { rolesUpdateRole } from "../funcs/rolesUpdateRole.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Roles extends ClientSDK {
  /**
   * Get all roles
   *
   * @remarks
   * Get all roles in the organization
   */
  async listRoles(
    request: operations.ListRolesRequest,
    options?: RequestOptions,
  ): Promise<components.RoleEntityPaginated> {
    return unwrapAsync(rolesListRoles(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a role
   *
   * @remarks
   * Create a new role
   */
  async createRole(
    request: components.CreateRole,
    options?: RequestOptions,
  ): Promise<components.PublicApiv1RoleEntity> {
    return unwrapAsync(rolesCreateRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a role
   *
   * @remarks
   * Get a role
   */
  async getRole(
    request: operations.GetRoleRequest,
    options?: RequestOptions,
  ): Promise<components.PublicApiv1RoleEntity> {
    return unwrapAsync(rolesGetRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a role
   *
   * @remarks
   * Delete a role
   */
  async deleteRole(
    request: operations.DeleteRoleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(rolesDeleteRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a role
   *
   * @remarks
   * Update a role
   */
  async updateRole(
    request: operations.UpdateRoleRequest,
    options?: RequestOptions,
  ): Promise<components.PublicApiv1RoleEntity> {
    return unwrapAsync(rolesUpdateRole(
      this,
      request,
      options,
    ));
  }
}
