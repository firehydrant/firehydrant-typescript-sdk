/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { integrationsCreateConnection } from "../funcs/integrationsCreateConnection.js";
import { integrationsCreateSlackEmojiAction } from "../funcs/integrationsCreateSlackEmojiAction.js";
import { integrationsDeleteSlackEmojiAction } from "../funcs/integrationsDeleteSlackEmojiAction.js";
import { integrationsDeleteStatuspageConnection } from "../funcs/integrationsDeleteStatuspageConnection.js";
import { integrationsGetAwsCloudtrailBatch } from "../funcs/integrationsGetAwsCloudtrailBatch.js";
import { integrationsGetAwsConnection } from "../funcs/integrationsGetAwsConnection.js";
import { integrationsGetIntegration } from "../funcs/integrationsGetIntegration.js";
import { integrationsGetSlackEmojiAction } from "../funcs/integrationsGetSlackEmojiAction.js";
import { integrationsGetStatuspageConnection } from "../funcs/integrationsGetStatuspageConnection.js";
import { integrationsGetZendeskCustomerSupportIssue } from "../funcs/integrationsGetZendeskCustomerSupportIssue.js";
import { integrationsListAuthedProviders } from "../funcs/integrationsListAuthedProviders.js";
import { integrationsListAwsCloudtrailBatches } from "../funcs/integrationsListAwsCloudtrailBatches.js";
import { integrationsListAwsCloudtrailBatchEvents } from "../funcs/integrationsListAwsCloudtrailBatchEvents.js";
import { integrationsListAwsConnections } from "../funcs/integrationsListAwsConnections.js";
import { integrationsListConnections } from "../funcs/integrationsListConnections.js";
import { integrationsListConnectionStatuses } from "../funcs/integrationsListConnectionStatuses.js";
import { integrationsListConnectionStatusesBySlug } from "../funcs/integrationsListConnectionStatusesBySlug.js";
import { integrationsListConnectionStatusesBySlugAndId } from "../funcs/integrationsListConnectionStatusesBySlugAndId.js";
import { integrationsListFieldMapAvailableFields } from "../funcs/integrationsListFieldMapAvailableFields.js";
import { integrationsListIntegrations } from "../funcs/integrationsListIntegrations.js";
import { integrationsListSlackEmojiActions } from "../funcs/integrationsListSlackEmojiActions.js";
import { integrationsListSlackUsergroups } from "../funcs/integrationsListSlackUsergroups.js";
import { integrationsListSlackWorkspaces } from "../funcs/integrationsListSlackWorkspaces.js";
import { integrationsListStatuspageConnectionPages } from "../funcs/integrationsListStatuspageConnectionPages.js";
import { integrationsListStatuspageConnections } from "../funcs/integrationsListStatuspageConnections.js";
import { integrationsRefreshConnection } from "../funcs/integrationsRefreshConnection.js";
import { integrationsSearchConfluenceSpaces } from "../funcs/integrationsSearchConfluenceSpaces.js";
import { integrationsSearchZendeskTickets } from "../funcs/integrationsSearchZendeskTickets.js";
import { integrationsUpdateAuthedProvider } from "../funcs/integrationsUpdateAuthedProvider.js";
import { integrationsUpdateAwsCloudtrailBatch } from "../funcs/integrationsUpdateAwsCloudtrailBatch.js";
import { integrationsUpdateAwsConnection } from "../funcs/integrationsUpdateAwsConnection.js";
import { integrationsUpdateConnection } from "../funcs/integrationsUpdateConnection.js";
import { integrationsUpdateFieldMap } from "../funcs/integrationsUpdateFieldMap.js";
import { integrationsUpdateSlackEmojiAction } from "../funcs/integrationsUpdateSlackEmojiAction.js";
import { integrationsUpdateStatuspageConnection } from "../funcs/integrationsUpdateStatuspageConnection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Integrations extends ClientSDK {
  /**
   * List integrations
   *
   * @remarks
   * Lists the available and configured integrations
   */
  async listIntegrations(
    options?: RequestOptions,
  ): Promise<components.IntegrationsIntegrationEntityPaginated> {
    return unwrapAsync(integrationsListIntegrations(
      this,
      options,
    ));
  }

  /**
   * Get an integration
   *
   * @remarks
   * Retrieve a single integration
   */
  async getIntegration(
    request: operations.GetIntegrationRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsIntegrationEntity> {
    return unwrapAsync(integrationsGetIntegration(
      this,
      request,
      options,
    ));
  }

  /**
   * Update field mapping
   *
   * @remarks
   * Update field mapping
   */
  async updateFieldMap(
    request: operations.UpdateFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.FieldMappingFieldMapEntity> {
    return unwrapAsync(integrationsUpdateFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * List available fields for field mapping
   *
   * @remarks
   * Get a description of the fields to which data can be mapped
   */
  async listFieldMapAvailableFields(
    request: operations.ListFieldMapAvailableFieldsRequest,
    options?: RequestOptions,
  ): Promise<components.FieldMappingMappableFieldEntity> {
    return unwrapAsync(integrationsListFieldMapAvailableFields(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists the available and configured integrations
   *
   * @remarks
   * Lists the available and configured integrations
   */
  async listAuthedProviders(
    request: operations.ListAuthedProvidersRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAuthedProviderEntityPaginated> {
    return unwrapAsync(integrationsListAuthedProviders(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an authed provider
   *
   * @remarks
   * Retrieve a single authed provider
   */
  async updateAuthedProvider(
    request: operations.UpdateAuthedProviderRequest,
    options?: RequestOptions,
  ): Promise<components.PublicApiv1IntegrationsAuthedProviderEntity> {
    return unwrapAsync(integrationsUpdateAuthedProvider(
      this,
      request,
      options,
    ));
  }

  /**
   * List integration connections
   *
   * @remarks
   * List available integration connections
   */
  async listConnections(
    request: operations.ListConnectionsRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionEntityPaginated> {
    return unwrapAsync(integrationsListConnections(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new integration connection
   *
   * @remarks
   * Create a new integration connection
   */
  async createConnection(
    request: operations.CreateConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionEntity> {
    return unwrapAsync(integrationsCreateConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Refresh an integration connection
   *
   * @remarks
   * Refresh the integration connection with the provided data
   */
  async refreshConnection(
    request: operations.RefreshConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionEntity> {
    return unwrapAsync(integrationsRefreshConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an integration connection
   *
   * @remarks
   * Update the integration connection with the provided data
   */
  async updateConnection(
    request: operations.UpdateConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionEntity> {
    return unwrapAsync(integrationsUpdateConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get integration connection status
   *
   * @remarks
   * Retrieve overall integration connection status
   */
  async listConnectionStatuses(
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionStatusEntity> {
    return unwrapAsync(integrationsListConnectionStatuses(
      this,
      options,
    ));
  }

  /**
   * Get an integration connection status
   *
   * @remarks
   * Retrieve a single integration connection status
   */
  async listConnectionStatusesBySlug(
    request: operations.ListConnectionStatusesBySlugRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionStatusEntity> {
    return unwrapAsync(integrationsListConnectionStatusesBySlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an integration connection status
   *
   * @remarks
   * Retrieve a single integration connection status
   */
  async listConnectionStatusesBySlugAndId(
    request: operations.ListConnectionStatusesBySlugAndIdRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConnectionStatusEntity> {
    return unwrapAsync(integrationsListConnectionStatusesBySlugAndId(
      this,
      request,
      options,
    ));
  }

  /**
   * List AWS connections
   *
   * @remarks
   * Lists the available and configured AWS integration connections for the authenticated organization.
   */
  async listAwsConnections(
    request: operations.ListAwsConnectionsRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAwsConnectionEntityPaginated> {
    return unwrapAsync(integrationsListAwsConnections(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an AWS connection
   *
   * @remarks
   * Retrieves the information about the AWS connection.
   */
  async getAwsConnection(
    request: operations.GetAwsConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAwsConnectionEntity> {
    return unwrapAsync(integrationsGetAwsConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an AWS connection
   *
   * @remarks
   * Update the AWS connection with the provided data.
   */
  async updateAwsConnection(
    request: operations.UpdateAwsConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAwsConnectionEntity> {
    return unwrapAsync(integrationsUpdateAwsConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * List CloudTrail batches
   *
   * @remarks
   * Lists CloudTrail batches for the authenticated organization.
   */
  async listAwsCloudtrailBatches(
    request: operations.ListAwsCloudtrailBatchesRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAwsCloudtrailBatchEntityPaginated> {
    return unwrapAsync(integrationsListAwsCloudtrailBatches(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a CloudTrail batch
   *
   * @remarks
   * Retrieve a single CloudTrail batch.
   */
  async getAwsCloudtrailBatch(
    request: operations.GetAwsCloudtrailBatchRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAwsCloudtrailBatchEntity> {
    return unwrapAsync(integrationsGetAwsCloudtrailBatch(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a CloudTrail batch
   *
   * @remarks
   * Update a CloudTrail batch with new information.
   */
  async updateAwsCloudtrailBatch(
    request: operations.UpdateAwsCloudtrailBatchRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsAwsCloudtrailBatchEntity> {
    return unwrapAsync(integrationsUpdateAwsCloudtrailBatch(
      this,
      request,
      options,
    ));
  }

  /**
   * List events for an AWS CloudTrail batch
   *
   * @remarks
   * List events for an AWS CloudTrail batch
   */
  async listAwsCloudtrailBatchEvents(
    request: operations.ListAwsCloudtrailBatchEventsRequest,
    options?: RequestOptions,
  ): Promise<components.ChangeEventEntity> {
    return unwrapAsync(integrationsListAwsCloudtrailBatchEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * List Confluence spaces
   *
   * @remarks
   * Lists available space keys for the Confluence integration connection.
   */
  async searchConfluenceSpaces(
    request: operations.SearchConfluenceSpacesRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsConfluenceCloudSpaceKeyEntity> {
    return unwrapAsync(integrationsSearchConfluenceSpaces(
      this,
      request,
      options,
    ));
  }

  /**
   * List Slack workspaces
   *
   * @remarks
   * Lists all Slack workspaces
   */
  async listSlackWorkspaces(
    request: operations.ListSlackWorkspacesRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsSlackWorkspaceEntity> {
    return unwrapAsync(integrationsListSlackWorkspaces(
      this,
      request,
      options,
    ));
  }

  /**
   * List Slack user groups
   *
   * @remarks
   * Lists all Slack user groups
   */
  async listSlackUsergroups(
    options?: RequestOptions,
  ): Promise<components.IntegrationsSlackUsergroupEntity> {
    return unwrapAsync(integrationsListSlackUsergroups(
      this,
      options,
    ));
  }

  /**
   * List Slack emoji actions
   *
   * @remarks
   * Lists Slack emoji actions
   */
  async listSlackEmojiActions(
    request: operations.ListSlackEmojiActionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsListSlackEmojiActions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new Slack emoji action
   *
   * @remarks
   * Creates a new Slack emoji action
   */
  async createSlackEmojiAction(
    request: operations.CreateSlackEmojiActionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsCreateSlackEmojiAction(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Slack emoji action
   *
   * @remarks
   * Retrieves a Slack emoji action
   */
  async getSlackEmojiAction(
    request: operations.GetSlackEmojiActionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsGetSlackEmojiAction(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Slack emoji action
   *
   * @remarks
   * Deletes a Slack emoji action
   */
  async deleteSlackEmojiAction(
    request: operations.DeleteSlackEmojiActionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsDeleteSlackEmojiAction(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Slack emoji action
   *
   * @remarks
   * Updates a Slack emoji action
   */
  async updateSlackEmojiAction(
    request: operations.UpdateSlackEmojiActionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsUpdateSlackEmojiAction(
      this,
      request,
      options,
    ));
  }

  /**
   * List Statuspage connections
   *
   * @remarks
   * Lists the available and configured Statuspage integrations connections for the authenticated organization.
   */
  async listStatuspageConnections(
    request: operations.ListStatuspageConnectionsRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsStatuspageConnectionEntityPaginated> {
    return unwrapAsync(integrationsListStatuspageConnections(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Statuspage connection
   *
   * @remarks
   * Retrieve the information about the Statuspage connection.
   */
  async getStatuspageConnection(
    request: operations.GetStatuspageConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsStatuspageConnectionEntity> {
    return unwrapAsync(integrationsGetStatuspageConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Statuspage connection
   *
   * @remarks
   * Deletes the given Statuspage integration connection.
   */
  async deleteStatuspageConnection(
    request: operations.DeleteStatuspageConnectionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsDeleteStatuspageConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Statuspage connection
   *
   * @remarks
   * Update the given Statuspage integration connection.
   */
  async updateStatuspageConnection(
    request: operations.UpdateStatuspageConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsStatuspageConnectionEntity> {
    return unwrapAsync(integrationsUpdateStatuspageConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * List StatusPage pages for a connection
   *
   * @remarks
   * Lists available page IDs for the Statuspage integration connection.
   */
  async listStatuspageConnectionPages(
    request: operations.ListStatuspageConnectionPagesRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsStatuspagePageEntity> {
    return unwrapAsync(integrationsListStatuspageConnectionPages(
      this,
      request,
      options,
    ));
  }

  /**
   * Search for Zendesk tickets
   *
   * @remarks
   * Search for Zendesk tickets
   */
  async searchZendeskTickets(
    request: operations.SearchZendeskTicketsRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationsZendeskSearchTicketsPaginatedEntity> {
    return unwrapAsync(integrationsSearchZendeskTickets(
      this,
      request,
      options,
    ));
  }

  /**
   * Search for Zendesk tickets
   *
   * @remarks
   * Search for Zendesk tickets
   */
  async getZendeskCustomerSupportIssue(
    request: operations.GetZendeskCustomerSupportIssueRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsGetZendeskCustomerSupportIssue(
      this,
      request,
      options,
    ));
  }
}
