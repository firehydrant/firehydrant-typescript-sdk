/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ticketingCreateInboundFieldMap } from "../funcs/ticketingCreateInboundFieldMap.js";
import { ticketingCreateTicket } from "../funcs/ticketingCreateTicket.js";
import { ticketingCreateTicketingFieldMap } from "../funcs/ticketingCreateTicketingFieldMap.js";
import { ticketingCreateTicketingPriority } from "../funcs/ticketingCreateTicketingPriority.js";
import { ticketingCreateTicketingProjectConfig } from "../funcs/ticketingCreateTicketingProjectConfig.js";
import { ticketingDeleteInboundFieldMap } from "../funcs/ticketingDeleteInboundFieldMap.js";
import { ticketingDeleteTicket } from "../funcs/ticketingDeleteTicket.js";
import { ticketingDeleteTicketingFieldMap } from "../funcs/ticketingDeleteTicketingFieldMap.js";
import { ticketingDeleteTicketingPriority } from "../funcs/ticketingDeleteTicketingPriority.js";
import { ticketingDeleteTicketingProjectConfig } from "../funcs/ticketingDeleteTicketingProjectConfig.js";
import { ticketingGetConfigurationOptions } from "../funcs/ticketingGetConfigurationOptions.js";
import { ticketingGetInboundFieldMap } from "../funcs/ticketingGetInboundFieldMap.js";
import { ticketingGetOptionsForField } from "../funcs/ticketingGetOptionsForField.js";
import { ticketingGetTicket } from "../funcs/ticketingGetTicket.js";
import { ticketingGetTicketingFieldMap } from "../funcs/ticketingGetTicketingFieldMap.js";
import { ticketingGetTicketingPriority } from "../funcs/ticketingGetTicketingPriority.js";
import { ticketingGetTicketingProject } from "../funcs/ticketingGetTicketingProject.js";
import { ticketingGetTicketingProjectConfig } from "../funcs/ticketingGetTicketingProjectConfig.js";
import { ticketingListAvailableInboundFieldMaps } from "../funcs/ticketingListAvailableInboundFieldMaps.js";
import { ticketingListAvailableTicketingFieldMaps } from "../funcs/ticketingListAvailableTicketingFieldMaps.js";
import { ticketingListInboundFieldMaps } from "../funcs/ticketingListInboundFieldMaps.js";
import { ticketingListTicketingPriorities } from "../funcs/ticketingListTicketingPriorities.js";
import { ticketingListTicketingProjects } from "../funcs/ticketingListTicketingProjects.js";
import { ticketingListTickets } from "../funcs/ticketingListTickets.js";
import { ticketingListTicketTags } from "../funcs/ticketingListTicketTags.js";
import { ticketingUpdateInboundFieldMap } from "../funcs/ticketingUpdateInboundFieldMap.js";
import { ticketingUpdateTicket } from "../funcs/ticketingUpdateTicket.js";
import { ticketingUpdateTicketingFieldMap } from "../funcs/ticketingUpdateTicketingFieldMap.js";
import { ticketingUpdateTicketingPriority } from "../funcs/ticketingUpdateTicketingPriority.js";
import { ticketingUpdateTicketingProjectConfig } from "../funcs/ticketingUpdateTicketingProjectConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Ticketing extends ClientSDK {
  /**
   * List tickets
   *
   * @remarks
   * List all of the tickets that have been added to the organiation
   */
  async listTickets(
    request: operations.ListTicketsRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingTicketEntity> {
    return unwrapAsync(ticketingListTickets(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a ticket
   *
   * @remarks
   * Creates a ticket for a project
   */
  async createTicket(
    request: components.CreateTicket,
    options?: RequestOptions,
  ): Promise<components.TicketingTicketEntity> {
    return unwrapAsync(ticketingCreateTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a ticket
   *
   * @remarks
   * Retrieves a single ticket by ID
   */
  async getTicket(
    request: operations.GetTicketRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingTicketEntity> {
    return unwrapAsync(ticketingGetTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a ticket
   *
   * @remarks
   * Archive a ticket
   */
  async deleteTicket(
    request: operations.DeleteTicketRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingDeleteTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a ticket
   *
   * @remarks
   * Update a ticket's attributes
   */
  async updateTicket(
    request: operations.UpdateTicketRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingTicketEntity> {
    return unwrapAsync(ticketingUpdateTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * List ticketing projects
   *
   * @remarks
   * List all ticketing projects available to the organization
   */
  async listTicketingProjects(
    request: operations.ListTicketingProjectsRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectsProjectListItemEntity> {
    return unwrapAsync(ticketingListTicketingProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a ticketing project
   *
   * @remarks
   * Retrieve a single ticketing project by ID
   */
  async getTicketingProject(
    request: operations.GetTicketingProjectRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectsProjectListItemEntity> {
    return unwrapAsync(ticketingGetTicketingProject(
      this,
      request,
      options,
    ));
  }

  /**
   * List configuration options for a ticketing project
   *
   * @remarks
   * List all configuration options for a ticketing project
   */
  async getConfigurationOptions(
    request: operations.GetConfigurationOptionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingGetConfigurationOptions(
      this,
      request,
      options,
    ));
  }

  /**
   * List a field's configuration options for a ticketing project
   *
   * @remarks
   * List a field's configuration options for a ticketing project
   */
  async getOptionsForField(
    request: operations.GetOptionsForFieldRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingGetOptionsForField(
      this,
      request,
      options,
    ));
  }

  /**
   * List available fields for ticket field mapping
   *
   * @remarks
   * Returns metadata for the fields that are available for field mapping.
   */
  async listAvailableTicketingFieldMaps(
    request: operations.ListAvailableTicketingFieldMapsRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingFieldMapsMappableFieldEntity> {
    return unwrapAsync(ticketingListAvailableTicketingFieldMaps(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a field mapping for a ticketing project
   *
   * @remarks
   * Creates field map for a ticketing project
   */
  async createTicketingFieldMap(
    request: operations.CreateTicketingFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectFieldMapEntity> {
    return unwrapAsync(ticketingCreateTicketingFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a field map for a ticketing project
   *
   * @remarks
   * Retrieve field map for a ticketing project
   */
  async getTicketingFieldMap(
    request: operations.GetTicketingFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectFieldMapEntity> {
    return unwrapAsync(ticketingGetTicketingFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a field map for a ticketing project
   *
   * @remarks
   * Archive field map for a ticketing project
   */
  async deleteTicketingFieldMap(
    request: operations.DeleteTicketingFieldMapRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingDeleteTicketingFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a field map for a ticketing project
   *
   * @remarks
   * Update field map for a ticketing project
   */
  async updateTicketingFieldMap(
    request: operations.UpdateTicketingFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectFieldMapEntity> {
    return unwrapAsync(ticketingUpdateTicketingFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * List available fields for ticket field mapping
   *
   * @remarks
   * Returns metadata for the fields that are available for inbound field mapping.
   */
  async listAvailableInboundFieldMaps(
    request: operations.ListAvailableInboundFieldMapsRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectInboundMappableFieldEntity> {
    return unwrapAsync(ticketingListAvailableInboundFieldMaps(
      this,
      request,
      options,
    ));
  }

  /**
   * List inbound field maps for a ticketing project
   *
   * @remarks
   * List all inbound field maps for a ticketing project
   */
  async listInboundFieldMaps(
    request: operations.ListInboundFieldMapsRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectInboundFieldMapEntity> {
    return unwrapAsync(ticketingListInboundFieldMaps(
      this,
      request,
      options,
    ));
  }

  /**
   * Create inbound field map for a ticketing project
   *
   * @remarks
   * Creates inbound field map for a ticketing project
   */
  async createInboundFieldMap(
    request: operations.CreateInboundFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectInboundFieldMapEntity> {
    return unwrapAsync(ticketingCreateInboundFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Get inbound field map for a ticketing project
   *
   * @remarks
   * Retrieve inbound field map for a ticketing project
   */
  async getInboundFieldMap(
    request: operations.GetInboundFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectInboundFieldMapEntity> {
    return unwrapAsync(ticketingGetInboundFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Update inbound field map for a ticketing project
   *
   * @remarks
   * Update inbound field map for a ticketing project
   */
  async updateInboundFieldMap(
    request: operations.UpdateInboundFieldMapRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectInboundFieldMapEntity> {
    return unwrapAsync(ticketingUpdateInboundFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive inbound field map for a ticketing project
   *
   * @remarks
   * Archive inbound field map for a ticketing project
   */
  async deleteInboundFieldMap(
    request: operations.DeleteInboundFieldMapRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingDeleteInboundFieldMap(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a ticketing project configuration
   *
   * @remarks
   * Creates configuration for a ticketing project
   */
  async createTicketingProjectConfig(
    request: operations.CreateTicketingProjectConfigRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectConfigEntity> {
    return unwrapAsync(ticketingCreateTicketingProjectConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Get configuration for a ticketing project
   *
   * @remarks
   * Retrieve configuration for a ticketing project
   */
  async getTicketingProjectConfig(
    request: operations.GetTicketingProjectConfigRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectConfigEntity> {
    return unwrapAsync(ticketingGetTicketingProjectConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Archive a ticketing project configuration
   *
   * @remarks
   * Archive configuration for a ticketing project
   */
  async deleteTicketingProjectConfig(
    request: operations.DeleteTicketingProjectConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingDeleteTicketingProjectConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Update configuration for a ticketing project
   *
   * @remarks
   * Update configuration for a ticketing project
   */
  async updateTicketingProjectConfig(
    request: operations.UpdateTicketingProjectConfigRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingProjectConfigEntity> {
    return unwrapAsync(ticketingUpdateTicketingProjectConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * List ticketing priorities
   *
   * @remarks
   * List all ticketing priorities available to the organization
   */
  async listTicketingPriorities(
    options?: RequestOptions,
  ): Promise<components.TicketingPriorityEntity> {
    return unwrapAsync(ticketingListTicketingPriorities(
      this,
      options,
    ));
  }

  /**
   * Create a ticketing priority
   *
   * @remarks
   * Create a single ticketing priority
   */
  async createTicketingPriority(
    request: components.CreateTicketingPriority,
    options?: RequestOptions,
  ): Promise<components.TicketingPriorityEntity> {
    return unwrapAsync(ticketingCreateTicketingPriority(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a ticketing priority
   *
   * @remarks
   * Retrieve a single ticketing priority by ID
   */
  async getTicketingPriority(
    request: operations.GetTicketingPriorityRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingPriorityEntity> {
    return unwrapAsync(ticketingGetTicketingPriority(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a ticketing priority
   *
   * @remarks
   * Delete a single ticketing priority by ID
   */
  async deleteTicketingPriority(
    request: operations.DeleteTicketingPriorityRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketingDeleteTicketingPriority(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a ticketing priority
   *
   * @remarks
   * Update a single ticketing priority's attributes
   */
  async updateTicketingPriority(
    request: operations.UpdateTicketingPriorityRequest,
    options?: RequestOptions,
  ): Promise<components.TicketingPriorityEntity> {
    return unwrapAsync(ticketingUpdateTicketingPriority(
      this,
      request,
      options,
    ));
  }

  /**
   * List ticket tags
   *
   * @remarks
   * List all of the ticket tags in the organization
   */
  async listTicketTags(
    request: operations.ListTicketTagsRequest,
    options?: RequestOptions,
  ): Promise<components.TagEntityPaginated> {
    return unwrapAsync(ticketingListTicketTags(
      this,
      request,
      options,
    ));
  }
}
