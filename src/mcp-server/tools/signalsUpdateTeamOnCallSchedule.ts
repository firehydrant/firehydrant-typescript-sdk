/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { signalsUpdateTeamOnCallSchedule } from "../../funcs/signalsUpdateTeamOnCallSchedule.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.UpdateTeamOnCallScheduleRequest$inboundSchema,
};

export const tool$signalsUpdateTeamOnCallSchedule: ToolDefinition<typeof args> =
  {
    name: "signals-update-team-on-call-schedule",
    description: `Update an on-call schedule for a team

Update a Signals on-call schedule by ID. For backwards compatibility, all parameters except for
\`name\` and \`description\` will be ignored if the schedule has more than one rotation. If the schedule
has only one rotation, you can continue to update that rotation using the rotation-specific parameters.
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await signalsUpdateTeamOnCallSchedule(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
