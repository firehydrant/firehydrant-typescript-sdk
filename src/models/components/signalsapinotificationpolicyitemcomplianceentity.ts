/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SignalsAPINotificationPolicyItemComplianceEntity = {
  notificationPolicyItemId?: string | null | undefined;
  isCompliant?: boolean | null | undefined;
};

/** @internal */
export const SignalsAPINotificationPolicyItemComplianceEntity$inboundSchema:
  z.ZodType<
    SignalsAPINotificationPolicyItemComplianceEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    notification_policy_item_id: z.nullable(z.string()).optional(),
    is_compliant: z.nullable(z.boolean()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "notification_policy_item_id": "notificationPolicyItemId",
      "is_compliant": "isCompliant",
    });
  });

/** @internal */
export type SignalsAPINotificationPolicyItemComplianceEntity$Outbound = {
  notification_policy_item_id?: string | null | undefined;
  is_compliant?: boolean | null | undefined;
};

/** @internal */
export const SignalsAPINotificationPolicyItemComplianceEntity$outboundSchema:
  z.ZodType<
    SignalsAPINotificationPolicyItemComplianceEntity$Outbound,
    z.ZodTypeDef,
    SignalsAPINotificationPolicyItemComplianceEntity
  > = z.object({
    notificationPolicyItemId: z.nullable(z.string()).optional(),
    isCompliant: z.nullable(z.boolean()).optional(),
  }).transform((v) => {
    return remap$(v, {
      notificationPolicyItemId: "notification_policy_item_id",
      isCompliant: "is_compliant",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPINotificationPolicyItemComplianceEntity$ {
  /** @deprecated use `SignalsAPINotificationPolicyItemComplianceEntity$inboundSchema` instead. */
  export const inboundSchema =
    SignalsAPINotificationPolicyItemComplianceEntity$inboundSchema;
  /** @deprecated use `SignalsAPINotificationPolicyItemComplianceEntity$outboundSchema` instead. */
  export const outboundSchema =
    SignalsAPINotificationPolicyItemComplianceEntity$outboundSchema;
  /** @deprecated use `SignalsAPINotificationPolicyItemComplianceEntity$Outbound` instead. */
  export type Outbound =
    SignalsAPINotificationPolicyItemComplianceEntity$Outbound;
}

export function signalsAPINotificationPolicyItemComplianceEntityToJSON(
  signalsAPINotificationPolicyItemComplianceEntity:
    SignalsAPINotificationPolicyItemComplianceEntity,
): string {
  return JSON.stringify(
    SignalsAPINotificationPolicyItemComplianceEntity$outboundSchema.parse(
      signalsAPINotificationPolicyItemComplianceEntity,
    ),
  );
}

export function signalsAPINotificationPolicyItemComplianceEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  SignalsAPINotificationPolicyItemComplianceEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SignalsAPINotificationPolicyItemComplianceEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SignalsAPINotificationPolicyItemComplianceEntity' from JSON`,
  );
}
