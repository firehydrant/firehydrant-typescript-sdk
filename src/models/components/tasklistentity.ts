/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  TaskListItemEntity,
  TaskListItemEntity$inboundSchema,
  TaskListItemEntity$Outbound,
  TaskListItemEntity$outboundSchema,
} from "./tasklistitementity.js";

/**
 * TaskListEntity model
 */
export type TaskListEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  taskListItems?: Array<TaskListItemEntity> | null | undefined;
};

/** @internal */
export const TaskListEntity$inboundSchema: z.ZodType<
  TaskListEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  task_list_items: z.nullable(z.array(TaskListItemEntity$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "created_by": "createdBy",
    "task_list_items": "taskListItems",
  });
});

/** @internal */
export type TaskListEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  task_list_items?: Array<TaskListItemEntity$Outbound> | null | undefined;
};

/** @internal */
export const TaskListEntity$outboundSchema: z.ZodType<
  TaskListEntity$Outbound,
  z.ZodTypeDef,
  TaskListEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  taskListItems: z.nullable(z.array(TaskListItemEntity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    createdBy: "created_by",
    taskListItems: "task_list_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskListEntity$ {
  /** @deprecated use `TaskListEntity$inboundSchema` instead. */
  export const inboundSchema = TaskListEntity$inboundSchema;
  /** @deprecated use `TaskListEntity$outboundSchema` instead. */
  export const outboundSchema = TaskListEntity$outboundSchema;
  /** @deprecated use `TaskListEntity$Outbound` instead. */
  export type Outbound = TaskListEntity$Outbound;
}

export function taskListEntityToJSON(taskListEntity: TaskListEntity): string {
  return JSON.stringify(TaskListEntity$outboundSchema.parse(taskListEntity));
}

export function taskListEntityFromJSON(
  jsonString: string,
): SafeParseResult<TaskListEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskListEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskListEntity' from JSON`,
  );
}
