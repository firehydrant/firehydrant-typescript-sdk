/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Tier = {
  Free: "free",
  Essentials: "essentials",
  Enterprise: "enterprise",
  SignalsOnly: "signals_only",
} as const;
export type Tier = ClosedEnum<typeof Tier>;

export type EntitlementEntity = {
  currentCount?: number | undefined;
  errors?: Array<string> | undefined;
  exists?: boolean | undefined;
  available?: boolean | undefined;
  maximum?: number | undefined;
  name?: string | undefined;
  slug?: string | undefined;
  tier?: Tier | undefined;
};

/** @internal */
export const Tier$inboundSchema: z.ZodNativeEnum<typeof Tier> = z.nativeEnum(
  Tier,
);

/** @internal */
export const Tier$outboundSchema: z.ZodNativeEnum<typeof Tier> =
  Tier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tier$ {
  /** @deprecated use `Tier$inboundSchema` instead. */
  export const inboundSchema = Tier$inboundSchema;
  /** @deprecated use `Tier$outboundSchema` instead. */
  export const outboundSchema = Tier$outboundSchema;
}

/** @internal */
export const EntitlementEntity$inboundSchema: z.ZodType<
  EntitlementEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_count: z.number().int().optional(),
  errors: z.array(z.string()).optional(),
  exists: z.boolean().optional(),
  available: z.boolean().optional(),
  maximum: z.number().int().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  tier: Tier$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "current_count": "currentCount",
  });
});

/** @internal */
export type EntitlementEntity$Outbound = {
  current_count?: number | undefined;
  errors?: Array<string> | undefined;
  exists?: boolean | undefined;
  available?: boolean | undefined;
  maximum?: number | undefined;
  name?: string | undefined;
  slug?: string | undefined;
  tier?: string | undefined;
};

/** @internal */
export const EntitlementEntity$outboundSchema: z.ZodType<
  EntitlementEntity$Outbound,
  z.ZodTypeDef,
  EntitlementEntity
> = z.object({
  currentCount: z.number().int().optional(),
  errors: z.array(z.string()).optional(),
  exists: z.boolean().optional(),
  available: z.boolean().optional(),
  maximum: z.number().int().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  tier: Tier$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    currentCount: "current_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementEntity$ {
  /** @deprecated use `EntitlementEntity$inboundSchema` instead. */
  export const inboundSchema = EntitlementEntity$inboundSchema;
  /** @deprecated use `EntitlementEntity$outboundSchema` instead. */
  export const outboundSchema = EntitlementEntity$outboundSchema;
  /** @deprecated use `EntitlementEntity$Outbound` instead. */
  export type Outbound = EntitlementEntity$Outbound;
}

export function entitlementEntityToJSON(
  entitlementEntity: EntitlementEntity,
): string {
  return JSON.stringify(
    EntitlementEntity$outboundSchema.parse(entitlementEntity),
  );
}

export function entitlementEntityFromJSON(
  jsonString: string,
): SafeParseResult<EntitlementEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitlementEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitlementEntity' from JSON`,
  );
}
