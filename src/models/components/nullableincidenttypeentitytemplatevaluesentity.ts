/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentTypeEntityTemplateImpactEntity,
  IncidentTypeEntityTemplateImpactEntity$inboundSchema,
  IncidentTypeEntityTemplateImpactEntity$Outbound,
  IncidentTypeEntityTemplateImpactEntity$outboundSchema,
} from "./incidenttypeentitytemplateimpactentity.js";
import {
  TeamEntity,
  TeamEntity$inboundSchema,
  TeamEntity$Outbound,
  TeamEntity$outboundSchema,
} from "./teamentity.js";

/**
 * A hash mapping runbook IDs to runbook names.
 */
export type Runbooks = {};

export type NullableIncidentTypeEntityTemplateValuesEntity = {
  services?: Array<IncidentTypeEntityTemplateImpactEntity> | null | undefined;
  functionalities?:
    | Array<IncidentTypeEntityTemplateImpactEntity>
    | null
    | undefined;
  environments?:
    | Array<IncidentTypeEntityTemplateImpactEntity>
    | null
    | undefined;
  /**
   * A hash mapping runbook IDs to runbook names.
   */
  runbooks?: Runbooks | null | undefined;
  teams?: Array<TeamEntity> | null | undefined;
};

/** @internal */
export const Runbooks$inboundSchema: z.ZodType<
  Runbooks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Runbooks$Outbound = {};

/** @internal */
export const Runbooks$outboundSchema: z.ZodType<
  Runbooks$Outbound,
  z.ZodTypeDef,
  Runbooks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Runbooks$ {
  /** @deprecated use `Runbooks$inboundSchema` instead. */
  export const inboundSchema = Runbooks$inboundSchema;
  /** @deprecated use `Runbooks$outboundSchema` instead. */
  export const outboundSchema = Runbooks$outboundSchema;
  /** @deprecated use `Runbooks$Outbound` instead. */
  export type Outbound = Runbooks$Outbound;
}

export function runbooksToJSON(runbooks: Runbooks): string {
  return JSON.stringify(Runbooks$outboundSchema.parse(runbooks));
}

export function runbooksFromJSON(
  jsonString: string,
): SafeParseResult<Runbooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Runbooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Runbooks' from JSON`,
  );
}

/** @internal */
export const NullableIncidentTypeEntityTemplateValuesEntity$inboundSchema:
  z.ZodType<
    NullableIncidentTypeEntityTemplateValuesEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    services: z.nullable(
      z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema),
    ).optional(),
    functionalities: z.nullable(
      z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema),
    ).optional(),
    environments: z.nullable(
      z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema),
    ).optional(),
    runbooks: z.nullable(z.lazy(() => Runbooks$inboundSchema)).optional(),
    teams: z.nullable(z.array(TeamEntity$inboundSchema)).optional(),
  });

/** @internal */
export type NullableIncidentTypeEntityTemplateValuesEntity$Outbound = {
  services?:
    | Array<IncidentTypeEntityTemplateImpactEntity$Outbound>
    | null
    | undefined;
  functionalities?:
    | Array<IncidentTypeEntityTemplateImpactEntity$Outbound>
    | null
    | undefined;
  environments?:
    | Array<IncidentTypeEntityTemplateImpactEntity$Outbound>
    | null
    | undefined;
  runbooks?: Runbooks$Outbound | null | undefined;
  teams?: Array<TeamEntity$Outbound> | null | undefined;
};

/** @internal */
export const NullableIncidentTypeEntityTemplateValuesEntity$outboundSchema:
  z.ZodType<
    NullableIncidentTypeEntityTemplateValuesEntity$Outbound,
    z.ZodTypeDef,
    NullableIncidentTypeEntityTemplateValuesEntity
  > = z.object({
    services: z.nullable(
      z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema),
    ).optional(),
    functionalities: z.nullable(
      z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema),
    ).optional(),
    environments: z.nullable(
      z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema),
    ).optional(),
    runbooks: z.nullable(z.lazy(() => Runbooks$outboundSchema)).optional(),
    teams: z.nullable(z.array(TeamEntity$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIncidentTypeEntityTemplateValuesEntity$ {
  /** @deprecated use `NullableIncidentTypeEntityTemplateValuesEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableIncidentTypeEntityTemplateValuesEntity$inboundSchema;
  /** @deprecated use `NullableIncidentTypeEntityTemplateValuesEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableIncidentTypeEntityTemplateValuesEntity$outboundSchema;
  /** @deprecated use `NullableIncidentTypeEntityTemplateValuesEntity$Outbound` instead. */
  export type Outbound =
    NullableIncidentTypeEntityTemplateValuesEntity$Outbound;
}

export function nullableIncidentTypeEntityTemplateValuesEntityToJSON(
  nullableIncidentTypeEntityTemplateValuesEntity:
    NullableIncidentTypeEntityTemplateValuesEntity,
): string {
  return JSON.stringify(
    NullableIncidentTypeEntityTemplateValuesEntity$outboundSchema.parse(
      nullableIncidentTypeEntityTemplateValuesEntity,
    ),
  );
}

export function nullableIncidentTypeEntityTemplateValuesEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableIncidentTypeEntityTemplateValuesEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIncidentTypeEntityTemplateValuesEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableIncidentTypeEntityTemplateValuesEntity' from JSON`,
  );
}
