/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the step will notify.
 */
export const UpdateTeamEscalationPolicyType = {
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  SlackChannel: "SlackChannel",
  EntireTeam: "EntireTeam",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the step will notify.
 */
export type UpdateTeamEscalationPolicyType = ClosedEnum<
  typeof UpdateTeamEscalationPolicyType
>;

export type UpdateTeamEscalationPolicyTarget = {
  /**
   * The type of target that the step will notify.
   */
  type: UpdateTeamEscalationPolicyType;
  /**
   * The ID of the target that the step will notify.
   */
  id: string;
};

/**
 * The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
 */
export const UpdateTeamEscalationPolicyDistributionType = {
  Unspecified: "unspecified",
  RoundRobinByAlert: "round_robin_by_alert",
  RoundRobinByEscalationPolicy: "round_robin_by_escalation_policy",
} as const;
/**
 * The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
 */
export type UpdateTeamEscalationPolicyDistributionType = ClosedEnum<
  typeof UpdateTeamEscalationPolicyDistributionType
>;

export type UpdateTeamEscalationPolicyStep = {
  /**
   * A list of targets that the step will notify. You can specify up to 15 targets per step.
   */
  targets?: Array<UpdateTeamEscalationPolicyTarget> | null | undefined;
  /**
   * An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
   */
  timeout: string;
  /**
   * The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
   */
  distributionType?:
    | UpdateTeamEscalationPolicyDistributionType
    | null
    | undefined;
  /**
   * A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.
   */
  priorities?: Array<string> | null | undefined;
};

/**
 * The type of target to which the policy will hand off.
 */
export const UpdateTeamEscalationPolicyTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
/**
 * The type of target to which the policy will hand off.
 */
export type UpdateTeamEscalationPolicyTargetType = ClosedEnum<
  typeof UpdateTeamEscalationPolicyTargetType
>;

/**
 * A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
 */
export type UpdateTeamEscalationPolicyHandoffStep = {
  /**
   * The type of target to which the policy will hand off.
   */
  targetType: UpdateTeamEscalationPolicyTargetType;
  /**
   * The ID of the target to which the policy will hand off.
   */
  targetId: string;
};

export const UpdateTeamEscalationPolicyHighTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
export type UpdateTeamEscalationPolicyHighTargetType = ClosedEnum<
  typeof UpdateTeamEscalationPolicyHighTargetType
>;

/**
 * Handoff step for HIGH priority alerts
 */
export type UpdateTeamEscalationPolicyHighHandoffStep = {
  targetType: UpdateTeamEscalationPolicyHighTargetType;
  targetId: string;
};

/**
 * Settings for HIGH priority alerts
 */
export type UpdateTeamEscalationPolicyHigh = {
  /**
   * Number of repetitions for HIGH priority alerts
   */
  repetitions?: number | null | undefined;
  /**
   * Handoff step for HIGH priority alerts
   */
  handoffStep?: UpdateTeamEscalationPolicyHighHandoffStep | null | undefined;
};

export const UpdateTeamEscalationPolicyMediumTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
export type UpdateTeamEscalationPolicyMediumTargetType = ClosedEnum<
  typeof UpdateTeamEscalationPolicyMediumTargetType
>;

/**
 * Handoff step for MEDIUM priority alerts
 */
export type UpdateTeamEscalationPolicyMediumHandoffStep = {
  targetType: UpdateTeamEscalationPolicyMediumTargetType;
  targetId: string;
};

/**
 * Settings for MEDIUM priority alerts
 */
export type UpdateTeamEscalationPolicyMedium = {
  /**
   * Number of repetitions for MEDIUM priority alerts
   */
  repetitions?: number | null | undefined;
  /**
   * Handoff step for MEDIUM priority alerts
   */
  handoffStep?: UpdateTeamEscalationPolicyMediumHandoffStep | null | undefined;
};

export const UpdateTeamEscalationPolicyLowTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
export type UpdateTeamEscalationPolicyLowTargetType = ClosedEnum<
  typeof UpdateTeamEscalationPolicyLowTargetType
>;

/**
 * Handoff step for LOW priority alerts
 */
export type UpdateTeamEscalationPolicyLowHandoffStep = {
  targetType: UpdateTeamEscalationPolicyLowTargetType;
  targetId: string;
};

/**
 * Settings for LOW priority alerts
 */
export type UpdateTeamEscalationPolicyLow = {
  /**
   * Number of repetitions for LOW priority alerts
   */
  repetitions?: number | null | undefined;
  /**
   * Handoff step for LOW priority alerts
   */
  handoffStep?: UpdateTeamEscalationPolicyLowHandoffStep | null | undefined;
};

/**
 * Priority-specific settings for dynamic escalation policies
 */
export type UpdateTeamEscalationPolicyPrioritizedSettings = {
  /**
   * Settings for HIGH priority alerts
   */
  high?: UpdateTeamEscalationPolicyHigh | null | undefined;
  /**
   * Settings for MEDIUM priority alerts
   */
  medium?: UpdateTeamEscalationPolicyMedium | null | undefined;
  /**
   * Settings for LOW priority alerts
   */
  low?: UpdateTeamEscalationPolicyLow | null | undefined;
};

/**
 * Update a Signals escalation policy by ID
 */
export type UpdateTeamEscalationPolicy = {
  /**
   * The escalation policy's name.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the escalation policy.
   */
  description?: string | null | undefined;
  /**
   * The number of times that the escalation policy should repeat before an alert is dropped.
   */
  repetitions?: number | null | undefined;
  /**
   * Whether this escalation policy should be the default for the team.
   */
  default?: boolean | null | undefined;
  /**
   * The strategy for handling steps in the escalation policy. Can be "static" or "dynamic_by_priority".
   */
  stepStrategy?: string | null | undefined;
  /**
   * A list of steps that define how an alert should escalate through the policy.
   */
  steps?: Array<UpdateTeamEscalationPolicyStep> | null | undefined;
  /**
   * A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
   */
  handoffStep?: UpdateTeamEscalationPolicyHandoffStep | null | undefined;
  /**
   * Priority-specific settings for dynamic escalation policies
   */
  prioritizedSettings?:
    | UpdateTeamEscalationPolicyPrioritizedSettings
    | null
    | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicyType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamEscalationPolicyType
> = z.nativeEnum(UpdateTeamEscalationPolicyType);

/** @internal */
export const UpdateTeamEscalationPolicyType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamEscalationPolicyType
> = UpdateTeamEscalationPolicyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyType$ {
  /** @deprecated use `UpdateTeamEscalationPolicyType$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicyType$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyType$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicyType$outboundSchema;
}

/** @internal */
export const UpdateTeamEscalationPolicyTarget$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateTeamEscalationPolicyType$inboundSchema,
  id: z.string(),
});

/** @internal */
export type UpdateTeamEscalationPolicyTarget$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const UpdateTeamEscalationPolicyTarget$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyTarget$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyTarget
> = z.object({
  type: UpdateTeamEscalationPolicyType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyTarget$ {
  /** @deprecated use `UpdateTeamEscalationPolicyTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicyTarget$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicyTarget$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyTarget$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyTarget$Outbound;
}

export function updateTeamEscalationPolicyTargetToJSON(
  updateTeamEscalationPolicyTarget: UpdateTeamEscalationPolicyTarget,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyTarget$outboundSchema.parse(
      updateTeamEscalationPolicyTarget,
    ),
  );
}

export function updateTeamEscalationPolicyTargetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicyTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamEscalationPolicyTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicyTarget' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyDistributionType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyDistributionType> = z
    .nativeEnum(UpdateTeamEscalationPolicyDistributionType);

/** @internal */
export const UpdateTeamEscalationPolicyDistributionType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyDistributionType> =
    UpdateTeamEscalationPolicyDistributionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyDistributionType$ {
  /** @deprecated use `UpdateTeamEscalationPolicyDistributionType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyDistributionType$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyDistributionType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyDistributionType$outboundSchema;
}

/** @internal */
export const UpdateTeamEscalationPolicyStep$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  targets: z.nullable(
    z.array(z.lazy(() => UpdateTeamEscalationPolicyTarget$inboundSchema)),
  ).optional(),
  timeout: z.string(),
  distribution_type: z.nullable(
    UpdateTeamEscalationPolicyDistributionType$inboundSchema,
  ).optional(),
  priorities: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "distribution_type": "distributionType",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyStep$Outbound = {
  targets?: Array<UpdateTeamEscalationPolicyTarget$Outbound> | null | undefined;
  timeout: string;
  distribution_type?: string | null | undefined;
  priorities?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicyStep$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyStep$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyStep
> = z.object({
  targets: z.nullable(
    z.array(z.lazy(() => UpdateTeamEscalationPolicyTarget$outboundSchema)),
  ).optional(),
  timeout: z.string(),
  distributionType: z.nullable(
    UpdateTeamEscalationPolicyDistributionType$outboundSchema,
  ).optional(),
  priorities: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    distributionType: "distribution_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyStep$ {
  /** @deprecated use `UpdateTeamEscalationPolicyStep$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicyStep$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyStep$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicyStep$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyStep$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyStep$Outbound;
}

export function updateTeamEscalationPolicyStepToJSON(
  updateTeamEscalationPolicyStep: UpdateTeamEscalationPolicyStep,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyStep$outboundSchema.parse(
      updateTeamEscalationPolicyStep,
    ),
  );
}

export function updateTeamEscalationPolicyStepFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicyStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamEscalationPolicyStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicyStep' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyTargetType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyTargetType> = z.nativeEnum(
    UpdateTeamEscalationPolicyTargetType,
  );

/** @internal */
export const UpdateTeamEscalationPolicyTargetType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyTargetType> =
    UpdateTeamEscalationPolicyTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyTargetType$ {
  /** @deprecated use `UpdateTeamEscalationPolicyTargetType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyTargetType$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyTargetType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyTargetType$outboundSchema;
}

/** @internal */
export const UpdateTeamEscalationPolicyHandoffStep$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyHandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: UpdateTeamEscalationPolicyTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const UpdateTeamEscalationPolicyHandoffStep$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyHandoffStep$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyHandoffStep
> = z.object({
  targetType: UpdateTeamEscalationPolicyTargetType$outboundSchema,
  targetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyHandoffStep$ {
  /** @deprecated use `UpdateTeamEscalationPolicyHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyHandoffStep$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyHandoffStep$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHandoffStep$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyHandoffStep$Outbound;
}

export function updateTeamEscalationPolicyHandoffStepToJSON(
  updateTeamEscalationPolicyHandoffStep: UpdateTeamEscalationPolicyHandoffStep,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyHandoffStep$outboundSchema.parse(
      updateTeamEscalationPolicyHandoffStep,
    ),
  );
}

export function updateTeamEscalationPolicyHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicyHandoffStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTeamEscalationPolicyHandoffStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicyHandoffStep' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyHighTargetType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyHighTargetType> = z
    .nativeEnum(UpdateTeamEscalationPolicyHighTargetType);

/** @internal */
export const UpdateTeamEscalationPolicyHighTargetType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyHighTargetType> =
    UpdateTeamEscalationPolicyHighTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyHighTargetType$ {
  /** @deprecated use `UpdateTeamEscalationPolicyHighTargetType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyHighTargetType$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHighTargetType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyHighTargetType$outboundSchema;
}

/** @internal */
export const UpdateTeamEscalationPolicyHighHandoffStep$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyHighHandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: UpdateTeamEscalationPolicyHighTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyHighHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const UpdateTeamEscalationPolicyHighHandoffStep$outboundSchema:
  z.ZodType<
    UpdateTeamEscalationPolicyHighHandoffStep$Outbound,
    z.ZodTypeDef,
    UpdateTeamEscalationPolicyHighHandoffStep
  > = z.object({
    targetType: UpdateTeamEscalationPolicyHighTargetType$outboundSchema,
    targetId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      targetType: "target_type",
      targetId: "target_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyHighHandoffStep$ {
  /** @deprecated use `UpdateTeamEscalationPolicyHighHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyHighHandoffStep$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHighHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyHighHandoffStep$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHighHandoffStep$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyHighHandoffStep$Outbound;
}

export function updateTeamEscalationPolicyHighHandoffStepToJSON(
  updateTeamEscalationPolicyHighHandoffStep:
    UpdateTeamEscalationPolicyHighHandoffStep,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyHighHandoffStep$outboundSchema.parse(
      updateTeamEscalationPolicyHighHandoffStep,
    ),
  );
}

export function updateTeamEscalationPolicyHighHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateTeamEscalationPolicyHighHandoffStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTeamEscalationPolicyHighHandoffStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateTeamEscalationPolicyHighHandoffStep' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyHigh$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyHigh,
  z.ZodTypeDef,
  unknown
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoff_step: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyHighHandoffStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyHigh$Outbound = {
  repetitions?: number | null | undefined;
  handoff_step?:
    | UpdateTeamEscalationPolicyHighHandoffStep$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicyHigh$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyHigh$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyHigh
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoffStep: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyHighHandoffStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyHigh$ {
  /** @deprecated use `UpdateTeamEscalationPolicyHigh$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicyHigh$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHigh$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicyHigh$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyHigh$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyHigh$Outbound;
}

export function updateTeamEscalationPolicyHighToJSON(
  updateTeamEscalationPolicyHigh: UpdateTeamEscalationPolicyHigh,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyHigh$outboundSchema.parse(
      updateTeamEscalationPolicyHigh,
    ),
  );
}

export function updateTeamEscalationPolicyHighFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicyHigh, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamEscalationPolicyHigh$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicyHigh' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyMediumTargetType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyMediumTargetType> = z
    .nativeEnum(UpdateTeamEscalationPolicyMediumTargetType);

/** @internal */
export const UpdateTeamEscalationPolicyMediumTargetType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyMediumTargetType> =
    UpdateTeamEscalationPolicyMediumTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyMediumTargetType$ {
  /** @deprecated use `UpdateTeamEscalationPolicyMediumTargetType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyMediumTargetType$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyMediumTargetType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyMediumTargetType$outboundSchema;
}

/** @internal */
export const UpdateTeamEscalationPolicyMediumHandoffStep$inboundSchema:
  z.ZodType<
    UpdateTeamEscalationPolicyMediumHandoffStep,
    z.ZodTypeDef,
    unknown
  > = z.object({
    target_type: UpdateTeamEscalationPolicyMediumTargetType$inboundSchema,
    target_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "target_type": "targetType",
      "target_id": "targetId",
    });
  });

/** @internal */
export type UpdateTeamEscalationPolicyMediumHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const UpdateTeamEscalationPolicyMediumHandoffStep$outboundSchema:
  z.ZodType<
    UpdateTeamEscalationPolicyMediumHandoffStep$Outbound,
    z.ZodTypeDef,
    UpdateTeamEscalationPolicyMediumHandoffStep
  > = z.object({
    targetType: UpdateTeamEscalationPolicyMediumTargetType$outboundSchema,
    targetId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      targetType: "target_type",
      targetId: "target_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyMediumHandoffStep$ {
  /** @deprecated use `UpdateTeamEscalationPolicyMediumHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyMediumHandoffStep$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyMediumHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyMediumHandoffStep$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyMediumHandoffStep$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyMediumHandoffStep$Outbound;
}

export function updateTeamEscalationPolicyMediumHandoffStepToJSON(
  updateTeamEscalationPolicyMediumHandoffStep:
    UpdateTeamEscalationPolicyMediumHandoffStep,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyMediumHandoffStep$outboundSchema.parse(
      updateTeamEscalationPolicyMediumHandoffStep,
    ),
  );
}

export function updateTeamEscalationPolicyMediumHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateTeamEscalationPolicyMediumHandoffStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTeamEscalationPolicyMediumHandoffStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateTeamEscalationPolicyMediumHandoffStep' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyMedium$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyMedium,
  z.ZodTypeDef,
  unknown
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoff_step: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyMediumHandoffStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyMedium$Outbound = {
  repetitions?: number | null | undefined;
  handoff_step?:
    | UpdateTeamEscalationPolicyMediumHandoffStep$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicyMedium$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyMedium$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyMedium
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoffStep: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyMediumHandoffStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyMedium$ {
  /** @deprecated use `UpdateTeamEscalationPolicyMedium$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicyMedium$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyMedium$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicyMedium$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyMedium$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyMedium$Outbound;
}

export function updateTeamEscalationPolicyMediumToJSON(
  updateTeamEscalationPolicyMedium: UpdateTeamEscalationPolicyMedium,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyMedium$outboundSchema.parse(
      updateTeamEscalationPolicyMedium,
    ),
  );
}

export function updateTeamEscalationPolicyMediumFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicyMedium, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamEscalationPolicyMedium$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicyMedium' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyLowTargetType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyLowTargetType> = z
    .nativeEnum(UpdateTeamEscalationPolicyLowTargetType);

/** @internal */
export const UpdateTeamEscalationPolicyLowTargetType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamEscalationPolicyLowTargetType> =
    UpdateTeamEscalationPolicyLowTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyLowTargetType$ {
  /** @deprecated use `UpdateTeamEscalationPolicyLowTargetType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyLowTargetType$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyLowTargetType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyLowTargetType$outboundSchema;
}

/** @internal */
export const UpdateTeamEscalationPolicyLowHandoffStep$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyLowHandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: UpdateTeamEscalationPolicyLowTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyLowHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const UpdateTeamEscalationPolicyLowHandoffStep$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyLowHandoffStep$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyLowHandoffStep
> = z.object({
  targetType: UpdateTeamEscalationPolicyLowTargetType$outboundSchema,
  targetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyLowHandoffStep$ {
  /** @deprecated use `UpdateTeamEscalationPolicyLowHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyLowHandoffStep$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyLowHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyLowHandoffStep$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyLowHandoffStep$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyLowHandoffStep$Outbound;
}

export function updateTeamEscalationPolicyLowHandoffStepToJSON(
  updateTeamEscalationPolicyLowHandoffStep:
    UpdateTeamEscalationPolicyLowHandoffStep,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyLowHandoffStep$outboundSchema.parse(
      updateTeamEscalationPolicyLowHandoffStep,
    ),
  );
}

export function updateTeamEscalationPolicyLowHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateTeamEscalationPolicyLowHandoffStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTeamEscalationPolicyLowHandoffStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateTeamEscalationPolicyLowHandoffStep' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyLow$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyLow,
  z.ZodTypeDef,
  unknown
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoff_step: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyLowHandoffStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicyLow$Outbound = {
  repetitions?: number | null | undefined;
  handoff_step?:
    | UpdateTeamEscalationPolicyLowHandoffStep$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicyLow$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicyLow$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicyLow
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoffStep: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyLowHandoffStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyLow$ {
  /** @deprecated use `UpdateTeamEscalationPolicyLow$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicyLow$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyLow$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicyLow$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyLow$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyLow$Outbound;
}

export function updateTeamEscalationPolicyLowToJSON(
  updateTeamEscalationPolicyLow: UpdateTeamEscalationPolicyLow,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyLow$outboundSchema.parse(
      updateTeamEscalationPolicyLow,
    ),
  );
}

export function updateTeamEscalationPolicyLowFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicyLow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamEscalationPolicyLow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicyLow' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicyPrioritizedSettings$inboundSchema:
  z.ZodType<
    UpdateTeamEscalationPolicyPrioritizedSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    high: z.nullable(z.lazy(() => UpdateTeamEscalationPolicyHigh$inboundSchema))
      .optional(),
    medium: z.nullable(
      z.lazy(() => UpdateTeamEscalationPolicyMedium$inboundSchema),
    ).optional(),
    low: z.nullable(z.lazy(() => UpdateTeamEscalationPolicyLow$inboundSchema))
      .optional(),
  });

/** @internal */
export type UpdateTeamEscalationPolicyPrioritizedSettings$Outbound = {
  high?: UpdateTeamEscalationPolicyHigh$Outbound | null | undefined;
  medium?: UpdateTeamEscalationPolicyMedium$Outbound | null | undefined;
  low?: UpdateTeamEscalationPolicyLow$Outbound | null | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicyPrioritizedSettings$outboundSchema:
  z.ZodType<
    UpdateTeamEscalationPolicyPrioritizedSettings$Outbound,
    z.ZodTypeDef,
    UpdateTeamEscalationPolicyPrioritizedSettings
  > = z.object({
    high: z.nullable(
      z.lazy(() => UpdateTeamEscalationPolicyHigh$outboundSchema),
    ).optional(),
    medium: z.nullable(
      z.lazy(() => UpdateTeamEscalationPolicyMedium$outboundSchema),
    ).optional(),
    low: z.nullable(z.lazy(() => UpdateTeamEscalationPolicyLow$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicyPrioritizedSettings$ {
  /** @deprecated use `UpdateTeamEscalationPolicyPrioritizedSettings$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamEscalationPolicyPrioritizedSettings$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyPrioritizedSettings$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamEscalationPolicyPrioritizedSettings$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicyPrioritizedSettings$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicyPrioritizedSettings$Outbound;
}

export function updateTeamEscalationPolicyPrioritizedSettingsToJSON(
  updateTeamEscalationPolicyPrioritizedSettings:
    UpdateTeamEscalationPolicyPrioritizedSettings,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicyPrioritizedSettings$outboundSchema.parse(
      updateTeamEscalationPolicyPrioritizedSettings,
    ),
  );
}

export function updateTeamEscalationPolicyPrioritizedSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateTeamEscalationPolicyPrioritizedSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTeamEscalationPolicyPrioritizedSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateTeamEscalationPolicyPrioritizedSettings' from JSON`,
  );
}

/** @internal */
export const UpdateTeamEscalationPolicy$inboundSchema: z.ZodType<
  UpdateTeamEscalationPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  repetitions: z.nullable(z.number().int().default(0)),
  default: z.nullable(z.boolean().default(false)),
  step_strategy: z.nullable(z.string()).optional(),
  steps: z.nullable(
    z.array(z.lazy(() => UpdateTeamEscalationPolicyStep$inboundSchema)),
  ).optional(),
  handoff_step: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyHandoffStep$inboundSchema),
  ).optional(),
  prioritized_settings: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyPrioritizedSettings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "step_strategy": "stepStrategy",
    "handoff_step": "handoffStep",
    "prioritized_settings": "prioritizedSettings",
  });
});

/** @internal */
export type UpdateTeamEscalationPolicy$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  repetitions: number | null;
  default: boolean | null;
  step_strategy?: string | null | undefined;
  steps?: Array<UpdateTeamEscalationPolicyStep$Outbound> | null | undefined;
  handoff_step?:
    | UpdateTeamEscalationPolicyHandoffStep$Outbound
    | null
    | undefined;
  prioritized_settings?:
    | UpdateTeamEscalationPolicyPrioritizedSettings$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateTeamEscalationPolicy$outboundSchema: z.ZodType<
  UpdateTeamEscalationPolicy$Outbound,
  z.ZodTypeDef,
  UpdateTeamEscalationPolicy
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  repetitions: z.nullable(z.number().int().default(0)),
  default: z.nullable(z.boolean().default(false)),
  stepStrategy: z.nullable(z.string()).optional(),
  steps: z.nullable(
    z.array(z.lazy(() => UpdateTeamEscalationPolicyStep$outboundSchema)),
  ).optional(),
  handoffStep: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyHandoffStep$outboundSchema),
  ).optional(),
  prioritizedSettings: z.nullable(
    z.lazy(() => UpdateTeamEscalationPolicyPrioritizedSettings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    stepStrategy: "step_strategy",
    handoffStep: "handoff_step",
    prioritizedSettings: "prioritized_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamEscalationPolicy$ {
  /** @deprecated use `UpdateTeamEscalationPolicy$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamEscalationPolicy$inboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicy$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamEscalationPolicy$outboundSchema;
  /** @deprecated use `UpdateTeamEscalationPolicy$Outbound` instead. */
  export type Outbound = UpdateTeamEscalationPolicy$Outbound;
}

export function updateTeamEscalationPolicyToJSON(
  updateTeamEscalationPolicy: UpdateTeamEscalationPolicy,
): string {
  return JSON.stringify(
    UpdateTeamEscalationPolicy$outboundSchema.parse(updateTeamEscalationPolicy),
  );
}

export function updateTeamEscalationPolicyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamEscalationPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamEscalationPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamEscalationPolicy' from JSON`,
  );
}
