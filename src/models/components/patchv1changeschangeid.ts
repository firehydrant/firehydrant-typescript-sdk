/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a change entry
 */
export type PatchV1ChangesChangeId = {
  summary?: string | undefined;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
};

/** @internal */
export const PatchV1ChangesChangeId$inboundSchema: z.ZodType<
  PatchV1ChangesChangeId,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string().optional(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
});

/** @internal */
export type PatchV1ChangesChangeId$Outbound = {
  summary?: string | undefined;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
};

/** @internal */
export const PatchV1ChangesChangeId$outboundSchema: z.ZodType<
  PatchV1ChangesChangeId$Outbound,
  z.ZodTypeDef,
  PatchV1ChangesChangeId
> = z.object({
  summary: z.string().optional(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChangesChangeId$ {
  /** @deprecated use `PatchV1ChangesChangeId$inboundSchema` instead. */
  export const inboundSchema = PatchV1ChangesChangeId$inboundSchema;
  /** @deprecated use `PatchV1ChangesChangeId$outboundSchema` instead. */
  export const outboundSchema = PatchV1ChangesChangeId$outboundSchema;
  /** @deprecated use `PatchV1ChangesChangeId$Outbound` instead. */
  export type Outbound = PatchV1ChangesChangeId$Outbound;
}

export function patchV1ChangesChangeIdToJSON(
  patchV1ChangesChangeId: PatchV1ChangesChangeId,
): string {
  return JSON.stringify(
    PatchV1ChangesChangeId$outboundSchema.parse(patchV1ChangesChangeId),
  );
}

export function patchV1ChangesChangeIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ChangesChangeId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ChangesChangeId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ChangesChangeId' from JSON`,
  );
}
