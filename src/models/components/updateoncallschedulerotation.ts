/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateOnCallScheduleRotationMember = {
  /**
   * The ID of a user who should be added to the rotation. You can add a user to the rotation
   *
   * @remarks
   * multiple times to construct more complex rotations, and you can specify a `null` user ID to create
   * unassigned slots in the rotation.
   */
  userId?: string | null | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const UpdateOnCallScheduleRotationType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type UpdateOnCallScheduleRotationType = ClosedEnum<
  typeof UpdateOnCallScheduleRotationType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const UpdateOnCallScheduleRotationHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type UpdateOnCallScheduleRotationHandoffDay = ClosedEnum<
  typeof UpdateOnCallScheduleRotationHandoffDay
>;

/**
 * An object that specifies how the rotation's on-call shifts should be generated.
 */
export type UpdateOnCallScheduleRotationStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: UpdateOnCallScheduleRotationType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | null | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?: UpdateOnCallScheduleRotationHandoffDay | null | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | null | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const UpdateOnCallScheduleRotationStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type UpdateOnCallScheduleRotationStartDay = ClosedEnum<
  typeof UpdateOnCallScheduleRotationStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const UpdateOnCallScheduleRotationEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type UpdateOnCallScheduleRotationEndDay = ClosedEnum<
  typeof UpdateOnCallScheduleRotationEndDay
>;

export type UpdateOnCallScheduleRotationRestriction = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: UpdateOnCallScheduleRotationStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: UpdateOnCallScheduleRotationEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

/**
 * Update an on-call schedule's rotation by ID
 */
export type UpdateOnCallScheduleRotation = {
  /**
   * The name of the on-call rotation
   */
  name?: string | null | undefined;
  /**
   * The description of the on-call rotation
   */
  description?: string | null | undefined;
  /**
   * The timezone of the on-call rotation as a string
   */
  timeZone?: string | null | undefined;
  /**
   * The Slack Usergroup ID for the on-call rotation
   */
  slackUserGroupId?: string | null | undefined;
  /**
   * Notify the team's Slack channel when handoffs occur
   */
  enableSlackChannelNotifications?: boolean | null | undefined;
  /**
   * An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
   */
  coverageGapNotificationInterval?: string | null | undefined;
  /**
   * Prevent shifts from being deleted by users and leading to gaps in coverage.
   */
  preventShiftDeletion?: boolean | null | undefined;
  /**
   * A hex color code that will be used to represent the rotation in FireHydrant's UI.
   */
  color?: string | null | undefined;
  /**
   * An ordered list of objects that specify members of the schedule's rotation.
   */
  members?: Array<UpdateOnCallScheduleRotationMember> | null | undefined;
  /**
   * An object that specifies how the rotation's on-call shifts should be generated.
   */
  strategy?: UpdateOnCallScheduleRotationStrategy | null | undefined;
  /**
   * A list of objects that restrict the rotation to specific on-call periods.
   */
  restrictions?:
    | Array<UpdateOnCallScheduleRotationRestriction>
    | null
    | undefined;
  /**
   * An ISO8601 time string specifying when the updated schedule should take effect. This
   *
   * @remarks
   * value must be provided if editing an attribute that would affect how the schedule's
   * shifts are generated, such as the time zone, members, strategy, or restrictions.
   */
  effectiveAt?: string | null | undefined;
};

/** @internal */
export const UpdateOnCallScheduleRotationMember$inboundSchema: z.ZodType<
  UpdateOnCallScheduleRotationMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type UpdateOnCallScheduleRotationMember$Outbound = {
  user_id?: string | null | undefined;
};

/** @internal */
export const UpdateOnCallScheduleRotationMember$outboundSchema: z.ZodType<
  UpdateOnCallScheduleRotationMember$Outbound,
  z.ZodTypeDef,
  UpdateOnCallScheduleRotationMember
> = z.object({
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationMember$ {
  /** @deprecated use `UpdateOnCallScheduleRotationMember$inboundSchema` instead. */
  export const inboundSchema = UpdateOnCallScheduleRotationMember$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationMember$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOnCallScheduleRotationMember$outboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationMember$Outbound` instead. */
  export type Outbound = UpdateOnCallScheduleRotationMember$Outbound;
}

export function updateOnCallScheduleRotationMemberToJSON(
  updateOnCallScheduleRotationMember: UpdateOnCallScheduleRotationMember,
): string {
  return JSON.stringify(
    UpdateOnCallScheduleRotationMember$outboundSchema.parse(
      updateOnCallScheduleRotationMember,
    ),
  );
}

export function updateOnCallScheduleRotationMemberFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOnCallScheduleRotationMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOnCallScheduleRotationMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOnCallScheduleRotationMember' from JSON`,
  );
}

/** @internal */
export const UpdateOnCallScheduleRotationType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateOnCallScheduleRotationType
> = z.nativeEnum(UpdateOnCallScheduleRotationType);

/** @internal */
export const UpdateOnCallScheduleRotationType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateOnCallScheduleRotationType
> = UpdateOnCallScheduleRotationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationType$ {
  /** @deprecated use `UpdateOnCallScheduleRotationType$inboundSchema` instead. */
  export const inboundSchema = UpdateOnCallScheduleRotationType$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationType$outboundSchema` instead. */
  export const outboundSchema = UpdateOnCallScheduleRotationType$outboundSchema;
}

/** @internal */
export const UpdateOnCallScheduleRotationHandoffDay$inboundSchema:
  z.ZodNativeEnum<typeof UpdateOnCallScheduleRotationHandoffDay> = z.nativeEnum(
    UpdateOnCallScheduleRotationHandoffDay,
  );

/** @internal */
export const UpdateOnCallScheduleRotationHandoffDay$outboundSchema:
  z.ZodNativeEnum<typeof UpdateOnCallScheduleRotationHandoffDay> =
    UpdateOnCallScheduleRotationHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationHandoffDay$ {
  /** @deprecated use `UpdateOnCallScheduleRotationHandoffDay$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOnCallScheduleRotationHandoffDay$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOnCallScheduleRotationHandoffDay$outboundSchema;
}

/** @internal */
export const UpdateOnCallScheduleRotationStrategy$inboundSchema: z.ZodType<
  UpdateOnCallScheduleRotationStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateOnCallScheduleRotationType$inboundSchema,
  handoff_time: z.nullable(z.string()).optional(),
  handoff_day: z.nullable(UpdateOnCallScheduleRotationHandoffDay$inboundSchema)
    .optional(),
  shift_duration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_time": "handoffTime",
    "handoff_day": "handoffDay",
    "shift_duration": "shiftDuration",
  });
});

/** @internal */
export type UpdateOnCallScheduleRotationStrategy$Outbound = {
  type: string;
  handoff_time?: string | null | undefined;
  handoff_day?: string | null | undefined;
  shift_duration?: string | null | undefined;
};

/** @internal */
export const UpdateOnCallScheduleRotationStrategy$outboundSchema: z.ZodType<
  UpdateOnCallScheduleRotationStrategy$Outbound,
  z.ZodTypeDef,
  UpdateOnCallScheduleRotationStrategy
> = z.object({
  type: UpdateOnCallScheduleRotationType$outboundSchema,
  handoffTime: z.nullable(z.string()).optional(),
  handoffDay: z.nullable(UpdateOnCallScheduleRotationHandoffDay$outboundSchema)
    .optional(),
  shiftDuration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffTime: "handoff_time",
    handoffDay: "handoff_day",
    shiftDuration: "shift_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationStrategy$ {
  /** @deprecated use `UpdateOnCallScheduleRotationStrategy$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOnCallScheduleRotationStrategy$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationStrategy$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOnCallScheduleRotationStrategy$outboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationStrategy$Outbound` instead. */
  export type Outbound = UpdateOnCallScheduleRotationStrategy$Outbound;
}

export function updateOnCallScheduleRotationStrategyToJSON(
  updateOnCallScheduleRotationStrategy: UpdateOnCallScheduleRotationStrategy,
): string {
  return JSON.stringify(
    UpdateOnCallScheduleRotationStrategy$outboundSchema.parse(
      updateOnCallScheduleRotationStrategy,
    ),
  );
}

export function updateOnCallScheduleRotationStrategyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOnCallScheduleRotationStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOnCallScheduleRotationStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOnCallScheduleRotationStrategy' from JSON`,
  );
}

/** @internal */
export const UpdateOnCallScheduleRotationStartDay$inboundSchema:
  z.ZodNativeEnum<typeof UpdateOnCallScheduleRotationStartDay> = z.nativeEnum(
    UpdateOnCallScheduleRotationStartDay,
  );

/** @internal */
export const UpdateOnCallScheduleRotationStartDay$outboundSchema:
  z.ZodNativeEnum<typeof UpdateOnCallScheduleRotationStartDay> =
    UpdateOnCallScheduleRotationStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationStartDay$ {
  /** @deprecated use `UpdateOnCallScheduleRotationStartDay$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOnCallScheduleRotationStartDay$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationStartDay$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOnCallScheduleRotationStartDay$outboundSchema;
}

/** @internal */
export const UpdateOnCallScheduleRotationEndDay$inboundSchema: z.ZodNativeEnum<
  typeof UpdateOnCallScheduleRotationEndDay
> = z.nativeEnum(UpdateOnCallScheduleRotationEndDay);

/** @internal */
export const UpdateOnCallScheduleRotationEndDay$outboundSchema: z.ZodNativeEnum<
  typeof UpdateOnCallScheduleRotationEndDay
> = UpdateOnCallScheduleRotationEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationEndDay$ {
  /** @deprecated use `UpdateOnCallScheduleRotationEndDay$inboundSchema` instead. */
  export const inboundSchema = UpdateOnCallScheduleRotationEndDay$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationEndDay$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOnCallScheduleRotationEndDay$outboundSchema;
}

/** @internal */
export const UpdateOnCallScheduleRotationRestriction$inboundSchema: z.ZodType<
  UpdateOnCallScheduleRotationRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_day: UpdateOnCallScheduleRotationStartDay$inboundSchema,
  start_time: z.string(),
  end_day: UpdateOnCallScheduleRotationEndDay$inboundSchema,
  end_time: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_day": "startDay",
    "start_time": "startTime",
    "end_day": "endDay",
    "end_time": "endTime",
  });
});

/** @internal */
export type UpdateOnCallScheduleRotationRestriction$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const UpdateOnCallScheduleRotationRestriction$outboundSchema: z.ZodType<
  UpdateOnCallScheduleRotationRestriction$Outbound,
  z.ZodTypeDef,
  UpdateOnCallScheduleRotationRestriction
> = z.object({
  startDay: UpdateOnCallScheduleRotationStartDay$outboundSchema,
  startTime: z.string(),
  endDay: UpdateOnCallScheduleRotationEndDay$outboundSchema,
  endTime: z.string(),
}).transform((v) => {
  return remap$(v, {
    startDay: "start_day",
    startTime: "start_time",
    endDay: "end_day",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotationRestriction$ {
  /** @deprecated use `UpdateOnCallScheduleRotationRestriction$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOnCallScheduleRotationRestriction$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationRestriction$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOnCallScheduleRotationRestriction$outboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotationRestriction$Outbound` instead. */
  export type Outbound = UpdateOnCallScheduleRotationRestriction$Outbound;
}

export function updateOnCallScheduleRotationRestrictionToJSON(
  updateOnCallScheduleRotationRestriction:
    UpdateOnCallScheduleRotationRestriction,
): string {
  return JSON.stringify(
    UpdateOnCallScheduleRotationRestriction$outboundSchema.parse(
      updateOnCallScheduleRotationRestriction,
    ),
  );
}

export function updateOnCallScheduleRotationRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateOnCallScheduleRotationRestriction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOnCallScheduleRotationRestriction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateOnCallScheduleRotationRestriction' from JSON`,
  );
}

/** @internal */
export const UpdateOnCallScheduleRotation$inboundSchema: z.ZodType<
  UpdateOnCallScheduleRotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  time_zone: z.nullable(z.string()).optional(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  enable_slack_channel_notifications: z.nullable(z.boolean()).optional(),
  coverage_gap_notification_interval: z.nullable(z.string()).optional(),
  prevent_shift_deletion: z.nullable(z.boolean()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => UpdateOnCallScheduleRotationMember$inboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => UpdateOnCallScheduleRotationStrategy$inboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(
      z.lazy(() => UpdateOnCallScheduleRotationRestriction$inboundSchema),
    ),
  ).optional(),
  effective_at: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "enable_slack_channel_notifications": "enableSlackChannelNotifications",
    "coverage_gap_notification_interval": "coverageGapNotificationInterval",
    "prevent_shift_deletion": "preventShiftDeletion",
    "effective_at": "effectiveAt",
  });
});

/** @internal */
export type UpdateOnCallScheduleRotation$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  time_zone?: string | null | undefined;
  slack_user_group_id?: string | null | undefined;
  enable_slack_channel_notifications?: boolean | null | undefined;
  coverage_gap_notification_interval?: string | null | undefined;
  prevent_shift_deletion?: boolean | null | undefined;
  color?: string | null | undefined;
  members?:
    | Array<UpdateOnCallScheduleRotationMember$Outbound>
    | null
    | undefined;
  strategy?: UpdateOnCallScheduleRotationStrategy$Outbound | null | undefined;
  restrictions?:
    | Array<UpdateOnCallScheduleRotationRestriction$Outbound>
    | null
    | undefined;
  effective_at?: string | null | undefined;
};

/** @internal */
export const UpdateOnCallScheduleRotation$outboundSchema: z.ZodType<
  UpdateOnCallScheduleRotation$Outbound,
  z.ZodTypeDef,
  UpdateOnCallScheduleRotation
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  timeZone: z.nullable(z.string()).optional(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  enableSlackChannelNotifications: z.nullable(z.boolean()).optional(),
  coverageGapNotificationInterval: z.nullable(z.string()).optional(),
  preventShiftDeletion: z.nullable(z.boolean()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => UpdateOnCallScheduleRotationMember$outboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => UpdateOnCallScheduleRotationStrategy$outboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(
      z.lazy(() => UpdateOnCallScheduleRotationRestriction$outboundSchema),
    ),
  ).optional(),
  effectiveAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    enableSlackChannelNotifications: "enable_slack_channel_notifications",
    coverageGapNotificationInterval: "coverage_gap_notification_interval",
    preventShiftDeletion: "prevent_shift_deletion",
    effectiveAt: "effective_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallScheduleRotation$ {
  /** @deprecated use `UpdateOnCallScheduleRotation$inboundSchema` instead. */
  export const inboundSchema = UpdateOnCallScheduleRotation$inboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotation$outboundSchema` instead. */
  export const outboundSchema = UpdateOnCallScheduleRotation$outboundSchema;
  /** @deprecated use `UpdateOnCallScheduleRotation$Outbound` instead. */
  export type Outbound = UpdateOnCallScheduleRotation$Outbound;
}

export function updateOnCallScheduleRotationToJSON(
  updateOnCallScheduleRotation: UpdateOnCallScheduleRotation,
): string {
  return JSON.stringify(
    UpdateOnCallScheduleRotation$outboundSchema.parse(
      updateOnCallScheduleRotation,
    ),
  );
}

export function updateOnCallScheduleRotationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOnCallScheduleRotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOnCallScheduleRotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOnCallScheduleRotation' from JSON`,
  );
}
