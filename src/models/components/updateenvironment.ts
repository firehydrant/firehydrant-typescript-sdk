/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a environments attributes
 */
export type UpdateEnvironment = {
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const UpdateEnvironment$inboundSchema: z.ZodType<
  UpdateEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateEnvironment$Outbound = {
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const UpdateEnvironment$outboundSchema: z.ZodType<
  UpdateEnvironment$Outbound,
  z.ZodTypeDef,
  UpdateEnvironment
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvironment$ {
  /** @deprecated use `UpdateEnvironment$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvironment$inboundSchema;
  /** @deprecated use `UpdateEnvironment$outboundSchema` instead. */
  export const outboundSchema = UpdateEnvironment$outboundSchema;
  /** @deprecated use `UpdateEnvironment$Outbound` instead. */
  export type Outbound = UpdateEnvironment$Outbound;
}

export function updateEnvironmentToJSON(
  updateEnvironment: UpdateEnvironment,
): string {
  return JSON.stringify(
    UpdateEnvironment$outboundSchema.parse(updateEnvironment),
  );
}

export function updateEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvironment' from JSON`,
  );
}
