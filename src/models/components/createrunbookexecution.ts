/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Attaches a runbook to an incident and executes it
 */
export type CreateRunbookExecution = {
  /**
   * The incident to attach the runbook to. Format must be: `incident/${incidentId}`
   */
  executeFor: string;
  /**
   * ID of runbook to attach
   */
  runbookId: string;
};

/** @internal */
export const CreateRunbookExecution$inboundSchema: z.ZodType<
  CreateRunbookExecution,
  z.ZodTypeDef,
  unknown
> = z.object({
  execute_for: z.string(),
  runbook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "execute_for": "executeFor",
    "runbook_id": "runbookId",
  });
});

/** @internal */
export type CreateRunbookExecution$Outbound = {
  execute_for: string;
  runbook_id: string;
};

/** @internal */
export const CreateRunbookExecution$outboundSchema: z.ZodType<
  CreateRunbookExecution$Outbound,
  z.ZodTypeDef,
  CreateRunbookExecution
> = z.object({
  executeFor: z.string(),
  runbookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    executeFor: "execute_for",
    runbookId: "runbook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbookExecution$ {
  /** @deprecated use `CreateRunbookExecution$inboundSchema` instead. */
  export const inboundSchema = CreateRunbookExecution$inboundSchema;
  /** @deprecated use `CreateRunbookExecution$outboundSchema` instead. */
  export const outboundSchema = CreateRunbookExecution$outboundSchema;
  /** @deprecated use `CreateRunbookExecution$Outbound` instead. */
  export type Outbound = CreateRunbookExecution$Outbound;
}

export function createRunbookExecutionToJSON(
  createRunbookExecution: CreateRunbookExecution,
): string {
  return JSON.stringify(
    CreateRunbookExecution$outboundSchema.parse(createRunbookExecution),
  );
}

export function createRunbookExecutionFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunbookExecution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunbookExecution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunbookExecution' from JSON`,
  );
}
