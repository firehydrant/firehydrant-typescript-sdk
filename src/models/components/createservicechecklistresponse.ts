/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Creates a response for a checklist item
 */
export type CreateServiceChecklistResponse = {
  checkId: string;
  /**
   * Status of the check. 'true' if it's complete, 'false' if incomplete, or blank if not yet interacted with
   */
  status: boolean;
};

/** @internal */
export const CreateServiceChecklistResponse$inboundSchema: z.ZodType<
  CreateServiceChecklistResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  check_id: z.string(),
  status: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "check_id": "checkId",
  });
});

/** @internal */
export type CreateServiceChecklistResponse$Outbound = {
  check_id: string;
  status: boolean;
};

/** @internal */
export const CreateServiceChecklistResponse$outboundSchema: z.ZodType<
  CreateServiceChecklistResponse$Outbound,
  z.ZodTypeDef,
  CreateServiceChecklistResponse
> = z.object({
  checkId: z.string(),
  status: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    checkId: "check_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceChecklistResponse$ {
  /** @deprecated use `CreateServiceChecklistResponse$inboundSchema` instead. */
  export const inboundSchema = CreateServiceChecklistResponse$inboundSchema;
  /** @deprecated use `CreateServiceChecklistResponse$outboundSchema` instead. */
  export const outboundSchema = CreateServiceChecklistResponse$outboundSchema;
  /** @deprecated use `CreateServiceChecklistResponse$Outbound` instead. */
  export type Outbound = CreateServiceChecklistResponse$Outbound;
}

export function createServiceChecklistResponseToJSON(
  createServiceChecklistResponse: CreateServiceChecklistResponse,
): string {
  return JSON.stringify(
    CreateServiceChecklistResponse$outboundSchema.parse(
      createServiceChecklistResponse,
    ),
  );
}

export function createServiceChecklistResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceChecklistResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceChecklistResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceChecklistResponse' from JSON`,
  );
}
