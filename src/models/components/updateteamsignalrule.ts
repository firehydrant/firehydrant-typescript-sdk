/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the rule will notify when matched.
 */
export const UpdateTeamSignalRuleTargetType = {
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  Webhook: "Webhook",
  SlackChannel: "SlackChannel",
  MicrosoftTeamsChannel: "MicrosoftTeamsChannel",
} as const;
/**
 * The type of target that the rule will notify when matched.
 */
export type UpdateTeamSignalRuleTargetType = ClosedEnum<
  typeof UpdateTeamSignalRuleTargetType
>;

/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export const UpdateTeamSignalRuleNotificationPriorityOverride = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
  Unknown: "",
} as const;
/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export type UpdateTeamSignalRuleNotificationPriorityOverride = ClosedEnum<
  typeof UpdateTeamSignalRuleNotificationPriorityOverride
>;

/**
 * Determines when an incident should be created when this rule is matched
 */
export const UpdateTeamSignalRuleCreateIncidentConditionWhen = {
  WhenUnspecified: "WHEN_UNSPECIFIED",
  WhenAlways: "WHEN_ALWAYS",
} as const;
/**
 * Determines when an incident should be created when this rule is matched
 */
export type UpdateTeamSignalRuleCreateIncidentConditionWhen = ClosedEnum<
  typeof UpdateTeamSignalRuleCreateIncidentConditionWhen
>;

/**
 * Update a Signals rule by ID
 */
export type UpdateTeamSignalRule = {
  /**
   * The rule's name.
   */
  name?: string | null | undefined;
  /**
   * The CEL expression that defines the rule.
   */
  expression?: string | null | undefined;
  /**
   * The type of target that the rule will notify when matched.
   */
  targetType?: UpdateTeamSignalRuleTargetType | null | undefined;
  /**
   * The ID of the target that the rule will notify when matched.
   */
  targetId?: string | null | undefined;
  /**
   * The ID of an incident type that should be used when an alert is promoted to an incident
   */
  incidentTypeId?: string | null | undefined;
  /**
   * A notification priority that will be set on the resulting alert (default: HIGH)
   */
  notificationPriorityOverride?:
    | UpdateTeamSignalRuleNotificationPriorityOverride
    | null
    | undefined;
  /**
   * Determines when an incident should be created when this rule is matched
   */
  createIncidentConditionWhen?:
    | UpdateTeamSignalRuleCreateIncidentConditionWhen
    | null
    | undefined;
  /**
   * The amount of time alerts created from this rule will be deduplicated
   */
  deduplicationExpiry?: string | null | undefined;
};

/** @internal */
export const UpdateTeamSignalRuleTargetType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamSignalRuleTargetType
> = z.nativeEnum(UpdateTeamSignalRuleTargetType);

/** @internal */
export const UpdateTeamSignalRuleTargetType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamSignalRuleTargetType
> = UpdateTeamSignalRuleTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamSignalRuleTargetType$ {
  /** @deprecated use `UpdateTeamSignalRuleTargetType$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamSignalRuleTargetType$inboundSchema;
  /** @deprecated use `UpdateTeamSignalRuleTargetType$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamSignalRuleTargetType$outboundSchema;
}

/** @internal */
export const UpdateTeamSignalRuleNotificationPriorityOverride$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamSignalRuleNotificationPriorityOverride> = z
    .nativeEnum(UpdateTeamSignalRuleNotificationPriorityOverride);

/** @internal */
export const UpdateTeamSignalRuleNotificationPriorityOverride$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamSignalRuleNotificationPriorityOverride> =
    UpdateTeamSignalRuleNotificationPriorityOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamSignalRuleNotificationPriorityOverride$ {
  /** @deprecated use `UpdateTeamSignalRuleNotificationPriorityOverride$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamSignalRuleNotificationPriorityOverride$inboundSchema;
  /** @deprecated use `UpdateTeamSignalRuleNotificationPriorityOverride$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamSignalRuleNotificationPriorityOverride$outboundSchema;
}

/** @internal */
export const UpdateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamSignalRuleCreateIncidentConditionWhen> = z
    .nativeEnum(UpdateTeamSignalRuleCreateIncidentConditionWhen);

/** @internal */
export const UpdateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema:
  z.ZodNativeEnum<typeof UpdateTeamSignalRuleCreateIncidentConditionWhen> =
    UpdateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamSignalRuleCreateIncidentConditionWhen$ {
  /** @deprecated use `UpdateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema;
  /** @deprecated use `UpdateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema;
}

/** @internal */
export const UpdateTeamSignalRule$inboundSchema: z.ZodType<
  UpdateTeamSignalRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  expression: z.nullable(z.string()).optional(),
  target_type: z.nullable(UpdateTeamSignalRuleTargetType$inboundSchema)
    .optional(),
  target_id: z.nullable(z.string()).optional(),
  incident_type_id: z.nullable(z.string()).optional(),
  notification_priority_override: z.nullable(
    UpdateTeamSignalRuleNotificationPriorityOverride$inboundSchema,
  ).optional(),
  create_incident_condition_when: z.nullable(
    UpdateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema,
  ).optional(),
  deduplication_expiry: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
    "incident_type_id": "incidentTypeId",
    "notification_priority_override": "notificationPriorityOverride",
    "create_incident_condition_when": "createIncidentConditionWhen",
    "deduplication_expiry": "deduplicationExpiry",
  });
});

/** @internal */
export type UpdateTeamSignalRule$Outbound = {
  name?: string | null | undefined;
  expression?: string | null | undefined;
  target_type?: string | null | undefined;
  target_id?: string | null | undefined;
  incident_type_id?: string | null | undefined;
  notification_priority_override?: string | null | undefined;
  create_incident_condition_when?: string | null | undefined;
  deduplication_expiry?: string | null | undefined;
};

/** @internal */
export const UpdateTeamSignalRule$outboundSchema: z.ZodType<
  UpdateTeamSignalRule$Outbound,
  z.ZodTypeDef,
  UpdateTeamSignalRule
> = z.object({
  name: z.nullable(z.string()).optional(),
  expression: z.nullable(z.string()).optional(),
  targetType: z.nullable(UpdateTeamSignalRuleTargetType$outboundSchema)
    .optional(),
  targetId: z.nullable(z.string()).optional(),
  incidentTypeId: z.nullable(z.string()).optional(),
  notificationPriorityOverride: z.nullable(
    UpdateTeamSignalRuleNotificationPriorityOverride$outboundSchema,
  ).optional(),
  createIncidentConditionWhen: z.nullable(
    UpdateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema,
  ).optional(),
  deduplicationExpiry: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
    incidentTypeId: "incident_type_id",
    notificationPriorityOverride: "notification_priority_override",
    createIncidentConditionWhen: "create_incident_condition_when",
    deduplicationExpiry: "deduplication_expiry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamSignalRule$ {
  /** @deprecated use `UpdateTeamSignalRule$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamSignalRule$inboundSchema;
  /** @deprecated use `UpdateTeamSignalRule$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamSignalRule$outboundSchema;
  /** @deprecated use `UpdateTeamSignalRule$Outbound` instead. */
  export type Outbound = UpdateTeamSignalRule$Outbound;
}

export function updateTeamSignalRuleToJSON(
  updateTeamSignalRule: UpdateTeamSignalRule,
): string {
  return JSON.stringify(
    UpdateTeamSignalRule$outboundSchema.parse(updateTeamSignalRule),
  );
}

export function updateTeamSignalRuleFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamSignalRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamSignalRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamSignalRule' from JSON`,
  );
}
