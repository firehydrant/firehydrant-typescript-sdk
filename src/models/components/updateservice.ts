/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Checklist = {
  id: string;
  /**
   * Set to `true` to remove checklist from service
   */
  remove?: boolean | null | undefined;
};

export type UpdateServiceExternalResource = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | null | undefined;
  /**
   * If you are trying to remove an external resource from a service, set this to 'true'.
   */
  remove?: boolean | null | undefined;
};

export type UpdateServiceFunctionality = {
  /**
   * If you are trying to reuse a functionality, you may set the ID to attach it to the service
   */
  id?: string | null | undefined;
  /**
   * If you are trying to remove a functionality from a service, set this to 'true'
   */
  remove?: boolean | null | undefined;
  /**
   * If you are trying to create a new functionality and attach it to this service, set the summary key
   */
  summary?: string | null | undefined;
};

export type UpdateServiceLink = {
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | null | undefined;
  /**
   * If you are trying to remove a link, set this to 'true'
   */
  remove?: boolean | null | undefined;
  /**
   * If updating an existing link, specify it's id.
   */
  id?: string | null | undefined;
};

/**
 * An object representing a Team that owns the service
 */
export type UpdateServiceOwner = {
  id: string;
};

/**
 * Integer representing service tier
 */
export const UpdateServiceServiceTier = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
} as const;
/**
 * Integer representing service tier
 */
export type UpdateServiceServiceTier = ClosedEnum<
  typeof UpdateServiceServiceTier
>;

export type UpdateServiceTeam = {
  id: string;
  /**
   * If you are trying to remove a team from a service, set this to 'true'
   */
  remove?: boolean | null | undefined;
};

/**
 * Update a services attributes, you may also add or remove functionalities from the service as well.
 *
 * @remarks
 * Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
 */
export type UpdateService = {
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  /**
   * Array of checklist IDs to attach to the service
   */
  checklists?: Array<Checklist> | null | undefined;
  description?: string | null | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?: Array<UpdateServiceExternalResource> | null | undefined;
  /**
   * An array of functionalities
   */
  functionalities?: Array<UpdateServiceFunctionality> | null | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
  /**
   * An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
   */
  links?: Array<UpdateServiceLink> | null | undefined;
  name?: string | null | undefined;
  /**
   * An object representing a Team that owns the service
   */
  owner?: UpdateServiceOwner | null | undefined;
  /**
   * If you are trying to remove a team as an owner from a service, set this to 'true'
   */
  removeOwner?: boolean | null | undefined;
  /**
   * If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists
   */
  removeRemainingChecklists?: boolean | null | undefined;
  /**
   * If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
   */
  removeRemainingExternalResources?: boolean | null | undefined;
  /**
   * If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities
   */
  removeRemainingFunctionalities?: boolean | null | undefined;
  /**
   * If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
   */
  removeRemainingTeams?: boolean | null | undefined;
  /**
   * Integer representing service tier
   */
  serviceTier?: UpdateServiceServiceTier | null | undefined;
  /**
   * An array of teams to attach to this service.
   */
  teams?: Array<UpdateServiceTeam> | null | undefined;
};

/** @internal */
export const Checklist$inboundSchema: z.ZodType<
  Checklist,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type Checklist$Outbound = {
  id: string;
  remove?: boolean | null | undefined;
};

/** @internal */
export const Checklist$outboundSchema: z.ZodType<
  Checklist$Outbound,
  z.ZodTypeDef,
  Checklist
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Checklist$ {
  /** @deprecated use `Checklist$inboundSchema` instead. */
  export const inboundSchema = Checklist$inboundSchema;
  /** @deprecated use `Checklist$outboundSchema` instead. */
  export const outboundSchema = Checklist$outboundSchema;
  /** @deprecated use `Checklist$Outbound` instead. */
  export type Outbound = Checklist$Outbound;
}

export function checklistToJSON(checklist: Checklist): string {
  return JSON.stringify(Checklist$outboundSchema.parse(checklist));
}

export function checklistFromJSON(
  jsonString: string,
): SafeParseResult<Checklist, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Checklist$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Checklist' from JSON`,
  );
}

/** @internal */
export const UpdateServiceExternalResource$inboundSchema: z.ZodType<
  UpdateServiceExternalResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.string(),
  connection_type: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type UpdateServiceExternalResource$Outbound = {
  remote_id: string;
  connection_type?: string | null | undefined;
  remove?: boolean | null | undefined;
};

/** @internal */
export const UpdateServiceExternalResource$outboundSchema: z.ZodType<
  UpdateServiceExternalResource$Outbound,
  z.ZodTypeDef,
  UpdateServiceExternalResource
> = z.object({
  remoteId: z.string(),
  connectionType: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    connectionType: "connection_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceExternalResource$ {
  /** @deprecated use `UpdateServiceExternalResource$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceExternalResource$inboundSchema;
  /** @deprecated use `UpdateServiceExternalResource$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceExternalResource$outboundSchema;
  /** @deprecated use `UpdateServiceExternalResource$Outbound` instead. */
  export type Outbound = UpdateServiceExternalResource$Outbound;
}

export function updateServiceExternalResourceToJSON(
  updateServiceExternalResource: UpdateServiceExternalResource,
): string {
  return JSON.stringify(
    UpdateServiceExternalResource$outboundSchema.parse(
      updateServiceExternalResource,
    ),
  );
}

export function updateServiceExternalResourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceExternalResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceExternalResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceExternalResource' from JSON`,
  );
}

/** @internal */
export const UpdateServiceFunctionality$inboundSchema: z.ZodType<
  UpdateServiceFunctionality,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
  summary: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateServiceFunctionality$Outbound = {
  id?: string | null | undefined;
  remove?: boolean | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const UpdateServiceFunctionality$outboundSchema: z.ZodType<
  UpdateServiceFunctionality$Outbound,
  z.ZodTypeDef,
  UpdateServiceFunctionality
> = z.object({
  id: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
  summary: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceFunctionality$ {
  /** @deprecated use `UpdateServiceFunctionality$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceFunctionality$inboundSchema;
  /** @deprecated use `UpdateServiceFunctionality$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceFunctionality$outboundSchema;
  /** @deprecated use `UpdateServiceFunctionality$Outbound` instead. */
  export type Outbound = UpdateServiceFunctionality$Outbound;
}

export function updateServiceFunctionalityToJSON(
  updateServiceFunctionality: UpdateServiceFunctionality,
): string {
  return JSON.stringify(
    UpdateServiceFunctionality$outboundSchema.parse(updateServiceFunctionality),
  );
}

export function updateServiceFunctionalityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceFunctionality, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceFunctionality$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceFunctionality' from JSON`,
  );
}

/** @internal */
export const UpdateServiceLink$inboundSchema: z.ZodType<
  UpdateServiceLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href_url: z.string(),
  name: z.string(),
  icon_url: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type UpdateServiceLink$Outbound = {
  href_url: string;
  name: string;
  icon_url?: string | null | undefined;
  remove?: boolean | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const UpdateServiceLink$outboundSchema: z.ZodType<
  UpdateServiceLink$Outbound,
  z.ZodTypeDef,
  UpdateServiceLink
> = z.object({
  hrefUrl: z.string(),
  name: z.string(),
  iconUrl: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceLink$ {
  /** @deprecated use `UpdateServiceLink$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceLink$inboundSchema;
  /** @deprecated use `UpdateServiceLink$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceLink$outboundSchema;
  /** @deprecated use `UpdateServiceLink$Outbound` instead. */
  export type Outbound = UpdateServiceLink$Outbound;
}

export function updateServiceLinkToJSON(
  updateServiceLink: UpdateServiceLink,
): string {
  return JSON.stringify(
    UpdateServiceLink$outboundSchema.parse(updateServiceLink),
  );
}

export function updateServiceLinkFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceLink' from JSON`,
  );
}

/** @internal */
export const UpdateServiceOwner$inboundSchema: z.ZodType<
  UpdateServiceOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateServiceOwner$Outbound = {
  id: string;
};

/** @internal */
export const UpdateServiceOwner$outboundSchema: z.ZodType<
  UpdateServiceOwner$Outbound,
  z.ZodTypeDef,
  UpdateServiceOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceOwner$ {
  /** @deprecated use `UpdateServiceOwner$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceOwner$inboundSchema;
  /** @deprecated use `UpdateServiceOwner$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceOwner$outboundSchema;
  /** @deprecated use `UpdateServiceOwner$Outbound` instead. */
  export type Outbound = UpdateServiceOwner$Outbound;
}

export function updateServiceOwnerToJSON(
  updateServiceOwner: UpdateServiceOwner,
): string {
  return JSON.stringify(
    UpdateServiceOwner$outboundSchema.parse(updateServiceOwner),
  );
}

export function updateServiceOwnerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceOwner' from JSON`,
  );
}

/** @internal */
export const UpdateServiceServiceTier$inboundSchema: z.ZodNativeEnum<
  typeof UpdateServiceServiceTier
> = z.nativeEnum(UpdateServiceServiceTier);

/** @internal */
export const UpdateServiceServiceTier$outboundSchema: z.ZodNativeEnum<
  typeof UpdateServiceServiceTier
> = UpdateServiceServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceServiceTier$ {
  /** @deprecated use `UpdateServiceServiceTier$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceServiceTier$inboundSchema;
  /** @deprecated use `UpdateServiceServiceTier$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceServiceTier$outboundSchema;
}

/** @internal */
export const UpdateServiceTeam$inboundSchema: z.ZodType<
  UpdateServiceTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateServiceTeam$Outbound = {
  id: string;
  remove?: boolean | null | undefined;
};

/** @internal */
export const UpdateServiceTeam$outboundSchema: z.ZodType<
  UpdateServiceTeam$Outbound,
  z.ZodTypeDef,
  UpdateServiceTeam
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceTeam$ {
  /** @deprecated use `UpdateServiceTeam$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceTeam$inboundSchema;
  /** @deprecated use `UpdateServiceTeam$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceTeam$outboundSchema;
  /** @deprecated use `UpdateServiceTeam$Outbound` instead. */
  export type Outbound = UpdateServiceTeam$Outbound;
}

export function updateServiceTeamToJSON(
  updateServiceTeam: UpdateServiceTeam,
): string {
  return JSON.stringify(
    UpdateServiceTeam$outboundSchema.parse(updateServiceTeam),
  );
}

export function updateServiceTeamFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceTeam' from JSON`,
  );
}

/** @internal */
export const UpdateService$inboundSchema: z.ZodType<
  UpdateService,
  z.ZodTypeDef,
  unknown
> = z.object({
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  checklists: z.nullable(z.array(z.lazy(() => Checklist$inboundSchema)))
    .optional(),
  description: z.nullable(z.string()).optional(),
  external_resources: z.nullable(
    z.array(z.lazy(() => UpdateServiceExternalResource$inboundSchema)),
  ).optional(),
  functionalities: z.nullable(
    z.array(z.lazy(() => UpdateServiceFunctionality$inboundSchema)),
  ).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  links: z.nullable(z.array(z.lazy(() => UpdateServiceLink$inboundSchema)))
    .optional(),
  name: z.nullable(z.string()).optional(),
  owner: z.nullable(z.lazy(() => UpdateServiceOwner$inboundSchema)).optional(),
  remove_owner: z.nullable(z.boolean()).optional(),
  remove_remaining_checklists: z.nullable(z.boolean()).optional(),
  remove_remaining_external_resources: z.nullable(z.boolean()).optional(),
  remove_remaining_functionalities: z.nullable(z.boolean()).optional(),
  remove_remaining_teams: z.nullable(z.boolean()).optional(),
  service_tier: z.nullable(UpdateServiceServiceTier$inboundSchema).optional(),
  teams: z.nullable(z.array(z.lazy(() => UpdateServiceTeam$inboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "external_resources": "externalResources",
    "remove_owner": "removeOwner",
    "remove_remaining_checklists": "removeRemainingChecklists",
    "remove_remaining_external_resources": "removeRemainingExternalResources",
    "remove_remaining_functionalities": "removeRemainingFunctionalities",
    "remove_remaining_teams": "removeRemainingTeams",
    "service_tier": "serviceTier",
  });
});

/** @internal */
export type UpdateService$Outbound = {
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  checklists?: Array<Checklist$Outbound> | null | undefined;
  description?: string | null | undefined;
  external_resources?:
    | Array<UpdateServiceExternalResource$Outbound>
    | null
    | undefined;
  functionalities?:
    | Array<UpdateServiceFunctionality$Outbound>
    | null
    | undefined;
  labels?: { [k: string]: string } | null | undefined;
  links?: Array<UpdateServiceLink$Outbound> | null | undefined;
  name?: string | null | undefined;
  owner?: UpdateServiceOwner$Outbound | null | undefined;
  remove_owner?: boolean | null | undefined;
  remove_remaining_checklists?: boolean | null | undefined;
  remove_remaining_external_resources?: boolean | null | undefined;
  remove_remaining_functionalities?: boolean | null | undefined;
  remove_remaining_teams?: boolean | null | undefined;
  service_tier?: number | null | undefined;
  teams?: Array<UpdateServiceTeam$Outbound> | null | undefined;
};

/** @internal */
export const UpdateService$outboundSchema: z.ZodType<
  UpdateService$Outbound,
  z.ZodTypeDef,
  UpdateService
> = z.object({
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  checklists: z.nullable(z.array(z.lazy(() => Checklist$outboundSchema)))
    .optional(),
  description: z.nullable(z.string()).optional(),
  externalResources: z.nullable(
    z.array(z.lazy(() => UpdateServiceExternalResource$outboundSchema)),
  ).optional(),
  functionalities: z.nullable(
    z.array(z.lazy(() => UpdateServiceFunctionality$outboundSchema)),
  ).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  links: z.nullable(z.array(z.lazy(() => UpdateServiceLink$outboundSchema)))
    .optional(),
  name: z.nullable(z.string()).optional(),
  owner: z.nullable(z.lazy(() => UpdateServiceOwner$outboundSchema)).optional(),
  removeOwner: z.nullable(z.boolean()).optional(),
  removeRemainingChecklists: z.nullable(z.boolean()).optional(),
  removeRemainingExternalResources: z.nullable(z.boolean()).optional(),
  removeRemainingFunctionalities: z.nullable(z.boolean()).optional(),
  removeRemainingTeams: z.nullable(z.boolean()).optional(),
  serviceTier: z.nullable(UpdateServiceServiceTier$outboundSchema).optional(),
  teams: z.nullable(z.array(z.lazy(() => UpdateServiceTeam$outboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    externalResources: "external_resources",
    removeOwner: "remove_owner",
    removeRemainingChecklists: "remove_remaining_checklists",
    removeRemainingExternalResources: "remove_remaining_external_resources",
    removeRemainingFunctionalities: "remove_remaining_functionalities",
    removeRemainingTeams: "remove_remaining_teams",
    serviceTier: "service_tier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateService$ {
  /** @deprecated use `UpdateService$inboundSchema` instead. */
  export const inboundSchema = UpdateService$inboundSchema;
  /** @deprecated use `UpdateService$outboundSchema` instead. */
  export const outboundSchema = UpdateService$outboundSchema;
  /** @deprecated use `UpdateService$Outbound` instead. */
  export type Outbound = UpdateService$Outbound;
}

export function updateServiceToJSON(updateService: UpdateService): string {
  return JSON.stringify(UpdateService$outboundSchema.parse(updateService));
}

export function updateServiceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateService' from JSON`,
  );
}
