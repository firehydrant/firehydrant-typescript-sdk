/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableSignalsAPITargetEntity,
  NullableSignalsAPITargetEntity$inboundSchema,
  NullableSignalsAPITargetEntity$Outbound,
  NullableSignalsAPITargetEntity$outboundSchema,
} from "./nullablesignalsapitargetentity.js";
import {
  NullableSuccinctEntity,
  NullableSuccinctEntity$inboundSchema,
  NullableSuccinctEntity$Outbound,
  NullableSuccinctEntity$outboundSchema,
} from "./nullablesuccinctentity.js";

export const NullableSignalsAPIRuleEntityNotificationPriorityOverride = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
} as const;
export type NullableSignalsAPIRuleEntityNotificationPriorityOverride =
  ClosedEnum<typeof NullableSignalsAPIRuleEntityNotificationPriorityOverride>;

export const NullableSignalsAPIRuleEntityCreateIncidentConditionWhen = {
  WhenUnspecified: "WHEN_UNSPECIFIED",
  WhenAlways: "WHEN_ALWAYS",
} as const;
export type NullableSignalsAPIRuleEntityCreateIncidentConditionWhen =
  ClosedEnum<typeof NullableSignalsAPIRuleEntityCreateIncidentConditionWhen>;

export type NullableSignalsAPIRuleEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  expression?: string | null | undefined;
  teamId?: string | null | undefined;
  target?: NullableSignalsAPITargetEntity | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  incidentType?: NullableSuccinctEntity | null | undefined;
  notificationPriorityOverride?:
    | NullableSignalsAPIRuleEntityNotificationPriorityOverride
    | null
    | undefined;
  createIncidentConditionWhen?:
    | NullableSignalsAPIRuleEntityCreateIncidentConditionWhen
    | null
    | undefined;
  /**
   * Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')
   */
  deduplicationExpiry?: string | null | undefined;
};

/** @internal */
export const NullableSignalsAPIRuleEntityNotificationPriorityOverride$inboundSchema:
  z.ZodNativeEnum<
    typeof NullableSignalsAPIRuleEntityNotificationPriorityOverride
  > = z.nativeEnum(NullableSignalsAPIRuleEntityNotificationPriorityOverride);

/** @internal */
export const NullableSignalsAPIRuleEntityNotificationPriorityOverride$outboundSchema:
  z.ZodNativeEnum<
    typeof NullableSignalsAPIRuleEntityNotificationPriorityOverride
  > = NullableSignalsAPIRuleEntityNotificationPriorityOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableSignalsAPIRuleEntityNotificationPriorityOverride$ {
  /** @deprecated use `NullableSignalsAPIRuleEntityNotificationPriorityOverride$inboundSchema` instead. */
  export const inboundSchema =
    NullableSignalsAPIRuleEntityNotificationPriorityOverride$inboundSchema;
  /** @deprecated use `NullableSignalsAPIRuleEntityNotificationPriorityOverride$outboundSchema` instead. */
  export const outboundSchema =
    NullableSignalsAPIRuleEntityNotificationPriorityOverride$outboundSchema;
}

/** @internal */
export const NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$inboundSchema:
  z.ZodNativeEnum<
    typeof NullableSignalsAPIRuleEntityCreateIncidentConditionWhen
  > = z.nativeEnum(NullableSignalsAPIRuleEntityCreateIncidentConditionWhen);

/** @internal */
export const NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$outboundSchema:
  z.ZodNativeEnum<
    typeof NullableSignalsAPIRuleEntityCreateIncidentConditionWhen
  > = NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$ {
  /** @deprecated use `NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$inboundSchema` instead. */
  export const inboundSchema =
    NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$inboundSchema;
  /** @deprecated use `NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$outboundSchema` instead. */
  export const outboundSchema =
    NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$outboundSchema;
}

/** @internal */
export const NullableSignalsAPIRuleEntity$inboundSchema: z.ZodType<
  NullableSignalsAPIRuleEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  expression: z.nullable(z.string()).optional(),
  team_id: z.nullable(z.string()).optional(),
  target: z.nullable(NullableSignalsAPITargetEntity$inboundSchema).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  incident_type: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
  notification_priority_override: z.nullable(
    NullableSignalsAPIRuleEntityNotificationPriorityOverride$inboundSchema,
  ).optional(),
  create_incident_condition_when: z.nullable(
    NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$inboundSchema,
  ).optional(),
  deduplication_expiry: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "incident_type": "incidentType",
    "notification_priority_override": "notificationPriorityOverride",
    "create_incident_condition_when": "createIncidentConditionWhen",
    "deduplication_expiry": "deduplicationExpiry",
  });
});

/** @internal */
export type NullableSignalsAPIRuleEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  expression?: string | null | undefined;
  team_id?: string | null | undefined;
  target?: NullableSignalsAPITargetEntity$Outbound | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  incident_type?: NullableSuccinctEntity$Outbound | null | undefined;
  notification_priority_override?: string | null | undefined;
  create_incident_condition_when?: string | null | undefined;
  deduplication_expiry?: string | null | undefined;
};

/** @internal */
export const NullableSignalsAPIRuleEntity$outboundSchema: z.ZodType<
  NullableSignalsAPIRuleEntity$Outbound,
  z.ZodTypeDef,
  NullableSignalsAPIRuleEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  expression: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  target: z.nullable(NullableSignalsAPITargetEntity$outboundSchema).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  incidentType: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
  notificationPriorityOverride: z.nullable(
    NullableSignalsAPIRuleEntityNotificationPriorityOverride$outboundSchema,
  ).optional(),
  createIncidentConditionWhen: z.nullable(
    NullableSignalsAPIRuleEntityCreateIncidentConditionWhen$outboundSchema,
  ).optional(),
  deduplicationExpiry: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
    incidentType: "incident_type",
    notificationPriorityOverride: "notification_priority_override",
    createIncidentConditionWhen: "create_incident_condition_when",
    deduplicationExpiry: "deduplication_expiry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableSignalsAPIRuleEntity$ {
  /** @deprecated use `NullableSignalsAPIRuleEntity$inboundSchema` instead. */
  export const inboundSchema = NullableSignalsAPIRuleEntity$inboundSchema;
  /** @deprecated use `NullableSignalsAPIRuleEntity$outboundSchema` instead. */
  export const outboundSchema = NullableSignalsAPIRuleEntity$outboundSchema;
  /** @deprecated use `NullableSignalsAPIRuleEntity$Outbound` instead. */
  export type Outbound = NullableSignalsAPIRuleEntity$Outbound;
}

export function nullableSignalsAPIRuleEntityToJSON(
  nullableSignalsAPIRuleEntity: NullableSignalsAPIRuleEntity,
): string {
  return JSON.stringify(
    NullableSignalsAPIRuleEntity$outboundSchema.parse(
      nullableSignalsAPIRuleEntity,
    ),
  );
}

export function nullableSignalsAPIRuleEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableSignalsAPIRuleEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableSignalsAPIRuleEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableSignalsAPIRuleEntity' from JSON`,
  );
}
