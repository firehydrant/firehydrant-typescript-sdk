/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentRoleEntity,
  IncidentRoleEntity$inboundSchema,
  IncidentRoleEntity$Outbound,
  IncidentRoleEntity$outboundSchema,
} from "./incidentroleentity.js";
import {
  UserEntity,
  UserEntity$inboundSchema,
  UserEntity$Outbound,
  UserEntity$outboundSchema,
} from "./userentity.js";

export const Status = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type Status = ClosedEnum<typeof Status>;

/**
 * Incidents_RoleAssignmentEntity model
 */
export type IncidentsRoleAssignmentEntity = {
  id?: string | undefined;
  status?: Status | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * IncidentRoleEntity model
   */
  incidentRole?: IncidentRoleEntity | undefined;
  /**
   * UserEntity model
   */
  user?: UserEntity | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const IncidentsRoleAssignmentEntity$inboundSchema: z.ZodType<
  IncidentsRoleAssignmentEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: Status$inboundSchema.optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  incident_role: IncidentRoleEntity$inboundSchema.optional(),
  user: UserEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "incident_role": "incidentRole",
  });
});

/** @internal */
export type IncidentsRoleAssignmentEntity$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  incident_role?: IncidentRoleEntity$Outbound | undefined;
  user?: UserEntity$Outbound | undefined;
};

/** @internal */
export const IncidentsRoleAssignmentEntity$outboundSchema: z.ZodType<
  IncidentsRoleAssignmentEntity$Outbound,
  z.ZodTypeDef,
  IncidentsRoleAssignmentEntity
> = z.object({
  id: z.string().optional(),
  status: Status$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  incidentRole: IncidentRoleEntity$outboundSchema.optional(),
  user: UserEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    incidentRole: "incident_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRoleAssignmentEntity$ {
  /** @deprecated use `IncidentsRoleAssignmentEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsRoleAssignmentEntity$inboundSchema;
  /** @deprecated use `IncidentsRoleAssignmentEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsRoleAssignmentEntity$outboundSchema;
  /** @deprecated use `IncidentsRoleAssignmentEntity$Outbound` instead. */
  export type Outbound = IncidentsRoleAssignmentEntity$Outbound;
}

export function incidentsRoleAssignmentEntityToJSON(
  incidentsRoleAssignmentEntity: IncidentsRoleAssignmentEntity,
): string {
  return JSON.stringify(
    IncidentsRoleAssignmentEntity$outboundSchema.parse(
      incidentsRoleAssignmentEntity,
    ),
  );
}

export function incidentsRoleAssignmentEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsRoleAssignmentEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsRoleAssignmentEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsRoleAssignmentEntity' from JSON`,
  );
}
