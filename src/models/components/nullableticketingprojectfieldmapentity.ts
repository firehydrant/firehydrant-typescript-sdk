/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketingProjectFieldMapBodyEntity,
  TicketingProjectFieldMapBodyEntity$inboundSchema,
  TicketingProjectFieldMapBodyEntity$Outbound,
  TicketingProjectFieldMapBodyEntity$outboundSchema,
} from "./ticketingprojectfieldmapbodyentity.js";

/**
 * Ticketing_ProjectFieldMapEntity model
 */
export type NullableTicketingProjectFieldMapEntity = {
  id?: string | null | undefined;
  connectionId?: string | null | undefined;
  connectionType?: string | null | undefined;
  ticketingProjectId?: string | null | undefined;
  body?: Array<TicketingProjectFieldMapBodyEntity> | null | undefined;
};

/** @internal */
export const NullableTicketingProjectFieldMapEntity$inboundSchema: z.ZodType<
  NullableTicketingProjectFieldMapEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  connection_type: z.nullable(z.string()).optional(),
  ticketing_project_id: z.nullable(z.string()).optional(),
  body: z.nullable(z.array(TicketingProjectFieldMapBodyEntity$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "connection_type": "connectionType",
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type NullableTicketingProjectFieldMapEntity$Outbound = {
  id?: string | null | undefined;
  connection_id?: string | null | undefined;
  connection_type?: string | null | undefined;
  ticketing_project_id?: string | null | undefined;
  body?: Array<TicketingProjectFieldMapBodyEntity$Outbound> | null | undefined;
};

/** @internal */
export const NullableTicketingProjectFieldMapEntity$outboundSchema: z.ZodType<
  NullableTicketingProjectFieldMapEntity$Outbound,
  z.ZodTypeDef,
  NullableTicketingProjectFieldMapEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  connectionType: z.nullable(z.string()).optional(),
  ticketingProjectId: z.nullable(z.string()).optional(),
  body: z.nullable(z.array(TicketingProjectFieldMapBodyEntity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    connectionType: "connection_type",
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableTicketingProjectFieldMapEntity$ {
  /** @deprecated use `NullableTicketingProjectFieldMapEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableTicketingProjectFieldMapEntity$inboundSchema;
  /** @deprecated use `NullableTicketingProjectFieldMapEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableTicketingProjectFieldMapEntity$outboundSchema;
  /** @deprecated use `NullableTicketingProjectFieldMapEntity$Outbound` instead. */
  export type Outbound = NullableTicketingProjectFieldMapEntity$Outbound;
}

export function nullableTicketingProjectFieldMapEntityToJSON(
  nullableTicketingProjectFieldMapEntity:
    NullableTicketingProjectFieldMapEntity,
): string {
  return JSON.stringify(
    NullableTicketingProjectFieldMapEntity$outboundSchema.parse(
      nullableTicketingProjectFieldMapEntity,
    ),
  );
}

export function nullableTicketingProjectFieldMapEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableTicketingProjectFieldMapEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableTicketingProjectFieldMapEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableTicketingProjectFieldMapEntity' from JSON`,
  );
}
