/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a retrospective attached to an incident
 */
export type UpdateIncidentRetrospective = {
  /**
   * To hide or unhide the retrospective.
   */
  isHidden?: boolean | null | undefined;
};

/** @internal */
export const UpdateIncidentRetrospective$inboundSchema: z.ZodType<
  UpdateIncidentRetrospective,
  z.ZodTypeDef,
  unknown
> = z.object({
  is_hidden: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_hidden": "isHidden",
  });
});

/** @internal */
export type UpdateIncidentRetrospective$Outbound = {
  is_hidden?: boolean | null | undefined;
};

/** @internal */
export const UpdateIncidentRetrospective$outboundSchema: z.ZodType<
  UpdateIncidentRetrospective$Outbound,
  z.ZodTypeDef,
  UpdateIncidentRetrospective
> = z.object({
  isHidden: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    isHidden: "is_hidden",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentRetrospective$ {
  /** @deprecated use `UpdateIncidentRetrospective$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentRetrospective$inboundSchema;
  /** @deprecated use `UpdateIncidentRetrospective$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentRetrospective$outboundSchema;
  /** @deprecated use `UpdateIncidentRetrospective$Outbound` instead. */
  export type Outbound = UpdateIncidentRetrospective$Outbound;
}

export function updateIncidentRetrospectiveToJSON(
  updateIncidentRetrospective: UpdateIncidentRetrospective,
): string {
  return JSON.stringify(
    UpdateIncidentRetrospective$outboundSchema.parse(
      updateIncidentRetrospective,
    ),
  );
}

export function updateIncidentRetrospectiveFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentRetrospective, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentRetrospective$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentRetrospective' from JSON`,
  );
}
