/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * MS Teams channel identity for channel associated with this team
 */
export type CreateTeamMsTeamsChannel = {
  channelId: string;
  msTeamId: string;
};

export type CreateTeamMembership = {
  userId?: string | null | undefined;
  scheduleId?: string | null | undefined;
  /**
   * An incident role ID that this user will automatically assigned if this team is assigned to an incident
   */
  incidentRoleId?: string | null | undefined;
};

/**
 * Create a new team
 */
export type CreateTeam = {
  name: string;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  /**
   * The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).
   *
   * @remarks
   */
  slackChannelId?: string | null | undefined;
  /**
   * MS Teams channel identity for channel associated with this team
   */
  msTeamsChannel?: CreateTeamMsTeamsChannel | null | undefined;
  memberships?: Array<CreateTeamMembership> | null | undefined;
  /**
   * A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.
   */
  inviteEmails?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTeamMsTeamsChannel$inboundSchema: z.ZodType<
  CreateTeamMsTeamsChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  ms_team_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "ms_team_id": "msTeamId",
  });
});

/** @internal */
export type CreateTeamMsTeamsChannel$Outbound = {
  channel_id: string;
  ms_team_id: string;
};

/** @internal */
export const CreateTeamMsTeamsChannel$outboundSchema: z.ZodType<
  CreateTeamMsTeamsChannel$Outbound,
  z.ZodTypeDef,
  CreateTeamMsTeamsChannel
> = z.object({
  channelId: z.string(),
  msTeamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    msTeamId: "ms_team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamMsTeamsChannel$ {
  /** @deprecated use `CreateTeamMsTeamsChannel$inboundSchema` instead. */
  export const inboundSchema = CreateTeamMsTeamsChannel$inboundSchema;
  /** @deprecated use `CreateTeamMsTeamsChannel$outboundSchema` instead. */
  export const outboundSchema = CreateTeamMsTeamsChannel$outboundSchema;
  /** @deprecated use `CreateTeamMsTeamsChannel$Outbound` instead. */
  export type Outbound = CreateTeamMsTeamsChannel$Outbound;
}

export function createTeamMsTeamsChannelToJSON(
  createTeamMsTeamsChannel: CreateTeamMsTeamsChannel,
): string {
  return JSON.stringify(
    CreateTeamMsTeamsChannel$outboundSchema.parse(createTeamMsTeamsChannel),
  );
}

export function createTeamMsTeamsChannelFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamMsTeamsChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamMsTeamsChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamMsTeamsChannel' from JSON`,
  );
}

/** @internal */
export const CreateTeamMembership$inboundSchema: z.ZodType<
  CreateTeamMembership,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
  schedule_id: z.nullable(z.string()).optional(),
  incident_role_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "schedule_id": "scheduleId",
    "incident_role_id": "incidentRoleId",
  });
});

/** @internal */
export type CreateTeamMembership$Outbound = {
  user_id?: string | null | undefined;
  schedule_id?: string | null | undefined;
  incident_role_id?: string | null | undefined;
};

/** @internal */
export const CreateTeamMembership$outboundSchema: z.ZodType<
  CreateTeamMembership$Outbound,
  z.ZodTypeDef,
  CreateTeamMembership
> = z.object({
  userId: z.nullable(z.string()).optional(),
  scheduleId: z.nullable(z.string()).optional(),
  incidentRoleId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    scheduleId: "schedule_id",
    incidentRoleId: "incident_role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamMembership$ {
  /** @deprecated use `CreateTeamMembership$inboundSchema` instead. */
  export const inboundSchema = CreateTeamMembership$inboundSchema;
  /** @deprecated use `CreateTeamMembership$outboundSchema` instead. */
  export const outboundSchema = CreateTeamMembership$outboundSchema;
  /** @deprecated use `CreateTeamMembership$Outbound` instead. */
  export type Outbound = CreateTeamMembership$Outbound;
}

export function createTeamMembershipToJSON(
  createTeamMembership: CreateTeamMembership,
): string {
  return JSON.stringify(
    CreateTeamMembership$outboundSchema.parse(createTeamMembership),
  );
}

export function createTeamMembershipFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamMembership, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamMembership$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamMembership' from JSON`,
  );
}

/** @internal */
export const CreateTeam$inboundSchema: z.ZodType<
  CreateTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  slack_channel_id: z.nullable(z.string()).optional(),
  ms_teams_channel: z.nullable(
    z.lazy(() => CreateTeamMsTeamsChannel$inboundSchema),
  ).optional(),
  memberships: z.nullable(
    z.array(z.lazy(() => CreateTeamMembership$inboundSchema)),
  ).optional(),
  invite_emails: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "slack_channel_id": "slackChannelId",
    "ms_teams_channel": "msTeamsChannel",
    "invite_emails": "inviteEmails",
  });
});

/** @internal */
export type CreateTeam$Outbound = {
  name: string;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  slack_channel_id?: string | null | undefined;
  ms_teams_channel?: CreateTeamMsTeamsChannel$Outbound | null | undefined;
  memberships?: Array<CreateTeamMembership$Outbound> | null | undefined;
  invite_emails?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTeam$outboundSchema: z.ZodType<
  CreateTeam$Outbound,
  z.ZodTypeDef,
  CreateTeam
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  slackChannelId: z.nullable(z.string()).optional(),
  msTeamsChannel: z.nullable(
    z.lazy(() => CreateTeamMsTeamsChannel$outboundSchema),
  ).optional(),
  memberships: z.nullable(
    z.array(z.lazy(() => CreateTeamMembership$outboundSchema)),
  ).optional(),
  inviteEmails: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    slackChannelId: "slack_channel_id",
    msTeamsChannel: "ms_teams_channel",
    inviteEmails: "invite_emails",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeam$ {
  /** @deprecated use `CreateTeam$inboundSchema` instead. */
  export const inboundSchema = CreateTeam$inboundSchema;
  /** @deprecated use `CreateTeam$outboundSchema` instead. */
  export const outboundSchema = CreateTeam$outboundSchema;
  /** @deprecated use `CreateTeam$Outbound` instead. */
  export type Outbound = CreateTeam$Outbound;
}

export function createTeamToJSON(createTeam: CreateTeam): string {
  return JSON.stringify(CreateTeam$outboundSchema.parse(createTeam));
}

export function createTeamFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeam' from JSON`,
  );
}
