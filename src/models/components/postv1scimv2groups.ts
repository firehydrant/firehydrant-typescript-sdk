/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Members = {
  /**
   * String that represents the user's UUID to assign to the team
   */
  value: string;
};

/**
 * SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.
 */
export type PostV1ScimV2Groups = {
  /**
   * The name of the team being created
   */
  displayName: string;
  members: Array<Members>;
};

/** @internal */
export const Members$inboundSchema: z.ZodType<Members, z.ZodTypeDef, unknown> =
  z.object({
    value: z.string(),
  });

/** @internal */
export type Members$Outbound = {
  value: string;
};

/** @internal */
export const Members$outboundSchema: z.ZodType<
  Members$Outbound,
  z.ZodTypeDef,
  Members
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Members$ {
  /** @deprecated use `Members$inboundSchema` instead. */
  export const inboundSchema = Members$inboundSchema;
  /** @deprecated use `Members$outboundSchema` instead. */
  export const outboundSchema = Members$outboundSchema;
  /** @deprecated use `Members$Outbound` instead. */
  export type Outbound = Members$Outbound;
}

export function membersToJSON(members: Members): string {
  return JSON.stringify(Members$outboundSchema.parse(members));
}

export function membersFromJSON(
  jsonString: string,
): SafeParseResult<Members, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Members$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Members' from JSON`,
  );
}

/** @internal */
export const PostV1ScimV2Groups$inboundSchema: z.ZodType<
  PostV1ScimV2Groups,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => Members$inboundSchema)),
});

/** @internal */
export type PostV1ScimV2Groups$Outbound = {
  displayName: string;
  members: Array<Members$Outbound>;
};

/** @internal */
export const PostV1ScimV2Groups$outboundSchema: z.ZodType<
  PostV1ScimV2Groups$Outbound,
  z.ZodTypeDef,
  PostV1ScimV2Groups
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => Members$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ScimV2Groups$ {
  /** @deprecated use `PostV1ScimV2Groups$inboundSchema` instead. */
  export const inboundSchema = PostV1ScimV2Groups$inboundSchema;
  /** @deprecated use `PostV1ScimV2Groups$outboundSchema` instead. */
  export const outboundSchema = PostV1ScimV2Groups$outboundSchema;
  /** @deprecated use `PostV1ScimV2Groups$Outbound` instead. */
  export type Outbound = PostV1ScimV2Groups$Outbound;
}

export function postV1ScimV2GroupsToJSON(
  postV1ScimV2Groups: PostV1ScimV2Groups,
): string {
  return JSON.stringify(
    PostV1ScimV2Groups$outboundSchema.parse(postV1ScimV2Groups),
  );
}

export function postV1ScimV2GroupsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ScimV2Groups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ScimV2Groups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ScimV2Groups' from JSON`,
  );
}
