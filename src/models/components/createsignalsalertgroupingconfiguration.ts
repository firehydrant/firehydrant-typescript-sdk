/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The field to use for grouping alerts
 */
export const CreateSignalsAlertGroupingConfigurationFieldName = {
  Summary: "summary",
  Body: "body",
  Tags: "tags",
} as const;
/**
 * The field to use for grouping alerts
 */
export type CreateSignalsAlertGroupingConfigurationFieldName = ClosedEnum<
  typeof CreateSignalsAlertGroupingConfigurationFieldName
>;

/**
 * The type of strategy to use for grouping alerts
 */
export type CreateSignalsAlertGroupingConfigurationSubstring = {
  /**
   * The field to use for grouping alerts
   */
  fieldName: CreateSignalsAlertGroupingConfigurationFieldName;
  /**
   * The value to use for grouping alerts
   */
  value: string;
};

/**
 * The strategy to use for grouping alerts
 */
export type CreateSignalsAlertGroupingConfigurationStrategy = {
  /**
   * The type of strategy to use for grouping alerts
   */
  substring?:
    | CreateSignalsAlertGroupingConfigurationSubstring
    | null
    | undefined;
};

/**
 * Send FYI notification
 */
export type CreateSignalsAlertGroupingConfigurationFyi = {
  /**
   * The slack channel ids to send the notification to
   */
  slackChannelIds: Array<string>;
};

/**
 * The action to take when grouping alerts
 */
export type CreateSignalsAlertGroupingConfigurationAction = {
  /**
   * Link the alerts and do not notify anyone
   */
  link?: boolean | null | undefined;
  /**
   * Send FYI notification
   */
  fyi?: CreateSignalsAlertGroupingConfigurationFyi | null | undefined;
};

/**
 * Create a Signals alert grouping rule for the organization.
 */
export type CreateSignalsAlertGroupingConfiguration = {
  /**
   * The strategy to use for grouping alerts
   */
  strategy: CreateSignalsAlertGroupingConfigurationStrategy;
  /**
   * The action to take when grouping alerts
   */
  action?: CreateSignalsAlertGroupingConfigurationAction | null | undefined;
  /**
   * How long to group alerts for
   */
  referenceAlertTimePeriod: string;
};

/** @internal */
export const CreateSignalsAlertGroupingConfigurationFieldName$inboundSchema:
  z.ZodNativeEnum<typeof CreateSignalsAlertGroupingConfigurationFieldName> = z
    .nativeEnum(CreateSignalsAlertGroupingConfigurationFieldName);

/** @internal */
export const CreateSignalsAlertGroupingConfigurationFieldName$outboundSchema:
  z.ZodNativeEnum<typeof CreateSignalsAlertGroupingConfigurationFieldName> =
    CreateSignalsAlertGroupingConfigurationFieldName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsAlertGroupingConfigurationFieldName$ {
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationFieldName$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsAlertGroupingConfigurationFieldName$inboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationFieldName$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsAlertGroupingConfigurationFieldName$outboundSchema;
}

/** @internal */
export const CreateSignalsAlertGroupingConfigurationSubstring$inboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationSubstring,
    z.ZodTypeDef,
    unknown
  > = z.object({
    field_name: CreateSignalsAlertGroupingConfigurationFieldName$inboundSchema,
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "field_name": "fieldName",
    });
  });

/** @internal */
export type CreateSignalsAlertGroupingConfigurationSubstring$Outbound = {
  field_name: string;
  value: string;
};

/** @internal */
export const CreateSignalsAlertGroupingConfigurationSubstring$outboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationSubstring$Outbound,
    z.ZodTypeDef,
    CreateSignalsAlertGroupingConfigurationSubstring
  > = z.object({
    fieldName: CreateSignalsAlertGroupingConfigurationFieldName$outboundSchema,
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      fieldName: "field_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsAlertGroupingConfigurationSubstring$ {
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationSubstring$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsAlertGroupingConfigurationSubstring$inboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationSubstring$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsAlertGroupingConfigurationSubstring$outboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationSubstring$Outbound` instead. */
  export type Outbound =
    CreateSignalsAlertGroupingConfigurationSubstring$Outbound;
}

export function createSignalsAlertGroupingConfigurationSubstringToJSON(
  createSignalsAlertGroupingConfigurationSubstring:
    CreateSignalsAlertGroupingConfigurationSubstring,
): string {
  return JSON.stringify(
    CreateSignalsAlertGroupingConfigurationSubstring$outboundSchema.parse(
      createSignalsAlertGroupingConfigurationSubstring,
    ),
  );
}

export function createSignalsAlertGroupingConfigurationSubstringFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSignalsAlertGroupingConfigurationSubstring,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSignalsAlertGroupingConfigurationSubstring$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSignalsAlertGroupingConfigurationSubstring' from JSON`,
  );
}

/** @internal */
export const CreateSignalsAlertGroupingConfigurationStrategy$inboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    substring: z.nullable(
      z.lazy(() =>
        CreateSignalsAlertGroupingConfigurationSubstring$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type CreateSignalsAlertGroupingConfigurationStrategy$Outbound = {
  substring?:
    | CreateSignalsAlertGroupingConfigurationSubstring$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateSignalsAlertGroupingConfigurationStrategy$outboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationStrategy$Outbound,
    z.ZodTypeDef,
    CreateSignalsAlertGroupingConfigurationStrategy
  > = z.object({
    substring: z.nullable(
      z.lazy(() =>
        CreateSignalsAlertGroupingConfigurationSubstring$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsAlertGroupingConfigurationStrategy$ {
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsAlertGroupingConfigurationStrategy$inboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsAlertGroupingConfigurationStrategy$outboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationStrategy$Outbound` instead. */
  export type Outbound =
    CreateSignalsAlertGroupingConfigurationStrategy$Outbound;
}

export function createSignalsAlertGroupingConfigurationStrategyToJSON(
  createSignalsAlertGroupingConfigurationStrategy:
    CreateSignalsAlertGroupingConfigurationStrategy,
): string {
  return JSON.stringify(
    CreateSignalsAlertGroupingConfigurationStrategy$outboundSchema.parse(
      createSignalsAlertGroupingConfigurationStrategy,
    ),
  );
}

export function createSignalsAlertGroupingConfigurationStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSignalsAlertGroupingConfigurationStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSignalsAlertGroupingConfigurationStrategy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSignalsAlertGroupingConfigurationStrategy' from JSON`,
  );
}

/** @internal */
export const CreateSignalsAlertGroupingConfigurationFyi$inboundSchema:
  z.ZodType<CreateSignalsAlertGroupingConfigurationFyi, z.ZodTypeDef, unknown> =
    z.object({
      slack_channel_ids: z.array(z.string()),
    }).transform((v) => {
      return remap$(v, {
        "slack_channel_ids": "slackChannelIds",
      });
    });

/** @internal */
export type CreateSignalsAlertGroupingConfigurationFyi$Outbound = {
  slack_channel_ids: Array<string>;
};

/** @internal */
export const CreateSignalsAlertGroupingConfigurationFyi$outboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationFyi$Outbound,
    z.ZodTypeDef,
    CreateSignalsAlertGroupingConfigurationFyi
  > = z.object({
    slackChannelIds: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      slackChannelIds: "slack_channel_ids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsAlertGroupingConfigurationFyi$ {
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationFyi$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsAlertGroupingConfigurationFyi$inboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationFyi$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsAlertGroupingConfigurationFyi$outboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationFyi$Outbound` instead. */
  export type Outbound = CreateSignalsAlertGroupingConfigurationFyi$Outbound;
}

export function createSignalsAlertGroupingConfigurationFyiToJSON(
  createSignalsAlertGroupingConfigurationFyi:
    CreateSignalsAlertGroupingConfigurationFyi,
): string {
  return JSON.stringify(
    CreateSignalsAlertGroupingConfigurationFyi$outboundSchema.parse(
      createSignalsAlertGroupingConfigurationFyi,
    ),
  );
}

export function createSignalsAlertGroupingConfigurationFyiFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSignalsAlertGroupingConfigurationFyi,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSignalsAlertGroupingConfigurationFyi$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSignalsAlertGroupingConfigurationFyi' from JSON`,
  );
}

/** @internal */
export const CreateSignalsAlertGroupingConfigurationAction$inboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationAction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    link: z.nullable(z.boolean()).optional(),
    fyi: z.nullable(
      z.lazy(() => CreateSignalsAlertGroupingConfigurationFyi$inboundSchema),
    ).optional(),
  });

/** @internal */
export type CreateSignalsAlertGroupingConfigurationAction$Outbound = {
  link?: boolean | null | undefined;
  fyi?: CreateSignalsAlertGroupingConfigurationFyi$Outbound | null | undefined;
};

/** @internal */
export const CreateSignalsAlertGroupingConfigurationAction$outboundSchema:
  z.ZodType<
    CreateSignalsAlertGroupingConfigurationAction$Outbound,
    z.ZodTypeDef,
    CreateSignalsAlertGroupingConfigurationAction
  > = z.object({
    link: z.nullable(z.boolean()).optional(),
    fyi: z.nullable(
      z.lazy(() => CreateSignalsAlertGroupingConfigurationFyi$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsAlertGroupingConfigurationAction$ {
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationAction$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsAlertGroupingConfigurationAction$inboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationAction$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsAlertGroupingConfigurationAction$outboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfigurationAction$Outbound` instead. */
  export type Outbound = CreateSignalsAlertGroupingConfigurationAction$Outbound;
}

export function createSignalsAlertGroupingConfigurationActionToJSON(
  createSignalsAlertGroupingConfigurationAction:
    CreateSignalsAlertGroupingConfigurationAction,
): string {
  return JSON.stringify(
    CreateSignalsAlertGroupingConfigurationAction$outboundSchema.parse(
      createSignalsAlertGroupingConfigurationAction,
    ),
  );
}

export function createSignalsAlertGroupingConfigurationActionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSignalsAlertGroupingConfigurationAction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSignalsAlertGroupingConfigurationAction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSignalsAlertGroupingConfigurationAction' from JSON`,
  );
}

/** @internal */
export const CreateSignalsAlertGroupingConfiguration$inboundSchema: z.ZodType<
  CreateSignalsAlertGroupingConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  strategy: z.lazy(() =>
    CreateSignalsAlertGroupingConfigurationStrategy$inboundSchema
  ),
  action: z.nullable(
    z.lazy(() => CreateSignalsAlertGroupingConfigurationAction$inboundSchema),
  ).optional(),
  reference_alert_time_period: z.string(),
}).transform((v) => {
  return remap$(v, {
    "reference_alert_time_period": "referenceAlertTimePeriod",
  });
});

/** @internal */
export type CreateSignalsAlertGroupingConfiguration$Outbound = {
  strategy: CreateSignalsAlertGroupingConfigurationStrategy$Outbound;
  action?:
    | CreateSignalsAlertGroupingConfigurationAction$Outbound
    | null
    | undefined;
  reference_alert_time_period: string;
};

/** @internal */
export const CreateSignalsAlertGroupingConfiguration$outboundSchema: z.ZodType<
  CreateSignalsAlertGroupingConfiguration$Outbound,
  z.ZodTypeDef,
  CreateSignalsAlertGroupingConfiguration
> = z.object({
  strategy: z.lazy(() =>
    CreateSignalsAlertGroupingConfigurationStrategy$outboundSchema
  ),
  action: z.nullable(
    z.lazy(() => CreateSignalsAlertGroupingConfigurationAction$outboundSchema),
  ).optional(),
  referenceAlertTimePeriod: z.string(),
}).transform((v) => {
  return remap$(v, {
    referenceAlertTimePeriod: "reference_alert_time_period",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsAlertGroupingConfiguration$ {
  /** @deprecated use `CreateSignalsAlertGroupingConfiguration$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsAlertGroupingConfiguration$inboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfiguration$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsAlertGroupingConfiguration$outboundSchema;
  /** @deprecated use `CreateSignalsAlertGroupingConfiguration$Outbound` instead. */
  export type Outbound = CreateSignalsAlertGroupingConfiguration$Outbound;
}

export function createSignalsAlertGroupingConfigurationToJSON(
  createSignalsAlertGroupingConfiguration:
    CreateSignalsAlertGroupingConfiguration,
): string {
  return JSON.stringify(
    CreateSignalsAlertGroupingConfiguration$outboundSchema.parse(
      createSignalsAlertGroupingConfiguration,
    ),
  );
}

export function createSignalsAlertGroupingConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSignalsAlertGroupingConfiguration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSignalsAlertGroupingConfiguration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSignalsAlertGroupingConfiguration' from JSON`,
  );
}
