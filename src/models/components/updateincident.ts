/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Key:value pairs to track custom data for the incident
 */
export type UpdateIncidentLabels = {};

/**
 * Updates an incident with provided parameters
 */
export type UpdateIncident = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  customerImpactSummary?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * Key:value pairs to track custom data for the incident
   */
  labels?: UpdateIncidentLabels | null | undefined;
  priority?: string | null | undefined;
  severity?: string | null | undefined;
  severityConditionId?: string | null | undefined;
  severityImpactId?: string | null | undefined;
  /**
   * List of tags for the incident
   */
  tagList?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateIncidentLabels$inboundSchema: z.ZodType<
  UpdateIncidentLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateIncidentLabels$Outbound = {};

/** @internal */
export const UpdateIncidentLabels$outboundSchema: z.ZodType<
  UpdateIncidentLabels$Outbound,
  z.ZodTypeDef,
  UpdateIncidentLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentLabels$ {
  /** @deprecated use `UpdateIncidentLabels$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentLabels$inboundSchema;
  /** @deprecated use `UpdateIncidentLabels$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentLabels$outboundSchema;
  /** @deprecated use `UpdateIncidentLabels$Outbound` instead. */
  export type Outbound = UpdateIncidentLabels$Outbound;
}

export function updateIncidentLabelsToJSON(
  updateIncidentLabels: UpdateIncidentLabels,
): string {
  return JSON.stringify(
    UpdateIncidentLabels$outboundSchema.parse(updateIncidentLabels),
  );
}

export function updateIncidentLabelsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentLabels' from JSON`,
  );
}

/** @internal */
export const UpdateIncident$inboundSchema: z.ZodType<
  UpdateIncident,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  customer_impact_summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.lazy(() => UpdateIncidentLabels$inboundSchema))
    .optional(),
  priority: z.nullable(z.string()).optional(),
  severity: z.nullable(z.string()).optional(),
  severity_condition_id: z.nullable(z.string()).optional(),
  severity_impact_id: z.nullable(z.string()).optional(),
  tag_list: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_impact_summary": "customerImpactSummary",
    "severity_condition_id": "severityConditionId",
    "severity_impact_id": "severityImpactId",
    "tag_list": "tagList",
  });
});

/** @internal */
export type UpdateIncident$Outbound = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  customer_impact_summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: UpdateIncidentLabels$Outbound | null | undefined;
  priority?: string | null | undefined;
  severity?: string | null | undefined;
  severity_condition_id?: string | null | undefined;
  severity_impact_id?: string | null | undefined;
  tag_list?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateIncident$outboundSchema: z.ZodType<
  UpdateIncident$Outbound,
  z.ZodTypeDef,
  UpdateIncident
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  customerImpactSummary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.lazy(() => UpdateIncidentLabels$outboundSchema))
    .optional(),
  priority: z.nullable(z.string()).optional(),
  severity: z.nullable(z.string()).optional(),
  severityConditionId: z.nullable(z.string()).optional(),
  severityImpactId: z.nullable(z.string()).optional(),
  tagList: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    customerImpactSummary: "customer_impact_summary",
    severityConditionId: "severity_condition_id",
    severityImpactId: "severity_impact_id",
    tagList: "tag_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncident$ {
  /** @deprecated use `UpdateIncident$inboundSchema` instead. */
  export const inboundSchema = UpdateIncident$inboundSchema;
  /** @deprecated use `UpdateIncident$outboundSchema` instead. */
  export const outboundSchema = UpdateIncident$outboundSchema;
  /** @deprecated use `UpdateIncident$Outbound` instead. */
  export type Outbound = UpdateIncident$Outbound;
}

export function updateIncidentToJSON(updateIncident: UpdateIncident): string {
  return JSON.stringify(UpdateIncident$outboundSchema.parse(updateIncident));
}

export function updateIncidentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncident, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncident$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncident' from JSON`,
  );
}
