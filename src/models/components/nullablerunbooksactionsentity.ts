/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableIntegrationsIntegrationEntity,
  NullableIntegrationsIntegrationEntity$inboundSchema,
  NullableIntegrationsIntegrationEntity$Outbound,
  NullableIntegrationsIntegrationEntity$outboundSchema,
} from "./nullableintegrationsintegrationentity.js";
import {
  NullableRunbooksActionConfigEntity,
  NullableRunbooksActionConfigEntity$inboundSchema,
  NullableRunbooksActionConfigEntity$Outbound,
  NullableRunbooksActionConfigEntity$outboundSchema,
} from "./nullablerunbooksactionconfigentity.js";

export type NullableRunbooksActionsEntityPrerequisite = {};

export type NullableRunbooksActionsEntityDefaultLogic = {};

export type NullableRunbooksActionsEntityDefaultRuleData = {};

export type NullableRunbooksActionsEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  config?: NullableRunbooksActionConfigEntity | null | undefined;
  category?: string | null | undefined;
  prerequisites?:
    | Array<NullableRunbooksActionsEntityPrerequisite>
    | null
    | undefined;
  integration?: NullableIntegrationsIntegrationEntity | null | undefined;
  supportedRunbookTypes?: Array<string> | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  automatable?: boolean | null | undefined;
  rerunnable?: boolean | null | undefined;
  repeatable?: boolean | null | undefined;
  defaultLogic?: NullableRunbooksActionsEntityDefaultLogic | null | undefined;
  defaultRuleData?:
    | NullableRunbooksActionsEntityDefaultRuleData
    | null
    | undefined;
};

/** @internal */
export const NullableRunbooksActionsEntityPrerequisite$inboundSchema: z.ZodType<
  NullableRunbooksActionsEntityPrerequisite,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NullableRunbooksActionsEntityPrerequisite$Outbound = {};

/** @internal */
export const NullableRunbooksActionsEntityPrerequisite$outboundSchema:
  z.ZodType<
    NullableRunbooksActionsEntityPrerequisite$Outbound,
    z.ZodTypeDef,
    NullableRunbooksActionsEntityPrerequisite
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRunbooksActionsEntityPrerequisite$ {
  /** @deprecated use `NullableRunbooksActionsEntityPrerequisite$inboundSchema` instead. */
  export const inboundSchema =
    NullableRunbooksActionsEntityPrerequisite$inboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntityPrerequisite$outboundSchema` instead. */
  export const outboundSchema =
    NullableRunbooksActionsEntityPrerequisite$outboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntityPrerequisite$Outbound` instead. */
  export type Outbound = NullableRunbooksActionsEntityPrerequisite$Outbound;
}

export function nullableRunbooksActionsEntityPrerequisiteToJSON(
  nullableRunbooksActionsEntityPrerequisite:
    NullableRunbooksActionsEntityPrerequisite,
): string {
  return JSON.stringify(
    NullableRunbooksActionsEntityPrerequisite$outboundSchema.parse(
      nullableRunbooksActionsEntityPrerequisite,
    ),
  );
}

export function nullableRunbooksActionsEntityPrerequisiteFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableRunbooksActionsEntityPrerequisite,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRunbooksActionsEntityPrerequisite$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableRunbooksActionsEntityPrerequisite' from JSON`,
  );
}

/** @internal */
export const NullableRunbooksActionsEntityDefaultLogic$inboundSchema: z.ZodType<
  NullableRunbooksActionsEntityDefaultLogic,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NullableRunbooksActionsEntityDefaultLogic$Outbound = {};

/** @internal */
export const NullableRunbooksActionsEntityDefaultLogic$outboundSchema:
  z.ZodType<
    NullableRunbooksActionsEntityDefaultLogic$Outbound,
    z.ZodTypeDef,
    NullableRunbooksActionsEntityDefaultLogic
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRunbooksActionsEntityDefaultLogic$ {
  /** @deprecated use `NullableRunbooksActionsEntityDefaultLogic$inboundSchema` instead. */
  export const inboundSchema =
    NullableRunbooksActionsEntityDefaultLogic$inboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntityDefaultLogic$outboundSchema` instead. */
  export const outboundSchema =
    NullableRunbooksActionsEntityDefaultLogic$outboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntityDefaultLogic$Outbound` instead. */
  export type Outbound = NullableRunbooksActionsEntityDefaultLogic$Outbound;
}

export function nullableRunbooksActionsEntityDefaultLogicToJSON(
  nullableRunbooksActionsEntityDefaultLogic:
    NullableRunbooksActionsEntityDefaultLogic,
): string {
  return JSON.stringify(
    NullableRunbooksActionsEntityDefaultLogic$outboundSchema.parse(
      nullableRunbooksActionsEntityDefaultLogic,
    ),
  );
}

export function nullableRunbooksActionsEntityDefaultLogicFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableRunbooksActionsEntityDefaultLogic,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRunbooksActionsEntityDefaultLogic$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableRunbooksActionsEntityDefaultLogic' from JSON`,
  );
}

/** @internal */
export const NullableRunbooksActionsEntityDefaultRuleData$inboundSchema:
  z.ZodType<
    NullableRunbooksActionsEntityDefaultRuleData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type NullableRunbooksActionsEntityDefaultRuleData$Outbound = {};

/** @internal */
export const NullableRunbooksActionsEntityDefaultRuleData$outboundSchema:
  z.ZodType<
    NullableRunbooksActionsEntityDefaultRuleData$Outbound,
    z.ZodTypeDef,
    NullableRunbooksActionsEntityDefaultRuleData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRunbooksActionsEntityDefaultRuleData$ {
  /** @deprecated use `NullableRunbooksActionsEntityDefaultRuleData$inboundSchema` instead. */
  export const inboundSchema =
    NullableRunbooksActionsEntityDefaultRuleData$inboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntityDefaultRuleData$outboundSchema` instead. */
  export const outboundSchema =
    NullableRunbooksActionsEntityDefaultRuleData$outboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntityDefaultRuleData$Outbound` instead. */
  export type Outbound = NullableRunbooksActionsEntityDefaultRuleData$Outbound;
}

export function nullableRunbooksActionsEntityDefaultRuleDataToJSON(
  nullableRunbooksActionsEntityDefaultRuleData:
    NullableRunbooksActionsEntityDefaultRuleData,
): string {
  return JSON.stringify(
    NullableRunbooksActionsEntityDefaultRuleData$outboundSchema.parse(
      nullableRunbooksActionsEntityDefaultRuleData,
    ),
  );
}

export function nullableRunbooksActionsEntityDefaultRuleDataFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableRunbooksActionsEntityDefaultRuleData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRunbooksActionsEntityDefaultRuleData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableRunbooksActionsEntityDefaultRuleData' from JSON`,
  );
}

/** @internal */
export const NullableRunbooksActionsEntity$inboundSchema: z.ZodType<
  NullableRunbooksActionsEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  config: z.nullable(NullableRunbooksActionConfigEntity$inboundSchema)
    .optional(),
  category: z.nullable(z.string()).optional(),
  prerequisites: z.nullable(
    z.array(
      z.lazy(() => NullableRunbooksActionsEntityPrerequisite$inboundSchema),
    ),
  ).optional(),
  integration: z.nullable(NullableIntegrationsIntegrationEntity$inboundSchema)
    .optional(),
  supported_runbook_types: z.nullable(z.array(z.string())).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  automatable: z.nullable(z.boolean()).optional(),
  rerunnable: z.nullable(z.boolean()).optional(),
  repeatable: z.nullable(z.boolean()).optional(),
  default_logic: z.nullable(
    z.lazy(() => NullableRunbooksActionsEntityDefaultLogic$inboundSchema),
  ).optional(),
  default_rule_data: z.nullable(
    z.lazy(() => NullableRunbooksActionsEntityDefaultRuleData$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "supported_runbook_types": "supportedRunbookTypes",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "default_logic": "defaultLogic",
    "default_rule_data": "defaultRuleData",
  });
});

/** @internal */
export type NullableRunbooksActionsEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  config?: NullableRunbooksActionConfigEntity$Outbound | null | undefined;
  category?: string | null | undefined;
  prerequisites?:
    | Array<NullableRunbooksActionsEntityPrerequisite$Outbound>
    | null
    | undefined;
  integration?:
    | NullableIntegrationsIntegrationEntity$Outbound
    | null
    | undefined;
  supported_runbook_types?: Array<string> | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  automatable?: boolean | null | undefined;
  rerunnable?: boolean | null | undefined;
  repeatable?: boolean | null | undefined;
  default_logic?:
    | NullableRunbooksActionsEntityDefaultLogic$Outbound
    | null
    | undefined;
  default_rule_data?:
    | NullableRunbooksActionsEntityDefaultRuleData$Outbound
    | null
    | undefined;
};

/** @internal */
export const NullableRunbooksActionsEntity$outboundSchema: z.ZodType<
  NullableRunbooksActionsEntity$Outbound,
  z.ZodTypeDef,
  NullableRunbooksActionsEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  config: z.nullable(NullableRunbooksActionConfigEntity$outboundSchema)
    .optional(),
  category: z.nullable(z.string()).optional(),
  prerequisites: z.nullable(
    z.array(z.lazy(() =>
      NullableRunbooksActionsEntityPrerequisite$outboundSchema
    )),
  ).optional(),
  integration: z.nullable(NullableIntegrationsIntegrationEntity$outboundSchema)
    .optional(),
  supportedRunbookTypes: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  automatable: z.nullable(z.boolean()).optional(),
  rerunnable: z.nullable(z.boolean()).optional(),
  repeatable: z.nullable(z.boolean()).optional(),
  defaultLogic: z.nullable(
    z.lazy(() => NullableRunbooksActionsEntityDefaultLogic$outboundSchema),
  ).optional(),
  defaultRuleData: z.nullable(
    z.lazy(() => NullableRunbooksActionsEntityDefaultRuleData$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    supportedRunbookTypes: "supported_runbook_types",
    createdAt: "created_at",
    updatedAt: "updated_at",
    defaultLogic: "default_logic",
    defaultRuleData: "default_rule_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRunbooksActionsEntity$ {
  /** @deprecated use `NullableRunbooksActionsEntity$inboundSchema` instead. */
  export const inboundSchema = NullableRunbooksActionsEntity$inboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntity$outboundSchema` instead. */
  export const outboundSchema = NullableRunbooksActionsEntity$outboundSchema;
  /** @deprecated use `NullableRunbooksActionsEntity$Outbound` instead. */
  export type Outbound = NullableRunbooksActionsEntity$Outbound;
}

export function nullableRunbooksActionsEntityToJSON(
  nullableRunbooksActionsEntity: NullableRunbooksActionsEntity,
): string {
  return JSON.stringify(
    NullableRunbooksActionsEntity$outboundSchema.parse(
      nullableRunbooksActionsEntity,
    ),
  );
}

export function nullableRunbooksActionsEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableRunbooksActionsEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableRunbooksActionsEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableRunbooksActionsEntity' from JSON`,
  );
}
