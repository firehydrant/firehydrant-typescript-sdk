/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * VotesEntity model
 */
export type NullableVotesEntity = {
  /**
   * Whether or not the current actor has voted
   */
  voted?: boolean | null | undefined;
  /**
   * Whether or not the current actor has voted positively
   */
  liked?: boolean | null | undefined;
  /**
   * Whether or not the current actor has voted negatively
   */
  disliked?: boolean | null | undefined;
  likes?: number | null | undefined;
  dislikes?: number | null | undefined;
};

/** @internal */
export const NullableVotesEntity$inboundSchema: z.ZodType<
  NullableVotesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  voted: z.nullable(z.boolean()).optional(),
  liked: z.nullable(z.boolean()).optional(),
  disliked: z.nullable(z.boolean()).optional(),
  likes: z.nullable(z.number().int()).optional(),
  dislikes: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type NullableVotesEntity$Outbound = {
  voted?: boolean | null | undefined;
  liked?: boolean | null | undefined;
  disliked?: boolean | null | undefined;
  likes?: number | null | undefined;
  dislikes?: number | null | undefined;
};

/** @internal */
export const NullableVotesEntity$outboundSchema: z.ZodType<
  NullableVotesEntity$Outbound,
  z.ZodTypeDef,
  NullableVotesEntity
> = z.object({
  voted: z.nullable(z.boolean()).optional(),
  liked: z.nullable(z.boolean()).optional(),
  disliked: z.nullable(z.boolean()).optional(),
  likes: z.nullable(z.number().int()).optional(),
  dislikes: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableVotesEntity$ {
  /** @deprecated use `NullableVotesEntity$inboundSchema` instead. */
  export const inboundSchema = NullableVotesEntity$inboundSchema;
  /** @deprecated use `NullableVotesEntity$outboundSchema` instead. */
  export const outboundSchema = NullableVotesEntity$outboundSchema;
  /** @deprecated use `NullableVotesEntity$Outbound` instead. */
  export type Outbound = NullableVotesEntity$Outbound;
}

export function nullableVotesEntityToJSON(
  nullableVotesEntity: NullableVotesEntity,
): string {
  return JSON.stringify(
    NullableVotesEntity$outboundSchema.parse(nullableVotesEntity),
  );
}

export function nullableVotesEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableVotesEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableVotesEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableVotesEntity' from JSON`,
  );
}
