/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Hash of HTTP headers with values as Array, e.g. { 'Content-Type' => ['application/json'] }
 */
export type Headers = {};

/**
 * JSON body of request.
 */
export type CreateSignalsEventSourceData = {};

/**
 * Example payload as input to transpose function
 */
export type CreateSignalsEventSourceExamplePayload = {
  /**
   * Hash of HTTP headers with values as Array, e.g. { 'Content-Type' => ['application/json'] }
   */
  headers?: Headers | null | undefined;
  /**
   * JSON body of request.
   */
  data?: CreateSignalsEventSourceData | null | undefined;
};

/**
 * Create a Signals event source for the authenticated user.
 */
export type CreateSignalsEventSource = {
  /**
   * Name of the transposer
   */
  name: string;
  /**
   * Description of the transposer
   */
  description?: string | null | undefined;
  /**
   * Slug of the transposer
   */
  slug: string;
  /**
   * Example payload as input to transpose function
   */
  examplePayload: CreateSignalsEventSourceExamplePayload;
  /**
   * Javascript code to convert payload into Signal object
   */
  javascript: string;
};

/** @internal */
export const Headers$inboundSchema: z.ZodType<Headers, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Headers$Outbound = {};

/** @internal */
export const Headers$outboundSchema: z.ZodType<
  Headers$Outbound,
  z.ZodTypeDef,
  Headers
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Headers$ {
  /** @deprecated use `Headers$inboundSchema` instead. */
  export const inboundSchema = Headers$inboundSchema;
  /** @deprecated use `Headers$outboundSchema` instead. */
  export const outboundSchema = Headers$outboundSchema;
  /** @deprecated use `Headers$Outbound` instead. */
  export type Outbound = Headers$Outbound;
}

export function headersToJSON(headers: Headers): string {
  return JSON.stringify(Headers$outboundSchema.parse(headers));
}

export function headersFromJSON(
  jsonString: string,
): SafeParseResult<Headers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Headers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Headers' from JSON`,
  );
}

/** @internal */
export const CreateSignalsEventSourceData$inboundSchema: z.ZodType<
  CreateSignalsEventSourceData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateSignalsEventSourceData$Outbound = {};

/** @internal */
export const CreateSignalsEventSourceData$outboundSchema: z.ZodType<
  CreateSignalsEventSourceData$Outbound,
  z.ZodTypeDef,
  CreateSignalsEventSourceData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsEventSourceData$ {
  /** @deprecated use `CreateSignalsEventSourceData$inboundSchema` instead. */
  export const inboundSchema = CreateSignalsEventSourceData$inboundSchema;
  /** @deprecated use `CreateSignalsEventSourceData$outboundSchema` instead. */
  export const outboundSchema = CreateSignalsEventSourceData$outboundSchema;
  /** @deprecated use `CreateSignalsEventSourceData$Outbound` instead. */
  export type Outbound = CreateSignalsEventSourceData$Outbound;
}

export function createSignalsEventSourceDataToJSON(
  createSignalsEventSourceData: CreateSignalsEventSourceData,
): string {
  return JSON.stringify(
    CreateSignalsEventSourceData$outboundSchema.parse(
      createSignalsEventSourceData,
    ),
  );
}

export function createSignalsEventSourceDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateSignalsEventSourceData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSignalsEventSourceData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSignalsEventSourceData' from JSON`,
  );
}

/** @internal */
export const CreateSignalsEventSourceExamplePayload$inboundSchema: z.ZodType<
  CreateSignalsEventSourceExamplePayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.nullable(z.lazy(() => Headers$inboundSchema)).optional(),
  data: z.nullable(z.lazy(() => CreateSignalsEventSourceData$inboundSchema))
    .optional(),
});

/** @internal */
export type CreateSignalsEventSourceExamplePayload$Outbound = {
  headers?: Headers$Outbound | null | undefined;
  data?: CreateSignalsEventSourceData$Outbound | null | undefined;
};

/** @internal */
export const CreateSignalsEventSourceExamplePayload$outboundSchema: z.ZodType<
  CreateSignalsEventSourceExamplePayload$Outbound,
  z.ZodTypeDef,
  CreateSignalsEventSourceExamplePayload
> = z.object({
  headers: z.nullable(z.lazy(() => Headers$outboundSchema)).optional(),
  data: z.nullable(z.lazy(() => CreateSignalsEventSourceData$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsEventSourceExamplePayload$ {
  /** @deprecated use `CreateSignalsEventSourceExamplePayload$inboundSchema` instead. */
  export const inboundSchema =
    CreateSignalsEventSourceExamplePayload$inboundSchema;
  /** @deprecated use `CreateSignalsEventSourceExamplePayload$outboundSchema` instead. */
  export const outboundSchema =
    CreateSignalsEventSourceExamplePayload$outboundSchema;
  /** @deprecated use `CreateSignalsEventSourceExamplePayload$Outbound` instead. */
  export type Outbound = CreateSignalsEventSourceExamplePayload$Outbound;
}

export function createSignalsEventSourceExamplePayloadToJSON(
  createSignalsEventSourceExamplePayload:
    CreateSignalsEventSourceExamplePayload,
): string {
  return JSON.stringify(
    CreateSignalsEventSourceExamplePayload$outboundSchema.parse(
      createSignalsEventSourceExamplePayload,
    ),
  );
}

export function createSignalsEventSourceExamplePayloadFromJSON(
  jsonString: string,
): SafeParseResult<CreateSignalsEventSourceExamplePayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSignalsEventSourceExamplePayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSignalsEventSourceExamplePayload' from JSON`,
  );
}

/** @internal */
export const CreateSignalsEventSource$inboundSchema: z.ZodType<
  CreateSignalsEventSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  slug: z.string(),
  example_payload: z.lazy(() =>
    CreateSignalsEventSourceExamplePayload$inboundSchema
  ),
  javascript: z.string(),
}).transform((v) => {
  return remap$(v, {
    "example_payload": "examplePayload",
  });
});

/** @internal */
export type CreateSignalsEventSource$Outbound = {
  name: string;
  description?: string | null | undefined;
  slug: string;
  example_payload: CreateSignalsEventSourceExamplePayload$Outbound;
  javascript: string;
};

/** @internal */
export const CreateSignalsEventSource$outboundSchema: z.ZodType<
  CreateSignalsEventSource$Outbound,
  z.ZodTypeDef,
  CreateSignalsEventSource
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  slug: z.string(),
  examplePayload: z.lazy(() =>
    CreateSignalsEventSourceExamplePayload$outboundSchema
  ),
  javascript: z.string(),
}).transform((v) => {
  return remap$(v, {
    examplePayload: "example_payload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsEventSource$ {
  /** @deprecated use `CreateSignalsEventSource$inboundSchema` instead. */
  export const inboundSchema = CreateSignalsEventSource$inboundSchema;
  /** @deprecated use `CreateSignalsEventSource$outboundSchema` instead. */
  export const outboundSchema = CreateSignalsEventSource$outboundSchema;
  /** @deprecated use `CreateSignalsEventSource$Outbound` instead. */
  export type Outbound = CreateSignalsEventSource$Outbound;
}

export function createSignalsEventSourceToJSON(
  createSignalsEventSource: CreateSignalsEventSource,
): string {
  return JSON.stringify(
    CreateSignalsEventSource$outboundSchema.parse(createSignalsEventSource),
  );
}

export function createSignalsEventSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateSignalsEventSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSignalsEventSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSignalsEventSource' from JSON`,
  );
}
