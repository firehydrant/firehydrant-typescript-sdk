/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1PostMortemsReportsReportIdQuestions = {
  /**
   * ID of a question
   */
  id?: string | undefined;
  /**
   * Answer to question
   */
  body?: string | undefined;
};

/**
 * Update a report
 */
export type PatchV1PostMortemsReportsReportId = {
  name?: string | undefined;
  summary?: string | undefined;
  additionalDetails?: string | undefined;
  questions?: Array<PatchV1PostMortemsReportsReportIdQuestions> | undefined;
};

/** @internal */
export const PatchV1PostMortemsReportsReportIdQuestions$inboundSchema:
  z.ZodType<PatchV1PostMortemsReportsReportIdQuestions, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      body: z.string().optional(),
    });

/** @internal */
export type PatchV1PostMortemsReportsReportIdQuestions$Outbound = {
  id?: string | undefined;
  body?: string | undefined;
};

/** @internal */
export const PatchV1PostMortemsReportsReportIdQuestions$outboundSchema:
  z.ZodType<
    PatchV1PostMortemsReportsReportIdQuestions$Outbound,
    z.ZodTypeDef,
    PatchV1PostMortemsReportsReportIdQuestions
  > = z.object({
    id: z.string().optional(),
    body: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1PostMortemsReportsReportIdQuestions$ {
  /** @deprecated use `PatchV1PostMortemsReportsReportIdQuestions$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1PostMortemsReportsReportIdQuestions$inboundSchema;
  /** @deprecated use `PatchV1PostMortemsReportsReportIdQuestions$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1PostMortemsReportsReportIdQuestions$outboundSchema;
  /** @deprecated use `PatchV1PostMortemsReportsReportIdQuestions$Outbound` instead. */
  export type Outbound = PatchV1PostMortemsReportsReportIdQuestions$Outbound;
}

export function patchV1PostMortemsReportsReportIdQuestionsToJSON(
  patchV1PostMortemsReportsReportIdQuestions:
    PatchV1PostMortemsReportsReportIdQuestions,
): string {
  return JSON.stringify(
    PatchV1PostMortemsReportsReportIdQuestions$outboundSchema.parse(
      patchV1PostMortemsReportsReportIdQuestions,
    ),
  );
}

export function patchV1PostMortemsReportsReportIdQuestionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1PostMortemsReportsReportIdQuestions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1PostMortemsReportsReportIdQuestions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1PostMortemsReportsReportIdQuestions' from JSON`,
  );
}

/** @internal */
export const PatchV1PostMortemsReportsReportId$inboundSchema: z.ZodType<
  PatchV1PostMortemsReportsReportId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  summary: z.string().optional(),
  additional_details: z.string().optional(),
  questions: z.array(
    z.lazy(() => PatchV1PostMortemsReportsReportIdQuestions$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_details": "additionalDetails",
  });
});

/** @internal */
export type PatchV1PostMortemsReportsReportId$Outbound = {
  name?: string | undefined;
  summary?: string | undefined;
  additional_details?: string | undefined;
  questions?:
    | Array<PatchV1PostMortemsReportsReportIdQuestions$Outbound>
    | undefined;
};

/** @internal */
export const PatchV1PostMortemsReportsReportId$outboundSchema: z.ZodType<
  PatchV1PostMortemsReportsReportId$Outbound,
  z.ZodTypeDef,
  PatchV1PostMortemsReportsReportId
> = z.object({
  name: z.string().optional(),
  summary: z.string().optional(),
  additionalDetails: z.string().optional(),
  questions: z.array(
    z.lazy(() => PatchV1PostMortemsReportsReportIdQuestions$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalDetails: "additional_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1PostMortemsReportsReportId$ {
  /** @deprecated use `PatchV1PostMortemsReportsReportId$inboundSchema` instead. */
  export const inboundSchema = PatchV1PostMortemsReportsReportId$inboundSchema;
  /** @deprecated use `PatchV1PostMortemsReportsReportId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1PostMortemsReportsReportId$outboundSchema;
  /** @deprecated use `PatchV1PostMortemsReportsReportId$Outbound` instead. */
  export type Outbound = PatchV1PostMortemsReportsReportId$Outbound;
}

export function patchV1PostMortemsReportsReportIdToJSON(
  patchV1PostMortemsReportsReportId: PatchV1PostMortemsReportsReportId,
): string {
  return JSON.stringify(
    PatchV1PostMortemsReportsReportId$outboundSchema.parse(
      patchV1PostMortemsReportsReportId,
    ),
  );
}

export function patchV1PostMortemsReportsReportIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1PostMortemsReportsReportId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1PostMortemsReportsReportId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1PostMortemsReportsReportId' from JSON`,
  );
}
