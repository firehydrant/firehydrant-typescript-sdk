/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentRoleEntity,
  IncidentRoleEntity$inboundSchema,
  IncidentRoleEntity$Outbound,
  IncidentRoleEntity$outboundSchema,
} from "./incidentroleentity.js";
import {
  ScheduleEntity,
  ScheduleEntity$inboundSchema,
  ScheduleEntity$Outbound,
  ScheduleEntity$outboundSchema,
} from "./scheduleentity.js";
import {
  SuccinctEntity,
  SuccinctEntity$inboundSchema,
  SuccinctEntity$Outbound,
  SuccinctEntity$outboundSchema,
} from "./succinctentity.js";
import {
  UserEntity,
  UserEntity$inboundSchema,
  UserEntity$Outbound,
  UserEntity$outboundSchema,
} from "./userentity.js";

export type MembershipEntity = {
  /**
   * UserEntity model
   */
  user?: UserEntity | undefined;
  schedule?: ScheduleEntity | undefined;
  signalsOnCallSchedule?: SuccinctEntity | undefined;
  /**
   * IncidentRoleEntity model
   */
  defaultIncidentRole?: IncidentRoleEntity | undefined;
};

/** @internal */
export const MembershipEntity$inboundSchema: z.ZodType<
  MembershipEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: UserEntity$inboundSchema.optional(),
  schedule: ScheduleEntity$inboundSchema.optional(),
  signals_on_call_schedule: SuccinctEntity$inboundSchema.optional(),
  default_incident_role: IncidentRoleEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "signals_on_call_schedule": "signalsOnCallSchedule",
    "default_incident_role": "defaultIncidentRole",
  });
});

/** @internal */
export type MembershipEntity$Outbound = {
  user?: UserEntity$Outbound | undefined;
  schedule?: ScheduleEntity$Outbound | undefined;
  signals_on_call_schedule?: SuccinctEntity$Outbound | undefined;
  default_incident_role?: IncidentRoleEntity$Outbound | undefined;
};

/** @internal */
export const MembershipEntity$outboundSchema: z.ZodType<
  MembershipEntity$Outbound,
  z.ZodTypeDef,
  MembershipEntity
> = z.object({
  user: UserEntity$outboundSchema.optional(),
  schedule: ScheduleEntity$outboundSchema.optional(),
  signalsOnCallSchedule: SuccinctEntity$outboundSchema.optional(),
  defaultIncidentRole: IncidentRoleEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    signalsOnCallSchedule: "signals_on_call_schedule",
    defaultIncidentRole: "default_incident_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MembershipEntity$ {
  /** @deprecated use `MembershipEntity$inboundSchema` instead. */
  export const inboundSchema = MembershipEntity$inboundSchema;
  /** @deprecated use `MembershipEntity$outboundSchema` instead. */
  export const outboundSchema = MembershipEntity$outboundSchema;
  /** @deprecated use `MembershipEntity$Outbound` instead. */
  export type Outbound = MembershipEntity$Outbound;
}

export function membershipEntityToJSON(
  membershipEntity: MembershipEntity,
): string {
  return JSON.stringify(
    MembershipEntity$outboundSchema.parse(membershipEntity),
  );
}

export function membershipEntityFromJSON(
  jsonString: string,
): SafeParseResult<MembershipEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MembershipEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MembershipEntity' from JSON`,
  );
}
