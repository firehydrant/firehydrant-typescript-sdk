/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableIncidentRoleEntity,
  NullableIncidentRoleEntity$inboundSchema,
  NullableIncidentRoleEntity$Outbound,
  NullableIncidentRoleEntity$outboundSchema,
} from "./nullableincidentroleentity.js";
import {
  NullableScheduleEntity,
  NullableScheduleEntity$inboundSchema,
  NullableScheduleEntity$Outbound,
  NullableScheduleEntity$outboundSchema,
} from "./nullablescheduleentity.js";
import {
  NullableSuccinctEntity,
  NullableSuccinctEntity$inboundSchema,
  NullableSuccinctEntity$Outbound,
  NullableSuccinctEntity$outboundSchema,
} from "./nullablesuccinctentity.js";
import {
  NullableUserEntity,
  NullableUserEntity$inboundSchema,
  NullableUserEntity$Outbound,
  NullableUserEntity$outboundSchema,
} from "./nullableuserentity.js";

export type MembershipEntity = {
  user?: NullableUserEntity | null | undefined;
  schedule?: NullableScheduleEntity | null | undefined;
  signalsOnCallSchedule?: NullableSuccinctEntity | null | undefined;
  defaultIncidentRole?: NullableIncidentRoleEntity | null | undefined;
};

/** @internal */
export const MembershipEntity$inboundSchema: z.ZodType<
  MembershipEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.nullable(NullableUserEntity$inboundSchema).optional(),
  schedule: z.nullable(NullableScheduleEntity$inboundSchema).optional(),
  signals_on_call_schedule: z.nullable(NullableSuccinctEntity$inboundSchema)
    .optional(),
  default_incident_role: z.nullable(NullableIncidentRoleEntity$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "signals_on_call_schedule": "signalsOnCallSchedule",
    "default_incident_role": "defaultIncidentRole",
  });
});

/** @internal */
export type MembershipEntity$Outbound = {
  user?: NullableUserEntity$Outbound | null | undefined;
  schedule?: NullableScheduleEntity$Outbound | null | undefined;
  signals_on_call_schedule?: NullableSuccinctEntity$Outbound | null | undefined;
  default_incident_role?:
    | NullableIncidentRoleEntity$Outbound
    | null
    | undefined;
};

/** @internal */
export const MembershipEntity$outboundSchema: z.ZodType<
  MembershipEntity$Outbound,
  z.ZodTypeDef,
  MembershipEntity
> = z.object({
  user: z.nullable(NullableUserEntity$outboundSchema).optional(),
  schedule: z.nullable(NullableScheduleEntity$outboundSchema).optional(),
  signalsOnCallSchedule: z.nullable(NullableSuccinctEntity$outboundSchema)
    .optional(),
  defaultIncidentRole: z.nullable(NullableIncidentRoleEntity$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    signalsOnCallSchedule: "signals_on_call_schedule",
    defaultIncidentRole: "default_incident_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MembershipEntity$ {
  /** @deprecated use `MembershipEntity$inboundSchema` instead. */
  export const inboundSchema = MembershipEntity$inboundSchema;
  /** @deprecated use `MembershipEntity$outboundSchema` instead. */
  export const outboundSchema = MembershipEntity$outboundSchema;
  /** @deprecated use `MembershipEntity$Outbound` instead. */
  export type Outbound = MembershipEntity$Outbound;
}

export function membershipEntityToJSON(
  membershipEntity: MembershipEntity,
): string {
  return JSON.stringify(
    MembershipEntity$outboundSchema.parse(membershipEntity),
  );
}

export function membershipEntityFromJSON(
  jsonString: string,
): SafeParseResult<MembershipEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MembershipEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MembershipEntity' from JSON`,
  );
}
