/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VoteDirection = {
  Up: "up",
  Down: "down",
} as const;
export type VoteDirection = ClosedEnum<typeof VoteDirection>;

/**
 * Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
 */
export type CreateIncidentChatMessage = {
  body: string;
  /**
   * ISO8601 timestamp for when the chat message occurred
   */
  occurredAt?: Date | null | undefined;
  voteDirection?: VoteDirection | null | undefined;
};

/** @internal */
export const VoteDirection$inboundSchema: z.ZodNativeEnum<
  typeof VoteDirection
> = z.nativeEnum(VoteDirection);

/** @internal */
export const VoteDirection$outboundSchema: z.ZodNativeEnum<
  typeof VoteDirection
> = VoteDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoteDirection$ {
  /** @deprecated use `VoteDirection$inboundSchema` instead. */
  export const inboundSchema = VoteDirection$inboundSchema;
  /** @deprecated use `VoteDirection$outboundSchema` instead. */
  export const outboundSchema = VoteDirection$outboundSchema;
}

/** @internal */
export const CreateIncidentChatMessage$inboundSchema: z.ZodType<
  CreateIncidentChatMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string(),
  occurred_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  vote_direction: z.nullable(VoteDirection$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
    "vote_direction": "voteDirection",
  });
});

/** @internal */
export type CreateIncidentChatMessage$Outbound = {
  body: string;
  occurred_at?: string | null | undefined;
  vote_direction?: string | null | undefined;
};

/** @internal */
export const CreateIncidentChatMessage$outboundSchema: z.ZodType<
  CreateIncidentChatMessage$Outbound,
  z.ZodTypeDef,
  CreateIncidentChatMessage
> = z.object({
  body: z.string(),
  occurredAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  voteDirection: z.nullable(VoteDirection$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
    voteDirection: "vote_direction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentChatMessage$ {
  /** @deprecated use `CreateIncidentChatMessage$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentChatMessage$inboundSchema;
  /** @deprecated use `CreateIncidentChatMessage$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentChatMessage$outboundSchema;
  /** @deprecated use `CreateIncidentChatMessage$Outbound` instead. */
  export type Outbound = CreateIncidentChatMessage$Outbound;
}

export function createIncidentChatMessageToJSON(
  createIncidentChatMessage: CreateIncidentChatMessage,
): string {
  return JSON.stringify(
    CreateIncidentChatMessage$outboundSchema.parse(createIncidentChatMessage),
  );
}

export function createIncidentChatMessageFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentChatMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentChatMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentChatMessage' from JSON`,
  );
}
