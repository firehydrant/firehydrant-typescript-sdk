/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Add impacted infrastructure to an incident
 */
export type CreateIncidentImpact = {
  id: string;
  conditionId?: string | null | undefined;
};

/** @internal */
export const CreateIncidentImpact$inboundSchema: z.ZodType<
  CreateIncidentImpact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  condition_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type CreateIncidentImpact$Outbound = {
  id: string;
  condition_id?: string | null | undefined;
};

/** @internal */
export const CreateIncidentImpact$outboundSchema: z.ZodType<
  CreateIncidentImpact$Outbound,
  z.ZodTypeDef,
  CreateIncidentImpact
> = z.object({
  id: z.string(),
  conditionId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentImpact$ {
  /** @deprecated use `CreateIncidentImpact$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentImpact$inboundSchema;
  /** @deprecated use `CreateIncidentImpact$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentImpact$outboundSchema;
  /** @deprecated use `CreateIncidentImpact$Outbound` instead. */
  export type Outbound = CreateIncidentImpact$Outbound;
}

export function createIncidentImpactToJSON(
  createIncidentImpact: CreateIncidentImpact,
): string {
  return JSON.stringify(
    CreateIncidentImpact$outboundSchema.parse(createIncidentImpact),
  );
}

export function createIncidentImpactFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentImpact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentImpact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentImpact' from JSON`,
  );
}
