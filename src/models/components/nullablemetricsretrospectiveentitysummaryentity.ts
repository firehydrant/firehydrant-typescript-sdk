/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableMetricsRetrospectiveEntitySummaryEntity = {
  completed?: number | null | undefined;
  total?: number | null | undefined;
  incomplete?: number | null | undefined;
  mean?: number | null | undefined;
  shortest?: number | null | undefined;
  longest?: number | null | undefined;
  completionPercentage?: number | null | undefined;
};

/** @internal */
export const NullableMetricsRetrospectiveEntitySummaryEntity$inboundSchema:
  z.ZodType<
    NullableMetricsRetrospectiveEntitySummaryEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    completed: z.nullable(z.number().int()).optional(),
    total: z.nullable(z.number().int()).optional(),
    incomplete: z.nullable(z.number().int()).optional(),
    mean: z.nullable(z.number()).optional(),
    shortest: z.nullable(z.number()).optional(),
    longest: z.nullable(z.number()).optional(),
    completion_percentage: z.nullable(z.number()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "completion_percentage": "completionPercentage",
    });
  });

/** @internal */
export type NullableMetricsRetrospectiveEntitySummaryEntity$Outbound = {
  completed?: number | null | undefined;
  total?: number | null | undefined;
  incomplete?: number | null | undefined;
  mean?: number | null | undefined;
  shortest?: number | null | undefined;
  longest?: number | null | undefined;
  completion_percentage?: number | null | undefined;
};

/** @internal */
export const NullableMetricsRetrospectiveEntitySummaryEntity$outboundSchema:
  z.ZodType<
    NullableMetricsRetrospectiveEntitySummaryEntity$Outbound,
    z.ZodTypeDef,
    NullableMetricsRetrospectiveEntitySummaryEntity
  > = z.object({
    completed: z.nullable(z.number().int()).optional(),
    total: z.nullable(z.number().int()).optional(),
    incomplete: z.nullable(z.number().int()).optional(),
    mean: z.nullable(z.number()).optional(),
    shortest: z.nullable(z.number()).optional(),
    longest: z.nullable(z.number()).optional(),
    completionPercentage: z.nullable(z.number()).optional(),
  }).transform((v) => {
    return remap$(v, {
      completionPercentage: "completion_percentage",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableMetricsRetrospectiveEntitySummaryEntity$ {
  /** @deprecated use `NullableMetricsRetrospectiveEntitySummaryEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableMetricsRetrospectiveEntitySummaryEntity$inboundSchema;
  /** @deprecated use `NullableMetricsRetrospectiveEntitySummaryEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableMetricsRetrospectiveEntitySummaryEntity$outboundSchema;
  /** @deprecated use `NullableMetricsRetrospectiveEntitySummaryEntity$Outbound` instead. */
  export type Outbound =
    NullableMetricsRetrospectiveEntitySummaryEntity$Outbound;
}

export function nullableMetricsRetrospectiveEntitySummaryEntityToJSON(
  nullableMetricsRetrospectiveEntitySummaryEntity:
    NullableMetricsRetrospectiveEntitySummaryEntity,
): string {
  return JSON.stringify(
    NullableMetricsRetrospectiveEntitySummaryEntity$outboundSchema.parse(
      nullableMetricsRetrospectiveEntitySummaryEntity,
    ),
  );
}

export function nullableMetricsRetrospectiveEntitySummaryEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableMetricsRetrospectiveEntitySummaryEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableMetricsRetrospectiveEntitySummaryEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableMetricsRetrospectiveEntitySummaryEntity' from JSON`,
  );
}
