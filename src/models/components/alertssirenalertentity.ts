/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableSignalsAPIRuleEntity,
  NullableSignalsAPIRuleEntity$inboundSchema,
  NullableSignalsAPIRuleEntity$Outbound,
  NullableSignalsAPIRuleEntity$outboundSchema,
} from "./nullablesignalsapiruleentity.js";

/**
 * Arbitrary key:value pairs of labels.
 */
export type AlertsSirenAlertEntityLabels = {};

export type AlertsSirenAlertEntity = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  startsAt?: Date | null | undefined;
  endsAt?: Date | null | undefined;
  status?: string | null | undefined;
  remoteId?: string | null | undefined;
  remoteUrl?: string | null | undefined;
  /**
   * Arbitrary key:value pairs of labels.
   */
  labels?: AlertsSirenAlertEntityLabels | null | undefined;
  tags?: Array<string> | null | undefined;
  signalId?: string | null | undefined;
  signalRule?: NullableSignalsAPIRuleEntity | null | undefined;
};

/** @internal */
export const AlertsSirenAlertEntityLabels$inboundSchema: z.ZodType<
  AlertsSirenAlertEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AlertsSirenAlertEntityLabels$Outbound = {};

/** @internal */
export const AlertsSirenAlertEntityLabels$outboundSchema: z.ZodType<
  AlertsSirenAlertEntityLabels$Outbound,
  z.ZodTypeDef,
  AlertsSirenAlertEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertsSirenAlertEntityLabels$ {
  /** @deprecated use `AlertsSirenAlertEntityLabels$inboundSchema` instead. */
  export const inboundSchema = AlertsSirenAlertEntityLabels$inboundSchema;
  /** @deprecated use `AlertsSirenAlertEntityLabels$outboundSchema` instead. */
  export const outboundSchema = AlertsSirenAlertEntityLabels$outboundSchema;
  /** @deprecated use `AlertsSirenAlertEntityLabels$Outbound` instead. */
  export type Outbound = AlertsSirenAlertEntityLabels$Outbound;
}

export function alertsSirenAlertEntityLabelsToJSON(
  alertsSirenAlertEntityLabels: AlertsSirenAlertEntityLabels,
): string {
  return JSON.stringify(
    AlertsSirenAlertEntityLabels$outboundSchema.parse(
      alertsSirenAlertEntityLabels,
    ),
  );
}

export function alertsSirenAlertEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<AlertsSirenAlertEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertsSirenAlertEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertsSirenAlertEntityLabels' from JSON`,
  );
}

/** @internal */
export const AlertsSirenAlertEntity$inboundSchema: z.ZodType<
  AlertsSirenAlertEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  starts_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_url: z.nullable(z.string()).optional(),
  labels: z.nullable(z.lazy(() => AlertsSirenAlertEntityLabels$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  signal_id: z.nullable(z.string()).optional(),
  signal_rule: z.nullable(NullableSignalsAPIRuleEntity$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "remote_id": "remoteId",
    "remote_url": "remoteUrl",
    "signal_id": "signalId",
    "signal_rule": "signalRule",
  });
});

/** @internal */
export type AlertsSirenAlertEntity$Outbound = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  starts_at?: string | null | undefined;
  ends_at?: string | null | undefined;
  status?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_url?: string | null | undefined;
  labels?: AlertsSirenAlertEntityLabels$Outbound | null | undefined;
  tags?: Array<string> | null | undefined;
  signal_id?: string | null | undefined;
  signal_rule?: NullableSignalsAPIRuleEntity$Outbound | null | undefined;
};

/** @internal */
export const AlertsSirenAlertEntity$outboundSchema: z.ZodType<
  AlertsSirenAlertEntity$Outbound,
  z.ZodTypeDef,
  AlertsSirenAlertEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteUrl: z.nullable(z.string()).optional(),
  labels: z.nullable(z.lazy(() => AlertsSirenAlertEntityLabels$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  signalId: z.nullable(z.string()).optional(),
  signalRule: z.nullable(NullableSignalsAPIRuleEntity$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
    remoteId: "remote_id",
    remoteUrl: "remote_url",
    signalId: "signal_id",
    signalRule: "signal_rule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertsSirenAlertEntity$ {
  /** @deprecated use `AlertsSirenAlertEntity$inboundSchema` instead. */
  export const inboundSchema = AlertsSirenAlertEntity$inboundSchema;
  /** @deprecated use `AlertsSirenAlertEntity$outboundSchema` instead. */
  export const outboundSchema = AlertsSirenAlertEntity$outboundSchema;
  /** @deprecated use `AlertsSirenAlertEntity$Outbound` instead. */
  export type Outbound = AlertsSirenAlertEntity$Outbound;
}

export function alertsSirenAlertEntityToJSON(
  alertsSirenAlertEntity: AlertsSirenAlertEntity,
): string {
  return JSON.stringify(
    AlertsSirenAlertEntity$outboundSchema.parse(alertsSirenAlertEntity),
  );
}

export function alertsSirenAlertEntityFromJSON(
  jsonString: string,
): SafeParseResult<AlertsSirenAlertEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertsSirenAlertEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertsSirenAlertEntity' from JSON`,
  );
}
