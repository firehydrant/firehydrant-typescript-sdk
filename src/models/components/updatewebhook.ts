/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateWebhookState = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type UpdateWebhookState = ClosedEnum<typeof UpdateWebhookState>;

/**
 * Update a specific webhook
 */
export type UpdateWebhook = {
  url?: string | null | undefined;
  state?: UpdateWebhookState | null | undefined;
};

/** @internal */
export const UpdateWebhookState$inboundSchema: z.ZodNativeEnum<
  typeof UpdateWebhookState
> = z.nativeEnum(UpdateWebhookState);

/** @internal */
export const UpdateWebhookState$outboundSchema: z.ZodNativeEnum<
  typeof UpdateWebhookState
> = UpdateWebhookState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookState$ {
  /** @deprecated use `UpdateWebhookState$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookState$inboundSchema;
  /** @deprecated use `UpdateWebhookState$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookState$outboundSchema;
}

/** @internal */
export const UpdateWebhook$inboundSchema: z.ZodType<
  UpdateWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.nullable(z.string()).optional(),
  state: z.nullable(UpdateWebhookState$inboundSchema).optional(),
});

/** @internal */
export type UpdateWebhook$Outbound = {
  url?: string | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const UpdateWebhook$outboundSchema: z.ZodType<
  UpdateWebhook$Outbound,
  z.ZodTypeDef,
  UpdateWebhook
> = z.object({
  url: z.nullable(z.string()).optional(),
  state: z.nullable(UpdateWebhookState$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhook$ {
  /** @deprecated use `UpdateWebhook$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhook$inboundSchema;
  /** @deprecated use `UpdateWebhook$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhook$outboundSchema;
  /** @deprecated use `UpdateWebhook$Outbound` instead. */
  export type Outbound = UpdateWebhook$Outbound;
}

export function updateWebhookToJSON(updateWebhook: UpdateWebhook): string {
  return JSON.stringify(UpdateWebhook$outboundSchema.parse(updateWebhook));
}

export function updateWebhookFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhook' from JSON`,
  );
}
