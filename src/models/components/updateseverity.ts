/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateSeverityColor = {
  Red: "red",
  Orange: "orange",
  Yellow: "yellow",
  Blue: "blue",
  Teal: "teal",
  Grey: "grey",
} as const;
export type UpdateSeverityColor = ClosedEnum<typeof UpdateSeverityColor>;

/**
 * Update a specific severity
 */
export type UpdateSeverity = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  position?: number | null | undefined;
  color?: UpdateSeverityColor | null | undefined;
};

/** @internal */
export const UpdateSeverityColor$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSeverityColor
> = z.nativeEnum(UpdateSeverityColor);

/** @internal */
export const UpdateSeverityColor$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSeverityColor
> = UpdateSeverityColor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeverityColor$ {
  /** @deprecated use `UpdateSeverityColor$inboundSchema` instead. */
  export const inboundSchema = UpdateSeverityColor$inboundSchema;
  /** @deprecated use `UpdateSeverityColor$outboundSchema` instead. */
  export const outboundSchema = UpdateSeverityColor$outboundSchema;
}

/** @internal */
export const UpdateSeverity$inboundSchema: z.ZodType<
  UpdateSeverity,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  color: z.nullable(UpdateSeverityColor$inboundSchema).optional(),
});

/** @internal */
export type UpdateSeverity$Outbound = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  position?: number | null | undefined;
  color?: string | null | undefined;
};

/** @internal */
export const UpdateSeverity$outboundSchema: z.ZodType<
  UpdateSeverity$Outbound,
  z.ZodTypeDef,
  UpdateSeverity
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  color: z.nullable(UpdateSeverityColor$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeverity$ {
  /** @deprecated use `UpdateSeverity$inboundSchema` instead. */
  export const inboundSchema = UpdateSeverity$inboundSchema;
  /** @deprecated use `UpdateSeverity$outboundSchema` instead. */
  export const outboundSchema = UpdateSeverity$outboundSchema;
  /** @deprecated use `UpdateSeverity$Outbound` instead. */
  export type Outbound = UpdateSeverity$Outbound;
}

export function updateSeverityToJSON(updateSeverity: UpdateSeverity): string {
  return JSON.stringify(UpdateSeverity$outboundSchema.parse(updateSeverity));
}

export function updateSeverityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSeverity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSeverity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSeverity' from JSON`,
  );
}
