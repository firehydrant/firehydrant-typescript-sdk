/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object representing a Team that owns the runbook
 */
export type UpdateRunbookOwner = {
  id?: string | null | undefined;
};

export type UpdateRunbookSeverity = {
  id?: string | null | undefined;
};

export type UpdateRunbookService = {
  id?: string | null | undefined;
};

export type Environment = {
  id?: string | null | undefined;
};

export type UpdateRunbookAttachmentRule = {
  /**
   * The JSON logic for the attaching the runbook
   */
  logic: string;
  /**
   * The user data for the rule
   */
  userData?: string | null | undefined;
};

export type UpdateRunbookRule = {
  /**
   * The JSON logic for the rule
   */
  logic: string;
  /**
   * The user data for the rule
   */
  userData?: string | null | undefined;
};

export type UpdateRunbookStep = {
  /**
   * ID of step to be updated
   */
  stepId?: string | null | undefined;
  /**
   * Name for step
   */
  name: string;
  /**
   * ID of action to use for this step.
   */
  actionId: string;
  rule?: UpdateRunbookRule | null | undefined;
};

/**
 * Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
 *
 * @remarks
 * about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
 */
export type UpdateRunbook = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * Whether or not this runbook is a tutorial runbook
   */
  tutorial?: boolean | null | undefined;
  /**
   * An object representing a Team that owns the runbook
   */
  owner?: UpdateRunbookOwner | null | undefined;
  severities?: Array<UpdateRunbookSeverity> | null | undefined;
  services?: Array<UpdateRunbookService> | null | undefined;
  environments?: Array<Environment> | null | undefined;
  attachmentRule?: UpdateRunbookAttachmentRule | null | undefined;
  steps?: Array<UpdateRunbookStep> | null | undefined;
  /**
   * Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.
   */
  autoAttachToRestrictedIncidents?: boolean | null | undefined;
};

/** @internal */
export const UpdateRunbookOwner$inboundSchema: z.ZodType<
  UpdateRunbookOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateRunbookOwner$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const UpdateRunbookOwner$outboundSchema: z.ZodType<
  UpdateRunbookOwner$Outbound,
  z.ZodTypeDef,
  UpdateRunbookOwner
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbookOwner$ {
  /** @deprecated use `UpdateRunbookOwner$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbookOwner$inboundSchema;
  /** @deprecated use `UpdateRunbookOwner$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbookOwner$outboundSchema;
  /** @deprecated use `UpdateRunbookOwner$Outbound` instead. */
  export type Outbound = UpdateRunbookOwner$Outbound;
}

export function updateRunbookOwnerToJSON(
  updateRunbookOwner: UpdateRunbookOwner,
): string {
  return JSON.stringify(
    UpdateRunbookOwner$outboundSchema.parse(updateRunbookOwner),
  );
}

export function updateRunbookOwnerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbookOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbookOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbookOwner' from JSON`,
  );
}

/** @internal */
export const UpdateRunbookSeverity$inboundSchema: z.ZodType<
  UpdateRunbookSeverity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateRunbookSeverity$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const UpdateRunbookSeverity$outboundSchema: z.ZodType<
  UpdateRunbookSeverity$Outbound,
  z.ZodTypeDef,
  UpdateRunbookSeverity
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbookSeverity$ {
  /** @deprecated use `UpdateRunbookSeverity$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbookSeverity$inboundSchema;
  /** @deprecated use `UpdateRunbookSeverity$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbookSeverity$outboundSchema;
  /** @deprecated use `UpdateRunbookSeverity$Outbound` instead. */
  export type Outbound = UpdateRunbookSeverity$Outbound;
}

export function updateRunbookSeverityToJSON(
  updateRunbookSeverity: UpdateRunbookSeverity,
): string {
  return JSON.stringify(
    UpdateRunbookSeverity$outboundSchema.parse(updateRunbookSeverity),
  );
}

export function updateRunbookSeverityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbookSeverity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbookSeverity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbookSeverity' from JSON`,
  );
}

/** @internal */
export const UpdateRunbookService$inboundSchema: z.ZodType<
  UpdateRunbookService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateRunbookService$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const UpdateRunbookService$outboundSchema: z.ZodType<
  UpdateRunbookService$Outbound,
  z.ZodTypeDef,
  UpdateRunbookService
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbookService$ {
  /** @deprecated use `UpdateRunbookService$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbookService$inboundSchema;
  /** @deprecated use `UpdateRunbookService$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbookService$outboundSchema;
  /** @deprecated use `UpdateRunbookService$Outbound` instead. */
  export type Outbound = UpdateRunbookService$Outbound;
}

export function updateRunbookServiceToJSON(
  updateRunbookService: UpdateRunbookService,
): string {
  return JSON.stringify(
    UpdateRunbookService$outboundSchema.parse(updateRunbookService),
  );
}

export function updateRunbookServiceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbookService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbookService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbookService' from JSON`,
  );
}

/** @internal */
export const Environment$inboundSchema: z.ZodType<
  Environment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type Environment$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const Environment$outboundSchema: z.ZodType<
  Environment$Outbound,
  z.ZodTypeDef,
  Environment
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Environment$ {
  /** @deprecated use `Environment$inboundSchema` instead. */
  export const inboundSchema = Environment$inboundSchema;
  /** @deprecated use `Environment$outboundSchema` instead. */
  export const outboundSchema = Environment$outboundSchema;
  /** @deprecated use `Environment$Outbound` instead. */
  export type Outbound = Environment$Outbound;
}

export function environmentToJSON(environment: Environment): string {
  return JSON.stringify(Environment$outboundSchema.parse(environment));
}

export function environmentFromJSON(
  jsonString: string,
): SafeParseResult<Environment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Environment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Environment' from JSON`,
  );
}

/** @internal */
export const UpdateRunbookAttachmentRule$inboundSchema: z.ZodType<
  UpdateRunbookAttachmentRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.string(),
  user_data: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_data": "userData",
  });
});

/** @internal */
export type UpdateRunbookAttachmentRule$Outbound = {
  logic: string;
  user_data?: string | null | undefined;
};

/** @internal */
export const UpdateRunbookAttachmentRule$outboundSchema: z.ZodType<
  UpdateRunbookAttachmentRule$Outbound,
  z.ZodTypeDef,
  UpdateRunbookAttachmentRule
> = z.object({
  logic: z.string(),
  userData: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbookAttachmentRule$ {
  /** @deprecated use `UpdateRunbookAttachmentRule$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbookAttachmentRule$inboundSchema;
  /** @deprecated use `UpdateRunbookAttachmentRule$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbookAttachmentRule$outboundSchema;
  /** @deprecated use `UpdateRunbookAttachmentRule$Outbound` instead. */
  export type Outbound = UpdateRunbookAttachmentRule$Outbound;
}

export function updateRunbookAttachmentRuleToJSON(
  updateRunbookAttachmentRule: UpdateRunbookAttachmentRule,
): string {
  return JSON.stringify(
    UpdateRunbookAttachmentRule$outboundSchema.parse(
      updateRunbookAttachmentRule,
    ),
  );
}

export function updateRunbookAttachmentRuleFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbookAttachmentRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbookAttachmentRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbookAttachmentRule' from JSON`,
  );
}

/** @internal */
export const UpdateRunbookRule$inboundSchema: z.ZodType<
  UpdateRunbookRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.string(),
  user_data: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_data": "userData",
  });
});

/** @internal */
export type UpdateRunbookRule$Outbound = {
  logic: string;
  user_data?: string | null | undefined;
};

/** @internal */
export const UpdateRunbookRule$outboundSchema: z.ZodType<
  UpdateRunbookRule$Outbound,
  z.ZodTypeDef,
  UpdateRunbookRule
> = z.object({
  logic: z.string(),
  userData: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbookRule$ {
  /** @deprecated use `UpdateRunbookRule$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbookRule$inboundSchema;
  /** @deprecated use `UpdateRunbookRule$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbookRule$outboundSchema;
  /** @deprecated use `UpdateRunbookRule$Outbound` instead. */
  export type Outbound = UpdateRunbookRule$Outbound;
}

export function updateRunbookRuleToJSON(
  updateRunbookRule: UpdateRunbookRule,
): string {
  return JSON.stringify(
    UpdateRunbookRule$outboundSchema.parse(updateRunbookRule),
  );
}

export function updateRunbookRuleFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbookRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbookRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbookRule' from JSON`,
  );
}

/** @internal */
export const UpdateRunbookStep$inboundSchema: z.ZodType<
  UpdateRunbookStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  step_id: z.nullable(z.string()).optional(),
  name: z.string(),
  action_id: z.string(),
  rule: z.nullable(z.lazy(() => UpdateRunbookRule$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "step_id": "stepId",
    "action_id": "actionId",
  });
});

/** @internal */
export type UpdateRunbookStep$Outbound = {
  step_id?: string | null | undefined;
  name: string;
  action_id: string;
  rule?: UpdateRunbookRule$Outbound | null | undefined;
};

/** @internal */
export const UpdateRunbookStep$outboundSchema: z.ZodType<
  UpdateRunbookStep$Outbound,
  z.ZodTypeDef,
  UpdateRunbookStep
> = z.object({
  stepId: z.nullable(z.string()).optional(),
  name: z.string(),
  actionId: z.string(),
  rule: z.nullable(z.lazy(() => UpdateRunbookRule$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    stepId: "step_id",
    actionId: "action_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbookStep$ {
  /** @deprecated use `UpdateRunbookStep$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbookStep$inboundSchema;
  /** @deprecated use `UpdateRunbookStep$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbookStep$outboundSchema;
  /** @deprecated use `UpdateRunbookStep$Outbound` instead. */
  export type Outbound = UpdateRunbookStep$Outbound;
}

export function updateRunbookStepToJSON(
  updateRunbookStep: UpdateRunbookStep,
): string {
  return JSON.stringify(
    UpdateRunbookStep$outboundSchema.parse(updateRunbookStep),
  );
}

export function updateRunbookStepFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbookStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbookStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbookStep' from JSON`,
  );
}

/** @internal */
export const UpdateRunbook$inboundSchema: z.ZodType<
  UpdateRunbook,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  tutorial: z.nullable(z.boolean()).optional(),
  owner: z.nullable(z.lazy(() => UpdateRunbookOwner$inboundSchema)).optional(),
  severities: z.nullable(
    z.array(z.lazy(() => UpdateRunbookSeverity$inboundSchema)),
  ).optional(),
  services: z.nullable(
    z.array(z.lazy(() => UpdateRunbookService$inboundSchema)),
  ).optional(),
  environments: z.nullable(z.array(z.lazy(() => Environment$inboundSchema)))
    .optional(),
  attachment_rule: z.nullable(
    z.lazy(() => UpdateRunbookAttachmentRule$inboundSchema),
  ).optional(),
  steps: z.nullable(z.array(z.lazy(() => UpdateRunbookStep$inboundSchema)))
    .optional(),
  auto_attach_to_restricted_incidents: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "attachment_rule": "attachmentRule",
    "auto_attach_to_restricted_incidents": "autoAttachToRestrictedIncidents",
  });
});

/** @internal */
export type UpdateRunbook$Outbound = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  tutorial?: boolean | null | undefined;
  owner?: UpdateRunbookOwner$Outbound | null | undefined;
  severities?: Array<UpdateRunbookSeverity$Outbound> | null | undefined;
  services?: Array<UpdateRunbookService$Outbound> | null | undefined;
  environments?: Array<Environment$Outbound> | null | undefined;
  attachment_rule?: UpdateRunbookAttachmentRule$Outbound | null | undefined;
  steps?: Array<UpdateRunbookStep$Outbound> | null | undefined;
  auto_attach_to_restricted_incidents?: boolean | null | undefined;
};

/** @internal */
export const UpdateRunbook$outboundSchema: z.ZodType<
  UpdateRunbook$Outbound,
  z.ZodTypeDef,
  UpdateRunbook
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  tutorial: z.nullable(z.boolean()).optional(),
  owner: z.nullable(z.lazy(() => UpdateRunbookOwner$outboundSchema)).optional(),
  severities: z.nullable(
    z.array(z.lazy(() => UpdateRunbookSeverity$outboundSchema)),
  ).optional(),
  services: z.nullable(
    z.array(z.lazy(() => UpdateRunbookService$outboundSchema)),
  ).optional(),
  environments: z.nullable(z.array(z.lazy(() => Environment$outboundSchema)))
    .optional(),
  attachmentRule: z.nullable(
    z.lazy(() => UpdateRunbookAttachmentRule$outboundSchema),
  ).optional(),
  steps: z.nullable(z.array(z.lazy(() => UpdateRunbookStep$outboundSchema)))
    .optional(),
  autoAttachToRestrictedIncidents: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    attachmentRule: "attachment_rule",
    autoAttachToRestrictedIncidents: "auto_attach_to_restricted_incidents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRunbook$ {
  /** @deprecated use `UpdateRunbook$inboundSchema` instead. */
  export const inboundSchema = UpdateRunbook$inboundSchema;
  /** @deprecated use `UpdateRunbook$outboundSchema` instead. */
  export const outboundSchema = UpdateRunbook$outboundSchema;
  /** @deprecated use `UpdateRunbook$Outbound` instead. */
  export type Outbound = UpdateRunbook$Outbound;
}

export function updateRunbookToJSON(updateRunbook: UpdateRunbook): string {
  return JSON.stringify(UpdateRunbook$outboundSchema.parse(updateRunbook));
}

export function updateRunbookFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRunbook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRunbook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRunbook' from JSON`,
  );
}
