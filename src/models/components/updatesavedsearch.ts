/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a specific saved search
 */
export type UpdateSavedSearch = {
  isPrivate?: boolean | null | undefined;
  name?: string | null | undefined;
  filterValues?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UpdateSavedSearch$inboundSchema: z.ZodType<
  UpdateSavedSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  is_private: z.nullable(z.boolean()).optional(),
  name: z.nullable(z.string()).optional(),
  filter_values: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_private": "isPrivate",
    "filter_values": "filterValues",
  });
});

/** @internal */
export type UpdateSavedSearch$Outbound = {
  is_private?: boolean | null | undefined;
  name?: string | null | undefined;
  filter_values?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UpdateSavedSearch$outboundSchema: z.ZodType<
  UpdateSavedSearch$Outbound,
  z.ZodTypeDef,
  UpdateSavedSearch
> = z.object({
  isPrivate: z.nullable(z.boolean()).optional(),
  name: z.nullable(z.string()).optional(),
  filterValues: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    isPrivate: "is_private",
    filterValues: "filter_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSavedSearch$ {
  /** @deprecated use `UpdateSavedSearch$inboundSchema` instead. */
  export const inboundSchema = UpdateSavedSearch$inboundSchema;
  /** @deprecated use `UpdateSavedSearch$outboundSchema` instead. */
  export const outboundSchema = UpdateSavedSearch$outboundSchema;
  /** @deprecated use `UpdateSavedSearch$Outbound` instead. */
  export type Outbound = UpdateSavedSearch$Outbound;
}

export function updateSavedSearchToJSON(
  updateSavedSearch: UpdateSavedSearch,
): string {
  return JSON.stringify(
    UpdateSavedSearch$outboundSchema.parse(updateSavedSearch),
  );
}

export function updateSavedSearchFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSavedSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSavedSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSavedSearch' from JSON`,
  );
}
