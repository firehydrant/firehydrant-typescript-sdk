/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VoteDirection = {
  Up: "up",
  Down: "down",
} as const;
export type VoteDirection = ClosedEnum<typeof VoteDirection>;

/**
 * Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
 */
export type PostV1IncidentsIncidentIdGenericChatMessages = {
  body: string;
  /**
   * ISO8601 timestamp for when the chat message occurred
   */
  occurredAt?: Date | undefined;
  voteDirection?: VoteDirection | undefined;
};

/** @internal */
export const VoteDirection$inboundSchema: z.ZodNativeEnum<
  typeof VoteDirection
> = z.nativeEnum(VoteDirection);

/** @internal */
export const VoteDirection$outboundSchema: z.ZodNativeEnum<
  typeof VoteDirection
> = VoteDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoteDirection$ {
  /** @deprecated use `VoteDirection$inboundSchema` instead. */
  export const inboundSchema = VoteDirection$inboundSchema;
  /** @deprecated use `VoteDirection$outboundSchema` instead. */
  export const outboundSchema = VoteDirection$outboundSchema;
}

/** @internal */
export const PostV1IncidentsIncidentIdGenericChatMessages$inboundSchema:
  z.ZodType<
    PostV1IncidentsIncidentIdGenericChatMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    body: z.string(),
    occurred_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    vote_direction: VoteDirection$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "occurred_at": "occurredAt",
      "vote_direction": "voteDirection",
    });
  });

/** @internal */
export type PostV1IncidentsIncidentIdGenericChatMessages$Outbound = {
  body: string;
  occurred_at?: string | undefined;
  vote_direction?: string | undefined;
};

/** @internal */
export const PostV1IncidentsIncidentIdGenericChatMessages$outboundSchema:
  z.ZodType<
    PostV1IncidentsIncidentIdGenericChatMessages$Outbound,
    z.ZodTypeDef,
    PostV1IncidentsIncidentIdGenericChatMessages
  > = z.object({
    body: z.string(),
    occurredAt: z.date().transform(v => v.toISOString()).optional(),
    voteDirection: VoteDirection$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      occurredAt: "occurred_at",
      voteDirection: "vote_direction",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentsIncidentIdGenericChatMessages$ {
  /** @deprecated use `PostV1IncidentsIncidentIdGenericChatMessages$inboundSchema` instead. */
  export const inboundSchema =
    PostV1IncidentsIncidentIdGenericChatMessages$inboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdGenericChatMessages$outboundSchema` instead. */
  export const outboundSchema =
    PostV1IncidentsIncidentIdGenericChatMessages$outboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdGenericChatMessages$Outbound` instead. */
  export type Outbound = PostV1IncidentsIncidentIdGenericChatMessages$Outbound;
}

export function postV1IncidentsIncidentIdGenericChatMessagesToJSON(
  postV1IncidentsIncidentIdGenericChatMessages:
    PostV1IncidentsIncidentIdGenericChatMessages,
): string {
  return JSON.stringify(
    PostV1IncidentsIncidentIdGenericChatMessages$outboundSchema.parse(
      postV1IncidentsIncidentIdGenericChatMessages,
    ),
  );
}

export function postV1IncidentsIncidentIdGenericChatMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1IncidentsIncidentIdGenericChatMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1IncidentsIncidentIdGenericChatMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1IncidentsIncidentIdGenericChatMessages' from JSON`,
  );
}
