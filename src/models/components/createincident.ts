/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Key:value pairs to track custom data for the incident
 */
export type CreateIncidentLabels = {};

export type CreateIncidentImpact1 = {
  /**
   * The type of impacted infrastructure. One of: environment, functionality, or service
   */
  type: string;
  /**
   * The ID of the impacted infrastructure
   */
  id: string;
  /**
   * The ID of the impact condition. Find these at /v1/severity_matrix/conditions
   */
  conditionId: string;
};

export type CreateIncidentMilestone = {
  /**
   * The type/slug of the milestone. Must be one of the currently configured milestones.
   */
  type: string;
  /**
   * An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
   */
  occurredAt: Date;
};

export type CustomField = {
  /**
   * The ID of the custom field you wish to set.
   */
  fieldId: string;
  /**
   * The value you wish to set on the custom field if the type of the field accepts string values
   */
  valueString?: string | null | undefined;
  /**
   * The value you wish to set on the custom field if the type of the field accepts array values
   */
  valueArray?: Array<string> | null | undefined;
};

/**
 * Create a new incident
 */
export type CreateIncident = {
  name: string;
  summary?: string | null | undefined;
  customerImpactSummary?: string | null | undefined;
  description?: string | null | undefined;
  priority?: string | null | undefined;
  severity?: string | null | undefined;
  severityConditionId?: string | null | undefined;
  severityImpactId?: string | null | undefined;
  /**
   * List of alert IDs that this incident should be associated to
   */
  alertIds?: Array<string> | null | undefined;
  /**
   * Key:value pairs to track custom data for the incident
   */
  labels?: CreateIncidentLabels | null | undefined;
  /**
   * List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.
   */
  runbookIds?: Array<string> | null | undefined;
  /**
   * List of tags for the incident
   */
  tagList?: Array<string> | null | undefined;
  /**
   * An array of impacted infrastructure
   */
  impacts?: Array<CreateIncidentImpact1> | null | undefined;
  /**
   * An array of milestones to set on an incident. This can be used to create an already-resolved incident.
   */
  milestones?: Array<CreateIncidentMilestone> | null | undefined;
  restricted?: boolean | null | undefined;
  /**
   * IDs of teams you wish to assign to this incident.
   */
  teamIds?: Array<string> | null | undefined;
  /**
   * An array of custom fields to set on the incident.
   */
  customFields?: Array<CustomField> | null | undefined;
  externalLinks?: string | null | undefined;
  /**
   * The ID of the incident type. This will copy values from the incident type (if any) unless they are being overridden via parameters in this request.
   */
  incidentTypeId?: string | null | undefined;
  /**
   * If true, the incident type values will not be copied to the incident. This is useful when creating an incident from an incident type, but you want to set the values manually.
   */
  skipIncidentTypeValues?: boolean | null | undefined;
};

/** @internal */
export const CreateIncidentLabels$inboundSchema: z.ZodType<
  CreateIncidentLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateIncidentLabels$Outbound = {};

/** @internal */
export const CreateIncidentLabels$outboundSchema: z.ZodType<
  CreateIncidentLabels$Outbound,
  z.ZodTypeDef,
  CreateIncidentLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentLabels$ {
  /** @deprecated use `CreateIncidentLabels$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentLabels$inboundSchema;
  /** @deprecated use `CreateIncidentLabels$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentLabels$outboundSchema;
  /** @deprecated use `CreateIncidentLabels$Outbound` instead. */
  export type Outbound = CreateIncidentLabels$Outbound;
}

export function createIncidentLabelsToJSON(
  createIncidentLabels: CreateIncidentLabels,
): string {
  return JSON.stringify(
    CreateIncidentLabels$outboundSchema.parse(createIncidentLabels),
  );
}

export function createIncidentLabelsFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentLabels' from JSON`,
  );
}

/** @internal */
export const CreateIncidentImpact1$inboundSchema: z.ZodType<
  CreateIncidentImpact1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type CreateIncidentImpact1$Outbound = {
  type: string;
  id: string;
  condition_id: string;
};

/** @internal */
export const CreateIncidentImpact1$outboundSchema: z.ZodType<
  CreateIncidentImpact1$Outbound,
  z.ZodTypeDef,
  CreateIncidentImpact1
> = z.object({
  type: z.string(),
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentImpact1$ {
  /** @deprecated use `CreateIncidentImpact1$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentImpact1$inboundSchema;
  /** @deprecated use `CreateIncidentImpact1$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentImpact1$outboundSchema;
  /** @deprecated use `CreateIncidentImpact1$Outbound` instead. */
  export type Outbound = CreateIncidentImpact1$Outbound;
}

export function createIncidentImpact1ToJSON(
  createIncidentImpact1: CreateIncidentImpact1,
): string {
  return JSON.stringify(
    CreateIncidentImpact1$outboundSchema.parse(createIncidentImpact1),
  );
}

export function createIncidentImpact1FromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentImpact1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentImpact1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentImpact1' from JSON`,
  );
}

/** @internal */
export const CreateIncidentMilestone$inboundSchema: z.ZodType<
  CreateIncidentMilestone,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  occurred_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
  });
});

/** @internal */
export type CreateIncidentMilestone$Outbound = {
  type: string;
  occurred_at: string;
};

/** @internal */
export const CreateIncidentMilestone$outboundSchema: z.ZodType<
  CreateIncidentMilestone$Outbound,
  z.ZodTypeDef,
  CreateIncidentMilestone
> = z.object({
  type: z.string(),
  occurredAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentMilestone$ {
  /** @deprecated use `CreateIncidentMilestone$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentMilestone$inboundSchema;
  /** @deprecated use `CreateIncidentMilestone$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentMilestone$outboundSchema;
  /** @deprecated use `CreateIncidentMilestone$Outbound` instead. */
  export type Outbound = CreateIncidentMilestone$Outbound;
}

export function createIncidentMilestoneToJSON(
  createIncidentMilestone: CreateIncidentMilestone,
): string {
  return JSON.stringify(
    CreateIncidentMilestone$outboundSchema.parse(createIncidentMilestone),
  );
}

export function createIncidentMilestoneFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentMilestone, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentMilestone$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentMilestone' from JSON`,
  );
}

/** @internal */
export const CustomField$inboundSchema: z.ZodType<
  CustomField,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_id: z.string(),
  value_string: z.nullable(z.string()).optional(),
  value_array: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "field_id": "fieldId",
    "value_string": "valueString",
    "value_array": "valueArray",
  });
});

/** @internal */
export type CustomField$Outbound = {
  field_id: string;
  value_string?: string | null | undefined;
  value_array?: Array<string> | null | undefined;
};

/** @internal */
export const CustomField$outboundSchema: z.ZodType<
  CustomField$Outbound,
  z.ZodTypeDef,
  CustomField
> = z.object({
  fieldId: z.string(),
  valueString: z.nullable(z.string()).optional(),
  valueArray: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    fieldId: "field_id",
    valueString: "value_string",
    valueArray: "value_array",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomField$ {
  /** @deprecated use `CustomField$inboundSchema` instead. */
  export const inboundSchema = CustomField$inboundSchema;
  /** @deprecated use `CustomField$outboundSchema` instead. */
  export const outboundSchema = CustomField$outboundSchema;
  /** @deprecated use `CustomField$Outbound` instead. */
  export type Outbound = CustomField$Outbound;
}

export function customFieldToJSON(customField: CustomField): string {
  return JSON.stringify(CustomField$outboundSchema.parse(customField));
}

export function customFieldFromJSON(
  jsonString: string,
): SafeParseResult<CustomField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomField' from JSON`,
  );
}

/** @internal */
export const CreateIncident$inboundSchema: z.ZodType<
  CreateIncident,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  summary: z.nullable(z.string()).optional(),
  customer_impact_summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  severity: z.nullable(z.string()).optional(),
  severity_condition_id: z.nullable(z.string()).optional(),
  severity_impact_id: z.nullable(z.string()).optional(),
  alert_ids: z.nullable(z.array(z.string())).optional(),
  labels: z.nullable(z.lazy(() => CreateIncidentLabels$inboundSchema))
    .optional(),
  runbook_ids: z.nullable(z.array(z.string())).optional(),
  tag_list: z.nullable(z.array(z.string())).optional(),
  impacts: z.nullable(
    z.array(z.lazy(() => CreateIncidentImpact1$inboundSchema)),
  ).optional(),
  milestones: z.nullable(
    z.array(z.lazy(() => CreateIncidentMilestone$inboundSchema)),
  ).optional(),
  restricted: z.nullable(z.boolean()).optional(),
  team_ids: z.nullable(z.array(z.string())).optional(),
  custom_fields: z.nullable(z.array(z.lazy(() => CustomField$inboundSchema)))
    .optional(),
  external_links: z.nullable(z.string()).optional(),
  incident_type_id: z.nullable(z.string()).optional(),
  skip_incident_type_values: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    "customer_impact_summary": "customerImpactSummary",
    "severity_condition_id": "severityConditionId",
    "severity_impact_id": "severityImpactId",
    "alert_ids": "alertIds",
    "runbook_ids": "runbookIds",
    "tag_list": "tagList",
    "team_ids": "teamIds",
    "custom_fields": "customFields",
    "external_links": "externalLinks",
    "incident_type_id": "incidentTypeId",
    "skip_incident_type_values": "skipIncidentTypeValues",
  });
});

/** @internal */
export type CreateIncident$Outbound = {
  name: string;
  summary?: string | null | undefined;
  customer_impact_summary?: string | null | undefined;
  description?: string | null | undefined;
  priority?: string | null | undefined;
  severity?: string | null | undefined;
  severity_condition_id?: string | null | undefined;
  severity_impact_id?: string | null | undefined;
  alert_ids?: Array<string> | null | undefined;
  labels?: CreateIncidentLabels$Outbound | null | undefined;
  runbook_ids?: Array<string> | null | undefined;
  tag_list?: Array<string> | null | undefined;
  impacts?: Array<CreateIncidentImpact1$Outbound> | null | undefined;
  milestones?: Array<CreateIncidentMilestone$Outbound> | null | undefined;
  restricted?: boolean | null | undefined;
  team_ids?: Array<string> | null | undefined;
  custom_fields?: Array<CustomField$Outbound> | null | undefined;
  external_links?: string | null | undefined;
  incident_type_id?: string | null | undefined;
  skip_incident_type_values: boolean | null;
};

/** @internal */
export const CreateIncident$outboundSchema: z.ZodType<
  CreateIncident$Outbound,
  z.ZodTypeDef,
  CreateIncident
> = z.object({
  name: z.string(),
  summary: z.nullable(z.string()).optional(),
  customerImpactSummary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  severity: z.nullable(z.string()).optional(),
  severityConditionId: z.nullable(z.string()).optional(),
  severityImpactId: z.nullable(z.string()).optional(),
  alertIds: z.nullable(z.array(z.string())).optional(),
  labels: z.nullable(z.lazy(() => CreateIncidentLabels$outboundSchema))
    .optional(),
  runbookIds: z.nullable(z.array(z.string())).optional(),
  tagList: z.nullable(z.array(z.string())).optional(),
  impacts: z.nullable(
    z.array(z.lazy(() => CreateIncidentImpact1$outboundSchema)),
  ).optional(),
  milestones: z.nullable(
    z.array(z.lazy(() => CreateIncidentMilestone$outboundSchema)),
  ).optional(),
  restricted: z.nullable(z.boolean()).optional(),
  teamIds: z.nullable(z.array(z.string())).optional(),
  customFields: z.nullable(z.array(z.lazy(() => CustomField$outboundSchema)))
    .optional(),
  externalLinks: z.nullable(z.string()).optional(),
  incidentTypeId: z.nullable(z.string()).optional(),
  skipIncidentTypeValues: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    customerImpactSummary: "customer_impact_summary",
    severityConditionId: "severity_condition_id",
    severityImpactId: "severity_impact_id",
    alertIds: "alert_ids",
    runbookIds: "runbook_ids",
    tagList: "tag_list",
    teamIds: "team_ids",
    customFields: "custom_fields",
    externalLinks: "external_links",
    incidentTypeId: "incident_type_id",
    skipIncidentTypeValues: "skip_incident_type_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncident$ {
  /** @deprecated use `CreateIncident$inboundSchema` instead. */
  export const inboundSchema = CreateIncident$inboundSchema;
  /** @deprecated use `CreateIncident$outboundSchema` instead. */
  export const outboundSchema = CreateIncident$outboundSchema;
  /** @deprecated use `CreateIncident$Outbound` instead. */
  export type Outbound = CreateIncident$Outbound;
}

export function createIncidentToJSON(createIncident: CreateIncident): string {
  return JSON.stringify(CreateIncident$outboundSchema.parse(createIncident));
}

export function createIncidentFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncident, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncident$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncident' from JSON`,
  );
}
