/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Creates a comment for a project
 */
export type CreateComment = {
  /**
   * Text body of comment
   */
  body: string;
};

/** @internal */
export const CreateComment$inboundSchema: z.ZodType<
  CreateComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string(),
});

/** @internal */
export type CreateComment$Outbound = {
  body: string;
};

/** @internal */
export const CreateComment$outboundSchema: z.ZodType<
  CreateComment$Outbound,
  z.ZodTypeDef,
  CreateComment
> = z.object({
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateComment$ {
  /** @deprecated use `CreateComment$inboundSchema` instead. */
  export const inboundSchema = CreateComment$inboundSchema;
  /** @deprecated use `CreateComment$outboundSchema` instead. */
  export const outboundSchema = CreateComment$outboundSchema;
  /** @deprecated use `CreateComment$Outbound` instead. */
  export type Outbound = CreateComment$Outbound;
}

export function createCommentToJSON(createComment: CreateComment): string {
  return JSON.stringify(CreateComment$outboundSchema.parse(createComment));
}

export function createCommentFromJSON(
  jsonString: string,
): SafeParseResult<CreateComment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateComment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateComment' from JSON`,
  );
}
