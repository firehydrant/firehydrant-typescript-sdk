/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Integrations_Slack_WorkspaceEntity model
 */
export type IntegrationsSlackWorkspaceEntity = {
  id?: string | null | undefined;
  teamId?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const IntegrationsSlackWorkspaceEntity$inboundSchema: z.ZodType<
  IntegrationsSlackWorkspaceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  team_id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
  });
});

/** @internal */
export type IntegrationsSlackWorkspaceEntity$Outbound = {
  id?: string | null | undefined;
  team_id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const IntegrationsSlackWorkspaceEntity$outboundSchema: z.ZodType<
  IntegrationsSlackWorkspaceEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsSlackWorkspaceEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsSlackWorkspaceEntity$ {
  /** @deprecated use `IntegrationsSlackWorkspaceEntity$inboundSchema` instead. */
  export const inboundSchema = IntegrationsSlackWorkspaceEntity$inboundSchema;
  /** @deprecated use `IntegrationsSlackWorkspaceEntity$outboundSchema` instead. */
  export const outboundSchema = IntegrationsSlackWorkspaceEntity$outboundSchema;
  /** @deprecated use `IntegrationsSlackWorkspaceEntity$Outbound` instead. */
  export type Outbound = IntegrationsSlackWorkspaceEntity$Outbound;
}

export function integrationsSlackWorkspaceEntityToJSON(
  integrationsSlackWorkspaceEntity: IntegrationsSlackWorkspaceEntity,
): string {
  return JSON.stringify(
    IntegrationsSlackWorkspaceEntity$outboundSchema.parse(
      integrationsSlackWorkspaceEntity,
    ),
  );
}

export function integrationsSlackWorkspaceEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsSlackWorkspaceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationsSlackWorkspaceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsSlackWorkspaceEntity' from JSON`,
  );
}
