/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalResourceEntity,
  ExternalResourceEntity$inboundSchema,
  ExternalResourceEntity$Outbound,
  ExternalResourceEntity$outboundSchema,
} from "./externalresourceentity.js";
import {
  LinksEntity,
  LinksEntity$inboundSchema,
  LinksEntity$Outbound,
  LinksEntity$outboundSchema,
} from "./linksentity.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableTeamEntityLite,
  NullableTeamEntityLite$inboundSchema,
  NullableTeamEntityLite$Outbound,
  NullableTeamEntityLite$outboundSchema,
} from "./nullableteamentitylite.js";
import {
  ServiceEntityLite,
  ServiceEntityLite$inboundSchema,
  ServiceEntityLite$Outbound,
  ServiceEntityLite$outboundSchema,
} from "./serviceentitylite.js";
import {
  TeamEntityLite,
  TeamEntityLite$inboundSchema,
  TeamEntityLite$Outbound,
  TeamEntityLite$outboundSchema,
} from "./teamentitylite.js";

/**
 * An object of label key and values
 */
export type FunctionalityEntityLabels = {};

/**
 * FunctionalityEntity model
 */
export type FunctionalityEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * An object of label key and values
   */
  labels?: FunctionalityEntityLabels | null | undefined;
  /**
   * List of active incident guids
   */
  activeIncidents?: Array<string> | null | undefined;
  /**
   * List of links attached to this functionality.
   */
  links?: Array<LinksEntity> | null | undefined;
  owner?: NullableTeamEntityLite | null | undefined;
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  updatedBy?: NullableAuthorEntity | null | undefined;
  /**
   * Services this functionality provides
   */
  services?: Array<ServiceEntityLite> | null | undefined;
  /**
   * Information about known linkages to representations of services outside of FireHydrant.
   */
  externalResources?: Array<ExternalResourceEntity> | null | undefined;
  /**
   * List of teams attached to the functionality
   */
  teams?: Array<TeamEntityLite> | null | undefined;
};

/** @internal */
export const FunctionalityEntityLabels$inboundSchema: z.ZodType<
  FunctionalityEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FunctionalityEntityLabels$Outbound = {};

/** @internal */
export const FunctionalityEntityLabels$outboundSchema: z.ZodType<
  FunctionalityEntityLabels$Outbound,
  z.ZodTypeDef,
  FunctionalityEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionalityEntityLabels$ {
  /** @deprecated use `FunctionalityEntityLabels$inboundSchema` instead. */
  export const inboundSchema = FunctionalityEntityLabels$inboundSchema;
  /** @deprecated use `FunctionalityEntityLabels$outboundSchema` instead. */
  export const outboundSchema = FunctionalityEntityLabels$outboundSchema;
  /** @deprecated use `FunctionalityEntityLabels$Outbound` instead. */
  export type Outbound = FunctionalityEntityLabels$Outbound;
}

export function functionalityEntityLabelsToJSON(
  functionalityEntityLabels: FunctionalityEntityLabels,
): string {
  return JSON.stringify(
    FunctionalityEntityLabels$outboundSchema.parse(functionalityEntityLabels),
  );
}

export function functionalityEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<FunctionalityEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionalityEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionalityEntityLabels' from JSON`,
  );
}

/** @internal */
export const FunctionalityEntity$inboundSchema: z.ZodType<
  FunctionalityEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  labels: z.nullable(z.lazy(() => FunctionalityEntityLabels$inboundSchema))
    .optional(),
  active_incidents: z.nullable(z.array(z.string())).optional(),
  links: z.nullable(z.array(LinksEntity$inboundSchema)).optional(),
  owner: z.nullable(NullableTeamEntityLite$inboundSchema).optional(),
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  updated_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  services: z.nullable(z.array(ServiceEntityLite$inboundSchema)).optional(),
  external_resources: z.nullable(z.array(ExternalResourceEntity$inboundSchema))
    .optional(),
  teams: z.nullable(z.array(TeamEntityLite$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "active_incidents": "activeIncidents",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "updated_by": "updatedBy",
    "external_resources": "externalResources",
  });
});

/** @internal */
export type FunctionalityEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  labels?: FunctionalityEntityLabels$Outbound | null | undefined;
  active_incidents?: Array<string> | null | undefined;
  links?: Array<LinksEntity$Outbound> | null | undefined;
  owner?: NullableTeamEntityLite$Outbound | null | undefined;
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  updated_by?: NullableAuthorEntity$Outbound | null | undefined;
  services?: Array<ServiceEntityLite$Outbound> | null | undefined;
  external_resources?:
    | Array<ExternalResourceEntity$Outbound>
    | null
    | undefined;
  teams?: Array<TeamEntityLite$Outbound> | null | undefined;
};

/** @internal */
export const FunctionalityEntity$outboundSchema: z.ZodType<
  FunctionalityEntity$Outbound,
  z.ZodTypeDef,
  FunctionalityEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  labels: z.nullable(z.lazy(() => FunctionalityEntityLabels$outboundSchema))
    .optional(),
  activeIncidents: z.nullable(z.array(z.string())).optional(),
  links: z.nullable(z.array(LinksEntity$outboundSchema)).optional(),
  owner: z.nullable(NullableTeamEntityLite$outboundSchema).optional(),
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  updatedBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  services: z.nullable(z.array(ServiceEntityLite$outboundSchema)).optional(),
  externalResources: z.nullable(z.array(ExternalResourceEntity$outboundSchema))
    .optional(),
  teams: z.nullable(z.array(TeamEntityLite$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    activeIncidents: "active_incidents",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    updatedBy: "updated_by",
    externalResources: "external_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionalityEntity$ {
  /** @deprecated use `FunctionalityEntity$inboundSchema` instead. */
  export const inboundSchema = FunctionalityEntity$inboundSchema;
  /** @deprecated use `FunctionalityEntity$outboundSchema` instead. */
  export const outboundSchema = FunctionalityEntity$outboundSchema;
  /** @deprecated use `FunctionalityEntity$Outbound` instead. */
  export type Outbound = FunctionalityEntity$Outbound;
}

export function functionalityEntityToJSON(
  functionalityEntity: FunctionalityEntity,
): string {
  return JSON.stringify(
    FunctionalityEntity$outboundSchema.parse(functionalityEntity),
  );
}

export function functionalityEntityFromJSON(
  jsonString: string,
): SafeParseResult<FunctionalityEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionalityEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionalityEntity' from JSON`,
  );
}
