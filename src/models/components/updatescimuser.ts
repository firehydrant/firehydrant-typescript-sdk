/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The components of the user's name
 */
export type UpdateScimUserName = {
  /**
   * The family name of the User, or last name in most Western languages
   */
  givenName: string;
  /**
   * The given name of the User, or first name in most Western languages
   */
  familyName: string;
};

export type UpdateScimUserEmail = {
  /**
   * String that represents an email address for the User
   */
  value: string;
  /**
   * Boolean which signifies if an email is intended as the primary email for the User
   */
  primary?: boolean | null | undefined;
};

/**
 * Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.
 */
export type UpdateScimUserRoles = {};

/**
 * PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.
 */
export type UpdateScimUser = {
  /**
   * A service provider's unique identifier for the user
   */
  userName?: string | null | undefined;
  /**
   * The components of the user's name
   */
  name?: UpdateScimUserName | null | undefined;
  /**
   * Email addresses for the User
   */
  emails?: Array<UpdateScimUserEmail> | null | undefined;
  /**
   * Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.
   */
  roles?: UpdateScimUserRoles | null | undefined;
  /**
   * Boolean that represents whether user is active
   */
  active?: boolean | null | undefined;
};

/** @internal */
export const UpdateScimUserName$inboundSchema: z.ZodType<
  UpdateScimUserName,
  z.ZodTypeDef,
  unknown
> = z.object({
  givenName: z.string(),
  familyName: z.string(),
});

/** @internal */
export type UpdateScimUserName$Outbound = {
  givenName: string;
  familyName: string;
};

/** @internal */
export const UpdateScimUserName$outboundSchema: z.ZodType<
  UpdateScimUserName$Outbound,
  z.ZodTypeDef,
  UpdateScimUserName
> = z.object({
  givenName: z.string(),
  familyName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimUserName$ {
  /** @deprecated use `UpdateScimUserName$inboundSchema` instead. */
  export const inboundSchema = UpdateScimUserName$inboundSchema;
  /** @deprecated use `UpdateScimUserName$outboundSchema` instead. */
  export const outboundSchema = UpdateScimUserName$outboundSchema;
  /** @deprecated use `UpdateScimUserName$Outbound` instead. */
  export type Outbound = UpdateScimUserName$Outbound;
}

export function updateScimUserNameToJSON(
  updateScimUserName: UpdateScimUserName,
): string {
  return JSON.stringify(
    UpdateScimUserName$outboundSchema.parse(updateScimUserName),
  );
}

export function updateScimUserNameFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimUserName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimUserName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimUserName' from JSON`,
  );
}

/** @internal */
export const UpdateScimUserEmail$inboundSchema: z.ZodType<
  UpdateScimUserEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  primary: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateScimUserEmail$Outbound = {
  value: string;
  primary?: boolean | null | undefined;
};

/** @internal */
export const UpdateScimUserEmail$outboundSchema: z.ZodType<
  UpdateScimUserEmail$Outbound,
  z.ZodTypeDef,
  UpdateScimUserEmail
> = z.object({
  value: z.string(),
  primary: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimUserEmail$ {
  /** @deprecated use `UpdateScimUserEmail$inboundSchema` instead. */
  export const inboundSchema = UpdateScimUserEmail$inboundSchema;
  /** @deprecated use `UpdateScimUserEmail$outboundSchema` instead. */
  export const outboundSchema = UpdateScimUserEmail$outboundSchema;
  /** @deprecated use `UpdateScimUserEmail$Outbound` instead. */
  export type Outbound = UpdateScimUserEmail$Outbound;
}

export function updateScimUserEmailToJSON(
  updateScimUserEmail: UpdateScimUserEmail,
): string {
  return JSON.stringify(
    UpdateScimUserEmail$outboundSchema.parse(updateScimUserEmail),
  );
}

export function updateScimUserEmailFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimUserEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimUserEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimUserEmail' from JSON`,
  );
}

/** @internal */
export const UpdateScimUserRoles$inboundSchema: z.ZodType<
  UpdateScimUserRoles,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateScimUserRoles$Outbound = {};

/** @internal */
export const UpdateScimUserRoles$outboundSchema: z.ZodType<
  UpdateScimUserRoles$Outbound,
  z.ZodTypeDef,
  UpdateScimUserRoles
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimUserRoles$ {
  /** @deprecated use `UpdateScimUserRoles$inboundSchema` instead. */
  export const inboundSchema = UpdateScimUserRoles$inboundSchema;
  /** @deprecated use `UpdateScimUserRoles$outboundSchema` instead. */
  export const outboundSchema = UpdateScimUserRoles$outboundSchema;
  /** @deprecated use `UpdateScimUserRoles$Outbound` instead. */
  export type Outbound = UpdateScimUserRoles$Outbound;
}

export function updateScimUserRolesToJSON(
  updateScimUserRoles: UpdateScimUserRoles,
): string {
  return JSON.stringify(
    UpdateScimUserRoles$outboundSchema.parse(updateScimUserRoles),
  );
}

export function updateScimUserRolesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimUserRoles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimUserRoles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimUserRoles' from JSON`,
  );
}

/** @internal */
export const UpdateScimUser$inboundSchema: z.ZodType<
  UpdateScimUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  userName: z.nullable(z.string()).optional(),
  name: z.nullable(z.lazy(() => UpdateScimUserName$inboundSchema)).optional(),
  emails: z.nullable(z.array(z.lazy(() => UpdateScimUserEmail$inboundSchema)))
    .optional(),
  roles: z.nullable(z.lazy(() => UpdateScimUserRoles$inboundSchema)).optional(),
  active: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateScimUser$Outbound = {
  userName?: string | null | undefined;
  name?: UpdateScimUserName$Outbound | null | undefined;
  emails?: Array<UpdateScimUserEmail$Outbound> | null | undefined;
  roles?: UpdateScimUserRoles$Outbound | null | undefined;
  active?: boolean | null | undefined;
};

/** @internal */
export const UpdateScimUser$outboundSchema: z.ZodType<
  UpdateScimUser$Outbound,
  z.ZodTypeDef,
  UpdateScimUser
> = z.object({
  userName: z.nullable(z.string()).optional(),
  name: z.nullable(z.lazy(() => UpdateScimUserName$outboundSchema)).optional(),
  emails: z.nullable(z.array(z.lazy(() => UpdateScimUserEmail$outboundSchema)))
    .optional(),
  roles: z.nullable(z.lazy(() => UpdateScimUserRoles$outboundSchema))
    .optional(),
  active: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimUser$ {
  /** @deprecated use `UpdateScimUser$inboundSchema` instead. */
  export const inboundSchema = UpdateScimUser$inboundSchema;
  /** @deprecated use `UpdateScimUser$outboundSchema` instead. */
  export const outboundSchema = UpdateScimUser$outboundSchema;
  /** @deprecated use `UpdateScimUser$Outbound` instead. */
  export type Outbound = UpdateScimUser$Outbound;
}

export function updateScimUserToJSON(updateScimUser: UpdateScimUser): string {
  return JSON.stringify(UpdateScimUser$outboundSchema.parse(updateScimUser));
}

export function updateScimUserFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimUser' from JSON`,
  );
}
