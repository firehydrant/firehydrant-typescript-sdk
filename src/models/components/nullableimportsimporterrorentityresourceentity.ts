/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableImportsImportErrorEntityResourceEntity = {
  resourceId?: string | null | undefined;
  resourceType?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const NullableImportsImportErrorEntityResourceEntity$inboundSchema:
  z.ZodType<
    NullableImportsImportErrorEntityResourceEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resource_id: z.nullable(z.string()).optional(),
    resource_type: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "resource_id": "resourceId",
      "resource_type": "resourceType",
    });
  });

/** @internal */
export type NullableImportsImportErrorEntityResourceEntity$Outbound = {
  resource_id?: string | null | undefined;
  resource_type?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const NullableImportsImportErrorEntityResourceEntity$outboundSchema:
  z.ZodType<
    NullableImportsImportErrorEntityResourceEntity$Outbound,
    z.ZodTypeDef,
    NullableImportsImportErrorEntityResourceEntity
  > = z.object({
    resourceId: z.nullable(z.string()).optional(),
    resourceType: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      resourceId: "resource_id",
      resourceType: "resource_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableImportsImportErrorEntityResourceEntity$ {
  /** @deprecated use `NullableImportsImportErrorEntityResourceEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableImportsImportErrorEntityResourceEntity$inboundSchema;
  /** @deprecated use `NullableImportsImportErrorEntityResourceEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableImportsImportErrorEntityResourceEntity$outboundSchema;
  /** @deprecated use `NullableImportsImportErrorEntityResourceEntity$Outbound` instead. */
  export type Outbound =
    NullableImportsImportErrorEntityResourceEntity$Outbound;
}

export function nullableImportsImportErrorEntityResourceEntityToJSON(
  nullableImportsImportErrorEntityResourceEntity:
    NullableImportsImportErrorEntityResourceEntity,
): string {
  return JSON.stringify(
    NullableImportsImportErrorEntityResourceEntity$outboundSchema.parse(
      nullableImportsImportErrorEntityResourceEntity,
    ),
  );
}

export function nullableImportsImportErrorEntityResourceEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableImportsImportErrorEntityResourceEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableImportsImportErrorEntityResourceEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableImportsImportErrorEntityResourceEntity' from JSON`,
  );
}
