/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalResourceEntity,
  ExternalResourceEntity$inboundSchema,
  ExternalResourceEntity$Outbound,
  ExternalResourceEntity$outboundSchema,
} from "./externalresourceentity.js";

/**
 * EnvironmentEntryEntity model
 */
export type EnvironmentEntryEntity = {
  /**
   * UUID of the Environment
   */
  id?: string | undefined;
  /**
   * Name of the Environment
   */
  name?: string | undefined;
  /**
   * Slug of the Environment
   */
  slug?: string | undefined;
  /**
   * Description of the Environment
   */
  description?: string | undefined;
  /**
   * The time the environment was updated
   */
  updatedAt?: Date | undefined;
  /**
   * The time the environment was created
   */
  createdAt?: Date | undefined;
  /**
   * List of active incident guids
   */
  activeIncidents?: string | undefined;
  /**
   * Information about known linkages to representations of services outside of FireHydrant.
   */
  externalResources?: Array<ExternalResourceEntity> | undefined;
};

/** @internal */
export const EnvironmentEntryEntity$inboundSchema: z.ZodType<
  EnvironmentEntryEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  description: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  active_incidents: z.string().optional(),
  external_resources: z.array(ExternalResourceEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "active_incidents": "activeIncidents",
    "external_resources": "externalResources",
  });
});

/** @internal */
export type EnvironmentEntryEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  slug?: string | undefined;
  description?: string | undefined;
  updated_at?: string | undefined;
  created_at?: string | undefined;
  active_incidents?: string | undefined;
  external_resources?: Array<ExternalResourceEntity$Outbound> | undefined;
};

/** @internal */
export const EnvironmentEntryEntity$outboundSchema: z.ZodType<
  EnvironmentEntryEntity$Outbound,
  z.ZodTypeDef,
  EnvironmentEntryEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  description: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  activeIncidents: z.string().optional(),
  externalResources: z.array(ExternalResourceEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAt: "updated_at",
    createdAt: "created_at",
    activeIncidents: "active_incidents",
    externalResources: "external_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentEntryEntity$ {
  /** @deprecated use `EnvironmentEntryEntity$inboundSchema` instead. */
  export const inboundSchema = EnvironmentEntryEntity$inboundSchema;
  /** @deprecated use `EnvironmentEntryEntity$outboundSchema` instead. */
  export const outboundSchema = EnvironmentEntryEntity$outboundSchema;
  /** @deprecated use `EnvironmentEntryEntity$Outbound` instead. */
  export type Outbound = EnvironmentEntryEntity$Outbound;
}

export function environmentEntryEntityToJSON(
  environmentEntryEntity: EnvironmentEntryEntity,
): string {
  return JSON.stringify(
    EnvironmentEntryEntity$outboundSchema.parse(environmentEntryEntity),
  );
}

export function environmentEntryEntityFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentEntryEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentEntryEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentEntryEntity' from JSON`,
  );
}
