/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostV1IncidentsIncidentIdRelatedChangeEventsType = {
  Caused: "caused",
  Fixed: "fixed",
  Suspect: "suspect",
  Dismissed: "dismissed",
} as const;
export type PostV1IncidentsIncidentIdRelatedChangeEventsType = ClosedEnum<
  typeof PostV1IncidentsIncidentIdRelatedChangeEventsType
>;

/**
 * Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
 */
export type PostV1IncidentsIncidentIdRelatedChangeEvents = {
  /**
   * The ID of the change event to associate
   */
  changeEventId: string;
  type: PostV1IncidentsIncidentIdRelatedChangeEventsType;
  /**
   * A short description about why this change event is related
   */
  why?: string | undefined;
};

/** @internal */
export const PostV1IncidentsIncidentIdRelatedChangeEventsType$inboundSchema:
  z.ZodNativeEnum<typeof PostV1IncidentsIncidentIdRelatedChangeEventsType> = z
    .nativeEnum(PostV1IncidentsIncidentIdRelatedChangeEventsType);

/** @internal */
export const PostV1IncidentsIncidentIdRelatedChangeEventsType$outboundSchema:
  z.ZodNativeEnum<typeof PostV1IncidentsIncidentIdRelatedChangeEventsType> =
    PostV1IncidentsIncidentIdRelatedChangeEventsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentsIncidentIdRelatedChangeEventsType$ {
  /** @deprecated use `PostV1IncidentsIncidentIdRelatedChangeEventsType$inboundSchema` instead. */
  export const inboundSchema =
    PostV1IncidentsIncidentIdRelatedChangeEventsType$inboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdRelatedChangeEventsType$outboundSchema` instead. */
  export const outboundSchema =
    PostV1IncidentsIncidentIdRelatedChangeEventsType$outboundSchema;
}

/** @internal */
export const PostV1IncidentsIncidentIdRelatedChangeEvents$inboundSchema:
  z.ZodType<
    PostV1IncidentsIncidentIdRelatedChangeEvents,
    z.ZodTypeDef,
    unknown
  > = z.object({
    change_event_id: z.string(),
    type: PostV1IncidentsIncidentIdRelatedChangeEventsType$inboundSchema,
    why: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "change_event_id": "changeEventId",
    });
  });

/** @internal */
export type PostV1IncidentsIncidentIdRelatedChangeEvents$Outbound = {
  change_event_id: string;
  type: string;
  why?: string | undefined;
};

/** @internal */
export const PostV1IncidentsIncidentIdRelatedChangeEvents$outboundSchema:
  z.ZodType<
    PostV1IncidentsIncidentIdRelatedChangeEvents$Outbound,
    z.ZodTypeDef,
    PostV1IncidentsIncidentIdRelatedChangeEvents
  > = z.object({
    changeEventId: z.string(),
    type: PostV1IncidentsIncidentIdRelatedChangeEventsType$outboundSchema,
    why: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      changeEventId: "change_event_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentsIncidentIdRelatedChangeEvents$ {
  /** @deprecated use `PostV1IncidentsIncidentIdRelatedChangeEvents$inboundSchema` instead. */
  export const inboundSchema =
    PostV1IncidentsIncidentIdRelatedChangeEvents$inboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdRelatedChangeEvents$outboundSchema` instead. */
  export const outboundSchema =
    PostV1IncidentsIncidentIdRelatedChangeEvents$outboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdRelatedChangeEvents$Outbound` instead. */
  export type Outbound = PostV1IncidentsIncidentIdRelatedChangeEvents$Outbound;
}

export function postV1IncidentsIncidentIdRelatedChangeEventsToJSON(
  postV1IncidentsIncidentIdRelatedChangeEvents:
    PostV1IncidentsIncidentIdRelatedChangeEvents,
): string {
  return JSON.stringify(
    PostV1IncidentsIncidentIdRelatedChangeEvents$outboundSchema.parse(
      postV1IncidentsIncidentIdRelatedChangeEvents,
    ),
  );
}

export function postV1IncidentsIncidentIdRelatedChangeEventsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1IncidentsIncidentIdRelatedChangeEvents,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1IncidentsIncidentIdRelatedChangeEvents$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1IncidentsIncidentIdRelatedChangeEvents' from JSON`,
  );
}
