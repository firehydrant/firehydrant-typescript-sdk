/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableSignalsAPITargetEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  type?: string | null | undefined;
  isPageable?: boolean | null | undefined;
};

/** @internal */
export const NullableSignalsAPITargetEntity$inboundSchema: z.ZodType<
  NullableSignalsAPITargetEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  is_pageable: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_pageable": "isPageable",
  });
});

/** @internal */
export type NullableSignalsAPITargetEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  type?: string | null | undefined;
  is_pageable?: boolean | null | undefined;
};

/** @internal */
export const NullableSignalsAPITargetEntity$outboundSchema: z.ZodType<
  NullableSignalsAPITargetEntity$Outbound,
  z.ZodTypeDef,
  NullableSignalsAPITargetEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  isPageable: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    isPageable: "is_pageable",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableSignalsAPITargetEntity$ {
  /** @deprecated use `NullableSignalsAPITargetEntity$inboundSchema` instead. */
  export const inboundSchema = NullableSignalsAPITargetEntity$inboundSchema;
  /** @deprecated use `NullableSignalsAPITargetEntity$outboundSchema` instead. */
  export const outboundSchema = NullableSignalsAPITargetEntity$outboundSchema;
  /** @deprecated use `NullableSignalsAPITargetEntity$Outbound` instead. */
  export type Outbound = NullableSignalsAPITargetEntity$Outbound;
}

export function nullableSignalsAPITargetEntityToJSON(
  nullableSignalsAPITargetEntity: NullableSignalsAPITargetEntity,
): string {
  return JSON.stringify(
    NullableSignalsAPITargetEntity$outboundSchema.parse(
      nullableSignalsAPITargetEntity,
    ),
  );
}

export function nullableSignalsAPITargetEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableSignalsAPITargetEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableSignalsAPITargetEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableSignalsAPITargetEntity' from JSON`,
  );
}
