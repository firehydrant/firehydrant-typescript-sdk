/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Signals_API_HackerModeEntity model
 */
export type SignalsAPIHackerModeEntity = {
  enabled?: boolean | null | undefined;
  urlKey?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const SignalsAPIHackerModeEntity$inboundSchema: z.ZodType<
  SignalsAPIHackerModeEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  url_key: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "url_key": "urlKey",
  });
});

/** @internal */
export type SignalsAPIHackerModeEntity$Outbound = {
  enabled?: boolean | null | undefined;
  url_key?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const SignalsAPIHackerModeEntity$outboundSchema: z.ZodType<
  SignalsAPIHackerModeEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIHackerModeEntity
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  urlKey: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    urlKey: "url_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIHackerModeEntity$ {
  /** @deprecated use `SignalsAPIHackerModeEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPIHackerModeEntity$inboundSchema;
  /** @deprecated use `SignalsAPIHackerModeEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPIHackerModeEntity$outboundSchema;
  /** @deprecated use `SignalsAPIHackerModeEntity$Outbound` instead. */
  export type Outbound = SignalsAPIHackerModeEntity$Outbound;
}

export function signalsAPIHackerModeEntityToJSON(
  signalsAPIHackerModeEntity: SignalsAPIHackerModeEntity,
): string {
  return JSON.stringify(
    SignalsAPIHackerModeEntity$outboundSchema.parse(signalsAPIHackerModeEntity),
  );
}

export function signalsAPIHackerModeEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIHackerModeEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPIHackerModeEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIHackerModeEntity' from JSON`,
  );
}
