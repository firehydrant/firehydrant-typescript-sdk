/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";

export type TeamEntityLite = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  signalsIcalUrl?: string | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  inSupportHours?: boolean | null | undefined;
};

/** @internal */
export const TeamEntityLite$inboundSchema: z.ZodType<
  TeamEntityLite,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  signals_ical_url: z.nullable(z.string()).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  in_support_hours: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "signals_ical_url": "signalsIcalUrl",
    "created_by": "createdBy",
    "in_support_hours": "inSupportHours",
  });
});

/** @internal */
export type TeamEntityLite$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  signals_ical_url?: string | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  in_support_hours?: boolean | null | undefined;
};

/** @internal */
export const TeamEntityLite$outboundSchema: z.ZodType<
  TeamEntityLite$Outbound,
  z.ZodTypeDef,
  TeamEntityLite
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  signalsIcalUrl: z.nullable(z.string()).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  inSupportHours: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    signalsIcalUrl: "signals_ical_url",
    createdBy: "created_by",
    inSupportHours: "in_support_hours",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamEntityLite$ {
  /** @deprecated use `TeamEntityLite$inboundSchema` instead. */
  export const inboundSchema = TeamEntityLite$inboundSchema;
  /** @deprecated use `TeamEntityLite$outboundSchema` instead. */
  export const outboundSchema = TeamEntityLite$outboundSchema;
  /** @deprecated use `TeamEntityLite$Outbound` instead. */
  export type Outbound = TeamEntityLite$Outbound;
}

export function teamEntityLiteToJSON(teamEntityLite: TeamEntityLite): string {
  return JSON.stringify(TeamEntityLite$outboundSchema.parse(teamEntityLite));
}

export function teamEntityLiteFromJSON(
  jsonString: string,
): SafeParseResult<TeamEntityLite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamEntityLite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamEntityLite' from JSON`,
  );
}
