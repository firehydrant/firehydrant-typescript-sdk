/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableServiceEntity,
  NullableServiceEntity$inboundSchema,
  NullableServiceEntity$Outbound,
  NullableServiceEntity$outboundSchema,
} from "./nullableserviceentity.js";

export type ServiceParentDependencyEntity = {
  id?: string | null | undefined;
  notes?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  service?: NullableServiceEntity | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ServiceParentDependencyEntity$inboundSchema: z.ZodType<
  ServiceParentDependencyEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  service: z.nullable(NullableServiceEntity$inboundSchema).optional(),
  type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ServiceParentDependencyEntity$Outbound = {
  id?: string | null | undefined;
  notes?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  service?: NullableServiceEntity$Outbound | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ServiceParentDependencyEntity$outboundSchema: z.ZodType<
  ServiceParentDependencyEntity$Outbound,
  z.ZodTypeDef,
  ServiceParentDependencyEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  service: z.nullable(NullableServiceEntity$outboundSchema).optional(),
  type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceParentDependencyEntity$ {
  /** @deprecated use `ServiceParentDependencyEntity$inboundSchema` instead. */
  export const inboundSchema = ServiceParentDependencyEntity$inboundSchema;
  /** @deprecated use `ServiceParentDependencyEntity$outboundSchema` instead. */
  export const outboundSchema = ServiceParentDependencyEntity$outboundSchema;
  /** @deprecated use `ServiceParentDependencyEntity$Outbound` instead. */
  export type Outbound = ServiceParentDependencyEntity$Outbound;
}

export function serviceParentDependencyEntityToJSON(
  serviceParentDependencyEntity: ServiceParentDependencyEntity,
): string {
  return JSON.stringify(
    ServiceParentDependencyEntity$outboundSchema.parse(
      serviceParentDependencyEntity,
    ),
  );
}

export function serviceParentDependencyEntityFromJSON(
  jsonString: string,
): SafeParseResult<ServiceParentDependencyEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceParentDependencyEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceParentDependencyEntity' from JSON`,
  );
}
