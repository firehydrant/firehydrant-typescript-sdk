/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * AI_Entities_IncidentSummaryEntity model
 */
export type AIEntitiesIncidentSummaryEntity = {
  id?: string | null | undefined;
  content?: string | null | undefined;
  sourceHash?: string | null | undefined;
  type?: string | null | undefined;
  createdAt?: string | null | undefined;
  incidentUpdatedAt?: Date | null | undefined;
};

/** @internal */
export const AIEntitiesIncidentSummaryEntity$inboundSchema: z.ZodType<
  AIEntitiesIncidentSummaryEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  source_hash: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  incident_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_hash": "sourceHash",
    "created_at": "createdAt",
    "incident_updated_at": "incidentUpdatedAt",
  });
});

/** @internal */
export type AIEntitiesIncidentSummaryEntity$Outbound = {
  id?: string | null | undefined;
  content?: string | null | undefined;
  source_hash?: string | null | undefined;
  type?: string | null | undefined;
  created_at?: string | null | undefined;
  incident_updated_at?: string | null | undefined;
};

/** @internal */
export const AIEntitiesIncidentSummaryEntity$outboundSchema: z.ZodType<
  AIEntitiesIncidentSummaryEntity$Outbound,
  z.ZodTypeDef,
  AIEntitiesIncidentSummaryEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  sourceHash: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  incidentUpdatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceHash: "source_hash",
    createdAt: "created_at",
    incidentUpdatedAt: "incident_updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIEntitiesIncidentSummaryEntity$ {
  /** @deprecated use `AIEntitiesIncidentSummaryEntity$inboundSchema` instead. */
  export const inboundSchema = AIEntitiesIncidentSummaryEntity$inboundSchema;
  /** @deprecated use `AIEntitiesIncidentSummaryEntity$outboundSchema` instead. */
  export const outboundSchema = AIEntitiesIncidentSummaryEntity$outboundSchema;
  /** @deprecated use `AIEntitiesIncidentSummaryEntity$Outbound` instead. */
  export type Outbound = AIEntitiesIncidentSummaryEntity$Outbound;
}

export function aiEntitiesIncidentSummaryEntityToJSON(
  aiEntitiesIncidentSummaryEntity: AIEntitiesIncidentSummaryEntity,
): string {
  return JSON.stringify(
    AIEntitiesIncidentSummaryEntity$outboundSchema.parse(
      aiEntitiesIncidentSummaryEntity,
    ),
  );
}

export function aiEntitiesIncidentSummaryEntityFromJSON(
  jsonString: string,
): SafeParseResult<AIEntitiesIncidentSummaryEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIEntitiesIncidentSummaryEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIEntitiesIncidentSummaryEntity' from JSON`,
  );
}
