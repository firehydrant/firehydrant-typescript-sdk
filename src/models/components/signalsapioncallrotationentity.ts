/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableSignalsAPIOnCallStrategyEntity,
  NullableSignalsAPIOnCallStrategyEntity$inboundSchema,
  NullableSignalsAPIOnCallStrategyEntity$Outbound,
  NullableSignalsAPIOnCallStrategyEntity$outboundSchema,
} from "./nullablesignalsapioncallstrategyentity.js";
import {
  NullableSuccinctEntity,
  NullableSuccinctEntity$inboundSchema,
  NullableSuccinctEntity$Outbound,
  NullableSuccinctEntity$outboundSchema,
} from "./nullablesuccinctentity.js";
import {
  SignalsAPIOnCallRestrictionEntity,
  SignalsAPIOnCallRestrictionEntity$inboundSchema,
  SignalsAPIOnCallRestrictionEntity$Outbound,
  SignalsAPIOnCallRestrictionEntity$outboundSchema,
} from "./signalsapioncallrestrictionentity.js";
import {
  SignalsAPIOnCallShiftEntity,
  SignalsAPIOnCallShiftEntity$inboundSchema,
  SignalsAPIOnCallShiftEntity$Outbound,
  SignalsAPIOnCallShiftEntity$outboundSchema,
} from "./signalsapioncallshiftentity.js";
import {
  SuccinctEntity,
  SuccinctEntity$inboundSchema,
  SuccinctEntity$Outbound,
  SuccinctEntity$outboundSchema,
} from "./succinctentity.js";

export type SignalsAPIOnCallRotationEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  timeZone?: string | null | undefined;
  color?: string | null | undefined;
  slackUserGroupId?: string | null | undefined;
  members?: Array<SuccinctEntity> | null | undefined;
  shifts?: Array<SignalsAPIOnCallShiftEntity> | null | undefined;
  team?: NullableSuccinctEntity | null | undefined;
  strategy?: NullableSignalsAPIOnCallStrategyEntity | null | undefined;
  restrictions?: Array<SignalsAPIOnCallRestrictionEntity> | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const SignalsAPIOnCallRotationEntity$inboundSchema: z.ZodType<
  SignalsAPIOnCallRotationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  time_zone: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  members: z.nullable(z.array(SuccinctEntity$inboundSchema)).optional(),
  shifts: z.nullable(z.array(SignalsAPIOnCallShiftEntity$inboundSchema))
    .optional(),
  team: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
  strategy: z.nullable(NullableSignalsAPIOnCallStrategyEntity$inboundSchema)
    .optional(),
  restrictions: z.nullable(
    z.array(SignalsAPIOnCallRestrictionEntity$inboundSchema),
  ).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SignalsAPIOnCallRotationEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  time_zone?: string | null | undefined;
  color?: string | null | undefined;
  slack_user_group_id?: string | null | undefined;
  members?: Array<SuccinctEntity$Outbound> | null | undefined;
  shifts?: Array<SignalsAPIOnCallShiftEntity$Outbound> | null | undefined;
  team?: NullableSuccinctEntity$Outbound | null | undefined;
  strategy?: NullableSignalsAPIOnCallStrategyEntity$Outbound | null | undefined;
  restrictions?:
    | Array<SignalsAPIOnCallRestrictionEntity$Outbound>
    | null
    | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const SignalsAPIOnCallRotationEntity$outboundSchema: z.ZodType<
  SignalsAPIOnCallRotationEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIOnCallRotationEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  timeZone: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  members: z.nullable(z.array(SuccinctEntity$outboundSchema)).optional(),
  shifts: z.nullable(z.array(SignalsAPIOnCallShiftEntity$outboundSchema))
    .optional(),
  team: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
  strategy: z.nullable(NullableSignalsAPIOnCallStrategyEntity$outboundSchema)
    .optional(),
  restrictions: z.nullable(
    z.array(SignalsAPIOnCallRestrictionEntity$outboundSchema),
  ).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIOnCallRotationEntity$ {
  /** @deprecated use `SignalsAPIOnCallRotationEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPIOnCallRotationEntity$inboundSchema;
  /** @deprecated use `SignalsAPIOnCallRotationEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPIOnCallRotationEntity$outboundSchema;
  /** @deprecated use `SignalsAPIOnCallRotationEntity$Outbound` instead. */
  export type Outbound = SignalsAPIOnCallRotationEntity$Outbound;
}

export function signalsAPIOnCallRotationEntityToJSON(
  signalsAPIOnCallRotationEntity: SignalsAPIOnCallRotationEntity,
): string {
  return JSON.stringify(
    SignalsAPIOnCallRotationEntity$outboundSchema.parse(
      signalsAPIOnCallRotationEntity,
    ),
  );
}

export function signalsAPIOnCallRotationEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIOnCallRotationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPIOnCallRotationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIOnCallRotationEntity' from JSON`,
  );
}
