/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Updates a runbook step execution, especially for changing the state of a step execution.
 */
export type PutV1RunbooksExecutionsExecutionIdStepsStepId = {
  state: string;
  scheduleFor?: Date | undefined;
  /**
   * Data for execution of this step
   */
  data?: { [k: string]: any } | undefined;
  repeatsAt?: Date | undefined;
};

/** @internal */
export const PutV1RunbooksExecutionsExecutionIdStepsStepId$inboundSchema:
  z.ZodType<
    PutV1RunbooksExecutionsExecutionIdStepsStepId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    state: z.string(),
    schedule_for: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    data: z.record(z.any()).optional(),
    repeats_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "schedule_for": "scheduleFor",
      "repeats_at": "repeatsAt",
    });
  });

/** @internal */
export type PutV1RunbooksExecutionsExecutionIdStepsStepId$Outbound = {
  state: string;
  schedule_for?: string | undefined;
  data?: { [k: string]: any } | undefined;
  repeats_at?: string | undefined;
};

/** @internal */
export const PutV1RunbooksExecutionsExecutionIdStepsStepId$outboundSchema:
  z.ZodType<
    PutV1RunbooksExecutionsExecutionIdStepsStepId$Outbound,
    z.ZodTypeDef,
    PutV1RunbooksExecutionsExecutionIdStepsStepId
  > = z.object({
    state: z.string(),
    scheduleFor: z.date().transform(v => v.toISOString()).optional(),
    data: z.record(z.any()).optional(),
    repeatsAt: z.date().transform(v => v.toISOString()).optional(),
  }).transform((v) => {
    return remap$(v, {
      scheduleFor: "schedule_for",
      repeatsAt: "repeats_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1RunbooksExecutionsExecutionIdStepsStepId$ {
  /** @deprecated use `PutV1RunbooksExecutionsExecutionIdStepsStepId$inboundSchema` instead. */
  export const inboundSchema =
    PutV1RunbooksExecutionsExecutionIdStepsStepId$inboundSchema;
  /** @deprecated use `PutV1RunbooksExecutionsExecutionIdStepsStepId$outboundSchema` instead. */
  export const outboundSchema =
    PutV1RunbooksExecutionsExecutionIdStepsStepId$outboundSchema;
  /** @deprecated use `PutV1RunbooksExecutionsExecutionIdStepsStepId$Outbound` instead. */
  export type Outbound = PutV1RunbooksExecutionsExecutionIdStepsStepId$Outbound;
}

export function putV1RunbooksExecutionsExecutionIdStepsStepIdToJSON(
  putV1RunbooksExecutionsExecutionIdStepsStepId:
    PutV1RunbooksExecutionsExecutionIdStepsStepId,
): string {
  return JSON.stringify(
    PutV1RunbooksExecutionsExecutionIdStepsStepId$outboundSchema.parse(
      putV1RunbooksExecutionsExecutionIdStepsStepId,
    ),
  );
}

export function putV1RunbooksExecutionsExecutionIdStepsStepIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1RunbooksExecutionsExecutionIdStepsStepId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1RunbooksExecutionsExecutionIdStepsStepId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1RunbooksExecutionsExecutionIdStepsStepId' from JSON`,
  );
}
