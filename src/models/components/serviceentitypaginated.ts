/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaginationEntity,
  PaginationEntity$inboundSchema,
  PaginationEntity$Outbound,
  PaginationEntity$outboundSchema,
} from "./paginationentity.js";
import {
  ServiceEntity,
  ServiceEntity$inboundSchema,
  ServiceEntity$Outbound,
  ServiceEntity$outboundSchema,
} from "./serviceentity.js";

/**
 * ServiceEntityPaginated model
 */
export type ServiceEntityPaginated = {
  data?: Array<ServiceEntity> | undefined;
  pagination?: PaginationEntity | undefined;
};

/** @internal */
export const ServiceEntityPaginated$inboundSchema: z.ZodType<
  ServiceEntityPaginated,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(ServiceEntity$inboundSchema).optional(),
  pagination: PaginationEntity$inboundSchema.optional(),
});

/** @internal */
export type ServiceEntityPaginated$Outbound = {
  data?: Array<ServiceEntity$Outbound> | undefined;
  pagination?: PaginationEntity$Outbound | undefined;
};

/** @internal */
export const ServiceEntityPaginated$outboundSchema: z.ZodType<
  ServiceEntityPaginated$Outbound,
  z.ZodTypeDef,
  ServiceEntityPaginated
> = z.object({
  data: z.array(ServiceEntity$outboundSchema).optional(),
  pagination: PaginationEntity$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceEntityPaginated$ {
  /** @deprecated use `ServiceEntityPaginated$inboundSchema` instead. */
  export const inboundSchema = ServiceEntityPaginated$inboundSchema;
  /** @deprecated use `ServiceEntityPaginated$outboundSchema` instead. */
  export const outboundSchema = ServiceEntityPaginated$outboundSchema;
  /** @deprecated use `ServiceEntityPaginated$Outbound` instead. */
  export type Outbound = ServiceEntityPaginated$Outbound;
}

export function serviceEntityPaginatedToJSON(
  serviceEntityPaginated: ServiceEntityPaginated,
): string {
  return JSON.stringify(
    ServiceEntityPaginated$outboundSchema.parse(serviceEntityPaginated),
  );
}

export function serviceEntityPaginatedFromJSON(
  jsonString: string,
): SafeParseResult<ServiceEntityPaginated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceEntityPaginated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceEntityPaginated' from JSON`,
  );
}
