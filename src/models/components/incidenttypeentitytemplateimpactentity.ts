/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Environment: "environment",
  Functionality: "functionality",
  Service: "service",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type IncidentTypeEntityTemplateImpactEntity = {
  id?: string | undefined;
  name?: string | undefined;
  conditionId?: string | undefined;
  conditionName?: string | undefined;
  type?: Type | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const IncidentTypeEntityTemplateImpactEntity$inboundSchema: z.ZodType<
  IncidentTypeEntityTemplateImpactEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  condition_id: z.string().optional(),
  condition_name: z.string().optional(),
  type: Type$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
    "condition_name": "conditionName",
  });
});

/** @internal */
export type IncidentTypeEntityTemplateImpactEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  condition_id?: string | undefined;
  condition_name?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const IncidentTypeEntityTemplateImpactEntity$outboundSchema: z.ZodType<
  IncidentTypeEntityTemplateImpactEntity$Outbound,
  z.ZodTypeDef,
  IncidentTypeEntityTemplateImpactEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  conditionId: z.string().optional(),
  conditionName: z.string().optional(),
  type: Type$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
    conditionName: "condition_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentTypeEntityTemplateImpactEntity$ {
  /** @deprecated use `IncidentTypeEntityTemplateImpactEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentTypeEntityTemplateImpactEntity$inboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateImpactEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentTypeEntityTemplateImpactEntity$outboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateImpactEntity$Outbound` instead. */
  export type Outbound = IncidentTypeEntityTemplateImpactEntity$Outbound;
}

export function incidentTypeEntityTemplateImpactEntityToJSON(
  incidentTypeEntityTemplateImpactEntity:
    IncidentTypeEntityTemplateImpactEntity,
): string {
  return JSON.stringify(
    IncidentTypeEntityTemplateImpactEntity$outboundSchema.parse(
      incidentTypeEntityTemplateImpactEntity,
    ),
  );
}

export function incidentTypeEntityTemplateImpactEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentTypeEntityTemplateImpactEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentTypeEntityTemplateImpactEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentTypeEntityTemplateImpactEntity' from JSON`,
  );
}
