/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create an override covering a specific time period in an on-call rotation, re-assigning that period to a specific user.
 */
export type OverrideOnCallScheduleRotationShifts = {
  /**
   * An ISO8601 time string specifying when the override should start.
   */
  startTime: string;
  /**
   * An ISO8601 time string specifying when the override should end.
   */
  endTime: string;
  /**
   * The ID of the user who should be on-call for the overridden period. If not provided, the override will be unassigned and claimable by any user.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const OverrideOnCallScheduleRotationShifts$inboundSchema: z.ZodType<
  OverrideOnCallScheduleRotationShifts,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_time: z.string(),
  end_time: z.string(),
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "end_time": "endTime",
    "user_id": "userId",
  });
});

/** @internal */
export type OverrideOnCallScheduleRotationShifts$Outbound = {
  start_time: string;
  end_time: string;
  user_id?: string | null | undefined;
};

/** @internal */
export const OverrideOnCallScheduleRotationShifts$outboundSchema: z.ZodType<
  OverrideOnCallScheduleRotationShifts$Outbound,
  z.ZodTypeDef,
  OverrideOnCallScheduleRotationShifts
> = z.object({
  startTime: z.string(),
  endTime: z.string(),
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    endTime: "end_time",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverrideOnCallScheduleRotationShifts$ {
  /** @deprecated use `OverrideOnCallScheduleRotationShifts$inboundSchema` instead. */
  export const inboundSchema =
    OverrideOnCallScheduleRotationShifts$inboundSchema;
  /** @deprecated use `OverrideOnCallScheduleRotationShifts$outboundSchema` instead. */
  export const outboundSchema =
    OverrideOnCallScheduleRotationShifts$outboundSchema;
  /** @deprecated use `OverrideOnCallScheduleRotationShifts$Outbound` instead. */
  export type Outbound = OverrideOnCallScheduleRotationShifts$Outbound;
}

export function overrideOnCallScheduleRotationShiftsToJSON(
  overrideOnCallScheduleRotationShifts: OverrideOnCallScheduleRotationShifts,
): string {
  return JSON.stringify(
    OverrideOnCallScheduleRotationShifts$outboundSchema.parse(
      overrideOnCallScheduleRotationShifts,
    ),
  );
}

export function overrideOnCallScheduleRotationShiftsFromJSON(
  jsonString: string,
): SafeParseResult<OverrideOnCallScheduleRotationShifts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OverrideOnCallScheduleRotationShifts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OverrideOnCallScheduleRotationShifts' from JSON`,
  );
}
