/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  ChecklistTemplateEntity,
  ChecklistTemplateEntity$inboundSchema,
  ChecklistTemplateEntity$Outbound,
  ChecklistTemplateEntity$outboundSchema,
} from "./checklisttemplateentity.js";
import {
  FunctionalityEntityLite,
  FunctionalityEntityLite$inboundSchema,
  FunctionalityEntityLite$Outbound,
  FunctionalityEntityLite$outboundSchema,
} from "./functionalityentitylite.js";
import {
  IntegrationsMicrosoftTeamsV2ChannelEntity,
  IntegrationsMicrosoftTeamsV2ChannelEntity$inboundSchema,
  IntegrationsMicrosoftTeamsV2ChannelEntity$Outbound,
  IntegrationsMicrosoftTeamsV2ChannelEntity$outboundSchema,
} from "./integrationsmicrosoftteamsv2channelentity.js";
import {
  IntegrationsSlackSlackChannelEntity,
  IntegrationsSlackSlackChannelEntity$inboundSchema,
  IntegrationsSlackSlackChannelEntity$Outbound,
  IntegrationsSlackSlackChannelEntity$outboundSchema,
} from "./integrationsslackslackchannelentity.js";
import {
  MembershipEntity,
  MembershipEntity$inboundSchema,
  MembershipEntity$Outbound,
  MembershipEntity$outboundSchema,
} from "./membershipentity.js";
import {
  ServiceEntityLite,
  ServiceEntityLite$inboundSchema,
  ServiceEntityLite$Outbound,
  ServiceEntityLite$outboundSchema,
} from "./serviceentitylite.js";
import {
  SlimRunbookEntity,
  SlimRunbookEntity$inboundSchema,
  SlimRunbookEntity$Outbound,
  SlimRunbookEntity$outboundSchema,
} from "./slimrunbookentity.js";

/**
 * TeamEntity model
 */
export type TeamEntity = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signalsIcalUrl?: string | undefined;
  createdBy?: AuthorEntity | undefined;
  inSupportHours?: boolean | undefined;
  slackChannel?: IntegrationsSlackSlackChannelEntity | undefined;
  msTeamsChannel?: IntegrationsMicrosoftTeamsV2ChannelEntity | undefined;
  memberships?: Array<MembershipEntity> | undefined;
  ownedChecklistTemplates?: Array<ChecklistTemplateEntity> | undefined;
  ownedFunctionalities?: Array<FunctionalityEntityLite> | undefined;
  ownedServices?: Array<ServiceEntityLite> | undefined;
  ownedRunbooks?: Array<SlimRunbookEntity> | undefined;
  respondingServices?: Array<ServiceEntityLite> | undefined;
  services?: Array<ServiceEntityLite> | undefined;
  functionalities?: Array<FunctionalityEntityLite> | undefined;
};

/** @internal */
export const TeamEntity$inboundSchema: z.ZodType<
  TeamEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  signals_ical_url: z.string().optional(),
  created_by: AuthorEntity$inboundSchema.optional(),
  in_support_hours: z.boolean().optional(),
  slack_channel: IntegrationsSlackSlackChannelEntity$inboundSchema.optional(),
  ms_teams_channel: IntegrationsMicrosoftTeamsV2ChannelEntity$inboundSchema
    .optional(),
  memberships: z.array(MembershipEntity$inboundSchema).optional(),
  owned_checklist_templates: z.array(ChecklistTemplateEntity$inboundSchema)
    .optional(),
  owned_functionalities: z.array(FunctionalityEntityLite$inboundSchema)
    .optional(),
  owned_services: z.array(ServiceEntityLite$inboundSchema).optional(),
  owned_runbooks: z.array(SlimRunbookEntity$inboundSchema).optional(),
  responding_services: z.array(ServiceEntityLite$inboundSchema).optional(),
  services: z.array(ServiceEntityLite$inboundSchema).optional(),
  functionalities: z.array(FunctionalityEntityLite$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "signals_ical_url": "signalsIcalUrl",
    "created_by": "createdBy",
    "in_support_hours": "inSupportHours",
    "slack_channel": "slackChannel",
    "ms_teams_channel": "msTeamsChannel",
    "owned_checklist_templates": "ownedChecklistTemplates",
    "owned_functionalities": "ownedFunctionalities",
    "owned_services": "ownedServices",
    "owned_runbooks": "ownedRunbooks",
    "responding_services": "respondingServices",
  });
});

/** @internal */
export type TeamEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  signals_ical_url?: string | undefined;
  created_by?: AuthorEntity$Outbound | undefined;
  in_support_hours?: boolean | undefined;
  slack_channel?: IntegrationsSlackSlackChannelEntity$Outbound | undefined;
  ms_teams_channel?:
    | IntegrationsMicrosoftTeamsV2ChannelEntity$Outbound
    | undefined;
  memberships?: Array<MembershipEntity$Outbound> | undefined;
  owned_checklist_templates?:
    | Array<ChecklistTemplateEntity$Outbound>
    | undefined;
  owned_functionalities?: Array<FunctionalityEntityLite$Outbound> | undefined;
  owned_services?: Array<ServiceEntityLite$Outbound> | undefined;
  owned_runbooks?: Array<SlimRunbookEntity$Outbound> | undefined;
  responding_services?: Array<ServiceEntityLite$Outbound> | undefined;
  services?: Array<ServiceEntityLite$Outbound> | undefined;
  functionalities?: Array<FunctionalityEntityLite$Outbound> | undefined;
};

/** @internal */
export const TeamEntity$outboundSchema: z.ZodType<
  TeamEntity$Outbound,
  z.ZodTypeDef,
  TeamEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  signalsIcalUrl: z.string().optional(),
  createdBy: AuthorEntity$outboundSchema.optional(),
  inSupportHours: z.boolean().optional(),
  slackChannel: IntegrationsSlackSlackChannelEntity$outboundSchema.optional(),
  msTeamsChannel: IntegrationsMicrosoftTeamsV2ChannelEntity$outboundSchema
    .optional(),
  memberships: z.array(MembershipEntity$outboundSchema).optional(),
  ownedChecklistTemplates: z.array(ChecklistTemplateEntity$outboundSchema)
    .optional(),
  ownedFunctionalities: z.array(FunctionalityEntityLite$outboundSchema)
    .optional(),
  ownedServices: z.array(ServiceEntityLite$outboundSchema).optional(),
  ownedRunbooks: z.array(SlimRunbookEntity$outboundSchema).optional(),
  respondingServices: z.array(ServiceEntityLite$outboundSchema).optional(),
  services: z.array(ServiceEntityLite$outboundSchema).optional(),
  functionalities: z.array(FunctionalityEntityLite$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    signalsIcalUrl: "signals_ical_url",
    createdBy: "created_by",
    inSupportHours: "in_support_hours",
    slackChannel: "slack_channel",
    msTeamsChannel: "ms_teams_channel",
    ownedChecklistTemplates: "owned_checklist_templates",
    ownedFunctionalities: "owned_functionalities",
    ownedServices: "owned_services",
    ownedRunbooks: "owned_runbooks",
    respondingServices: "responding_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamEntity$ {
  /** @deprecated use `TeamEntity$inboundSchema` instead. */
  export const inboundSchema = TeamEntity$inboundSchema;
  /** @deprecated use `TeamEntity$outboundSchema` instead. */
  export const outboundSchema = TeamEntity$outboundSchema;
  /** @deprecated use `TeamEntity$Outbound` instead. */
  export type Outbound = TeamEntity$Outbound;
}

export function teamEntityToJSON(teamEntity: TeamEntity): string {
  return JSON.stringify(TeamEntity$outboundSchema.parse(teamEntity));
}

export function teamEntityFromJSON(
  jsonString: string,
): SafeParseResult<TeamEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamEntity' from JSON`,
  );
}
