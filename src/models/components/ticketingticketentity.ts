/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  NullableAttachmentsLinkEntity,
  NullableAttachmentsLinkEntity$inboundSchema,
  NullableAttachmentsLinkEntity$Outbound,
  NullableAttachmentsLinkEntity$outboundSchema,
} from "./nullableattachmentslinkentity.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableTicketingPriorityEntity,
  NullableTicketingPriorityEntity$inboundSchema,
  NullableTicketingPriorityEntity$Outbound,
  NullableTicketingPriorityEntity$outboundSchema,
} from "./nullableticketingpriorityentity.js";

export const TicketingTicketEntityState = {
  Open: "open",
  InProgress: "in_progress",
  Cancelled: "cancelled",
  Done: "done",
} as const;
export type TicketingTicketEntityState = ClosedEnum<
  typeof TicketingTicketEntityState
>;

export const TicketingTicketEntityType = {
  Incident: "incident",
  Task: "task",
  FollowUp: "follow_up",
} as const;
export type TicketingTicketEntityType = ClosedEnum<
  typeof TicketingTicketEntityType
>;

export type TicketingTicketEntityAttachment = {};

/**
 * Ticketing_TicketEntity model
 */
export type TicketingTicketEntity = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  state?: TicketingTicketEntityState | null | undefined;
  type?: TicketingTicketEntityType | null | undefined;
  assignees?: Array<AuthorEntity> | null | undefined;
  priority?: NullableTicketingPriorityEntity | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  attachments?: Array<TicketingTicketEntityAttachment> | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  tagList?: Array<string> | null | undefined;
  /**
   * ID of incident that this ticket is related to
   */
  incidentId?: string | null | undefined;
  /**
   * Name of incident that this ticket is related to
   */
  incidentName?: string | null | undefined;
  /**
   * Milestone of incident that this ticket is related to
   */
  incidentCurrentMilestone?: string | null | undefined;
  /**
   * ID of task that this ticket is related to
   */
  taskId?: string | null | undefined;
  dueAt?: Date | null | undefined;
  /**
   * Error message from syncing this ticket to integrations
   */
  syncErrorMessage?: string | null | undefined;
  link?: NullableAttachmentsLinkEntity | null | undefined;
};

/** @internal */
export const TicketingTicketEntityState$inboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityState
> = z.nativeEnum(TicketingTicketEntityState);

/** @internal */
export const TicketingTicketEntityState$outboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityState
> = TicketingTicketEntityState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntityState$ {
  /** @deprecated use `TicketingTicketEntityState$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntityState$inboundSchema;
  /** @deprecated use `TicketingTicketEntityState$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntityState$outboundSchema;
}

/** @internal */
export const TicketingTicketEntityType$inboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityType
> = z.nativeEnum(TicketingTicketEntityType);

/** @internal */
export const TicketingTicketEntityType$outboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityType
> = TicketingTicketEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntityType$ {
  /** @deprecated use `TicketingTicketEntityType$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntityType$inboundSchema;
  /** @deprecated use `TicketingTicketEntityType$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntityType$outboundSchema;
}

/** @internal */
export const TicketingTicketEntityAttachment$inboundSchema: z.ZodType<
  TicketingTicketEntityAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingTicketEntityAttachment$Outbound = {};

/** @internal */
export const TicketingTicketEntityAttachment$outboundSchema: z.ZodType<
  TicketingTicketEntityAttachment$Outbound,
  z.ZodTypeDef,
  TicketingTicketEntityAttachment
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntityAttachment$ {
  /** @deprecated use `TicketingTicketEntityAttachment$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntityAttachment$inboundSchema;
  /** @deprecated use `TicketingTicketEntityAttachment$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntityAttachment$outboundSchema;
  /** @deprecated use `TicketingTicketEntityAttachment$Outbound` instead. */
  export type Outbound = TicketingTicketEntityAttachment$Outbound;
}

export function ticketingTicketEntityAttachmentToJSON(
  ticketingTicketEntityAttachment: TicketingTicketEntityAttachment,
): string {
  return JSON.stringify(
    TicketingTicketEntityAttachment$outboundSchema.parse(
      ticketingTicketEntityAttachment,
    ),
  );
}

export function ticketingTicketEntityAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketEntityAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketEntityAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketEntityAttachment' from JSON`,
  );
}

/** @internal */
export const TicketingTicketEntity$inboundSchema: z.ZodType<
  TicketingTicketEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  state: z.nullable(TicketingTicketEntityState$inboundSchema).optional(),
  type: z.nullable(TicketingTicketEntityType$inboundSchema).optional(),
  assignees: z.nullable(z.array(AuthorEntity$inboundSchema)).optional(),
  priority: z.nullable(NullableTicketingPriorityEntity$inboundSchema)
    .optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => TicketingTicketEntityAttachment$inboundSchema)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  tag_list: z.nullable(z.array(z.string())).optional(),
  incident_id: z.nullable(z.string()).optional(),
  incident_name: z.nullable(z.string()).optional(),
  incident_current_milestone: z.nullable(z.string()).optional(),
  task_id: z.nullable(z.string()).optional(),
  due_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  sync_error_message: z.nullable(z.string()).optional(),
  link: z.nullable(NullableAttachmentsLinkEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "tag_list": "tagList",
    "incident_id": "incidentId",
    "incident_name": "incidentName",
    "incident_current_milestone": "incidentCurrentMilestone",
    "task_id": "taskId",
    "due_at": "dueAt",
    "sync_error_message": "syncErrorMessage",
  });
});

/** @internal */
export type TicketingTicketEntity$Outbound = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  state?: string | null | undefined;
  type?: string | null | undefined;
  assignees?: Array<AuthorEntity$Outbound> | null | undefined;
  priority?: NullableTicketingPriorityEntity$Outbound | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  attachments?:
    | Array<TicketingTicketEntityAttachment$Outbound>
    | null
    | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  tag_list?: Array<string> | null | undefined;
  incident_id?: string | null | undefined;
  incident_name?: string | null | undefined;
  incident_current_milestone?: string | null | undefined;
  task_id?: string | null | undefined;
  due_at?: string | null | undefined;
  sync_error_message?: string | null | undefined;
  link?: NullableAttachmentsLinkEntity$Outbound | null | undefined;
};

/** @internal */
export const TicketingTicketEntity$outboundSchema: z.ZodType<
  TicketingTicketEntity$Outbound,
  z.ZodTypeDef,
  TicketingTicketEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  state: z.nullable(TicketingTicketEntityState$outboundSchema).optional(),
  type: z.nullable(TicketingTicketEntityType$outboundSchema).optional(),
  assignees: z.nullable(z.array(AuthorEntity$outboundSchema)).optional(),
  priority: z.nullable(NullableTicketingPriorityEntity$outboundSchema)
    .optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => TicketingTicketEntityAttachment$outboundSchema)),
  ).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  tagList: z.nullable(z.array(z.string())).optional(),
  incidentId: z.nullable(z.string()).optional(),
  incidentName: z.nullable(z.string()).optional(),
  incidentCurrentMilestone: z.nullable(z.string()).optional(),
  taskId: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  syncErrorMessage: z.nullable(z.string()).optional(),
  link: z.nullable(NullableAttachmentsLinkEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
    tagList: "tag_list",
    incidentId: "incident_id",
    incidentName: "incident_name",
    incidentCurrentMilestone: "incident_current_milestone",
    taskId: "task_id",
    dueAt: "due_at",
    syncErrorMessage: "sync_error_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntity$ {
  /** @deprecated use `TicketingTicketEntity$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntity$inboundSchema;
  /** @deprecated use `TicketingTicketEntity$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntity$outboundSchema;
  /** @deprecated use `TicketingTicketEntity$Outbound` instead. */
  export type Outbound = TicketingTicketEntity$Outbound;
}

export function ticketingTicketEntityToJSON(
  ticketingTicketEntity: TicketingTicketEntity,
): string {
  return JSON.stringify(
    TicketingTicketEntity$outboundSchema.parse(ticketingTicketEntity),
  );
}

export function ticketingTicketEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketEntity' from JSON`,
  );
}
