/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachmentsLinkEntity,
  AttachmentsLinkEntity$inboundSchema,
  AttachmentsLinkEntity$Outbound,
  AttachmentsLinkEntity$outboundSchema,
} from "./attachmentslinkentity.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  TicketingPriorityEntity,
  TicketingPriorityEntity$inboundSchema,
  TicketingPriorityEntity$Outbound,
  TicketingPriorityEntity$outboundSchema,
} from "./ticketingpriorityentity.js";

export const TicketingTicketEntityState = {
  Open: "open",
  InProgress: "in_progress",
  Cancelled: "cancelled",
  Done: "done",
} as const;
export type TicketingTicketEntityState = ClosedEnum<
  typeof TicketingTicketEntityState
>;

export const TicketingTicketEntityType = {
  Incident: "incident",
  Task: "task",
  FollowUp: "follow_up",
} as const;
export type TicketingTicketEntityType = ClosedEnum<
  typeof TicketingTicketEntityType
>;

export type TicketingTicketEntityAttachments = {};

/**
 * Ticketing_TicketEntity model
 */
export type TicketingTicketEntity = {
  id?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  state?: TicketingTicketEntityState | undefined;
  type?: TicketingTicketEntityType | undefined;
  assignees?: Array<AuthorEntity> | undefined;
  /**
   * Ticketing_PriorityEntity model
   */
  priority?: TicketingPriorityEntity | undefined;
  createdBy?: AuthorEntity | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  attachments?: Array<TicketingTicketEntityAttachments> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  tagList?: Array<string> | undefined;
  /**
   * ID of incident that this ticket is related to
   */
  incidentId?: string | undefined;
  /**
   * Name of incident that this ticket is related to
   */
  incidentName?: string | undefined;
  /**
   * Milestone of incident that this ticket is related to
   */
  incidentCurrentMilestone?: string | undefined;
  /**
   * ID of task that this ticket is related to
   */
  taskId?: string | undefined;
  dueAt?: Date | undefined;
  /**
   * Attachments_LinkEntity model
   */
  link?: AttachmentsLinkEntity | undefined;
};

/** @internal */
export const TicketingTicketEntityState$inboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityState
> = z.nativeEnum(TicketingTicketEntityState);

/** @internal */
export const TicketingTicketEntityState$outboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityState
> = TicketingTicketEntityState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntityState$ {
  /** @deprecated use `TicketingTicketEntityState$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntityState$inboundSchema;
  /** @deprecated use `TicketingTicketEntityState$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntityState$outboundSchema;
}

/** @internal */
export const TicketingTicketEntityType$inboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityType
> = z.nativeEnum(TicketingTicketEntityType);

/** @internal */
export const TicketingTicketEntityType$outboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketEntityType
> = TicketingTicketEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntityType$ {
  /** @deprecated use `TicketingTicketEntityType$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntityType$inboundSchema;
  /** @deprecated use `TicketingTicketEntityType$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntityType$outboundSchema;
}

/** @internal */
export const TicketingTicketEntityAttachments$inboundSchema: z.ZodType<
  TicketingTicketEntityAttachments,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingTicketEntityAttachments$Outbound = {};

/** @internal */
export const TicketingTicketEntityAttachments$outboundSchema: z.ZodType<
  TicketingTicketEntityAttachments$Outbound,
  z.ZodTypeDef,
  TicketingTicketEntityAttachments
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntityAttachments$ {
  /** @deprecated use `TicketingTicketEntityAttachments$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntityAttachments$inboundSchema;
  /** @deprecated use `TicketingTicketEntityAttachments$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntityAttachments$outboundSchema;
  /** @deprecated use `TicketingTicketEntityAttachments$Outbound` instead. */
  export type Outbound = TicketingTicketEntityAttachments$Outbound;
}

export function ticketingTicketEntityAttachmentsToJSON(
  ticketingTicketEntityAttachments: TicketingTicketEntityAttachments,
): string {
  return JSON.stringify(
    TicketingTicketEntityAttachments$outboundSchema.parse(
      ticketingTicketEntityAttachments,
    ),
  );
}

export function ticketingTicketEntityAttachmentsFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketEntityAttachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketEntityAttachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketEntityAttachments' from JSON`,
  );
}

/** @internal */
export const TicketingTicketEntity$inboundSchema: z.ZodType<
  TicketingTicketEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  state: TicketingTicketEntityState$inboundSchema.optional(),
  type: TicketingTicketEntityType$inboundSchema.optional(),
  assignees: z.array(AuthorEntity$inboundSchema).optional(),
  priority: TicketingPriorityEntity$inboundSchema.optional(),
  created_by: AuthorEntity$inboundSchema.optional(),
  attachments: z.array(
    z.lazy(() => TicketingTicketEntityAttachments$inboundSchema),
  ).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tag_list: z.array(z.string()).optional(),
  incident_id: z.string().optional(),
  incident_name: z.string().optional(),
  incident_current_milestone: z.string().optional(),
  task_id: z.string().optional(),
  due_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  link: AttachmentsLinkEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "tag_list": "tagList",
    "incident_id": "incidentId",
    "incident_name": "incidentName",
    "incident_current_milestone": "incidentCurrentMilestone",
    "task_id": "taskId",
    "due_at": "dueAt",
  });
});

/** @internal */
export type TicketingTicketEntity$Outbound = {
  id?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  state?: string | undefined;
  type?: string | undefined;
  assignees?: Array<AuthorEntity$Outbound> | undefined;
  priority?: TicketingPriorityEntity$Outbound | undefined;
  created_by?: AuthorEntity$Outbound | undefined;
  attachments?: Array<TicketingTicketEntityAttachments$Outbound> | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  tag_list?: Array<string> | undefined;
  incident_id?: string | undefined;
  incident_name?: string | undefined;
  incident_current_milestone?: string | undefined;
  task_id?: string | undefined;
  due_at?: string | undefined;
  link?: AttachmentsLinkEntity$Outbound | undefined;
};

/** @internal */
export const TicketingTicketEntity$outboundSchema: z.ZodType<
  TicketingTicketEntity$Outbound,
  z.ZodTypeDef,
  TicketingTicketEntity
> = z.object({
  id: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  state: TicketingTicketEntityState$outboundSchema.optional(),
  type: TicketingTicketEntityType$outboundSchema.optional(),
  assignees: z.array(AuthorEntity$outboundSchema).optional(),
  priority: TicketingPriorityEntity$outboundSchema.optional(),
  createdBy: AuthorEntity$outboundSchema.optional(),
  attachments: z.array(
    z.lazy(() => TicketingTicketEntityAttachments$outboundSchema),
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tagList: z.array(z.string()).optional(),
  incidentId: z.string().optional(),
  incidentName: z.string().optional(),
  incidentCurrentMilestone: z.string().optional(),
  taskId: z.string().optional(),
  dueAt: z.date().transform(v => v.toISOString()).optional(),
  link: AttachmentsLinkEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
    tagList: "tag_list",
    incidentId: "incident_id",
    incidentName: "incident_name",
    incidentCurrentMilestone: "incident_current_milestone",
    taskId: "task_id",
    dueAt: "due_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketEntity$ {
  /** @deprecated use `TicketingTicketEntity$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketEntity$inboundSchema;
  /** @deprecated use `TicketingTicketEntity$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketEntity$outboundSchema;
  /** @deprecated use `TicketingTicketEntity$Outbound` instead. */
  export type Outbound = TicketingTicketEntity$Outbound;
}

export function ticketingTicketEntityToJSON(
  ticketingTicketEntity: TicketingTicketEntity,
): string {
  return JSON.stringify(
    TicketingTicketEntity$outboundSchema.parse(ticketingTicketEntity),
  );
}

export function ticketingTicketEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketEntity' from JSON`,
  );
}
