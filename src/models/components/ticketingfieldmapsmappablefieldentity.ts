/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Ticketing_FieldMaps_MappableFieldEntity model
 */
export type TicketingFieldMapsMappableFieldEntity = {
  /**
   * The ID of the field
   */
  value?: string | null | undefined;
  /**
   * The human-readable name of the field
   */
  label?: string | null | undefined;
  /**
   * The allowed type of the field
   */
  type?: string | null | undefined;
  /**
   * The allowed values of the field
   */
  allowedValues?: Array<string> | null | undefined;
  /**
   * If the field is required to be mapped
   */
  required?: string | null | undefined;
};

/** @internal */
export const TicketingFieldMapsMappableFieldEntity$inboundSchema: z.ZodType<
  TicketingFieldMapsMappableFieldEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  allowed_values: z.nullable(z.array(z.string())).optional(),
  required: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_values": "allowedValues",
  });
});

/** @internal */
export type TicketingFieldMapsMappableFieldEntity$Outbound = {
  value?: string | null | undefined;
  label?: string | null | undefined;
  type?: string | null | undefined;
  allowed_values?: Array<string> | null | undefined;
  required?: string | null | undefined;
};

/** @internal */
export const TicketingFieldMapsMappableFieldEntity$outboundSchema: z.ZodType<
  TicketingFieldMapsMappableFieldEntity$Outbound,
  z.ZodTypeDef,
  TicketingFieldMapsMappableFieldEntity
> = z.object({
  value: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  allowedValues: z.nullable(z.array(z.string())).optional(),
  required: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedValues: "allowed_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingFieldMapsMappableFieldEntity$ {
  /** @deprecated use `TicketingFieldMapsMappableFieldEntity$inboundSchema` instead. */
  export const inboundSchema =
    TicketingFieldMapsMappableFieldEntity$inboundSchema;
  /** @deprecated use `TicketingFieldMapsMappableFieldEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingFieldMapsMappableFieldEntity$outboundSchema;
  /** @deprecated use `TicketingFieldMapsMappableFieldEntity$Outbound` instead. */
  export type Outbound = TicketingFieldMapsMappableFieldEntity$Outbound;
}

export function ticketingFieldMapsMappableFieldEntityToJSON(
  ticketingFieldMapsMappableFieldEntity: TicketingFieldMapsMappableFieldEntity,
): string {
  return JSON.stringify(
    TicketingFieldMapsMappableFieldEntity$outboundSchema.parse(
      ticketingFieldMapsMappableFieldEntity,
    ),
  );
}

export function ticketingFieldMapsMappableFieldEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingFieldMapsMappableFieldEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingFieldMapsMappableFieldEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingFieldMapsMappableFieldEntity' from JSON`,
  );
}
