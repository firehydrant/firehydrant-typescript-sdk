/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The name of the service
 */
export const Integration = {
  PagerDuty: "pager_duty",
  Opsgenie: "opsgenie",
  Victorops: "victorops",
} as const;
/**
 * The name of the service
 */
export type Integration = ClosedEnum<typeof Integration>;

/**
 * Creates a service with the appropriate integration for each external service ID passed
 */
export type PostV1ServicesServiceLinks = {
  /**
   * ID of the service
   */
  externalServiceIds: string;
  /**
   * ID for the integration. This can be found by going to the edit page for the integration
   */
  connectionId: string;
  /**
   * The name of the service
   */
  integration: Integration;
};

/** @internal */
export const Integration$inboundSchema: z.ZodNativeEnum<typeof Integration> = z
  .nativeEnum(Integration);

/** @internal */
export const Integration$outboundSchema: z.ZodNativeEnum<typeof Integration> =
  Integration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integration$ {
  /** @deprecated use `Integration$inboundSchema` instead. */
  export const inboundSchema = Integration$inboundSchema;
  /** @deprecated use `Integration$outboundSchema` instead. */
  export const outboundSchema = Integration$outboundSchema;
}

/** @internal */
export const PostV1ServicesServiceLinks$inboundSchema: z.ZodType<
  PostV1ServicesServiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_service_ids: z.string(),
  connection_id: z.string(),
  integration: Integration$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "external_service_ids": "externalServiceIds",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type PostV1ServicesServiceLinks$Outbound = {
  external_service_ids: string;
  connection_id: string;
  integration: string;
};

/** @internal */
export const PostV1ServicesServiceLinks$outboundSchema: z.ZodType<
  PostV1ServicesServiceLinks$Outbound,
  z.ZodTypeDef,
  PostV1ServicesServiceLinks
> = z.object({
  externalServiceIds: z.string(),
  connectionId: z.string(),
  integration: Integration$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    externalServiceIds: "external_service_ids",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ServicesServiceLinks$ {
  /** @deprecated use `PostV1ServicesServiceLinks$inboundSchema` instead. */
  export const inboundSchema = PostV1ServicesServiceLinks$inboundSchema;
  /** @deprecated use `PostV1ServicesServiceLinks$outboundSchema` instead. */
  export const outboundSchema = PostV1ServicesServiceLinks$outboundSchema;
  /** @deprecated use `PostV1ServicesServiceLinks$Outbound` instead. */
  export type Outbound = PostV1ServicesServiceLinks$Outbound;
}

export function postV1ServicesServiceLinksToJSON(
  postV1ServicesServiceLinks: PostV1ServicesServiceLinks,
): string {
  return JSON.stringify(
    PostV1ServicesServiceLinks$outboundSchema.parse(postV1ServicesServiceLinks),
  );
}

export function postV1ServicesServiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ServicesServiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ServicesServiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ServicesServiceLinks' from JSON`,
  );
}
