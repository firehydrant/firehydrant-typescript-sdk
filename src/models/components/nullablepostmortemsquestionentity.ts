/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsAPIEntitiesReference,
  ConversationsAPIEntitiesReference$inboundSchema,
  ConversationsAPIEntitiesReference$Outbound,
  ConversationsAPIEntitiesReference$outboundSchema,
} from "./conversationsapientitiesreference.js";

export type NullablePostMortemsQuestionEntity = {
  id?: string | null | undefined;
  title?: string | null | undefined;
  body?: string | null | undefined;
  tooltip?: string | null | undefined;
  kind?: string | null | undefined;
  questionTypeId?: string | null | undefined;
  isRequired?: boolean | null | undefined;
  availableOptions?: Array<string> | null | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference> | null | undefined;
};

/** @internal */
export const NullablePostMortemsQuestionEntity$inboundSchema: z.ZodType<
  NullablePostMortemsQuestionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  tooltip: z.nullable(z.string()).optional(),
  kind: z.nullable(z.string()).optional(),
  question_type_id: z.nullable(z.string()).optional(),
  is_required: z.nullable(z.boolean()).optional(),
  available_options: z.nullable(z.array(z.string())).optional(),
  conversations: z.nullable(
    z.array(ConversationsAPIEntitiesReference$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "question_type_id": "questionTypeId",
    "is_required": "isRequired",
    "available_options": "availableOptions",
  });
});

/** @internal */
export type NullablePostMortemsQuestionEntity$Outbound = {
  id?: string | null | undefined;
  title?: string | null | undefined;
  body?: string | null | undefined;
  tooltip?: string | null | undefined;
  kind?: string | null | undefined;
  question_type_id?: string | null | undefined;
  is_required?: boolean | null | undefined;
  available_options?: Array<string> | null | undefined;
  conversations?:
    | Array<ConversationsAPIEntitiesReference$Outbound>
    | null
    | undefined;
};

/** @internal */
export const NullablePostMortemsQuestionEntity$outboundSchema: z.ZodType<
  NullablePostMortemsQuestionEntity$Outbound,
  z.ZodTypeDef,
  NullablePostMortemsQuestionEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  tooltip: z.nullable(z.string()).optional(),
  kind: z.nullable(z.string()).optional(),
  questionTypeId: z.nullable(z.string()).optional(),
  isRequired: z.nullable(z.boolean()).optional(),
  availableOptions: z.nullable(z.array(z.string())).optional(),
  conversations: z.nullable(
    z.array(ConversationsAPIEntitiesReference$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    questionTypeId: "question_type_id",
    isRequired: "is_required",
    availableOptions: "available_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullablePostMortemsQuestionEntity$ {
  /** @deprecated use `NullablePostMortemsQuestionEntity$inboundSchema` instead. */
  export const inboundSchema = NullablePostMortemsQuestionEntity$inboundSchema;
  /** @deprecated use `NullablePostMortemsQuestionEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullablePostMortemsQuestionEntity$outboundSchema;
  /** @deprecated use `NullablePostMortemsQuestionEntity$Outbound` instead. */
  export type Outbound = NullablePostMortemsQuestionEntity$Outbound;
}

export function nullablePostMortemsQuestionEntityToJSON(
  nullablePostMortemsQuestionEntity: NullablePostMortemsQuestionEntity,
): string {
  return JSON.stringify(
    NullablePostMortemsQuestionEntity$outboundSchema.parse(
      nullablePostMortemsQuestionEntity,
    ),
  );
}

export function nullablePostMortemsQuestionEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullablePostMortemsQuestionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullablePostMortemsQuestionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullablePostMortemsQuestionEntity' from JSON`,
  );
}
