/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentEntityFieldRequirementEntity = {
  /**
   * A unique identifier for the field.
   */
  fieldId?: string | null | undefined;
  /**
   * The milestone at which this field is required. If null, this field is always required.
   */
  requiredAtMilestoneId?: string | null | undefined;
};

/** @internal */
export const IncidentEntityFieldRequirementEntity$inboundSchema: z.ZodType<
  IncidentEntityFieldRequirementEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_id: z.nullable(z.string()).optional(),
  required_at_milestone_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "field_id": "fieldId",
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type IncidentEntityFieldRequirementEntity$Outbound = {
  field_id?: string | null | undefined;
  required_at_milestone_id?: string | null | undefined;
};

/** @internal */
export const IncidentEntityFieldRequirementEntity$outboundSchema: z.ZodType<
  IncidentEntityFieldRequirementEntity$Outbound,
  z.ZodTypeDef,
  IncidentEntityFieldRequirementEntity
> = z.object({
  fieldId: z.nullable(z.string()).optional(),
  requiredAtMilestoneId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fieldId: "field_id",
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentEntityFieldRequirementEntity$ {
  /** @deprecated use `IncidentEntityFieldRequirementEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentEntityFieldRequirementEntity$inboundSchema;
  /** @deprecated use `IncidentEntityFieldRequirementEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentEntityFieldRequirementEntity$outboundSchema;
  /** @deprecated use `IncidentEntityFieldRequirementEntity$Outbound` instead. */
  export type Outbound = IncidentEntityFieldRequirementEntity$Outbound;
}

export function incidentEntityFieldRequirementEntityToJSON(
  incidentEntityFieldRequirementEntity: IncidentEntityFieldRequirementEntity,
): string {
  return JSON.stringify(
    IncidentEntityFieldRequirementEntity$outboundSchema.parse(
      incidentEntityFieldRequirementEntity,
    ),
  );
}

export function incidentEntityFieldRequirementEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentEntityFieldRequirementEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentEntityFieldRequirementEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentEntityFieldRequirementEntity' from JSON`,
  );
}
