/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Deprecated, but still required. Please just use 'incident'
 */
export const PostV1RunbooksType = {
  Incident: "incident",
  General: "general",
  Infrastructure: "infrastructure",
  IncidentRole: "incident_role",
} as const;
/**
 * Deprecated, but still required. Please just use 'incident'
 */
export type PostV1RunbooksType = ClosedEnum<typeof PostV1RunbooksType>;

/**
 * An object representing a Team that owns the runbook
 */
export type PostV1RunbooksOwner = {
  id: string;
};

export type AttachmentRule = {
  /**
   * The JSON logic for the attaching the runbook
   */
  logic: string;
  /**
   * The user data for the rule
   */
  userData?: string | undefined;
};

export type Rule = {
  /**
   * The JSON logic for the rule
   */
  logic: string;
  /**
   * The user data for the rule
   */
  userData?: string | undefined;
};

export type Steps = {
  /**
   * Name for step
   */
  name: string;
  /**
   * ID of action to use for this step.
   */
  actionId: string;
  rule?: Rule | undefined;
};

/**
 * Create a new runbook for use with incidents.
 */
export type PostV1Runbooks = {
  name: string;
  /**
   * Deprecated, but still required. Please just use 'incident'
   */
  type: PostV1RunbooksType;
  /**
   * Deprecated. Use description
   */
  summary?: string | undefined;
  /**
   * A longer description about the Runbook. Supports markdown format
   */
  description?: string | undefined;
  /**
   * Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.
   */
  autoAttachToRestrictedIncidents?: boolean | undefined;
  /**
   * Whether or not this runbook is a tutorial runbook
   */
  tutorial?: boolean | undefined;
  /**
   * An object representing a Team that owns the runbook
   */
  owner?: PostV1RunbooksOwner | undefined;
  attachmentRule?: AttachmentRule | undefined;
  steps?: Array<Steps> | undefined;
};

/** @internal */
export const PostV1RunbooksType$inboundSchema: z.ZodNativeEnum<
  typeof PostV1RunbooksType
> = z.nativeEnum(PostV1RunbooksType);

/** @internal */
export const PostV1RunbooksType$outboundSchema: z.ZodNativeEnum<
  typeof PostV1RunbooksType
> = PostV1RunbooksType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1RunbooksType$ {
  /** @deprecated use `PostV1RunbooksType$inboundSchema` instead. */
  export const inboundSchema = PostV1RunbooksType$inboundSchema;
  /** @deprecated use `PostV1RunbooksType$outboundSchema` instead. */
  export const outboundSchema = PostV1RunbooksType$outboundSchema;
}

/** @internal */
export const PostV1RunbooksOwner$inboundSchema: z.ZodType<
  PostV1RunbooksOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PostV1RunbooksOwner$Outbound = {
  id: string;
};

/** @internal */
export const PostV1RunbooksOwner$outboundSchema: z.ZodType<
  PostV1RunbooksOwner$Outbound,
  z.ZodTypeDef,
  PostV1RunbooksOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1RunbooksOwner$ {
  /** @deprecated use `PostV1RunbooksOwner$inboundSchema` instead. */
  export const inboundSchema = PostV1RunbooksOwner$inboundSchema;
  /** @deprecated use `PostV1RunbooksOwner$outboundSchema` instead. */
  export const outboundSchema = PostV1RunbooksOwner$outboundSchema;
  /** @deprecated use `PostV1RunbooksOwner$Outbound` instead. */
  export type Outbound = PostV1RunbooksOwner$Outbound;
}

export function postV1RunbooksOwnerToJSON(
  postV1RunbooksOwner: PostV1RunbooksOwner,
): string {
  return JSON.stringify(
    PostV1RunbooksOwner$outboundSchema.parse(postV1RunbooksOwner),
  );
}

export function postV1RunbooksOwnerFromJSON(
  jsonString: string,
): SafeParseResult<PostV1RunbooksOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1RunbooksOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1RunbooksOwner' from JSON`,
  );
}

/** @internal */
export const AttachmentRule$inboundSchema: z.ZodType<
  AttachmentRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.string(),
  user_data: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_data": "userData",
  });
});

/** @internal */
export type AttachmentRule$Outbound = {
  logic: string;
  user_data?: string | undefined;
};

/** @internal */
export const AttachmentRule$outboundSchema: z.ZodType<
  AttachmentRule$Outbound,
  z.ZodTypeDef,
  AttachmentRule
> = z.object({
  logic: z.string(),
  userData: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentRule$ {
  /** @deprecated use `AttachmentRule$inboundSchema` instead. */
  export const inboundSchema = AttachmentRule$inboundSchema;
  /** @deprecated use `AttachmentRule$outboundSchema` instead. */
  export const outboundSchema = AttachmentRule$outboundSchema;
  /** @deprecated use `AttachmentRule$Outbound` instead. */
  export type Outbound = AttachmentRule$Outbound;
}

export function attachmentRuleToJSON(attachmentRule: AttachmentRule): string {
  return JSON.stringify(AttachmentRule$outboundSchema.parse(attachmentRule));
}

export function attachmentRuleFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentRule' from JSON`,
  );
}

/** @internal */
export const Rule$inboundSchema: z.ZodType<Rule, z.ZodTypeDef, unknown> = z
  .object({
    logic: z.string(),
    user_data: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_data": "userData",
    });
  });

/** @internal */
export type Rule$Outbound = {
  logic: string;
  user_data?: string | undefined;
};

/** @internal */
export const Rule$outboundSchema: z.ZodType<Rule$Outbound, z.ZodTypeDef, Rule> =
  z.object({
    logic: z.string(),
    userData: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      userData: "user_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rule$ {
  /** @deprecated use `Rule$inboundSchema` instead. */
  export const inboundSchema = Rule$inboundSchema;
  /** @deprecated use `Rule$outboundSchema` instead. */
  export const outboundSchema = Rule$outboundSchema;
  /** @deprecated use `Rule$Outbound` instead. */
  export type Outbound = Rule$Outbound;
}

export function ruleToJSON(rule: Rule): string {
  return JSON.stringify(Rule$outboundSchema.parse(rule));
}

export function ruleFromJSON(
  jsonString: string,
): SafeParseResult<Rule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rule' from JSON`,
  );
}

/** @internal */
export const Steps$inboundSchema: z.ZodType<Steps, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    action_id: z.string(),
    rule: z.lazy(() => Rule$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "action_id": "actionId",
    });
  });

/** @internal */
export type Steps$Outbound = {
  name: string;
  action_id: string;
  rule?: Rule$Outbound | undefined;
};

/** @internal */
export const Steps$outboundSchema: z.ZodType<
  Steps$Outbound,
  z.ZodTypeDef,
  Steps
> = z.object({
  name: z.string(),
  actionId: z.string(),
  rule: z.lazy(() => Rule$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    actionId: "action_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Steps$ {
  /** @deprecated use `Steps$inboundSchema` instead. */
  export const inboundSchema = Steps$inboundSchema;
  /** @deprecated use `Steps$outboundSchema` instead. */
  export const outboundSchema = Steps$outboundSchema;
  /** @deprecated use `Steps$Outbound` instead. */
  export type Outbound = Steps$Outbound;
}

export function stepsToJSON(steps: Steps): string {
  return JSON.stringify(Steps$outboundSchema.parse(steps));
}

export function stepsFromJSON(
  jsonString: string,
): SafeParseResult<Steps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Steps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Steps' from JSON`,
  );
}

/** @internal */
export const PostV1Runbooks$inboundSchema: z.ZodType<
  PostV1Runbooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: PostV1RunbooksType$inboundSchema,
  summary: z.string().optional(),
  description: z.string().optional(),
  auto_attach_to_restricted_incidents: z.boolean().optional(),
  tutorial: z.boolean().optional(),
  owner: z.lazy(() => PostV1RunbooksOwner$inboundSchema).optional(),
  attachment_rule: z.lazy(() => AttachmentRule$inboundSchema).optional(),
  steps: z.array(z.lazy(() => Steps$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "auto_attach_to_restricted_incidents": "autoAttachToRestrictedIncidents",
    "attachment_rule": "attachmentRule",
  });
});

/** @internal */
export type PostV1Runbooks$Outbound = {
  name: string;
  type: string;
  summary?: string | undefined;
  description?: string | undefined;
  auto_attach_to_restricted_incidents?: boolean | undefined;
  tutorial?: boolean | undefined;
  owner?: PostV1RunbooksOwner$Outbound | undefined;
  attachment_rule?: AttachmentRule$Outbound | undefined;
  steps?: Array<Steps$Outbound> | undefined;
};

/** @internal */
export const PostV1Runbooks$outboundSchema: z.ZodType<
  PostV1Runbooks$Outbound,
  z.ZodTypeDef,
  PostV1Runbooks
> = z.object({
  name: z.string(),
  type: PostV1RunbooksType$outboundSchema,
  summary: z.string().optional(),
  description: z.string().optional(),
  autoAttachToRestrictedIncidents: z.boolean().optional(),
  tutorial: z.boolean().optional(),
  owner: z.lazy(() => PostV1RunbooksOwner$outboundSchema).optional(),
  attachmentRule: z.lazy(() => AttachmentRule$outboundSchema).optional(),
  steps: z.array(z.lazy(() => Steps$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    autoAttachToRestrictedIncidents: "auto_attach_to_restricted_incidents",
    attachmentRule: "attachment_rule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Runbooks$ {
  /** @deprecated use `PostV1Runbooks$inboundSchema` instead. */
  export const inboundSchema = PostV1Runbooks$inboundSchema;
  /** @deprecated use `PostV1Runbooks$outboundSchema` instead. */
  export const outboundSchema = PostV1Runbooks$outboundSchema;
  /** @deprecated use `PostV1Runbooks$Outbound` instead. */
  export type Outbound = PostV1Runbooks$Outbound;
}

export function postV1RunbooksToJSON(postV1Runbooks: PostV1Runbooks): string {
  return JSON.stringify(PostV1Runbooks$outboundSchema.parse(postV1Runbooks));
}

export function postV1RunbooksFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Runbooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Runbooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Runbooks' from JSON`,
  );
}
