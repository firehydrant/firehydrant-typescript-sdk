/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Attachments_LinkEntity model
 */
export type NullableAttachmentsLinkEntity = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  displayText?: string | null | undefined;
  hrefUrl?: string | null | undefined;
  iconUrl?: string | null | undefined;
  /**
   * Link can be edited
   */
  editable?: boolean | null | undefined;
  /**
   * Link can be deleted
   */
  deletable?: boolean | null | undefined;
};

/** @internal */
export const NullableAttachmentsLinkEntity$inboundSchema: z.ZodType<
  NullableAttachmentsLinkEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  display_text: z.nullable(z.string()).optional(),
  href_url: z.nullable(z.string()).optional(),
  icon_url: z.nullable(z.string()).optional(),
  editable: z.nullable(z.boolean()).optional(),
  deletable: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_text": "displayText",
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type NullableAttachmentsLinkEntity$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  display_text?: string | null | undefined;
  href_url?: string | null | undefined;
  icon_url?: string | null | undefined;
  editable?: boolean | null | undefined;
  deletable?: boolean | null | undefined;
};

/** @internal */
export const NullableAttachmentsLinkEntity$outboundSchema: z.ZodType<
  NullableAttachmentsLinkEntity$Outbound,
  z.ZodTypeDef,
  NullableAttachmentsLinkEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  displayText: z.nullable(z.string()).optional(),
  hrefUrl: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  editable: z.nullable(z.boolean()).optional(),
  deletable: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayText: "display_text",
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableAttachmentsLinkEntity$ {
  /** @deprecated use `NullableAttachmentsLinkEntity$inboundSchema` instead. */
  export const inboundSchema = NullableAttachmentsLinkEntity$inboundSchema;
  /** @deprecated use `NullableAttachmentsLinkEntity$outboundSchema` instead. */
  export const outboundSchema = NullableAttachmentsLinkEntity$outboundSchema;
  /** @deprecated use `NullableAttachmentsLinkEntity$Outbound` instead. */
  export type Outbound = NullableAttachmentsLinkEntity$Outbound;
}

export function nullableAttachmentsLinkEntityToJSON(
  nullableAttachmentsLinkEntity: NullableAttachmentsLinkEntity,
): string {
  return JSON.stringify(
    NullableAttachmentsLinkEntity$outboundSchema.parse(
      nullableAttachmentsLinkEntity,
    ),
  );
}

export function nullableAttachmentsLinkEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableAttachmentsLinkEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableAttachmentsLinkEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableAttachmentsLinkEntity' from JSON`,
  );
}
