/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableMetricsMetricsEntitySortEntity,
  NullableMetricsMetricsEntitySortEntity$inboundSchema,
  NullableMetricsMetricsEntitySortEntity$Outbound,
  NullableMetricsMetricsEntitySortEntity$outboundSchema,
} from "./nullablemetricsmetricsentitysortentity.js";

export type DisplayInformation = {};

export type Bucket = {};

/**
 * Metrics_MetricsEntity model
 */
export type MetricsMetricsEntity = {
  type?: string | null | undefined;
  /**
   * The field by which the metrics are grouped. Can be one of: total, severity, priority, functionality, service, environment, or user.
   */
  by?: string | null | undefined;
  /**
   * The size of returned buckets. Can be one of: day, week, month, or all_time.
   */
  bucketSize?: number | null | undefined;
  displayInformation?: DisplayInformation | null | undefined;
  keys?: Array<string> | null | undefined;
  buckets?: Array<Bucket> | null | undefined;
  sort?: NullableMetricsMetricsEntitySortEntity | null | undefined;
};

/** @internal */
export const DisplayInformation$inboundSchema: z.ZodType<
  DisplayInformation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DisplayInformation$Outbound = {};

/** @internal */
export const DisplayInformation$outboundSchema: z.ZodType<
  DisplayInformation$Outbound,
  z.ZodTypeDef,
  DisplayInformation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayInformation$ {
  /** @deprecated use `DisplayInformation$inboundSchema` instead. */
  export const inboundSchema = DisplayInformation$inboundSchema;
  /** @deprecated use `DisplayInformation$outboundSchema` instead. */
  export const outboundSchema = DisplayInformation$outboundSchema;
  /** @deprecated use `DisplayInformation$Outbound` instead. */
  export type Outbound = DisplayInformation$Outbound;
}

export function displayInformationToJSON(
  displayInformation: DisplayInformation,
): string {
  return JSON.stringify(
    DisplayInformation$outboundSchema.parse(displayInformation),
  );
}

export function displayInformationFromJSON(
  jsonString: string,
): SafeParseResult<DisplayInformation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisplayInformation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisplayInformation' from JSON`,
  );
}

/** @internal */
export const Bucket$inboundSchema: z.ZodType<Bucket, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Bucket$Outbound = {};

/** @internal */
export const Bucket$outboundSchema: z.ZodType<
  Bucket$Outbound,
  z.ZodTypeDef,
  Bucket
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bucket$ {
  /** @deprecated use `Bucket$inboundSchema` instead. */
  export const inboundSchema = Bucket$inboundSchema;
  /** @deprecated use `Bucket$outboundSchema` instead. */
  export const outboundSchema = Bucket$outboundSchema;
  /** @deprecated use `Bucket$Outbound` instead. */
  export type Outbound = Bucket$Outbound;
}

export function bucketToJSON(bucket: Bucket): string {
  return JSON.stringify(Bucket$outboundSchema.parse(bucket));
}

export function bucketFromJSON(
  jsonString: string,
): SafeParseResult<Bucket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Bucket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Bucket' from JSON`,
  );
}

/** @internal */
export const MetricsMetricsEntity$inboundSchema: z.ZodType<
  MetricsMetricsEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(z.string()).optional(),
  by: z.nullable(z.string()).optional(),
  bucket_size: z.nullable(z.number().int()).optional(),
  display_information: z.nullable(
    z.lazy(() => DisplayInformation$inboundSchema),
  ).optional(),
  keys: z.nullable(z.array(z.string())).optional(),
  buckets: z.nullable(z.array(z.lazy(() => Bucket$inboundSchema))).optional(),
  sort: z.nullable(NullableMetricsMetricsEntitySortEntity$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bucket_size": "bucketSize",
    "display_information": "displayInformation",
  });
});

/** @internal */
export type MetricsMetricsEntity$Outbound = {
  type?: string | null | undefined;
  by?: string | null | undefined;
  bucket_size?: number | null | undefined;
  display_information?: DisplayInformation$Outbound | null | undefined;
  keys?: Array<string> | null | undefined;
  buckets?: Array<Bucket$Outbound> | null | undefined;
  sort?: NullableMetricsMetricsEntitySortEntity$Outbound | null | undefined;
};

/** @internal */
export const MetricsMetricsEntity$outboundSchema: z.ZodType<
  MetricsMetricsEntity$Outbound,
  z.ZodTypeDef,
  MetricsMetricsEntity
> = z.object({
  type: z.nullable(z.string()).optional(),
  by: z.nullable(z.string()).optional(),
  bucketSize: z.nullable(z.number().int()).optional(),
  displayInformation: z.nullable(
    z.lazy(() => DisplayInformation$outboundSchema),
  ).optional(),
  keys: z.nullable(z.array(z.string())).optional(),
  buckets: z.nullable(z.array(z.lazy(() => Bucket$outboundSchema))).optional(),
  sort: z.nullable(NullableMetricsMetricsEntitySortEntity$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bucketSize: "bucket_size",
    displayInformation: "display_information",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsMetricsEntity$ {
  /** @deprecated use `MetricsMetricsEntity$inboundSchema` instead. */
  export const inboundSchema = MetricsMetricsEntity$inboundSchema;
  /** @deprecated use `MetricsMetricsEntity$outboundSchema` instead. */
  export const outboundSchema = MetricsMetricsEntity$outboundSchema;
  /** @deprecated use `MetricsMetricsEntity$Outbound` instead. */
  export type Outbound = MetricsMetricsEntity$Outbound;
}

export function metricsMetricsEntityToJSON(
  metricsMetricsEntity: MetricsMetricsEntity,
): string {
  return JSON.stringify(
    MetricsMetricsEntity$outboundSchema.parse(metricsMetricsEntity),
  );
}

export function metricsMetricsEntityFromJSON(
  jsonString: string,
): SafeParseResult<MetricsMetricsEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsMetricsEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsMetricsEntity' from JSON`,
  );
}
