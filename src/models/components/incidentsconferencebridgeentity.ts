/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentsConferenceBridgeEntityAttachments = {};

export type IncidentsConferenceBridgeEntity = {
  id?: string | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  attachments?: Array<IncidentsConferenceBridgeEntityAttachments> | undefined;
};

/** @internal */
export const IncidentsConferenceBridgeEntityAttachments$inboundSchema:
  z.ZodType<IncidentsConferenceBridgeEntityAttachments, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type IncidentsConferenceBridgeEntityAttachments$Outbound = {};

/** @internal */
export const IncidentsConferenceBridgeEntityAttachments$outboundSchema:
  z.ZodType<
    IncidentsConferenceBridgeEntityAttachments$Outbound,
    z.ZodTypeDef,
    IncidentsConferenceBridgeEntityAttachments
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsConferenceBridgeEntityAttachments$ {
  /** @deprecated use `IncidentsConferenceBridgeEntityAttachments$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsConferenceBridgeEntityAttachments$inboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntityAttachments$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsConferenceBridgeEntityAttachments$outboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntityAttachments$Outbound` instead. */
  export type Outbound = IncidentsConferenceBridgeEntityAttachments$Outbound;
}

export function incidentsConferenceBridgeEntityAttachmentsToJSON(
  incidentsConferenceBridgeEntityAttachments:
    IncidentsConferenceBridgeEntityAttachments,
): string {
  return JSON.stringify(
    IncidentsConferenceBridgeEntityAttachments$outboundSchema.parse(
      incidentsConferenceBridgeEntityAttachments,
    ),
  );
}

export function incidentsConferenceBridgeEntityAttachmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  IncidentsConferenceBridgeEntityAttachments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentsConferenceBridgeEntityAttachments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncidentsConferenceBridgeEntityAttachments' from JSON`,
  );
}

/** @internal */
export const IncidentsConferenceBridgeEntity$inboundSchema: z.ZodType<
  IncidentsConferenceBridgeEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  attachments: z.array(
    z.lazy(() => IncidentsConferenceBridgeEntityAttachments$inboundSchema),
  ).optional(),
});

/** @internal */
export type IncidentsConferenceBridgeEntity$Outbound = {
  id?: string | undefined;
  attachments?:
    | Array<IncidentsConferenceBridgeEntityAttachments$Outbound>
    | undefined;
};

/** @internal */
export const IncidentsConferenceBridgeEntity$outboundSchema: z.ZodType<
  IncidentsConferenceBridgeEntity$Outbound,
  z.ZodTypeDef,
  IncidentsConferenceBridgeEntity
> = z.object({
  id: z.string().optional(),
  attachments: z.array(
    z.lazy(() => IncidentsConferenceBridgeEntityAttachments$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsConferenceBridgeEntity$ {
  /** @deprecated use `IncidentsConferenceBridgeEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsConferenceBridgeEntity$inboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsConferenceBridgeEntity$outboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntity$Outbound` instead. */
  export type Outbound = IncidentsConferenceBridgeEntity$Outbound;
}

export function incidentsConferenceBridgeEntityToJSON(
  incidentsConferenceBridgeEntity: IncidentsConferenceBridgeEntity,
): string {
  return JSON.stringify(
    IncidentsConferenceBridgeEntity$outboundSchema.parse(
      incidentsConferenceBridgeEntity,
    ),
  );
}

export function incidentsConferenceBridgeEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsConferenceBridgeEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsConferenceBridgeEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsConferenceBridgeEntity' from JSON`,
  );
}
