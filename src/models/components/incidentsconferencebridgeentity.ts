/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentsConferenceBridgeEntityAttachment = {};

/**
 * Incidents_ConferenceBridgeEntity model
 */
export type IncidentsConferenceBridgeEntity = {
  id?: string | null | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  attachments?:
    | Array<IncidentsConferenceBridgeEntityAttachment>
    | null
    | undefined;
  hasTranslatedTranscripts?: boolean | null | undefined;
  /**
   * A list of language codes that have translated transcripts for this conference bridge
   */
  languageCodes?: Array<string> | null | undefined;
  transcriptionStatus?: string | null | undefined;
  transcriptionSubCode?: string | null | undefined;
};

/** @internal */
export const IncidentsConferenceBridgeEntityAttachment$inboundSchema: z.ZodType<
  IncidentsConferenceBridgeEntityAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IncidentsConferenceBridgeEntityAttachment$Outbound = {};

/** @internal */
export const IncidentsConferenceBridgeEntityAttachment$outboundSchema:
  z.ZodType<
    IncidentsConferenceBridgeEntityAttachment$Outbound,
    z.ZodTypeDef,
    IncidentsConferenceBridgeEntityAttachment
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsConferenceBridgeEntityAttachment$ {
  /** @deprecated use `IncidentsConferenceBridgeEntityAttachment$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsConferenceBridgeEntityAttachment$inboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntityAttachment$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsConferenceBridgeEntityAttachment$outboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntityAttachment$Outbound` instead. */
  export type Outbound = IncidentsConferenceBridgeEntityAttachment$Outbound;
}

export function incidentsConferenceBridgeEntityAttachmentToJSON(
  incidentsConferenceBridgeEntityAttachment:
    IncidentsConferenceBridgeEntityAttachment,
): string {
  return JSON.stringify(
    IncidentsConferenceBridgeEntityAttachment$outboundSchema.parse(
      incidentsConferenceBridgeEntityAttachment,
    ),
  );
}

export function incidentsConferenceBridgeEntityAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<
  IncidentsConferenceBridgeEntityAttachment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentsConferenceBridgeEntityAttachment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncidentsConferenceBridgeEntityAttachment' from JSON`,
  );
}

/** @internal */
export const IncidentsConferenceBridgeEntity$inboundSchema: z.ZodType<
  IncidentsConferenceBridgeEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  attachments: z.nullable(
    z.array(
      z.lazy(() => IncidentsConferenceBridgeEntityAttachment$inboundSchema),
    ),
  ).optional(),
  has_translated_transcripts: z.nullable(z.boolean()).optional(),
  language_codes: z.nullable(z.array(z.string())).optional(),
  transcription_status: z.nullable(z.string()).optional(),
  transcription_sub_code: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "has_translated_transcripts": "hasTranslatedTranscripts",
    "language_codes": "languageCodes",
    "transcription_status": "transcriptionStatus",
    "transcription_sub_code": "transcriptionSubCode",
  });
});

/** @internal */
export type IncidentsConferenceBridgeEntity$Outbound = {
  id?: string | null | undefined;
  attachments?:
    | Array<IncidentsConferenceBridgeEntityAttachment$Outbound>
    | null
    | undefined;
  has_translated_transcripts?: boolean | null | undefined;
  language_codes?: Array<string> | null | undefined;
  transcription_status?: string | null | undefined;
  transcription_sub_code?: string | null | undefined;
};

/** @internal */
export const IncidentsConferenceBridgeEntity$outboundSchema: z.ZodType<
  IncidentsConferenceBridgeEntity$Outbound,
  z.ZodTypeDef,
  IncidentsConferenceBridgeEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() =>
      IncidentsConferenceBridgeEntityAttachment$outboundSchema
    )),
  ).optional(),
  hasTranslatedTranscripts: z.nullable(z.boolean()).optional(),
  languageCodes: z.nullable(z.array(z.string())).optional(),
  transcriptionStatus: z.nullable(z.string()).optional(),
  transcriptionSubCode: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hasTranslatedTranscripts: "has_translated_transcripts",
    languageCodes: "language_codes",
    transcriptionStatus: "transcription_status",
    transcriptionSubCode: "transcription_sub_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsConferenceBridgeEntity$ {
  /** @deprecated use `IncidentsConferenceBridgeEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsConferenceBridgeEntity$inboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsConferenceBridgeEntity$outboundSchema;
  /** @deprecated use `IncidentsConferenceBridgeEntity$Outbound` instead. */
  export type Outbound = IncidentsConferenceBridgeEntity$Outbound;
}

export function incidentsConferenceBridgeEntityToJSON(
  incidentsConferenceBridgeEntity: IncidentsConferenceBridgeEntity,
): string {
  return JSON.stringify(
    IncidentsConferenceBridgeEntity$outboundSchema.parse(
      incidentsConferenceBridgeEntity,
    ),
  );
}

export function incidentsConferenceBridgeEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsConferenceBridgeEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsConferenceBridgeEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsConferenceBridgeEntity' from JSON`,
  );
}
