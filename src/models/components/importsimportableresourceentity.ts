/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ImportsImportErrorEntity,
  ImportsImportErrorEntity$inboundSchema,
  ImportsImportErrorEntity$Outbound,
  ImportsImportErrorEntity$outboundSchema,
} from "./importsimporterrorentity.js";

export const ImportsImportableResourceEntityState = {
  Selected: "selected",
  Skipped: "skipped",
  Imported: "imported",
  Errored: "errored",
} as const;
export type ImportsImportableResourceEntityState = ClosedEnum<
  typeof ImportsImportableResourceEntityState
>;

export type ImportsImportableResourceEntity = {
  importErrors?: Array<ImportsImportErrorEntity> | undefined;
  importedAt?: Date | undefined;
  remoteId?: string | undefined;
  state?: ImportsImportableResourceEntityState | undefined;
};

/** @internal */
export const ImportsImportableResourceEntityState$inboundSchema:
  z.ZodNativeEnum<typeof ImportsImportableResourceEntityState> = z.nativeEnum(
    ImportsImportableResourceEntityState,
  );

/** @internal */
export const ImportsImportableResourceEntityState$outboundSchema:
  z.ZodNativeEnum<typeof ImportsImportableResourceEntityState> =
    ImportsImportableResourceEntityState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportsImportableResourceEntityState$ {
  /** @deprecated use `ImportsImportableResourceEntityState$inboundSchema` instead. */
  export const inboundSchema =
    ImportsImportableResourceEntityState$inboundSchema;
  /** @deprecated use `ImportsImportableResourceEntityState$outboundSchema` instead. */
  export const outboundSchema =
    ImportsImportableResourceEntityState$outboundSchema;
}

/** @internal */
export const ImportsImportableResourceEntity$inboundSchema: z.ZodType<
  ImportsImportableResourceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  import_errors: z.array(ImportsImportErrorEntity$inboundSchema).optional(),
  imported_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  remote_id: z.string().optional(),
  state: ImportsImportableResourceEntityState$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "import_errors": "importErrors",
    "imported_at": "importedAt",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type ImportsImportableResourceEntity$Outbound = {
  import_errors?: Array<ImportsImportErrorEntity$Outbound> | undefined;
  imported_at?: string | undefined;
  remote_id?: string | undefined;
  state?: string | undefined;
};

/** @internal */
export const ImportsImportableResourceEntity$outboundSchema: z.ZodType<
  ImportsImportableResourceEntity$Outbound,
  z.ZodTypeDef,
  ImportsImportableResourceEntity
> = z.object({
  importErrors: z.array(ImportsImportErrorEntity$outboundSchema).optional(),
  importedAt: z.date().transform(v => v.toISOString()).optional(),
  remoteId: z.string().optional(),
  state: ImportsImportableResourceEntityState$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    importErrors: "import_errors",
    importedAt: "imported_at",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportsImportableResourceEntity$ {
  /** @deprecated use `ImportsImportableResourceEntity$inboundSchema` instead. */
  export const inboundSchema = ImportsImportableResourceEntity$inboundSchema;
  /** @deprecated use `ImportsImportableResourceEntity$outboundSchema` instead. */
  export const outboundSchema = ImportsImportableResourceEntity$outboundSchema;
  /** @deprecated use `ImportsImportableResourceEntity$Outbound` instead. */
  export type Outbound = ImportsImportableResourceEntity$Outbound;
}

export function importsImportableResourceEntityToJSON(
  importsImportableResourceEntity: ImportsImportableResourceEntity,
): string {
  return JSON.stringify(
    ImportsImportableResourceEntity$outboundSchema.parse(
      importsImportableResourceEntity,
    ),
  );
}

export function importsImportableResourceEntityFromJSON(
  jsonString: string,
): SafeParseResult<ImportsImportableResourceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportsImportableResourceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportsImportableResourceEntity' from JSON`,
  );
}
