/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RunbooksElementDynamicSelectEntitySelectOptionEntity,
  RunbooksElementDynamicSelectEntitySelectOptionEntity$inboundSchema,
  RunbooksElementDynamicSelectEntitySelectOptionEntity$Outbound,
  RunbooksElementDynamicSelectEntitySelectOptionEntity$outboundSchema,
} from "./runbookselementdynamicselectentityselectoptionentity.js";

export type RunbooksElementDynamicSelectEntity = {
  label?: string | undefined;
  placeholder?: string | undefined;
  asyncUrl?: string | undefined;
  required?: boolean | undefined;
  clearable?: boolean | undefined;
  isMulti?: boolean | undefined;
  defaultValue?:
    | RunbooksElementDynamicSelectEntitySelectOptionEntity
    | undefined;
  options?:
    | Array<RunbooksElementDynamicSelectEntitySelectOptionEntity>
    | undefined;
};

/** @internal */
export const RunbooksElementDynamicSelectEntity$inboundSchema: z.ZodType<
  RunbooksElementDynamicSelectEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  async_url: z.string().optional(),
  required: z.boolean().optional(),
  clearable: z.boolean().optional(),
  is_multi: z.boolean().optional(),
  default_value:
    RunbooksElementDynamicSelectEntitySelectOptionEntity$inboundSchema
      .optional(),
  options: z.array(
    RunbooksElementDynamicSelectEntitySelectOptionEntity$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "async_url": "asyncUrl",
    "is_multi": "isMulti",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type RunbooksElementDynamicSelectEntity$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  async_url?: string | undefined;
  required?: boolean | undefined;
  clearable?: boolean | undefined;
  is_multi?: boolean | undefined;
  default_value?:
    | RunbooksElementDynamicSelectEntitySelectOptionEntity$Outbound
    | undefined;
  options?:
    | Array<RunbooksElementDynamicSelectEntitySelectOptionEntity$Outbound>
    | undefined;
};

/** @internal */
export const RunbooksElementDynamicSelectEntity$outboundSchema: z.ZodType<
  RunbooksElementDynamicSelectEntity$Outbound,
  z.ZodTypeDef,
  RunbooksElementDynamicSelectEntity
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  asyncUrl: z.string().optional(),
  required: z.boolean().optional(),
  clearable: z.boolean().optional(),
  isMulti: z.boolean().optional(),
  defaultValue:
    RunbooksElementDynamicSelectEntitySelectOptionEntity$outboundSchema
      .optional(),
  options: z.array(
    RunbooksElementDynamicSelectEntitySelectOptionEntity$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    asyncUrl: "async_url",
    isMulti: "is_multi",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksElementDynamicSelectEntity$ {
  /** @deprecated use `RunbooksElementDynamicSelectEntity$inboundSchema` instead. */
  export const inboundSchema = RunbooksElementDynamicSelectEntity$inboundSchema;
  /** @deprecated use `RunbooksElementDynamicSelectEntity$outboundSchema` instead. */
  export const outboundSchema =
    RunbooksElementDynamicSelectEntity$outboundSchema;
  /** @deprecated use `RunbooksElementDynamicSelectEntity$Outbound` instead. */
  export type Outbound = RunbooksElementDynamicSelectEntity$Outbound;
}

export function runbooksElementDynamicSelectEntityToJSON(
  runbooksElementDynamicSelectEntity: RunbooksElementDynamicSelectEntity,
): string {
  return JSON.stringify(
    RunbooksElementDynamicSelectEntity$outboundSchema.parse(
      runbooksElementDynamicSelectEntity,
    ),
  );
}

export function runbooksElementDynamicSelectEntityFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksElementDynamicSelectEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunbooksElementDynamicSelectEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksElementDynamicSelectEntity' from JSON`,
  );
}
