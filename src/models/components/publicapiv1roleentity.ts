/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PublicApiv1PermissionEntity,
  PublicApiv1PermissionEntity$inboundSchema,
  PublicApiv1PermissionEntity$Outbound,
  PublicApiv1PermissionEntity$outboundSchema,
} from "./publicapiv1permissionentity.js";

/**
 * PublicAPI_V1_RoleEntity model
 */
export type PublicApiv1RoleEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  builtIn?: boolean | null | undefined;
  readOnly?: boolean | null | undefined;
  permissions?: Array<PublicApiv1PermissionEntity> | null | undefined;
};

/** @internal */
export const PublicApiv1RoleEntity$inboundSchema: z.ZodType<
  PublicApiv1RoleEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  built_in: z.nullable(z.boolean()).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  permissions: z.nullable(z.array(PublicApiv1PermissionEntity$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "built_in": "builtIn",
    "read_only": "readOnly",
  });
});

/** @internal */
export type PublicApiv1RoleEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  built_in?: boolean | null | undefined;
  read_only?: boolean | null | undefined;
  permissions?: Array<PublicApiv1PermissionEntity$Outbound> | null | undefined;
};

/** @internal */
export const PublicApiv1RoleEntity$outboundSchema: z.ZodType<
  PublicApiv1RoleEntity$Outbound,
  z.ZodTypeDef,
  PublicApiv1RoleEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  builtIn: z.nullable(z.boolean()).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  permissions: z.nullable(z.array(PublicApiv1PermissionEntity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    builtIn: "built_in",
    readOnly: "read_only",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicApiv1RoleEntity$ {
  /** @deprecated use `PublicApiv1RoleEntity$inboundSchema` instead. */
  export const inboundSchema = PublicApiv1RoleEntity$inboundSchema;
  /** @deprecated use `PublicApiv1RoleEntity$outboundSchema` instead. */
  export const outboundSchema = PublicApiv1RoleEntity$outboundSchema;
  /** @deprecated use `PublicApiv1RoleEntity$Outbound` instead. */
  export type Outbound = PublicApiv1RoleEntity$Outbound;
}

export function publicAPIV1RoleEntityToJSON(
  publicApiv1RoleEntity: PublicApiv1RoleEntity,
): string {
  return JSON.stringify(
    PublicApiv1RoleEntity$outboundSchema.parse(publicApiv1RoleEntity),
  );
}

export function publicAPIV1RoleEntityFromJSON(
  jsonString: string,
): SafeParseResult<PublicApiv1RoleEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicApiv1RoleEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicApiv1RoleEntity' from JSON`,
  );
}
