/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * SeverityEntity model
 */
export type SeverityEntity = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  position?: number | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  systemRecord?: boolean | null | undefined;
  color?: string | null | undefined;
};

/** @internal */
export const SeverityEntity$inboundSchema: z.ZodType<
  SeverityEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  system_record: z.nullable(z.boolean()).optional(),
  color: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "system_record": "systemRecord",
  });
});

/** @internal */
export type SeverityEntity$Outbound = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  position?: number | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  system_record?: boolean | null | undefined;
  color?: string | null | undefined;
};

/** @internal */
export const SeverityEntity$outboundSchema: z.ZodType<
  SeverityEntity$Outbound,
  z.ZodTypeDef,
  SeverityEntity
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  systemRecord: z.nullable(z.boolean()).optional(),
  color: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    systemRecord: "system_record",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeverityEntity$ {
  /** @deprecated use `SeverityEntity$inboundSchema` instead. */
  export const inboundSchema = SeverityEntity$inboundSchema;
  /** @deprecated use `SeverityEntity$outboundSchema` instead. */
  export const outboundSchema = SeverityEntity$outboundSchema;
  /** @deprecated use `SeverityEntity$Outbound` instead. */
  export type Outbound = SeverityEntity$Outbound;
}

export function severityEntityToJSON(severityEntity: SeverityEntity): string {
  return JSON.stringify(SeverityEntity$outboundSchema.parse(severityEntity));
}

export function severityEntityFromJSON(
  jsonString: string,
): SafeParseResult<SeverityEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeverityEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeverityEntity' from JSON`,
  );
}
