/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";

export const IntegrationsConnectionStatusEntityStatus = {
  Ok: "ok",
  Info: "info",
  Warning: "warning",
  Error: "error",
} as const;
export type IntegrationsConnectionStatusEntityStatus = ClosedEnum<
  typeof IntegrationsConnectionStatusEntityStatus
>;

/**
 * Additional unstructured data about the status check.
 */
export type IntegrationsConnectionStatusEntityData = {};

/**
 * Integrations_ConnectionStatusEntity model
 */
export type IntegrationsConnectionStatusEntity = {
  checkedAt?: Date | null | undefined;
  status?: IntegrationsConnectionStatusEntityStatus | null | undefined;
  message?: string | null | undefined;
  checkType?: string | null | undefined;
  errorType?: string | null | undefined;
  integrationSlug?: string | null | undefined;
  connectionId?: string | null | undefined;
  /**
   * Additional unstructured data about the status check.
   */
  data?: IntegrationsConnectionStatusEntityData | null | undefined;
  performedBy?: NullableAuthorEntity | null | undefined;
};

/** @internal */
export const IntegrationsConnectionStatusEntityStatus$inboundSchema:
  z.ZodNativeEnum<typeof IntegrationsConnectionStatusEntityStatus> = z
    .nativeEnum(IntegrationsConnectionStatusEntityStatus);

/** @internal */
export const IntegrationsConnectionStatusEntityStatus$outboundSchema:
  z.ZodNativeEnum<typeof IntegrationsConnectionStatusEntityStatus> =
    IntegrationsConnectionStatusEntityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsConnectionStatusEntityStatus$ {
  /** @deprecated use `IntegrationsConnectionStatusEntityStatus$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsConnectionStatusEntityStatus$inboundSchema;
  /** @deprecated use `IntegrationsConnectionStatusEntityStatus$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsConnectionStatusEntityStatus$outboundSchema;
}

/** @internal */
export const IntegrationsConnectionStatusEntityData$inboundSchema: z.ZodType<
  IntegrationsConnectionStatusEntityData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IntegrationsConnectionStatusEntityData$Outbound = {};

/** @internal */
export const IntegrationsConnectionStatusEntityData$outboundSchema: z.ZodType<
  IntegrationsConnectionStatusEntityData$Outbound,
  z.ZodTypeDef,
  IntegrationsConnectionStatusEntityData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsConnectionStatusEntityData$ {
  /** @deprecated use `IntegrationsConnectionStatusEntityData$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsConnectionStatusEntityData$inboundSchema;
  /** @deprecated use `IntegrationsConnectionStatusEntityData$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsConnectionStatusEntityData$outboundSchema;
  /** @deprecated use `IntegrationsConnectionStatusEntityData$Outbound` instead. */
  export type Outbound = IntegrationsConnectionStatusEntityData$Outbound;
}

export function integrationsConnectionStatusEntityDataToJSON(
  integrationsConnectionStatusEntityData:
    IntegrationsConnectionStatusEntityData,
): string {
  return JSON.stringify(
    IntegrationsConnectionStatusEntityData$outboundSchema.parse(
      integrationsConnectionStatusEntityData,
    ),
  );
}

export function integrationsConnectionStatusEntityDataFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsConnectionStatusEntityData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsConnectionStatusEntityData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsConnectionStatusEntityData' from JSON`,
  );
}

/** @internal */
export const IntegrationsConnectionStatusEntity$inboundSchema: z.ZodType<
  IntegrationsConnectionStatusEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  checked_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(IntegrationsConnectionStatusEntityStatus$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  check_type: z.nullable(z.string()).optional(),
  error_type: z.nullable(z.string()).optional(),
  integration_slug: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  data: z.nullable(
    z.lazy(() => IntegrationsConnectionStatusEntityData$inboundSchema),
  ).optional(),
  performed_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "checked_at": "checkedAt",
    "check_type": "checkType",
    "error_type": "errorType",
    "integration_slug": "integrationSlug",
    "connection_id": "connectionId",
    "performed_by": "performedBy",
  });
});

/** @internal */
export type IntegrationsConnectionStatusEntity$Outbound = {
  checked_at?: string | null | undefined;
  status?: string | null | undefined;
  message?: string | null | undefined;
  check_type?: string | null | undefined;
  error_type?: string | null | undefined;
  integration_slug?: string | null | undefined;
  connection_id?: string | null | undefined;
  data?: IntegrationsConnectionStatusEntityData$Outbound | null | undefined;
  performed_by?: NullableAuthorEntity$Outbound | null | undefined;
};

/** @internal */
export const IntegrationsConnectionStatusEntity$outboundSchema: z.ZodType<
  IntegrationsConnectionStatusEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsConnectionStatusEntity
> = z.object({
  checkedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(IntegrationsConnectionStatusEntityStatus$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  checkType: z.nullable(z.string()).optional(),
  errorType: z.nullable(z.string()).optional(),
  integrationSlug: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  data: z.nullable(
    z.lazy(() => IntegrationsConnectionStatusEntityData$outboundSchema),
  ).optional(),
  performedBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    checkedAt: "checked_at",
    checkType: "check_type",
    errorType: "error_type",
    integrationSlug: "integration_slug",
    connectionId: "connection_id",
    performedBy: "performed_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsConnectionStatusEntity$ {
  /** @deprecated use `IntegrationsConnectionStatusEntity$inboundSchema` instead. */
  export const inboundSchema = IntegrationsConnectionStatusEntity$inboundSchema;
  /** @deprecated use `IntegrationsConnectionStatusEntity$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsConnectionStatusEntity$outboundSchema;
  /** @deprecated use `IntegrationsConnectionStatusEntity$Outbound` instead. */
  export type Outbound = IntegrationsConnectionStatusEntity$Outbound;
}

export function integrationsConnectionStatusEntityToJSON(
  integrationsConnectionStatusEntity: IntegrationsConnectionStatusEntity,
): string {
  return JSON.stringify(
    IntegrationsConnectionStatusEntity$outboundSchema.parse(
      integrationsConnectionStatusEntity,
    ),
  );
}

export function integrationsConnectionStatusEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsConnectionStatusEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsConnectionStatusEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsConnectionStatusEntity' from JSON`,
  );
}
