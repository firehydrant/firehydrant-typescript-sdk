/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateScimGroupMember = {
  /**
   * String that represents the user's UUID to assign to the team
   */
  value: string;
};

/**
 * SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.
 */
export type UpdateScimGroup = {
  /**
   * The name of the team being updated
   */
  displayName: string;
  members: Array<UpdateScimGroupMember>;
};

/** @internal */
export const UpdateScimGroupMember$inboundSchema: z.ZodType<
  UpdateScimGroupMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type UpdateScimGroupMember$Outbound = {
  value: string;
};

/** @internal */
export const UpdateScimGroupMember$outboundSchema: z.ZodType<
  UpdateScimGroupMember$Outbound,
  z.ZodTypeDef,
  UpdateScimGroupMember
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimGroupMember$ {
  /** @deprecated use `UpdateScimGroupMember$inboundSchema` instead. */
  export const inboundSchema = UpdateScimGroupMember$inboundSchema;
  /** @deprecated use `UpdateScimGroupMember$outboundSchema` instead. */
  export const outboundSchema = UpdateScimGroupMember$outboundSchema;
  /** @deprecated use `UpdateScimGroupMember$Outbound` instead. */
  export type Outbound = UpdateScimGroupMember$Outbound;
}

export function updateScimGroupMemberToJSON(
  updateScimGroupMember: UpdateScimGroupMember,
): string {
  return JSON.stringify(
    UpdateScimGroupMember$outboundSchema.parse(updateScimGroupMember),
  );
}

export function updateScimGroupMemberFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimGroupMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimGroupMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimGroupMember' from JSON`,
  );
}

/** @internal */
export const UpdateScimGroup$inboundSchema: z.ZodType<
  UpdateScimGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => UpdateScimGroupMember$inboundSchema)),
});

/** @internal */
export type UpdateScimGroup$Outbound = {
  displayName: string;
  members: Array<UpdateScimGroupMember$Outbound>;
};

/** @internal */
export const UpdateScimGroup$outboundSchema: z.ZodType<
  UpdateScimGroup$Outbound,
  z.ZodTypeDef,
  UpdateScimGroup
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => UpdateScimGroupMember$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimGroup$ {
  /** @deprecated use `UpdateScimGroup$inboundSchema` instead. */
  export const inboundSchema = UpdateScimGroup$inboundSchema;
  /** @deprecated use `UpdateScimGroup$outboundSchema` instead. */
  export const outboundSchema = UpdateScimGroup$outboundSchema;
  /** @deprecated use `UpdateScimGroup$Outbound` instead. */
  export type Outbound = UpdateScimGroup$Outbound;
}

export function updateScimGroupToJSON(
  updateScimGroup: UpdateScimGroup,
): string {
  return JSON.stringify(UpdateScimGroup$outboundSchema.parse(updateScimGroup));
}

export function updateScimGroupFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimGroup' from JSON`,
  );
}
