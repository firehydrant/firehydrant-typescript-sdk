/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a new saved search for a particular resource type
 */
export type CreateSavedSearch = {
  name: string;
  isPrivate?: boolean | null | undefined;
  filterValues: { [k: string]: any };
};

/** @internal */
export const CreateSavedSearch$inboundSchema: z.ZodType<
  CreateSavedSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  is_private: z.nullable(z.boolean()).optional(),
  filter_values: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "is_private": "isPrivate",
    "filter_values": "filterValues",
  });
});

/** @internal */
export type CreateSavedSearch$Outbound = {
  name: string;
  is_private?: boolean | null | undefined;
  filter_values: { [k: string]: any };
};

/** @internal */
export const CreateSavedSearch$outboundSchema: z.ZodType<
  CreateSavedSearch$Outbound,
  z.ZodTypeDef,
  CreateSavedSearch
> = z.object({
  name: z.string(),
  isPrivate: z.nullable(z.boolean()).optional(),
  filterValues: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    isPrivate: "is_private",
    filterValues: "filter_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSavedSearch$ {
  /** @deprecated use `CreateSavedSearch$inboundSchema` instead. */
  export const inboundSchema = CreateSavedSearch$inboundSchema;
  /** @deprecated use `CreateSavedSearch$outboundSchema` instead. */
  export const outboundSchema = CreateSavedSearch$outboundSchema;
  /** @deprecated use `CreateSavedSearch$Outbound` instead. */
  export type Outbound = CreateSavedSearch$Outbound;
}

export function createSavedSearchToJSON(
  createSavedSearch: CreateSavedSearch,
): string {
  return JSON.stringify(
    CreateSavedSearch$outboundSchema.parse(createSavedSearch),
  );
}

export function createSavedSearchFromJSON(
  jsonString: string,
): SafeParseResult<CreateSavedSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSavedSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSavedSearch' from JSON`,
  );
}
