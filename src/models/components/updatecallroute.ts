/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Routing mode for the call route
 */
export const UpdateCallRouteRoutingMode = {
  RoutingModeTakeMessage: "ROUTING_MODE_TAKE_MESSAGE",
  RoutingModeDirectConnect: "ROUTING_MODE_DIRECT_CONNECT",
} as const;
/**
 * Routing mode for the call route
 */
export type UpdateCallRouteRoutingMode = ClosedEnum<
  typeof UpdateCallRouteRoutingMode
>;

/**
 * Connect mode for the call route
 */
export const UpdateCallRouteConnectMode = {
  ConnectModeConference: "CONNECT_MODE_CONFERENCE",
  ConnectModeDirectDial: "CONNECT_MODE_DIRECT_DIAL",
} as const;
/**
 * Connect mode for the call route
 */
export type UpdateCallRouteConnectMode = ClosedEnum<
  typeof UpdateCallRouteConnectMode
>;

/**
 * Type of target
 */
export const UpdateCallRouteTargetType = {
  User: "User",
  OnCallSchedule: "OnCallSchedule",
} as const;
/**
 * Type of target
 */
export type UpdateCallRouteTargetType = ClosedEnum<
  typeof UpdateCallRouteTargetType
>;

export type UpdateCallRouteStep = {
  /**
   * Type of target
   */
  targetType: UpdateCallRouteTargetType;
  /**
   * ID of the target
   */
  targetId: string;
  /**
   * Timeout in seconds for the step
   */
  timeout: string;
};

/**
 * Type of target
 */
export const UpdateCallRouteType = {
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  Webhook: "Webhook",
  SlackChannel: "SlackChannel",
  MicrosoftTeamsChannel: "MicrosoftTeamsChannel",
} as const;
/**
 * Type of target
 */
export type UpdateCallRouteType = ClosedEnum<typeof UpdateCallRouteType>;

/**
 * Target for the call route (required unless connect_mode is direct_dial)
 */
export type UpdateCallRouteTarget = {
  /**
   * Type of target
   */
  type: UpdateCallRouteType;
  /**
   * ID of the target
   */
  id: string;
};

/**
 * Update a call route by ID
 */
export type UpdateCallRoute = {
  /**
   * Name of the call route
   */
  name?: string | null | undefined;
  /**
   * Routing mode for the call route
   */
  routingMode?: UpdateCallRouteRoutingMode | null | undefined;
  /**
   * Connect mode for the call route
   */
  connectMode?: UpdateCallRouteConnectMode | null | undefined;
  /**
   * Description of the call route
   */
  description?: string | null | undefined;
  /**
   * Greeting message for the call route
   */
  greetingMessage?: string | null | undefined;
  /**
   * Steps for the call route
   */
  steps?: Array<UpdateCallRouteStep> | null | undefined;
  /**
   * Target for the call route (required unless connect_mode is direct_dial)
   */
  target?: UpdateCallRouteTarget | null | undefined;
};

/** @internal */
export const UpdateCallRouteRoutingMode$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteRoutingMode
> = z.nativeEnum(UpdateCallRouteRoutingMode);

/** @internal */
export const UpdateCallRouteRoutingMode$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteRoutingMode
> = UpdateCallRouteRoutingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRouteRoutingMode$ {
  /** @deprecated use `UpdateCallRouteRoutingMode$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRouteRoutingMode$inboundSchema;
  /** @deprecated use `UpdateCallRouteRoutingMode$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRouteRoutingMode$outboundSchema;
}

/** @internal */
export const UpdateCallRouteConnectMode$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteConnectMode
> = z.nativeEnum(UpdateCallRouteConnectMode);

/** @internal */
export const UpdateCallRouteConnectMode$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteConnectMode
> = UpdateCallRouteConnectMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRouteConnectMode$ {
  /** @deprecated use `UpdateCallRouteConnectMode$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRouteConnectMode$inboundSchema;
  /** @deprecated use `UpdateCallRouteConnectMode$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRouteConnectMode$outboundSchema;
}

/** @internal */
export const UpdateCallRouteTargetType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteTargetType
> = z.nativeEnum(UpdateCallRouteTargetType);

/** @internal */
export const UpdateCallRouteTargetType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteTargetType
> = UpdateCallRouteTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRouteTargetType$ {
  /** @deprecated use `UpdateCallRouteTargetType$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRouteTargetType$inboundSchema;
  /** @deprecated use `UpdateCallRouteTargetType$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRouteTargetType$outboundSchema;
}

/** @internal */
export const UpdateCallRouteStep$inboundSchema: z.ZodType<
  UpdateCallRouteStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: UpdateCallRouteTargetType$inboundSchema,
  target_id: z.string(),
  timeout: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type UpdateCallRouteStep$Outbound = {
  target_type: string;
  target_id: string;
  timeout: string;
};

/** @internal */
export const UpdateCallRouteStep$outboundSchema: z.ZodType<
  UpdateCallRouteStep$Outbound,
  z.ZodTypeDef,
  UpdateCallRouteStep
> = z.object({
  targetType: UpdateCallRouteTargetType$outboundSchema,
  targetId: z.string(),
  timeout: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRouteStep$ {
  /** @deprecated use `UpdateCallRouteStep$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRouteStep$inboundSchema;
  /** @deprecated use `UpdateCallRouteStep$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRouteStep$outboundSchema;
  /** @deprecated use `UpdateCallRouteStep$Outbound` instead. */
  export type Outbound = UpdateCallRouteStep$Outbound;
}

export function updateCallRouteStepToJSON(
  updateCallRouteStep: UpdateCallRouteStep,
): string {
  return JSON.stringify(
    UpdateCallRouteStep$outboundSchema.parse(updateCallRouteStep),
  );
}

export function updateCallRouteStepFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCallRouteStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCallRouteStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCallRouteStep' from JSON`,
  );
}

/** @internal */
export const UpdateCallRouteType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteType
> = z.nativeEnum(UpdateCallRouteType);

/** @internal */
export const UpdateCallRouteType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCallRouteType
> = UpdateCallRouteType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRouteType$ {
  /** @deprecated use `UpdateCallRouteType$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRouteType$inboundSchema;
  /** @deprecated use `UpdateCallRouteType$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRouteType$outboundSchema;
}

/** @internal */
export const UpdateCallRouteTarget$inboundSchema: z.ZodType<
  UpdateCallRouteTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateCallRouteType$inboundSchema,
  id: z.string(),
});

/** @internal */
export type UpdateCallRouteTarget$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const UpdateCallRouteTarget$outboundSchema: z.ZodType<
  UpdateCallRouteTarget$Outbound,
  z.ZodTypeDef,
  UpdateCallRouteTarget
> = z.object({
  type: UpdateCallRouteType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRouteTarget$ {
  /** @deprecated use `UpdateCallRouteTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRouteTarget$inboundSchema;
  /** @deprecated use `UpdateCallRouteTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRouteTarget$outboundSchema;
  /** @deprecated use `UpdateCallRouteTarget$Outbound` instead. */
  export type Outbound = UpdateCallRouteTarget$Outbound;
}

export function updateCallRouteTargetToJSON(
  updateCallRouteTarget: UpdateCallRouteTarget,
): string {
  return JSON.stringify(
    UpdateCallRouteTarget$outboundSchema.parse(updateCallRouteTarget),
  );
}

export function updateCallRouteTargetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCallRouteTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCallRouteTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCallRouteTarget' from JSON`,
  );
}

/** @internal */
export const UpdateCallRoute$inboundSchema: z.ZodType<
  UpdateCallRoute,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  routing_mode: z.nullable(UpdateCallRouteRoutingMode$inboundSchema).optional(),
  connect_mode: z.nullable(UpdateCallRouteConnectMode$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  greeting_message: z.nullable(z.string()).optional(),
  steps: z.nullable(z.array(z.lazy(() => UpdateCallRouteStep$inboundSchema)))
    .optional(),
  target: z.nullable(z.lazy(() => UpdateCallRouteTarget$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "routing_mode": "routingMode",
    "connect_mode": "connectMode",
    "greeting_message": "greetingMessage",
  });
});

/** @internal */
export type UpdateCallRoute$Outbound = {
  name?: string | null | undefined;
  routing_mode?: string | null | undefined;
  connect_mode?: string | null | undefined;
  description?: string | null | undefined;
  greeting_message?: string | null | undefined;
  steps?: Array<UpdateCallRouteStep$Outbound> | null | undefined;
  target?: UpdateCallRouteTarget$Outbound | null | undefined;
};

/** @internal */
export const UpdateCallRoute$outboundSchema: z.ZodType<
  UpdateCallRoute$Outbound,
  z.ZodTypeDef,
  UpdateCallRoute
> = z.object({
  name: z.nullable(z.string()).optional(),
  routingMode: z.nullable(UpdateCallRouteRoutingMode$outboundSchema).optional(),
  connectMode: z.nullable(UpdateCallRouteConnectMode$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  greetingMessage: z.nullable(z.string()).optional(),
  steps: z.nullable(z.array(z.lazy(() => UpdateCallRouteStep$outboundSchema)))
    .optional(),
  target: z.nullable(z.lazy(() => UpdateCallRouteTarget$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    routingMode: "routing_mode",
    connectMode: "connect_mode",
    greetingMessage: "greeting_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCallRoute$ {
  /** @deprecated use `UpdateCallRoute$inboundSchema` instead. */
  export const inboundSchema = UpdateCallRoute$inboundSchema;
  /** @deprecated use `UpdateCallRoute$outboundSchema` instead. */
  export const outboundSchema = UpdateCallRoute$outboundSchema;
  /** @deprecated use `UpdateCallRoute$Outbound` instead. */
  export type Outbound = UpdateCallRoute$Outbound;
}

export function updateCallRouteToJSON(
  updateCallRoute: UpdateCallRoute,
): string {
  return JSON.stringify(UpdateCallRoute$outboundSchema.parse(updateCallRoute));
}

export function updateCallRouteFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCallRoute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCallRoute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCallRoute' from JSON`,
  );
}
