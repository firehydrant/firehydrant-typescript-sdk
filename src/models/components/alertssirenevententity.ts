/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The event's payload
 */
export type AlertsSirenEventEntityData = {};

export type AlertsSirenEventEntity = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  /**
   * The event's payload
   */
  data?: AlertsSirenEventEntityData | null | undefined;
  createdAt?: Date | null | undefined;
};

/** @internal */
export const AlertsSirenEventEntityData$inboundSchema: z.ZodType<
  AlertsSirenEventEntityData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AlertsSirenEventEntityData$Outbound = {};

/** @internal */
export const AlertsSirenEventEntityData$outboundSchema: z.ZodType<
  AlertsSirenEventEntityData$Outbound,
  z.ZodTypeDef,
  AlertsSirenEventEntityData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertsSirenEventEntityData$ {
  /** @deprecated use `AlertsSirenEventEntityData$inboundSchema` instead. */
  export const inboundSchema = AlertsSirenEventEntityData$inboundSchema;
  /** @deprecated use `AlertsSirenEventEntityData$outboundSchema` instead. */
  export const outboundSchema = AlertsSirenEventEntityData$outboundSchema;
  /** @deprecated use `AlertsSirenEventEntityData$Outbound` instead. */
  export type Outbound = AlertsSirenEventEntityData$Outbound;
}

export function alertsSirenEventEntityDataToJSON(
  alertsSirenEventEntityData: AlertsSirenEventEntityData,
): string {
  return JSON.stringify(
    AlertsSirenEventEntityData$outboundSchema.parse(alertsSirenEventEntityData),
  );
}

export function alertsSirenEventEntityDataFromJSON(
  jsonString: string,
): SafeParseResult<AlertsSirenEventEntityData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertsSirenEventEntityData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertsSirenEventEntityData' from JSON`,
  );
}

/** @internal */
export const AlertsSirenEventEntity$inboundSchema: z.ZodType<
  AlertsSirenEventEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  data: z.nullable(z.lazy(() => AlertsSirenEventEntityData$inboundSchema))
    .optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type AlertsSirenEventEntity$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  data?: AlertsSirenEventEntityData$Outbound | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const AlertsSirenEventEntity$outboundSchema: z.ZodType<
  AlertsSirenEventEntity$Outbound,
  z.ZodTypeDef,
  AlertsSirenEventEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  data: z.nullable(z.lazy(() => AlertsSirenEventEntityData$outboundSchema))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertsSirenEventEntity$ {
  /** @deprecated use `AlertsSirenEventEntity$inboundSchema` instead. */
  export const inboundSchema = AlertsSirenEventEntity$inboundSchema;
  /** @deprecated use `AlertsSirenEventEntity$outboundSchema` instead. */
  export const outboundSchema = AlertsSirenEventEntity$outboundSchema;
  /** @deprecated use `AlertsSirenEventEntity$Outbound` instead. */
  export type Outbound = AlertsSirenEventEntity$Outbound;
}

export function alertsSirenEventEntityToJSON(
  alertsSirenEventEntity: AlertsSirenEventEntity,
): string {
  return JSON.stringify(
    AlertsSirenEventEntity$outboundSchema.parse(alertsSirenEventEntity),
  );
}

export function alertsSirenEventEntityFromJSON(
  jsonString: string,
): SafeParseResult<AlertsSirenEventEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertsSirenEventEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertsSirenEventEntity' from JSON`,
  );
}
