/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Creates an environment for the organization
 */
export type CreateEnvironment = {
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const CreateEnvironment$inboundSchema: z.ZodType<
  CreateEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateEnvironment$Outbound = {
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const CreateEnvironment$outboundSchema: z.ZodType<
  CreateEnvironment$Outbound,
  z.ZodTypeDef,
  CreateEnvironment
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvironment$ {
  /** @deprecated use `CreateEnvironment$inboundSchema` instead. */
  export const inboundSchema = CreateEnvironment$inboundSchema;
  /** @deprecated use `CreateEnvironment$outboundSchema` instead. */
  export const outboundSchema = CreateEnvironment$outboundSchema;
  /** @deprecated use `CreateEnvironment$Outbound` instead. */
  export type Outbound = CreateEnvironment$Outbound;
}

export function createEnvironmentToJSON(
  createEnvironment: CreateEnvironment,
): string {
  return JSON.stringify(
    CreateEnvironment$outboundSchema.parse(createEnvironment),
  );
}

export function createEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvironment' from JSON`,
  );
}
