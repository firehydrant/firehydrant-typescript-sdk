/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Alerts_SignalAlertEntity model
 */
export type AlertsSignalAlertEntity = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  isNoise?: boolean | null | undefined;
};

/** @internal */
export const AlertsSignalAlertEntity$inboundSchema: z.ZodType<
  AlertsSignalAlertEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  is_noise: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_noise": "isNoise",
  });
});

/** @internal */
export type AlertsSignalAlertEntity$Outbound = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  is_noise?: boolean | null | undefined;
};

/** @internal */
export const AlertsSignalAlertEntity$outboundSchema: z.ZodType<
  AlertsSignalAlertEntity$Outbound,
  z.ZodTypeDef,
  AlertsSignalAlertEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  isNoise: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    isNoise: "is_noise",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertsSignalAlertEntity$ {
  /** @deprecated use `AlertsSignalAlertEntity$inboundSchema` instead. */
  export const inboundSchema = AlertsSignalAlertEntity$inboundSchema;
  /** @deprecated use `AlertsSignalAlertEntity$outboundSchema` instead. */
  export const outboundSchema = AlertsSignalAlertEntity$outboundSchema;
  /** @deprecated use `AlertsSignalAlertEntity$Outbound` instead. */
  export type Outbound = AlertsSignalAlertEntity$Outbound;
}

export function alertsSignalAlertEntityToJSON(
  alertsSignalAlertEntity: AlertsSignalAlertEntity,
): string {
  return JSON.stringify(
    AlertsSignalAlertEntity$outboundSchema.parse(alertsSignalAlertEntity),
  );
}

export function alertsSignalAlertEntityFromJSON(
  jsonString: string,
): SafeParseResult<AlertsSignalAlertEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertsSignalAlertEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertsSignalAlertEntity' from JSON`,
  );
}
