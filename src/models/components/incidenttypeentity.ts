/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentTypeEntityTemplateEntity,
  IncidentTypeEntityTemplateEntity$inboundSchema,
  IncidentTypeEntityTemplateEntity$Outbound,
  IncidentTypeEntityTemplateEntity$outboundSchema,
} from "./incidenttypeentitytemplateentity.js";
import {
  IncidentTypeEntityTemplateValuesEntity,
  IncidentTypeEntityTemplateValuesEntity$inboundSchema,
  IncidentTypeEntityTemplateValuesEntity$Outbound,
  IncidentTypeEntityTemplateValuesEntity$outboundSchema,
} from "./incidenttypeentitytemplatevaluesentity.js";

/**
 * IncidentTypeEntity model
 */
export type IncidentTypeEntity = {
  id?: string | undefined;
  name?: string | undefined;
  template?: IncidentTypeEntityTemplateEntity | undefined;
  templateValues?: IncidentTypeEntityTemplateValuesEntity | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const IncidentTypeEntity$inboundSchema: z.ZodType<
  IncidentTypeEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  template: IncidentTypeEntityTemplateEntity$inboundSchema.optional(),
  template_values: IncidentTypeEntityTemplateValuesEntity$inboundSchema
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "template_values": "templateValues",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type IncidentTypeEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  template?: IncidentTypeEntityTemplateEntity$Outbound | undefined;
  template_values?: IncidentTypeEntityTemplateValuesEntity$Outbound | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const IncidentTypeEntity$outboundSchema: z.ZodType<
  IncidentTypeEntity$Outbound,
  z.ZodTypeDef,
  IncidentTypeEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  template: IncidentTypeEntityTemplateEntity$outboundSchema.optional(),
  templateValues: IncidentTypeEntityTemplateValuesEntity$outboundSchema
    .optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    templateValues: "template_values",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentTypeEntity$ {
  /** @deprecated use `IncidentTypeEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentTypeEntity$inboundSchema;
  /** @deprecated use `IncidentTypeEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentTypeEntity$outboundSchema;
  /** @deprecated use `IncidentTypeEntity$Outbound` instead. */
  export type Outbound = IncidentTypeEntity$Outbound;
}

export function incidentTypeEntityToJSON(
  incidentTypeEntity: IncidentTypeEntity,
): string {
  return JSON.stringify(
    IncidentTypeEntity$outboundSchema.parse(incidentTypeEntity),
  );
}

export function incidentTypeEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentTypeEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentTypeEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentTypeEntity' from JSON`,
  );
}
