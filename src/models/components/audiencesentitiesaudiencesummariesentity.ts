/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Audiences_Entities_AudienceSummariesEntity model
 */
export type AudiencesEntitiesAudienceSummariesEntity = {
  incidentId?: string | null | undefined;
  /**
   * JSON-encoded map of audience summaries
   */
  audiences?: string | null | undefined;
};

/** @internal */
export const AudiencesEntitiesAudienceSummariesEntity$inboundSchema: z.ZodType<
  AudiencesEntitiesAudienceSummariesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.nullable(z.string()).optional(),
  audiences: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
  });
});

/** @internal */
export type AudiencesEntitiesAudienceSummariesEntity$Outbound = {
  incident_id?: string | null | undefined;
  audiences?: string | null | undefined;
};

/** @internal */
export const AudiencesEntitiesAudienceSummariesEntity$outboundSchema: z.ZodType<
  AudiencesEntitiesAudienceSummariesEntity$Outbound,
  z.ZodTypeDef,
  AudiencesEntitiesAudienceSummariesEntity
> = z.object({
  incidentId: z.nullable(z.string()).optional(),
  audiences: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AudiencesEntitiesAudienceSummariesEntity$ {
  /** @deprecated use `AudiencesEntitiesAudienceSummariesEntity$inboundSchema` instead. */
  export const inboundSchema =
    AudiencesEntitiesAudienceSummariesEntity$inboundSchema;
  /** @deprecated use `AudiencesEntitiesAudienceSummariesEntity$outboundSchema` instead. */
  export const outboundSchema =
    AudiencesEntitiesAudienceSummariesEntity$outboundSchema;
  /** @deprecated use `AudiencesEntitiesAudienceSummariesEntity$Outbound` instead. */
  export type Outbound = AudiencesEntitiesAudienceSummariesEntity$Outbound;
}

export function audiencesEntitiesAudienceSummariesEntityToJSON(
  audiencesEntitiesAudienceSummariesEntity:
    AudiencesEntitiesAudienceSummariesEntity,
): string {
  return JSON.stringify(
    AudiencesEntitiesAudienceSummariesEntity$outboundSchema.parse(
      audiencesEntitiesAudienceSummariesEntity,
    ),
  );
}

export function audiencesEntitiesAudienceSummariesEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  AudiencesEntitiesAudienceSummariesEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AudiencesEntitiesAudienceSummariesEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AudiencesEntitiesAudienceSummariesEntity' from JSON`,
  );
}
