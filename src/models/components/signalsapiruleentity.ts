/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  SignalsAPITargetEntity,
  SignalsAPITargetEntity$inboundSchema,
  SignalsAPITargetEntity$Outbound,
  SignalsAPITargetEntity$outboundSchema,
} from "./signalsapitargetentity.js";
import {
  SuccinctEntity,
  SuccinctEntity$inboundSchema,
  SuccinctEntity$Outbound,
  SuccinctEntity$outboundSchema,
} from "./succinctentity.js";

export const NotificationPriorityOverride = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
} as const;
export type NotificationPriorityOverride = ClosedEnum<
  typeof NotificationPriorityOverride
>;

export type SignalsAPIRuleEntity = {
  id?: string | undefined;
  name?: string | undefined;
  expression?: string | undefined;
  teamId?: string | undefined;
  target?: SignalsAPITargetEntity | undefined;
  createdBy?: AuthorEntity | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  incidentType?: SuccinctEntity | undefined;
  notificationPriorityOverride?: NotificationPriorityOverride | undefined;
};

/** @internal */
export const NotificationPriorityOverride$inboundSchema: z.ZodNativeEnum<
  typeof NotificationPriorityOverride
> = z.nativeEnum(NotificationPriorityOverride);

/** @internal */
export const NotificationPriorityOverride$outboundSchema: z.ZodNativeEnum<
  typeof NotificationPriorityOverride
> = NotificationPriorityOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationPriorityOverride$ {
  /** @deprecated use `NotificationPriorityOverride$inboundSchema` instead. */
  export const inboundSchema = NotificationPriorityOverride$inboundSchema;
  /** @deprecated use `NotificationPriorityOverride$outboundSchema` instead. */
  export const outboundSchema = NotificationPriorityOverride$outboundSchema;
}

/** @internal */
export const SignalsAPIRuleEntity$inboundSchema: z.ZodType<
  SignalsAPIRuleEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  expression: z.string().optional(),
  team_id: z.string().optional(),
  target: SignalsAPITargetEntity$inboundSchema.optional(),
  created_by: AuthorEntity$inboundSchema.optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  incident_type: SuccinctEntity$inboundSchema.optional(),
  notification_priority_override: NotificationPriorityOverride$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "incident_type": "incidentType",
    "notification_priority_override": "notificationPriorityOverride",
  });
});

/** @internal */
export type SignalsAPIRuleEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  expression?: string | undefined;
  team_id?: string | undefined;
  target?: SignalsAPITargetEntity$Outbound | undefined;
  created_by?: AuthorEntity$Outbound | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  incident_type?: SuccinctEntity$Outbound | undefined;
  notification_priority_override?: string | undefined;
};

/** @internal */
export const SignalsAPIRuleEntity$outboundSchema: z.ZodType<
  SignalsAPIRuleEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIRuleEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  expression: z.string().optional(),
  teamId: z.string().optional(),
  target: SignalsAPITargetEntity$outboundSchema.optional(),
  createdBy: AuthorEntity$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  incidentType: SuccinctEntity$outboundSchema.optional(),
  notificationPriorityOverride: NotificationPriorityOverride$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
    incidentType: "incident_type",
    notificationPriorityOverride: "notification_priority_override",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIRuleEntity$ {
  /** @deprecated use `SignalsAPIRuleEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPIRuleEntity$inboundSchema;
  /** @deprecated use `SignalsAPIRuleEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPIRuleEntity$outboundSchema;
  /** @deprecated use `SignalsAPIRuleEntity$Outbound` instead. */
  export type Outbound = SignalsAPIRuleEntity$Outbound;
}

export function signalsAPIRuleEntityToJSON(
  signalsAPIRuleEntity: SignalsAPIRuleEntity,
): string {
  return JSON.stringify(
    SignalsAPIRuleEntity$outboundSchema.parse(signalsAPIRuleEntity),
  );
}

export function signalsAPIRuleEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIRuleEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPIRuleEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIRuleEntity' from JSON`,
  );
}
