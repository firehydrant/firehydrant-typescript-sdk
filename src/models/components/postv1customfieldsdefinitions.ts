/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a new custom field definition
 */
export type PostV1CustomFieldsDefinitions = {
  displayName: string;
  description?: string | undefined;
  fieldType: string;
  permissibleValues?: Array<string> | undefined;
  required: boolean;
  /**
   * An optional milestone ID to specify when the field should become required, if `required` is set to `true`. If not provided, required fields are always required.
   */
  requiredAtMilestoneId?: string | undefined;
};

/** @internal */
export const PostV1CustomFieldsDefinitions$inboundSchema: z.ZodType<
  PostV1CustomFieldsDefinitions,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  description: z.string().optional(),
  field_type: z.string(),
  permissible_values: z.array(z.string()).optional(),
  required: z.boolean(),
  required_at_milestone_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "field_type": "fieldType",
    "permissible_values": "permissibleValues",
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type PostV1CustomFieldsDefinitions$Outbound = {
  display_name: string;
  description?: string | undefined;
  field_type: string;
  permissible_values?: Array<string> | undefined;
  required: boolean;
  required_at_milestone_id?: string | undefined;
};

/** @internal */
export const PostV1CustomFieldsDefinitions$outboundSchema: z.ZodType<
  PostV1CustomFieldsDefinitions$Outbound,
  z.ZodTypeDef,
  PostV1CustomFieldsDefinitions
> = z.object({
  displayName: z.string(),
  description: z.string().optional(),
  fieldType: z.string(),
  permissibleValues: z.array(z.string()).optional(),
  required: z.boolean(),
  requiredAtMilestoneId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    fieldType: "field_type",
    permissibleValues: "permissible_values",
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CustomFieldsDefinitions$ {
  /** @deprecated use `PostV1CustomFieldsDefinitions$inboundSchema` instead. */
  export const inboundSchema = PostV1CustomFieldsDefinitions$inboundSchema;
  /** @deprecated use `PostV1CustomFieldsDefinitions$outboundSchema` instead. */
  export const outboundSchema = PostV1CustomFieldsDefinitions$outboundSchema;
  /** @deprecated use `PostV1CustomFieldsDefinitions$Outbound` instead. */
  export type Outbound = PostV1CustomFieldsDefinitions$Outbound;
}

export function postV1CustomFieldsDefinitionsToJSON(
  postV1CustomFieldsDefinitions: PostV1CustomFieldsDefinitions,
): string {
  return JSON.stringify(
    PostV1CustomFieldsDefinitions$outboundSchema.parse(
      postV1CustomFieldsDefinitions,
    ),
  );
}

export function postV1CustomFieldsDefinitionsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CustomFieldsDefinitions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CustomFieldsDefinitions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CustomFieldsDefinitions' from JSON`,
  );
}
