/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentsRetrospectiveEntitySectionEntity = {
  slug?: string | null | undefined;
  elements?: Array<string> | null | undefined;
};

/** @internal */
export const IncidentsRetrospectiveEntitySectionEntity$inboundSchema: z.ZodType<
  IncidentsRetrospectiveEntitySectionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.nullable(z.string()).optional(),
  elements: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type IncidentsRetrospectiveEntitySectionEntity$Outbound = {
  slug?: string | null | undefined;
  elements?: Array<string> | null | undefined;
};

/** @internal */
export const IncidentsRetrospectiveEntitySectionEntity$outboundSchema:
  z.ZodType<
    IncidentsRetrospectiveEntitySectionEntity$Outbound,
    z.ZodTypeDef,
    IncidentsRetrospectiveEntitySectionEntity
  > = z.object({
    slug: z.nullable(z.string()).optional(),
    elements: z.nullable(z.array(z.string())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRetrospectiveEntitySectionEntity$ {
  /** @deprecated use `IncidentsRetrospectiveEntitySectionEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsRetrospectiveEntitySectionEntity$inboundSchema;
  /** @deprecated use `IncidentsRetrospectiveEntitySectionEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsRetrospectiveEntitySectionEntity$outboundSchema;
  /** @deprecated use `IncidentsRetrospectiveEntitySectionEntity$Outbound` instead. */
  export type Outbound = IncidentsRetrospectiveEntitySectionEntity$Outbound;
}

export function incidentsRetrospectiveEntitySectionEntityToJSON(
  incidentsRetrospectiveEntitySectionEntity:
    IncidentsRetrospectiveEntitySectionEntity,
): string {
  return JSON.stringify(
    IncidentsRetrospectiveEntitySectionEntity$outboundSchema.parse(
      incidentsRetrospectiveEntitySectionEntity,
    ),
  );
}

export function incidentsRetrospectiveEntitySectionEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  IncidentsRetrospectiveEntitySectionEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentsRetrospectiveEntitySectionEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncidentsRetrospectiveEntitySectionEntity' from JSON`,
  );
}
