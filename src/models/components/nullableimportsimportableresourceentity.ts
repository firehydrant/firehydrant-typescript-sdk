/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ImportsImportErrorEntity,
  ImportsImportErrorEntity$inboundSchema,
  ImportsImportErrorEntity$Outbound,
  ImportsImportErrorEntity$outboundSchema,
} from "./importsimporterrorentity.js";

export const NullableImportsImportableResourceEntityState = {
  Selected: "selected",
  Skipped: "skipped",
  Imported: "imported",
  Errored: "errored",
} as const;
export type NullableImportsImportableResourceEntityState = ClosedEnum<
  typeof NullableImportsImportableResourceEntityState
>;

export type NullableImportsImportableResourceEntity = {
  importErrors?: Array<ImportsImportErrorEntity> | null | undefined;
  importedAt?: Date | null | undefined;
  remoteId?: string | null | undefined;
  state?: NullableImportsImportableResourceEntityState | null | undefined;
};

/** @internal */
export const NullableImportsImportableResourceEntityState$inboundSchema:
  z.ZodNativeEnum<typeof NullableImportsImportableResourceEntityState> = z
    .nativeEnum(NullableImportsImportableResourceEntityState);

/** @internal */
export const NullableImportsImportableResourceEntityState$outboundSchema:
  z.ZodNativeEnum<typeof NullableImportsImportableResourceEntityState> =
    NullableImportsImportableResourceEntityState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableImportsImportableResourceEntityState$ {
  /** @deprecated use `NullableImportsImportableResourceEntityState$inboundSchema` instead. */
  export const inboundSchema =
    NullableImportsImportableResourceEntityState$inboundSchema;
  /** @deprecated use `NullableImportsImportableResourceEntityState$outboundSchema` instead. */
  export const outboundSchema =
    NullableImportsImportableResourceEntityState$outboundSchema;
}

/** @internal */
export const NullableImportsImportableResourceEntity$inboundSchema: z.ZodType<
  NullableImportsImportableResourceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  import_errors: z.nullable(z.array(ImportsImportErrorEntity$inboundSchema))
    .optional(),
  imported_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_id: z.nullable(z.string()).optional(),
  state: z.nullable(NullableImportsImportableResourceEntityState$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "import_errors": "importErrors",
    "imported_at": "importedAt",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type NullableImportsImportableResourceEntity$Outbound = {
  import_errors?: Array<ImportsImportErrorEntity$Outbound> | null | undefined;
  imported_at?: string | null | undefined;
  remote_id?: string | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const NullableImportsImportableResourceEntity$outboundSchema: z.ZodType<
  NullableImportsImportableResourceEntity$Outbound,
  z.ZodTypeDef,
  NullableImportsImportableResourceEntity
> = z.object({
  importErrors: z.nullable(z.array(ImportsImportErrorEntity$outboundSchema))
    .optional(),
  importedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  remoteId: z.nullable(z.string()).optional(),
  state: z.nullable(NullableImportsImportableResourceEntityState$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    importErrors: "import_errors",
    importedAt: "imported_at",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableImportsImportableResourceEntity$ {
  /** @deprecated use `NullableImportsImportableResourceEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableImportsImportableResourceEntity$inboundSchema;
  /** @deprecated use `NullableImportsImportableResourceEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableImportsImportableResourceEntity$outboundSchema;
  /** @deprecated use `NullableImportsImportableResourceEntity$Outbound` instead. */
  export type Outbound = NullableImportsImportableResourceEntity$Outbound;
}

export function nullableImportsImportableResourceEntityToJSON(
  nullableImportsImportableResourceEntity:
    NullableImportsImportableResourceEntity,
): string {
  return JSON.stringify(
    NullableImportsImportableResourceEntity$outboundSchema.parse(
      nullableImportsImportableResourceEntity,
    ),
  );
}

export function nullableImportsImportableResourceEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableImportsImportableResourceEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableImportsImportableResourceEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableImportsImportableResourceEntity' from JSON`,
  );
}
