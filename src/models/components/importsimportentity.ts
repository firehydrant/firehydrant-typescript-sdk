/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const State = {
  Preprocessing: "preprocessing",
  ReadyForImport: "ready_for_import",
  Importing: "importing",
  Completed: "completed",
} as const;
export type State = ClosedEnum<typeof State>;

/**
 * Imports_ImportEntity model
 */
export type ImportsImportEntity = {
  state?: State | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const ImportsImportEntity$inboundSchema: z.ZodType<
  ImportsImportEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: State$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ImportsImportEntity$Outbound = {
  state?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const ImportsImportEntity$outboundSchema: z.ZodType<
  ImportsImportEntity$Outbound,
  z.ZodTypeDef,
  ImportsImportEntity
> = z.object({
  state: State$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportsImportEntity$ {
  /** @deprecated use `ImportsImportEntity$inboundSchema` instead. */
  export const inboundSchema = ImportsImportEntity$inboundSchema;
  /** @deprecated use `ImportsImportEntity$outboundSchema` instead. */
  export const outboundSchema = ImportsImportEntity$outboundSchema;
  /** @deprecated use `ImportsImportEntity$Outbound` instead. */
  export type Outbound = ImportsImportEntity$Outbound;
}

export function importsImportEntityToJSON(
  importsImportEntity: ImportsImportEntity,
): string {
  return JSON.stringify(
    ImportsImportEntity$outboundSchema.parse(importsImportEntity),
  );
}

export function importsImportEntityFromJSON(
  jsonString: string,
): SafeParseResult<ImportsImportEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportsImportEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportsImportEntity' from JSON`,
  );
}
