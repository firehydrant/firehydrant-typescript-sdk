/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchV1ChangesEventsChangeEventIdType = {
  Link: "link",
} as const;
export type PatchV1ChangesEventsChangeEventIdType = ClosedEnum<
  typeof PatchV1ChangesEventsChangeEventIdType
>;

export type PatchV1ChangesEventsChangeEventIdAttachments = {
  type: PatchV1ChangesEventsChangeEventIdType;
};

/**
 * Update a change event
 */
export type PatchV1ChangesEventsChangeEventId = {
  summary?: string | undefined;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  startsAt?: Date | undefined;
  endsAt?: Date | undefined;
  /**
   * An array of environment IDs (setting this will overwrite the current environments)
   */
  environments?: Array<string> | undefined;
  /**
   * An array of service IDs (setting this will overwrite the current services)
   */
  services?: Array<string> | undefined;
  /**
   * JSON objects representing attachments, see attachments documentation for the schema
   */
  attachments?: Array<PatchV1ChangesEventsChangeEventIdAttachments> | undefined;
};

/** @internal */
export const PatchV1ChangesEventsChangeEventIdType$inboundSchema:
  z.ZodNativeEnum<typeof PatchV1ChangesEventsChangeEventIdType> = z.nativeEnum(
    PatchV1ChangesEventsChangeEventIdType,
  );

/** @internal */
export const PatchV1ChangesEventsChangeEventIdType$outboundSchema:
  z.ZodNativeEnum<typeof PatchV1ChangesEventsChangeEventIdType> =
    PatchV1ChangesEventsChangeEventIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChangesEventsChangeEventIdType$ {
  /** @deprecated use `PatchV1ChangesEventsChangeEventIdType$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ChangesEventsChangeEventIdType$inboundSchema;
  /** @deprecated use `PatchV1ChangesEventsChangeEventIdType$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ChangesEventsChangeEventIdType$outboundSchema;
}

/** @internal */
export const PatchV1ChangesEventsChangeEventIdAttachments$inboundSchema:
  z.ZodType<
    PatchV1ChangesEventsChangeEventIdAttachments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: PatchV1ChangesEventsChangeEventIdType$inboundSchema,
  });

/** @internal */
export type PatchV1ChangesEventsChangeEventIdAttachments$Outbound = {
  type: string;
};

/** @internal */
export const PatchV1ChangesEventsChangeEventIdAttachments$outboundSchema:
  z.ZodType<
    PatchV1ChangesEventsChangeEventIdAttachments$Outbound,
    z.ZodTypeDef,
    PatchV1ChangesEventsChangeEventIdAttachments
  > = z.object({
    type: PatchV1ChangesEventsChangeEventIdType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChangesEventsChangeEventIdAttachments$ {
  /** @deprecated use `PatchV1ChangesEventsChangeEventIdAttachments$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ChangesEventsChangeEventIdAttachments$inboundSchema;
  /** @deprecated use `PatchV1ChangesEventsChangeEventIdAttachments$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ChangesEventsChangeEventIdAttachments$outboundSchema;
  /** @deprecated use `PatchV1ChangesEventsChangeEventIdAttachments$Outbound` instead. */
  export type Outbound = PatchV1ChangesEventsChangeEventIdAttachments$Outbound;
}

export function patchV1ChangesEventsChangeEventIdAttachmentsToJSON(
  patchV1ChangesEventsChangeEventIdAttachments:
    PatchV1ChangesEventsChangeEventIdAttachments,
): string {
  return JSON.stringify(
    PatchV1ChangesEventsChangeEventIdAttachments$outboundSchema.parse(
      patchV1ChangesEventsChangeEventIdAttachments,
    ),
  );
}

export function patchV1ChangesEventsChangeEventIdAttachmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ChangesEventsChangeEventIdAttachments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ChangesEventsChangeEventIdAttachments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1ChangesEventsChangeEventIdAttachments' from JSON`,
  );
}

/** @internal */
export const PatchV1ChangesEventsChangeEventId$inboundSchema: z.ZodType<
  PatchV1ChangesEventsChangeEventId,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string().optional(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  environments: z.array(z.string()).optional(),
  services: z.array(z.string()).optional(),
  attachments: z.array(
    z.lazy(() => PatchV1ChangesEventsChangeEventIdAttachments$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type PatchV1ChangesEventsChangeEventId$Outbound = {
  summary?: string | undefined;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  starts_at?: string | undefined;
  ends_at?: string | undefined;
  environments?: Array<string> | undefined;
  services?: Array<string> | undefined;
  attachments?:
    | Array<PatchV1ChangesEventsChangeEventIdAttachments$Outbound>
    | undefined;
};

/** @internal */
export const PatchV1ChangesEventsChangeEventId$outboundSchema: z.ZodType<
  PatchV1ChangesEventsChangeEventId$Outbound,
  z.ZodTypeDef,
  PatchV1ChangesEventsChangeEventId
> = z.object({
  summary: z.string().optional(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
  startsAt: z.date().transform(v => v.toISOString()).optional(),
  endsAt: z.date().transform(v => v.toISOString()).optional(),
  environments: z.array(z.string()).optional(),
  services: z.array(z.string()).optional(),
  attachments: z.array(
    z.lazy(() => PatchV1ChangesEventsChangeEventIdAttachments$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChangesEventsChangeEventId$ {
  /** @deprecated use `PatchV1ChangesEventsChangeEventId$inboundSchema` instead. */
  export const inboundSchema = PatchV1ChangesEventsChangeEventId$inboundSchema;
  /** @deprecated use `PatchV1ChangesEventsChangeEventId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ChangesEventsChangeEventId$outboundSchema;
  /** @deprecated use `PatchV1ChangesEventsChangeEventId$Outbound` instead. */
  export type Outbound = PatchV1ChangesEventsChangeEventId$Outbound;
}

export function patchV1ChangesEventsChangeEventIdToJSON(
  patchV1ChangesEventsChangeEventId: PatchV1ChangesEventsChangeEventId,
): string {
  return JSON.stringify(
    PatchV1ChangesEventsChangeEventId$outboundSchema.parse(
      patchV1ChangesEventsChangeEventId,
    ),
  );
}

export function patchV1ChangesEventsChangeEventIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ChangesEventsChangeEventId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ChangesEventsChangeEventId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ChangesEventsChangeEventId' from JSON`,
  );
}
