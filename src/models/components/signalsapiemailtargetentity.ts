/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableSignalsAPITargetEntity,
  NullableSignalsAPITargetEntity$inboundSchema,
  NullableSignalsAPITargetEntity$Outbound,
  NullableSignalsAPITargetEntity$outboundSchema,
} from "./nullablesignalsapitargetentity.js";

/**
 * Signals_API_EmailTargetEntity model
 */
export type SignalsAPIEmailTargetEntity = {
  id?: string | null | undefined;
  slug?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  email?: string | null | undefined;
  statusCel?: string | null | undefined;
  levelCel?: string | null | undefined;
  target?: NullableSignalsAPITargetEntity | null | undefined;
  allowedSenders?: Array<string> | null | undefined;
  rules?: Array<string> | null | undefined;
  ruleMatchingStrategy?: string | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The team ID that the email target belongs to, if applicable
   */
  teamId?: string | null | undefined;
};

/** @internal */
export const SignalsAPIEmailTargetEntity$inboundSchema: z.ZodType<
  SignalsAPIEmailTargetEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  status_cel: z.nullable(z.string()).optional(),
  level_cel: z.nullable(z.string()).optional(),
  target: z.nullable(NullableSignalsAPITargetEntity$inboundSchema).optional(),
  allowed_senders: z.nullable(z.array(z.string())).optional(),
  rules: z.nullable(z.array(z.string())).optional(),
  rule_matching_strategy: z.nullable(z.string()).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  team_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_cel": "statusCel",
    "level_cel": "levelCel",
    "allowed_senders": "allowedSenders",
    "rule_matching_strategy": "ruleMatchingStrategy",
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "team_id": "teamId",
  });
});

/** @internal */
export type SignalsAPIEmailTargetEntity$Outbound = {
  id?: string | null | undefined;
  slug?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  email?: string | null | undefined;
  status_cel?: string | null | undefined;
  level_cel?: string | null | undefined;
  target?: NullableSignalsAPITargetEntity$Outbound | null | undefined;
  allowed_senders?: Array<string> | null | undefined;
  rules?: Array<string> | null | undefined;
  rule_matching_strategy?: string | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  team_id?: string | null | undefined;
};

/** @internal */
export const SignalsAPIEmailTargetEntity$outboundSchema: z.ZodType<
  SignalsAPIEmailTargetEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIEmailTargetEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  statusCel: z.nullable(z.string()).optional(),
  levelCel: z.nullable(z.string()).optional(),
  target: z.nullable(NullableSignalsAPITargetEntity$outboundSchema).optional(),
  allowedSenders: z.nullable(z.array(z.string())).optional(),
  rules: z.nullable(z.array(z.string())).optional(),
  ruleMatchingStrategy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  teamId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCel: "status_cel",
    levelCel: "level_cel",
    allowedSenders: "allowed_senders",
    ruleMatchingStrategy: "rule_matching_strategy",
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
    teamId: "team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIEmailTargetEntity$ {
  /** @deprecated use `SignalsAPIEmailTargetEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPIEmailTargetEntity$inboundSchema;
  /** @deprecated use `SignalsAPIEmailTargetEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPIEmailTargetEntity$outboundSchema;
  /** @deprecated use `SignalsAPIEmailTargetEntity$Outbound` instead. */
  export type Outbound = SignalsAPIEmailTargetEntity$Outbound;
}

export function signalsAPIEmailTargetEntityToJSON(
  signalsAPIEmailTargetEntity: SignalsAPIEmailTargetEntity,
): string {
  return JSON.stringify(
    SignalsAPIEmailTargetEntity$outboundSchema.parse(
      signalsAPIEmailTargetEntity,
    ),
  );
}

export function signalsAPIEmailTargetEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIEmailTargetEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPIEmailTargetEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIEmailTargetEntity' from JSON`,
  );
}
