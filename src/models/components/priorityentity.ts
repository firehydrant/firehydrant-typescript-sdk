/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * PriorityEntity model
 */
export type PriorityEntity = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  position?: number | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  default?: boolean | null | undefined;
};

/** @internal */
export const PriorityEntity$inboundSchema: z.ZodType<
  PriorityEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  default: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PriorityEntity$Outbound = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  position?: number | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  default?: boolean | null | undefined;
};

/** @internal */
export const PriorityEntity$outboundSchema: z.ZodType<
  PriorityEntity$Outbound,
  z.ZodTypeDef,
  PriorityEntity
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  default: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PriorityEntity$ {
  /** @deprecated use `PriorityEntity$inboundSchema` instead. */
  export const inboundSchema = PriorityEntity$inboundSchema;
  /** @deprecated use `PriorityEntity$outboundSchema` instead. */
  export const outboundSchema = PriorityEntity$outboundSchema;
  /** @deprecated use `PriorityEntity$Outbound` instead. */
  export type Outbound = PriorityEntity$Outbound;
}

export function priorityEntityToJSON(priorityEntity: PriorityEntity): string {
  return JSON.stringify(PriorityEntity$outboundSchema.parse(priorityEntity));
}

export function priorityEntityFromJSON(
  jsonString: string,
): SafeParseResult<PriorityEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PriorityEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PriorityEntity' from JSON`,
  );
}
