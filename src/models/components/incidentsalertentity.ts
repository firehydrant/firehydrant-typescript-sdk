/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAlertsAlertEntity,
  NullableAlertsAlertEntity$inboundSchema,
  NullableAlertsAlertEntity$Outbound,
  NullableAlertsAlertEntity$outboundSchema,
} from "./nullablealertsalertentity.js";

/**
 * Incidents_AlertEntity model
 */
export type IncidentsAlertEntity = {
  id?: string | null | undefined;
  alert?: NullableAlertsAlertEntity | null | undefined;
  /**
   * whether or not this is the primary alert for this incident
   */
  primary?: boolean | null | undefined;
};

/** @internal */
export const IncidentsAlertEntity$inboundSchema: z.ZodType<
  IncidentsAlertEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  alert: z.nullable(NullableAlertsAlertEntity$inboundSchema).optional(),
  primary: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type IncidentsAlertEntity$Outbound = {
  id?: string | null | undefined;
  alert?: NullableAlertsAlertEntity$Outbound | null | undefined;
  primary?: boolean | null | undefined;
};

/** @internal */
export const IncidentsAlertEntity$outboundSchema: z.ZodType<
  IncidentsAlertEntity$Outbound,
  z.ZodTypeDef,
  IncidentsAlertEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  alert: z.nullable(NullableAlertsAlertEntity$outboundSchema).optional(),
  primary: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsAlertEntity$ {
  /** @deprecated use `IncidentsAlertEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsAlertEntity$inboundSchema;
  /** @deprecated use `IncidentsAlertEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsAlertEntity$outboundSchema;
  /** @deprecated use `IncidentsAlertEntity$Outbound` instead. */
  export type Outbound = IncidentsAlertEntity$Outbound;
}

export function incidentsAlertEntityToJSON(
  incidentsAlertEntity: IncidentsAlertEntity,
): string {
  return JSON.stringify(
    IncidentsAlertEntity$outboundSchema.parse(incidentsAlertEntity),
  );
}

export function incidentsAlertEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsAlertEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsAlertEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsAlertEntity' from JSON`,
  );
}
