/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AlertsAlertEntity,
  AlertsAlertEntity$inboundSchema,
  AlertsAlertEntity$Outbound,
  AlertsAlertEntity$outboundSchema,
} from "./alertsalertentity.js";

/**
 * Incidents_AlertEntity model
 */
export type IncidentsAlertEntity = {
  id?: string | undefined;
  /**
   * Alerts_AlertEntity model
   */
  alert?: AlertsAlertEntity | undefined;
  /**
   * whether or not this is the primary alert for this incident
   */
  primary?: boolean | undefined;
};

/** @internal */
export const IncidentsAlertEntity$inboundSchema: z.ZodType<
  IncidentsAlertEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  alert: AlertsAlertEntity$inboundSchema.optional(),
  primary: z.boolean().optional(),
});

/** @internal */
export type IncidentsAlertEntity$Outbound = {
  id?: string | undefined;
  alert?: AlertsAlertEntity$Outbound | undefined;
  primary?: boolean | undefined;
};

/** @internal */
export const IncidentsAlertEntity$outboundSchema: z.ZodType<
  IncidentsAlertEntity$Outbound,
  z.ZodTypeDef,
  IncidentsAlertEntity
> = z.object({
  id: z.string().optional(),
  alert: AlertsAlertEntity$outboundSchema.optional(),
  primary: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsAlertEntity$ {
  /** @deprecated use `IncidentsAlertEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsAlertEntity$inboundSchema;
  /** @deprecated use `IncidentsAlertEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsAlertEntity$outboundSchema;
  /** @deprecated use `IncidentsAlertEntity$Outbound` instead. */
  export type Outbound = IncidentsAlertEntity$Outbound;
}

export function incidentsAlertEntityToJSON(
  incidentsAlertEntity: IncidentsAlertEntity,
): string {
  return JSON.stringify(
    IncidentsAlertEntity$outboundSchema.parse(incidentsAlertEntity),
  );
}

export function incidentsAlertEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsAlertEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsAlertEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsAlertEntity' from JSON`,
  );
}
