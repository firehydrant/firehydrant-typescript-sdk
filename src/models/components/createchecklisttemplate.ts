/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateChecklistTemplateCheck = {
  /**
   * The name of the check
   */
  name: string;
  /**
   * The description of the check
   */
  description?: string | null | undefined;
};

export type CreateChecklistTemplateConnectedService = {
  id: string;
};

/**
 * Creates a checklist template for the organization
 */
export type CreateChecklistTemplate = {
  name: string;
  /**
   * An array of checks for the checklist template
   */
  checks: Array<CreateChecklistTemplateCheck>;
  description?: string | null | undefined;
  /**
   * The ID of the Team that owns the checklist template
   */
  teamId?: string | null | undefined;
  /**
   * Array of service IDs to attach checklist template to
   */
  connectedServices?:
    | Array<CreateChecklistTemplateConnectedService>
    | null
    | undefined;
};

/** @internal */
export const CreateChecklistTemplateCheck$inboundSchema: z.ZodType<
  CreateChecklistTemplateCheck,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateChecklistTemplateCheck$Outbound = {
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const CreateChecklistTemplateCheck$outboundSchema: z.ZodType<
  CreateChecklistTemplateCheck$Outbound,
  z.ZodTypeDef,
  CreateChecklistTemplateCheck
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChecklistTemplateCheck$ {
  /** @deprecated use `CreateChecklistTemplateCheck$inboundSchema` instead. */
  export const inboundSchema = CreateChecklistTemplateCheck$inboundSchema;
  /** @deprecated use `CreateChecklistTemplateCheck$outboundSchema` instead. */
  export const outboundSchema = CreateChecklistTemplateCheck$outboundSchema;
  /** @deprecated use `CreateChecklistTemplateCheck$Outbound` instead. */
  export type Outbound = CreateChecklistTemplateCheck$Outbound;
}

export function createChecklistTemplateCheckToJSON(
  createChecklistTemplateCheck: CreateChecklistTemplateCheck,
): string {
  return JSON.stringify(
    CreateChecklistTemplateCheck$outboundSchema.parse(
      createChecklistTemplateCheck,
    ),
  );
}

export function createChecklistTemplateCheckFromJSON(
  jsonString: string,
): SafeParseResult<CreateChecklistTemplateCheck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateChecklistTemplateCheck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateChecklistTemplateCheck' from JSON`,
  );
}

/** @internal */
export const CreateChecklistTemplateConnectedService$inboundSchema: z.ZodType<
  CreateChecklistTemplateConnectedService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateChecklistTemplateConnectedService$Outbound = {
  id: string;
};

/** @internal */
export const CreateChecklistTemplateConnectedService$outboundSchema: z.ZodType<
  CreateChecklistTemplateConnectedService$Outbound,
  z.ZodTypeDef,
  CreateChecklistTemplateConnectedService
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChecklistTemplateConnectedService$ {
  /** @deprecated use `CreateChecklistTemplateConnectedService$inboundSchema` instead. */
  export const inboundSchema =
    CreateChecklistTemplateConnectedService$inboundSchema;
  /** @deprecated use `CreateChecklistTemplateConnectedService$outboundSchema` instead. */
  export const outboundSchema =
    CreateChecklistTemplateConnectedService$outboundSchema;
  /** @deprecated use `CreateChecklistTemplateConnectedService$Outbound` instead. */
  export type Outbound = CreateChecklistTemplateConnectedService$Outbound;
}

export function createChecklistTemplateConnectedServiceToJSON(
  createChecklistTemplateConnectedService:
    CreateChecklistTemplateConnectedService,
): string {
  return JSON.stringify(
    CreateChecklistTemplateConnectedService$outboundSchema.parse(
      createChecklistTemplateConnectedService,
    ),
  );
}

export function createChecklistTemplateConnectedServiceFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateChecklistTemplateConnectedService,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateChecklistTemplateConnectedService$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateChecklistTemplateConnectedService' from JSON`,
  );
}

/** @internal */
export const CreateChecklistTemplate$inboundSchema: z.ZodType<
  CreateChecklistTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  checks: z.array(z.lazy(() => CreateChecklistTemplateCheck$inboundSchema)),
  description: z.nullable(z.string()).optional(),
  team_id: z.nullable(z.string()).optional(),
  connected_services: z.nullable(
    z.array(
      z.lazy(() => CreateChecklistTemplateConnectedService$inboundSchema),
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "connected_services": "connectedServices",
  });
});

/** @internal */
export type CreateChecklistTemplate$Outbound = {
  name: string;
  checks: Array<CreateChecklistTemplateCheck$Outbound>;
  description?: string | null | undefined;
  team_id?: string | null | undefined;
  connected_services?:
    | Array<CreateChecklistTemplateConnectedService$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateChecklistTemplate$outboundSchema: z.ZodType<
  CreateChecklistTemplate$Outbound,
  z.ZodTypeDef,
  CreateChecklistTemplate
> = z.object({
  name: z.string(),
  checks: z.array(z.lazy(() => CreateChecklistTemplateCheck$outboundSchema)),
  description: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  connectedServices: z.nullable(
    z.array(
      z.lazy(() => CreateChecklistTemplateConnectedService$outboundSchema),
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    connectedServices: "connected_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChecklistTemplate$ {
  /** @deprecated use `CreateChecklistTemplate$inboundSchema` instead. */
  export const inboundSchema = CreateChecklistTemplate$inboundSchema;
  /** @deprecated use `CreateChecklistTemplate$outboundSchema` instead. */
  export const outboundSchema = CreateChecklistTemplate$outboundSchema;
  /** @deprecated use `CreateChecklistTemplate$Outbound` instead. */
  export type Outbound = CreateChecklistTemplate$Outbound;
}

export function createChecklistTemplateToJSON(
  createChecklistTemplate: CreateChecklistTemplate,
): string {
  return JSON.stringify(
    CreateChecklistTemplate$outboundSchema.parse(createChecklistTemplate),
  );
}

export function createChecklistTemplateFromJSON(
  jsonString: string,
): SafeParseResult<CreateChecklistTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateChecklistTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateChecklistTemplate' from JSON`,
  );
}
