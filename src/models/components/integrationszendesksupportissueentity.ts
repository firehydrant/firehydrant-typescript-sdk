/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentEntity,
  IncidentEntity$inboundSchema,
  IncidentEntity$Outbound,
  IncidentEntity$outboundSchema,
} from "./incidententity.js";
import {
  NullableIntegrationsZendeskSupportIssueEntityCustomerEntity,
  NullableIntegrationsZendeskSupportIssueEntityCustomerEntity$inboundSchema,
  NullableIntegrationsZendeskSupportIssueEntityCustomerEntity$Outbound,
  NullableIntegrationsZendeskSupportIssueEntityCustomerEntity$outboundSchema,
} from "./nullableintegrationszendesksupportissueentitycustomerentity.js";

/**
 * Raw data associated with this issue from originating system.
 */
export type IntegrationsZendeskSupportIssueEntityData = {};

export type IntegrationsZendeskSupportIssueEntity = {
  /**
   * The ID of this support issue in the system that originated this issue, eg Zendesk.
   */
  remoteId?: string | null | undefined;
  /**
   * Title or name of this issue.
   */
  title?: string | null | undefined;
  /**
   * Longer description of the issue.
   */
  description?: string | null | undefined;
  /**
   * Browser-accessible url for this issue in the originating system, eg Zendesk.
   */
  remoteUrl?: string | null | undefined;
  /**
   * Raw data associated with this issue from originating system.
   */
  data?: IntegrationsZendeskSupportIssueEntityData | null | undefined;
  /**
   * Attachment information for this issue.
   */
  attachments?: string | null | undefined;
  customers?:
    | NullableIntegrationsZendeskSupportIssueEntityCustomerEntity
    | null
    | undefined;
  priority?: string | null | undefined;
  attachedIncidents?: Array<IncidentEntity> | null | undefined;
  /**
   * Type designator for this entity
   */
  type?: string | null | undefined;
};

/** @internal */
export const IntegrationsZendeskSupportIssueEntityData$inboundSchema: z.ZodType<
  IntegrationsZendeskSupportIssueEntityData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IntegrationsZendeskSupportIssueEntityData$Outbound = {};

/** @internal */
export const IntegrationsZendeskSupportIssueEntityData$outboundSchema:
  z.ZodType<
    IntegrationsZendeskSupportIssueEntityData$Outbound,
    z.ZodTypeDef,
    IntegrationsZendeskSupportIssueEntityData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsZendeskSupportIssueEntityData$ {
  /** @deprecated use `IntegrationsZendeskSupportIssueEntityData$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsZendeskSupportIssueEntityData$inboundSchema;
  /** @deprecated use `IntegrationsZendeskSupportIssueEntityData$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsZendeskSupportIssueEntityData$outboundSchema;
  /** @deprecated use `IntegrationsZendeskSupportIssueEntityData$Outbound` instead. */
  export type Outbound = IntegrationsZendeskSupportIssueEntityData$Outbound;
}

export function integrationsZendeskSupportIssueEntityDataToJSON(
  integrationsZendeskSupportIssueEntityData:
    IntegrationsZendeskSupportIssueEntityData,
): string {
  return JSON.stringify(
    IntegrationsZendeskSupportIssueEntityData$outboundSchema.parse(
      integrationsZendeskSupportIssueEntityData,
    ),
  );
}

export function integrationsZendeskSupportIssueEntityDataFromJSON(
  jsonString: string,
): SafeParseResult<
  IntegrationsZendeskSupportIssueEntityData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsZendeskSupportIssueEntityData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IntegrationsZendeskSupportIssueEntityData' from JSON`,
  );
}

/** @internal */
export const IntegrationsZendeskSupportIssueEntity$inboundSchema: z.ZodType<
  IntegrationsZendeskSupportIssueEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  remote_url: z.nullable(z.string()).optional(),
  data: z.nullable(
    z.lazy(() => IntegrationsZendeskSupportIssueEntityData$inboundSchema),
  ).optional(),
  attachments: z.nullable(z.string()).optional(),
  customers: z.nullable(
    NullableIntegrationsZendeskSupportIssueEntityCustomerEntity$inboundSchema,
  ).optional(),
  priority: z.nullable(z.string()).optional(),
  attached_incidents: z.nullable(z.array(IncidentEntity$inboundSchema))
    .optional(),
  type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "remote_url": "remoteUrl",
    "attached_incidents": "attachedIncidents",
  });
});

/** @internal */
export type IntegrationsZendeskSupportIssueEntity$Outbound = {
  remote_id?: string | null | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  remote_url?: string | null | undefined;
  data?: IntegrationsZendeskSupportIssueEntityData$Outbound | null | undefined;
  attachments?: string | null | undefined;
  customers?:
    | NullableIntegrationsZendeskSupportIssueEntityCustomerEntity$Outbound
    | null
    | undefined;
  priority?: string | null | undefined;
  attached_incidents?: Array<IncidentEntity$Outbound> | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const IntegrationsZendeskSupportIssueEntity$outboundSchema: z.ZodType<
  IntegrationsZendeskSupportIssueEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsZendeskSupportIssueEntity
> = z.object({
  remoteId: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  remoteUrl: z.nullable(z.string()).optional(),
  data: z.nullable(
    z.lazy(() => IntegrationsZendeskSupportIssueEntityData$outboundSchema),
  ).optional(),
  attachments: z.nullable(z.string()).optional(),
  customers: z.nullable(
    NullableIntegrationsZendeskSupportIssueEntityCustomerEntity$outboundSchema,
  ).optional(),
  priority: z.nullable(z.string()).optional(),
  attachedIncidents: z.nullable(z.array(IncidentEntity$outboundSchema))
    .optional(),
  type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    remoteUrl: "remote_url",
    attachedIncidents: "attached_incidents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsZendeskSupportIssueEntity$ {
  /** @deprecated use `IntegrationsZendeskSupportIssueEntity$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsZendeskSupportIssueEntity$inboundSchema;
  /** @deprecated use `IntegrationsZendeskSupportIssueEntity$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsZendeskSupportIssueEntity$outboundSchema;
  /** @deprecated use `IntegrationsZendeskSupportIssueEntity$Outbound` instead. */
  export type Outbound = IntegrationsZendeskSupportIssueEntity$Outbound;
}

export function integrationsZendeskSupportIssueEntityToJSON(
  integrationsZendeskSupportIssueEntity: IntegrationsZendeskSupportIssueEntity,
): string {
  return JSON.stringify(
    IntegrationsZendeskSupportIssueEntity$outboundSchema.parse(
      integrationsZendeskSupportIssueEntity,
    ),
  );
}

export function integrationsZendeskSupportIssueEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsZendeskSupportIssueEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsZendeskSupportIssueEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsZendeskSupportIssueEntity' from JSON`,
  );
}
