/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationsConnectionEntity,
  IntegrationsConnectionEntity$inboundSchema,
  IntegrationsConnectionEntity$Outbound,
  IntegrationsConnectionEntity$outboundSchema,
} from "./integrationsconnectionentity.js";
import {
  NullableIntegrationsIntegrationEntityLogoEntity,
  NullableIntegrationsIntegrationEntityLogoEntity$inboundSchema,
  NullableIntegrationsIntegrationEntityLogoEntity$Outbound,
  NullableIntegrationsIntegrationEntityLogoEntity$outboundSchema,
} from "./nullableintegrationsintegrationentitylogoentity.js";

/**
 * Integrations_IntegrationEntity model
 */
export type NullableIntegrationsIntegrationEntity = {
  id?: string | null | undefined;
  slug?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  setupUrl?: string | null | undefined;
  createdAt?: Date | null | undefined;
  connections?: Array<IntegrationsConnectionEntity> | null | undefined;
  enabled?: boolean | null | undefined;
  installed?: boolean | null | undefined;
  deprecated?: boolean | null | undefined;
  logo?: NullableIntegrationsIntegrationEntityLogoEntity | null | undefined;
  natIp?: string | null | undefined;
};

/** @internal */
export const NullableIntegrationsIntegrationEntity$inboundSchema: z.ZodType<
  NullableIntegrationsIntegrationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  setup_url: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  connections: z.nullable(z.array(IntegrationsConnectionEntity$inboundSchema))
    .optional(),
  enabled: z.nullable(z.boolean()).optional(),
  installed: z.nullable(z.boolean()).optional(),
  deprecated: z.nullable(z.boolean()).optional(),
  logo: z.nullable(
    NullableIntegrationsIntegrationEntityLogoEntity$inboundSchema,
  ).optional(),
  nat_ip: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "setup_url": "setupUrl",
    "created_at": "createdAt",
    "nat_ip": "natIp",
  });
});

/** @internal */
export type NullableIntegrationsIntegrationEntity$Outbound = {
  id?: string | null | undefined;
  slug?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  setup_url?: string | null | undefined;
  created_at?: string | null | undefined;
  connections?: Array<IntegrationsConnectionEntity$Outbound> | null | undefined;
  enabled?: boolean | null | undefined;
  installed?: boolean | null | undefined;
  deprecated?: boolean | null | undefined;
  logo?:
    | NullableIntegrationsIntegrationEntityLogoEntity$Outbound
    | null
    | undefined;
  nat_ip?: string | null | undefined;
};

/** @internal */
export const NullableIntegrationsIntegrationEntity$outboundSchema: z.ZodType<
  NullableIntegrationsIntegrationEntity$Outbound,
  z.ZodTypeDef,
  NullableIntegrationsIntegrationEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  setupUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  connections: z.nullable(z.array(IntegrationsConnectionEntity$outboundSchema))
    .optional(),
  enabled: z.nullable(z.boolean()).optional(),
  installed: z.nullable(z.boolean()).optional(),
  deprecated: z.nullable(z.boolean()).optional(),
  logo: z.nullable(
    NullableIntegrationsIntegrationEntityLogoEntity$outboundSchema,
  ).optional(),
  natIp: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    setupUrl: "setup_url",
    createdAt: "created_at",
    natIp: "nat_ip",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIntegrationsIntegrationEntity$ {
  /** @deprecated use `NullableIntegrationsIntegrationEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableIntegrationsIntegrationEntity$inboundSchema;
  /** @deprecated use `NullableIntegrationsIntegrationEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableIntegrationsIntegrationEntity$outboundSchema;
  /** @deprecated use `NullableIntegrationsIntegrationEntity$Outbound` instead. */
  export type Outbound = NullableIntegrationsIntegrationEntity$Outbound;
}

export function nullableIntegrationsIntegrationEntityToJSON(
  nullableIntegrationsIntegrationEntity: NullableIntegrationsIntegrationEntity,
): string {
  return JSON.stringify(
    NullableIntegrationsIntegrationEntity$outboundSchema.parse(
      nullableIntegrationsIntegrationEntity,
    ),
  );
}

export function nullableIntegrationsIntegrationEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableIntegrationsIntegrationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIntegrationsIntegrationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableIntegrationsIntegrationEntity' from JSON`,
  );
}
