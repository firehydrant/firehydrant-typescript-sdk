/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableSignalsAPIOnCallShiftEntity,
  NullableSignalsAPIOnCallShiftEntity$inboundSchema,
  NullableSignalsAPIOnCallShiftEntity$Outbound,
  NullableSignalsAPIOnCallShiftEntity$outboundSchema,
} from "./nullablesignalsapioncallshiftentity.js";

export type SignalsAPIOrganizationOnCallRotationEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  timeZone?: string | null | undefined;
  currentShift?: NullableSignalsAPIOnCallShiftEntity | null | undefined;
  nextShift?: NullableSignalsAPIOnCallShiftEntity | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const SignalsAPIOrganizationOnCallRotationEntity$inboundSchema:
  z.ZodType<SignalsAPIOrganizationOnCallRotationEntity, z.ZodTypeDef, unknown> =
    z.object({
      id: z.nullable(z.string()).optional(),
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      time_zone: z.nullable(z.string()).optional(),
      current_shift: z.nullable(
        NullableSignalsAPIOnCallShiftEntity$inboundSchema,
      ).optional(),
      next_shift: z.nullable(NullableSignalsAPIOnCallShiftEntity$inboundSchema)
        .optional(),
      created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
      created_at: z.nullable(
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
      ).optional(),
      updated_at: z.nullable(
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "time_zone": "timeZone",
        "current_shift": "currentShift",
        "next_shift": "nextShift",
        "created_by": "createdBy",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
      });
    });

/** @internal */
export type SignalsAPIOrganizationOnCallRotationEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  time_zone?: string | null | undefined;
  current_shift?:
    | NullableSignalsAPIOnCallShiftEntity$Outbound
    | null
    | undefined;
  next_shift?: NullableSignalsAPIOnCallShiftEntity$Outbound | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const SignalsAPIOrganizationOnCallRotationEntity$outboundSchema:
  z.ZodType<
    SignalsAPIOrganizationOnCallRotationEntity$Outbound,
    z.ZodTypeDef,
    SignalsAPIOrganizationOnCallRotationEntity
  > = z.object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    timeZone: z.nullable(z.string()).optional(),
    currentShift: z.nullable(NullableSignalsAPIOnCallShiftEntity$outboundSchema)
      .optional(),
    nextShift: z.nullable(NullableSignalsAPIOnCallShiftEntity$outboundSchema)
      .optional(),
    createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  }).transform((v) => {
    return remap$(v, {
      timeZone: "time_zone",
      currentShift: "current_shift",
      nextShift: "next_shift",
      createdBy: "created_by",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIOrganizationOnCallRotationEntity$ {
  /** @deprecated use `SignalsAPIOrganizationOnCallRotationEntity$inboundSchema` instead. */
  export const inboundSchema =
    SignalsAPIOrganizationOnCallRotationEntity$inboundSchema;
  /** @deprecated use `SignalsAPIOrganizationOnCallRotationEntity$outboundSchema` instead. */
  export const outboundSchema =
    SignalsAPIOrganizationOnCallRotationEntity$outboundSchema;
  /** @deprecated use `SignalsAPIOrganizationOnCallRotationEntity$Outbound` instead. */
  export type Outbound = SignalsAPIOrganizationOnCallRotationEntity$Outbound;
}

export function signalsAPIOrganizationOnCallRotationEntityToJSON(
  signalsAPIOrganizationOnCallRotationEntity:
    SignalsAPIOrganizationOnCallRotationEntity,
): string {
  return JSON.stringify(
    SignalsAPIOrganizationOnCallRotationEntity$outboundSchema.parse(
      signalsAPIOrganizationOnCallRotationEntity,
    ),
  );
}

export function signalsAPIOrganizationOnCallRotationEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  SignalsAPIOrganizationOnCallRotationEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SignalsAPIOrganizationOnCallRotationEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SignalsAPIOrganizationOnCallRotationEntity' from JSON`,
  );
}
