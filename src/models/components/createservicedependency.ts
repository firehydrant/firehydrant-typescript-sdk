/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Creates a service dependency relationship between two services
 */
export type CreateServiceDependency = {
  serviceId: string;
  connectedServiceId: string;
  /**
   * A note to describe the service dependency relationship
   */
  notes?: string | null | undefined;
};

/** @internal */
export const CreateServiceDependency$inboundSchema: z.ZodType<
  CreateServiceDependency,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  connected_service_id: z.string(),
  notes: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "connected_service_id": "connectedServiceId",
  });
});

/** @internal */
export type CreateServiceDependency$Outbound = {
  service_id: string;
  connected_service_id: string;
  notes?: string | null | undefined;
};

/** @internal */
export const CreateServiceDependency$outboundSchema: z.ZodType<
  CreateServiceDependency$Outbound,
  z.ZodTypeDef,
  CreateServiceDependency
> = z.object({
  serviceId: z.string(),
  connectedServiceId: z.string(),
  notes: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    connectedServiceId: "connected_service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceDependency$ {
  /** @deprecated use `CreateServiceDependency$inboundSchema` instead. */
  export const inboundSchema = CreateServiceDependency$inboundSchema;
  /** @deprecated use `CreateServiceDependency$outboundSchema` instead. */
  export const outboundSchema = CreateServiceDependency$outboundSchema;
  /** @deprecated use `CreateServiceDependency$Outbound` instead. */
  export type Outbound = CreateServiceDependency$Outbound;
}

export function createServiceDependencyToJSON(
  createServiceDependency: CreateServiceDependency,
): string {
  return JSON.stringify(
    CreateServiceDependency$outboundSchema.parse(createServiceDependency),
  );
}

export function createServiceDependencyFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceDependency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceDependency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceDependency' from JSON`,
  );
}
