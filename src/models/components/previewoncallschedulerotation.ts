/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PreviewOnCallScheduleRotationMember = {
  /**
   * The ID of a user who should be added to the rotation. You can add a user to the rotation
   *
   * @remarks
   * multiple times to construct more complex rotations, and you can specify a `null` user ID to create
   * unassigned slots in the rotation.
   */
  userId?: string | null | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const PreviewOnCallScheduleRotationType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type PreviewOnCallScheduleRotationType = ClosedEnum<
  typeof PreviewOnCallScheduleRotationType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const PreviewOnCallScheduleRotationHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type PreviewOnCallScheduleRotationHandoffDay = ClosedEnum<
  typeof PreviewOnCallScheduleRotationHandoffDay
>;

/**
 * An object that specifies how the rotation's on-call shifts should be generated.
 */
export type PreviewOnCallScheduleRotationStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: PreviewOnCallScheduleRotationType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | null | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?: PreviewOnCallScheduleRotationHandoffDay | null | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | null | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const PreviewOnCallScheduleRotationStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type PreviewOnCallScheduleRotationStartDay = ClosedEnum<
  typeof PreviewOnCallScheduleRotationStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const PreviewOnCallScheduleRotationEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type PreviewOnCallScheduleRotationEndDay = ClosedEnum<
  typeof PreviewOnCallScheduleRotationEndDay
>;

export type PreviewOnCallScheduleRotationRestriction = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: PreviewOnCallScheduleRotationStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: PreviewOnCallScheduleRotationEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

/**
 * Preview a new on-call rotation orchanges to an existing on-call rotation
 */
export type PreviewOnCallScheduleRotation = {
  /**
   * The ID of a rotation being updated. Leave this blank if you're previewing the creation of a new rotation.
   */
  rotationId?: string | null | undefined;
  /**
   * The name of the on-call rotation
   */
  name?: string | null | undefined;
  /**
   * The description of the on-call rotation
   */
  description?: string | null | undefined;
  /**
   * The timezone of the on-call rotation as a string
   */
  timeZone?: string | null | undefined;
  /**
   * The Slack Usergroup ID for the on-call rotation
   */
  slackUserGroupId?: string | null | undefined;
  /**
   * Notify the team's Slack channel when handoffs occur
   */
  enableSlackChannelNotifications?: boolean | null | undefined;
  /**
   * Prevent shifts from being deleted by users and leading to gaps in coverage.
   */
  preventShiftDeletion?: boolean | null | undefined;
  /**
   * An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
   */
  coverageGapNotificationInterval?: string | null | undefined;
  /**
   * A hex color code that will be used to represent the rotation in FireHydrant's UI.
   */
  color?: string | null | undefined;
  /**
   * An ordered list of objects that specify members of the schedule's rotation.
   */
  members?: Array<PreviewOnCallScheduleRotationMember> | null | undefined;
  /**
   * An object that specifies how the rotation's on-call shifts should be generated.
   */
  strategy?: PreviewOnCallScheduleRotationStrategy | null | undefined;
  /**
   * A list of objects that restrict the rotation to specific on-call periods.
   */
  restrictions?:
    | Array<PreviewOnCallScheduleRotationRestriction>
    | null
    | undefined;
  /**
   * An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
   */
  startTime?: string | null | undefined;
  /**
   * An ISO8601 time string specifying when the updated schedule should take effect. This
   *
   * @remarks
   * value must be provided if editing an attribute that would affect how the schedule's
   * shifts are generated, such as the time zone, members, strategy, or restrictions.
   */
  effectiveAt?: string | null | undefined;
  /**
   * An ISO8601 time string specifying the start of the time window to preview. Defaults to now.
   */
  from?: string | null | undefined;
  /**
   * An ISO8601 time string specifying the end of the time window to preview. Defaults to two weeks from now.
   */
  to?: string | null | undefined;
};

/** @internal */
export const PreviewOnCallScheduleRotationMember$inboundSchema: z.ZodType<
  PreviewOnCallScheduleRotationMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type PreviewOnCallScheduleRotationMember$Outbound = {
  user_id?: string | null | undefined;
};

/** @internal */
export const PreviewOnCallScheduleRotationMember$outboundSchema: z.ZodType<
  PreviewOnCallScheduleRotationMember$Outbound,
  z.ZodTypeDef,
  PreviewOnCallScheduleRotationMember
> = z.object({
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationMember$ {
  /** @deprecated use `PreviewOnCallScheduleRotationMember$inboundSchema` instead. */
  export const inboundSchema =
    PreviewOnCallScheduleRotationMember$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationMember$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationMember$outboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationMember$Outbound` instead. */
  export type Outbound = PreviewOnCallScheduleRotationMember$Outbound;
}

export function previewOnCallScheduleRotationMemberToJSON(
  previewOnCallScheduleRotationMember: PreviewOnCallScheduleRotationMember,
): string {
  return JSON.stringify(
    PreviewOnCallScheduleRotationMember$outboundSchema.parse(
      previewOnCallScheduleRotationMember,
    ),
  );
}

export function previewOnCallScheduleRotationMemberFromJSON(
  jsonString: string,
): SafeParseResult<PreviewOnCallScheduleRotationMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PreviewOnCallScheduleRotationMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewOnCallScheduleRotationMember' from JSON`,
  );
}

/** @internal */
export const PreviewOnCallScheduleRotationType$inboundSchema: z.ZodNativeEnum<
  typeof PreviewOnCallScheduleRotationType
> = z.nativeEnum(PreviewOnCallScheduleRotationType);

/** @internal */
export const PreviewOnCallScheduleRotationType$outboundSchema: z.ZodNativeEnum<
  typeof PreviewOnCallScheduleRotationType
> = PreviewOnCallScheduleRotationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationType$ {
  /** @deprecated use `PreviewOnCallScheduleRotationType$inboundSchema` instead. */
  export const inboundSchema = PreviewOnCallScheduleRotationType$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationType$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationType$outboundSchema;
}

/** @internal */
export const PreviewOnCallScheduleRotationHandoffDay$inboundSchema:
  z.ZodNativeEnum<typeof PreviewOnCallScheduleRotationHandoffDay> = z
    .nativeEnum(PreviewOnCallScheduleRotationHandoffDay);

/** @internal */
export const PreviewOnCallScheduleRotationHandoffDay$outboundSchema:
  z.ZodNativeEnum<typeof PreviewOnCallScheduleRotationHandoffDay> =
    PreviewOnCallScheduleRotationHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationHandoffDay$ {
  /** @deprecated use `PreviewOnCallScheduleRotationHandoffDay$inboundSchema` instead. */
  export const inboundSchema =
    PreviewOnCallScheduleRotationHandoffDay$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationHandoffDay$outboundSchema;
}

/** @internal */
export const PreviewOnCallScheduleRotationStrategy$inboundSchema: z.ZodType<
  PreviewOnCallScheduleRotationStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PreviewOnCallScheduleRotationType$inboundSchema,
  handoff_time: z.nullable(z.string()).optional(),
  handoff_day: z.nullable(PreviewOnCallScheduleRotationHandoffDay$inboundSchema)
    .optional(),
  shift_duration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_time": "handoffTime",
    "handoff_day": "handoffDay",
    "shift_duration": "shiftDuration",
  });
});

/** @internal */
export type PreviewOnCallScheduleRotationStrategy$Outbound = {
  type: string;
  handoff_time?: string | null | undefined;
  handoff_day?: string | null | undefined;
  shift_duration?: string | null | undefined;
};

/** @internal */
export const PreviewOnCallScheduleRotationStrategy$outboundSchema: z.ZodType<
  PreviewOnCallScheduleRotationStrategy$Outbound,
  z.ZodTypeDef,
  PreviewOnCallScheduleRotationStrategy
> = z.object({
  type: PreviewOnCallScheduleRotationType$outboundSchema,
  handoffTime: z.nullable(z.string()).optional(),
  handoffDay: z.nullable(PreviewOnCallScheduleRotationHandoffDay$outboundSchema)
    .optional(),
  shiftDuration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffTime: "handoff_time",
    handoffDay: "handoff_day",
    shiftDuration: "shift_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationStrategy$ {
  /** @deprecated use `PreviewOnCallScheduleRotationStrategy$inboundSchema` instead. */
  export const inboundSchema =
    PreviewOnCallScheduleRotationStrategy$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationStrategy$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationStrategy$outboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationStrategy$Outbound` instead. */
  export type Outbound = PreviewOnCallScheduleRotationStrategy$Outbound;
}

export function previewOnCallScheduleRotationStrategyToJSON(
  previewOnCallScheduleRotationStrategy: PreviewOnCallScheduleRotationStrategy,
): string {
  return JSON.stringify(
    PreviewOnCallScheduleRotationStrategy$outboundSchema.parse(
      previewOnCallScheduleRotationStrategy,
    ),
  );
}

export function previewOnCallScheduleRotationStrategyFromJSON(
  jsonString: string,
): SafeParseResult<PreviewOnCallScheduleRotationStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PreviewOnCallScheduleRotationStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewOnCallScheduleRotationStrategy' from JSON`,
  );
}

/** @internal */
export const PreviewOnCallScheduleRotationStartDay$inboundSchema:
  z.ZodNativeEnum<typeof PreviewOnCallScheduleRotationStartDay> = z.nativeEnum(
    PreviewOnCallScheduleRotationStartDay,
  );

/** @internal */
export const PreviewOnCallScheduleRotationStartDay$outboundSchema:
  z.ZodNativeEnum<typeof PreviewOnCallScheduleRotationStartDay> =
    PreviewOnCallScheduleRotationStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationStartDay$ {
  /** @deprecated use `PreviewOnCallScheduleRotationStartDay$inboundSchema` instead. */
  export const inboundSchema =
    PreviewOnCallScheduleRotationStartDay$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationStartDay$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationStartDay$outboundSchema;
}

/** @internal */
export const PreviewOnCallScheduleRotationEndDay$inboundSchema: z.ZodNativeEnum<
  typeof PreviewOnCallScheduleRotationEndDay
> = z.nativeEnum(PreviewOnCallScheduleRotationEndDay);

/** @internal */
export const PreviewOnCallScheduleRotationEndDay$outboundSchema:
  z.ZodNativeEnum<typeof PreviewOnCallScheduleRotationEndDay> =
    PreviewOnCallScheduleRotationEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationEndDay$ {
  /** @deprecated use `PreviewOnCallScheduleRotationEndDay$inboundSchema` instead. */
  export const inboundSchema =
    PreviewOnCallScheduleRotationEndDay$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationEndDay$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationEndDay$outboundSchema;
}

/** @internal */
export const PreviewOnCallScheduleRotationRestriction$inboundSchema: z.ZodType<
  PreviewOnCallScheduleRotationRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_day: PreviewOnCallScheduleRotationStartDay$inboundSchema,
  start_time: z.string(),
  end_day: PreviewOnCallScheduleRotationEndDay$inboundSchema,
  end_time: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_day": "startDay",
    "start_time": "startTime",
    "end_day": "endDay",
    "end_time": "endTime",
  });
});

/** @internal */
export type PreviewOnCallScheduleRotationRestriction$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const PreviewOnCallScheduleRotationRestriction$outboundSchema: z.ZodType<
  PreviewOnCallScheduleRotationRestriction$Outbound,
  z.ZodTypeDef,
  PreviewOnCallScheduleRotationRestriction
> = z.object({
  startDay: PreviewOnCallScheduleRotationStartDay$outboundSchema,
  startTime: z.string(),
  endDay: PreviewOnCallScheduleRotationEndDay$outboundSchema,
  endTime: z.string(),
}).transform((v) => {
  return remap$(v, {
    startDay: "start_day",
    startTime: "start_time",
    endDay: "end_day",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotationRestriction$ {
  /** @deprecated use `PreviewOnCallScheduleRotationRestriction$inboundSchema` instead. */
  export const inboundSchema =
    PreviewOnCallScheduleRotationRestriction$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationRestriction$outboundSchema` instead. */
  export const outboundSchema =
    PreviewOnCallScheduleRotationRestriction$outboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotationRestriction$Outbound` instead. */
  export type Outbound = PreviewOnCallScheduleRotationRestriction$Outbound;
}

export function previewOnCallScheduleRotationRestrictionToJSON(
  previewOnCallScheduleRotationRestriction:
    PreviewOnCallScheduleRotationRestriction,
): string {
  return JSON.stringify(
    PreviewOnCallScheduleRotationRestriction$outboundSchema.parse(
      previewOnCallScheduleRotationRestriction,
    ),
  );
}

export function previewOnCallScheduleRotationRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<
  PreviewOnCallScheduleRotationRestriction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PreviewOnCallScheduleRotationRestriction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PreviewOnCallScheduleRotationRestriction' from JSON`,
  );
}

/** @internal */
export const PreviewOnCallScheduleRotation$inboundSchema: z.ZodType<
  PreviewOnCallScheduleRotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  rotation_id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  time_zone: z.nullable(z.string()).optional(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  enable_slack_channel_notifications: z.nullable(z.boolean()).optional(),
  prevent_shift_deletion: z.nullable(z.boolean()).optional(),
  coverage_gap_notification_interval: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => PreviewOnCallScheduleRotationMember$inboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => PreviewOnCallScheduleRotationStrategy$inboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(
      z.lazy(() => PreviewOnCallScheduleRotationRestriction$inboundSchema),
    ),
  ).optional(),
  start_time: z.nullable(z.string()).optional(),
  effective_at: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  to: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "rotation_id": "rotationId",
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "enable_slack_channel_notifications": "enableSlackChannelNotifications",
    "prevent_shift_deletion": "preventShiftDeletion",
    "coverage_gap_notification_interval": "coverageGapNotificationInterval",
    "start_time": "startTime",
    "effective_at": "effectiveAt",
  });
});

/** @internal */
export type PreviewOnCallScheduleRotation$Outbound = {
  rotation_id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  time_zone?: string | null | undefined;
  slack_user_group_id?: string | null | undefined;
  enable_slack_channel_notifications?: boolean | null | undefined;
  prevent_shift_deletion?: boolean | null | undefined;
  coverage_gap_notification_interval?: string | null | undefined;
  color?: string | null | undefined;
  members?:
    | Array<PreviewOnCallScheduleRotationMember$Outbound>
    | null
    | undefined;
  strategy?: PreviewOnCallScheduleRotationStrategy$Outbound | null | undefined;
  restrictions?:
    | Array<PreviewOnCallScheduleRotationRestriction$Outbound>
    | null
    | undefined;
  start_time?: string | null | undefined;
  effective_at?: string | null | undefined;
  from?: string | null | undefined;
  to?: string | null | undefined;
};

/** @internal */
export const PreviewOnCallScheduleRotation$outboundSchema: z.ZodType<
  PreviewOnCallScheduleRotation$Outbound,
  z.ZodTypeDef,
  PreviewOnCallScheduleRotation
> = z.object({
  rotationId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  timeZone: z.nullable(z.string()).optional(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  enableSlackChannelNotifications: z.nullable(z.boolean()).optional(),
  preventShiftDeletion: z.nullable(z.boolean()).optional(),
  coverageGapNotificationInterval: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => PreviewOnCallScheduleRotationMember$outboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => PreviewOnCallScheduleRotationStrategy$outboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(
      z.lazy(() => PreviewOnCallScheduleRotationRestriction$outboundSchema),
    ),
  ).optional(),
  startTime: z.nullable(z.string()).optional(),
  effectiveAt: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  to: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    rotationId: "rotation_id",
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    enableSlackChannelNotifications: "enable_slack_channel_notifications",
    preventShiftDeletion: "prevent_shift_deletion",
    coverageGapNotificationInterval: "coverage_gap_notification_interval",
    startTime: "start_time",
    effectiveAt: "effective_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewOnCallScheduleRotation$ {
  /** @deprecated use `PreviewOnCallScheduleRotation$inboundSchema` instead. */
  export const inboundSchema = PreviewOnCallScheduleRotation$inboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotation$outboundSchema` instead. */
  export const outboundSchema = PreviewOnCallScheduleRotation$outboundSchema;
  /** @deprecated use `PreviewOnCallScheduleRotation$Outbound` instead. */
  export type Outbound = PreviewOnCallScheduleRotation$Outbound;
}

export function previewOnCallScheduleRotationToJSON(
  previewOnCallScheduleRotation: PreviewOnCallScheduleRotation,
): string {
  return JSON.stringify(
    PreviewOnCallScheduleRotation$outboundSchema.parse(
      previewOnCallScheduleRotation,
    ),
  );
}

export function previewOnCallScheduleRotationFromJSON(
  jsonString: string,
): SafeParseResult<PreviewOnCallScheduleRotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewOnCallScheduleRotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewOnCallScheduleRotation' from JSON`,
  );
}
