/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const IncidentAttachmentEntityStatus = {
  PendingUpload: "pending_upload",
  Uploaded: "uploaded",
} as const;
export type IncidentAttachmentEntityStatus = ClosedEnum<
  typeof IncidentAttachmentEntityStatus
>;

/**
 * An object with keys that designate a specific version or size of the attachment
 */
export type Versions = {};

/**
 * IncidentAttachmentEntity model
 */
export type IncidentAttachmentEntity = {
  fileName?: string | undefined;
  fileContentType?: string | undefined;
  signedUrl?: string | undefined;
  mediaType?: string | undefined;
  description?: string | undefined;
  externalId?: string | undefined;
  fileSize?: number | undefined;
  status?: IncidentAttachmentEntityStatus | undefined;
  /**
   * An object with keys that designate a specific version or size of the attachment
   */
  versions?: Versions | undefined;
};

/** @internal */
export const IncidentAttachmentEntityStatus$inboundSchema: z.ZodNativeEnum<
  typeof IncidentAttachmentEntityStatus
> = z.nativeEnum(IncidentAttachmentEntityStatus);

/** @internal */
export const IncidentAttachmentEntityStatus$outboundSchema: z.ZodNativeEnum<
  typeof IncidentAttachmentEntityStatus
> = IncidentAttachmentEntityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentAttachmentEntityStatus$ {
  /** @deprecated use `IncidentAttachmentEntityStatus$inboundSchema` instead. */
  export const inboundSchema = IncidentAttachmentEntityStatus$inboundSchema;
  /** @deprecated use `IncidentAttachmentEntityStatus$outboundSchema` instead. */
  export const outboundSchema = IncidentAttachmentEntityStatus$outboundSchema;
}

/** @internal */
export const Versions$inboundSchema: z.ZodType<
  Versions,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Versions$Outbound = {};

/** @internal */
export const Versions$outboundSchema: z.ZodType<
  Versions$Outbound,
  z.ZodTypeDef,
  Versions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Versions$ {
  /** @deprecated use `Versions$inboundSchema` instead. */
  export const inboundSchema = Versions$inboundSchema;
  /** @deprecated use `Versions$outboundSchema` instead. */
  export const outboundSchema = Versions$outboundSchema;
  /** @deprecated use `Versions$Outbound` instead. */
  export type Outbound = Versions$Outbound;
}

export function versionsToJSON(versions: Versions): string {
  return JSON.stringify(Versions$outboundSchema.parse(versions));
}

export function versionsFromJSON(
  jsonString: string,
): SafeParseResult<Versions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Versions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Versions' from JSON`,
  );
}

/** @internal */
export const IncidentAttachmentEntity$inboundSchema: z.ZodType<
  IncidentAttachmentEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.string().optional(),
  file_content_type: z.string().optional(),
  signed_url: z.string().optional(),
  media_type: z.string().optional(),
  description: z.string().optional(),
  external_id: z.string().optional(),
  file_size: z.number().int().optional(),
  status: IncidentAttachmentEntityStatus$inboundSchema.optional(),
  versions: z.lazy(() => Versions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
    "file_content_type": "fileContentType",
    "signed_url": "signedUrl",
    "media_type": "mediaType",
    "external_id": "externalId",
    "file_size": "fileSize",
  });
});

/** @internal */
export type IncidentAttachmentEntity$Outbound = {
  file_name?: string | undefined;
  file_content_type?: string | undefined;
  signed_url?: string | undefined;
  media_type?: string | undefined;
  description?: string | undefined;
  external_id?: string | undefined;
  file_size?: number | undefined;
  status?: string | undefined;
  versions?: Versions$Outbound | undefined;
};

/** @internal */
export const IncidentAttachmentEntity$outboundSchema: z.ZodType<
  IncidentAttachmentEntity$Outbound,
  z.ZodTypeDef,
  IncidentAttachmentEntity
> = z.object({
  fileName: z.string().optional(),
  fileContentType: z.string().optional(),
  signedUrl: z.string().optional(),
  mediaType: z.string().optional(),
  description: z.string().optional(),
  externalId: z.string().optional(),
  fileSize: z.number().int().optional(),
  status: IncidentAttachmentEntityStatus$outboundSchema.optional(),
  versions: z.lazy(() => Versions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
    fileContentType: "file_content_type",
    signedUrl: "signed_url",
    mediaType: "media_type",
    externalId: "external_id",
    fileSize: "file_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentAttachmentEntity$ {
  /** @deprecated use `IncidentAttachmentEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentAttachmentEntity$inboundSchema;
  /** @deprecated use `IncidentAttachmentEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentAttachmentEntity$outboundSchema;
  /** @deprecated use `IncidentAttachmentEntity$Outbound` instead. */
  export type Outbound = IncidentAttachmentEntity$Outbound;
}

export function incidentAttachmentEntityToJSON(
  incidentAttachmentEntity: IncidentAttachmentEntity,
): string {
  return JSON.stringify(
    IncidentAttachmentEntity$outboundSchema.parse(incidentAttachmentEntity),
  );
}

export function incidentAttachmentEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentAttachmentEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentAttachmentEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentAttachmentEntity' from JSON`,
  );
}
