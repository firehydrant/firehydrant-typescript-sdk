/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Key:value pairs to track custom data for the incident
 */
export type PostV1IncidentsLabels = {};

export type Impacts = {
  /**
   * The type of impacted infrastructure. One of: environment, functionality, or service
   */
  type: string;
  /**
   * The ID of the impacted infrastructure
   */
  id: string;
  /**
   * The ID of the impact condition. Find these at /v1/severity_matrix/conditions
   */
  conditionId: string;
};

export type Milestones = {
  /**
   * The type/slug of the milestone. Must be one of the currently configured milestones.
   */
  type: string;
  /**
   * An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
   */
  occurredAt: Date;
};

export type CustomFields = {
  /**
   * The ID of the custom field you wish to set.
   */
  fieldId: string;
  /**
   * The value you wish to set on the custom field if the type of the field accepts string values
   */
  valueString?: string | undefined;
  /**
   * The value you wish to set on the custom field if the type of the field accepts array values
   */
  valueArray?: Array<string> | undefined;
};

/**
 * Create a new incident
 */
export type PostV1Incidents = {
  name: string;
  summary?: string | undefined;
  customerImpactSummary?: string | undefined;
  description?: string | undefined;
  priority?: string | undefined;
  severity?: string | undefined;
  severityConditionId?: string | undefined;
  severityImpactId?: string | undefined;
  /**
   * List of alert IDs that this incident should be associated to
   */
  alertIds?: Array<string> | undefined;
  /**
   * Key:value pairs to track custom data for the incident
   */
  labels?: PostV1IncidentsLabels | undefined;
  /**
   * List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.
   */
  runbookIds?: Array<string> | undefined;
  /**
   * List of tags for the incident
   */
  tagList?: Array<string> | undefined;
  /**
   * An array of impacted infrastructure
   */
  impacts?: Array<Impacts> | undefined;
  /**
   * An array of milestones to set on an incident. This can be used to create an already-resolved incident.
   */
  milestones?: Array<Milestones> | undefined;
  restricted?: boolean | undefined;
  /**
   * IDs of teams you wish to assign to this incident.
   */
  teamIds?: Array<string> | undefined;
  /**
   * An array of custom fields to set on the incident.
   */
  customFields?: Array<CustomFields> | undefined;
  externalLinks?: string | undefined;
  /**
   * If true, the incident type values will not be copied to the incident. This is useful when creating an incident from an incident type, but you want to set the values manually.
   */
  skipIncidentTypeValues?: boolean | undefined;
};

/** @internal */
export const PostV1IncidentsLabels$inboundSchema: z.ZodType<
  PostV1IncidentsLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostV1IncidentsLabels$Outbound = {};

/** @internal */
export const PostV1IncidentsLabels$outboundSchema: z.ZodType<
  PostV1IncidentsLabels$Outbound,
  z.ZodTypeDef,
  PostV1IncidentsLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentsLabels$ {
  /** @deprecated use `PostV1IncidentsLabels$inboundSchema` instead. */
  export const inboundSchema = PostV1IncidentsLabels$inboundSchema;
  /** @deprecated use `PostV1IncidentsLabels$outboundSchema` instead. */
  export const outboundSchema = PostV1IncidentsLabels$outboundSchema;
  /** @deprecated use `PostV1IncidentsLabels$Outbound` instead. */
  export type Outbound = PostV1IncidentsLabels$Outbound;
}

export function postV1IncidentsLabelsToJSON(
  postV1IncidentsLabels: PostV1IncidentsLabels,
): string {
  return JSON.stringify(
    PostV1IncidentsLabels$outboundSchema.parse(postV1IncidentsLabels),
  );
}

export function postV1IncidentsLabelsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1IncidentsLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1IncidentsLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1IncidentsLabels' from JSON`,
  );
}

/** @internal */
export const Impacts$inboundSchema: z.ZodType<Impacts, z.ZodTypeDef, unknown> =
  z.object({
    type: z.string(),
    id: z.string(),
    condition_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "condition_id": "conditionId",
    });
  });

/** @internal */
export type Impacts$Outbound = {
  type: string;
  id: string;
  condition_id: string;
};

/** @internal */
export const Impacts$outboundSchema: z.ZodType<
  Impacts$Outbound,
  z.ZodTypeDef,
  Impacts
> = z.object({
  type: z.string(),
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Impacts$ {
  /** @deprecated use `Impacts$inboundSchema` instead. */
  export const inboundSchema = Impacts$inboundSchema;
  /** @deprecated use `Impacts$outboundSchema` instead. */
  export const outboundSchema = Impacts$outboundSchema;
  /** @deprecated use `Impacts$Outbound` instead. */
  export type Outbound = Impacts$Outbound;
}

export function impactsToJSON(impacts: Impacts): string {
  return JSON.stringify(Impacts$outboundSchema.parse(impacts));
}

export function impactsFromJSON(
  jsonString: string,
): SafeParseResult<Impacts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Impacts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Impacts' from JSON`,
  );
}

/** @internal */
export const Milestones$inboundSchema: z.ZodType<
  Milestones,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  occurred_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
  });
});

/** @internal */
export type Milestones$Outbound = {
  type: string;
  occurred_at: string;
};

/** @internal */
export const Milestones$outboundSchema: z.ZodType<
  Milestones$Outbound,
  z.ZodTypeDef,
  Milestones
> = z.object({
  type: z.string(),
  occurredAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Milestones$ {
  /** @deprecated use `Milestones$inboundSchema` instead. */
  export const inboundSchema = Milestones$inboundSchema;
  /** @deprecated use `Milestones$outboundSchema` instead. */
  export const outboundSchema = Milestones$outboundSchema;
  /** @deprecated use `Milestones$Outbound` instead. */
  export type Outbound = Milestones$Outbound;
}

export function milestonesToJSON(milestones: Milestones): string {
  return JSON.stringify(Milestones$outboundSchema.parse(milestones));
}

export function milestonesFromJSON(
  jsonString: string,
): SafeParseResult<Milestones, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Milestones$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Milestones' from JSON`,
  );
}

/** @internal */
export const CustomFields$inboundSchema: z.ZodType<
  CustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_id: z.string(),
  value_string: z.string().optional(),
  value_array: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "field_id": "fieldId",
    "value_string": "valueString",
    "value_array": "valueArray",
  });
});

/** @internal */
export type CustomFields$Outbound = {
  field_id: string;
  value_string?: string | undefined;
  value_array?: Array<string> | undefined;
};

/** @internal */
export const CustomFields$outboundSchema: z.ZodType<
  CustomFields$Outbound,
  z.ZodTypeDef,
  CustomFields
> = z.object({
  fieldId: z.string(),
  valueString: z.string().optional(),
  valueArray: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fieldId: "field_id",
    valueString: "value_string",
    valueArray: "value_array",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFields$ {
  /** @deprecated use `CustomFields$inboundSchema` instead. */
  export const inboundSchema = CustomFields$inboundSchema;
  /** @deprecated use `CustomFields$outboundSchema` instead. */
  export const outboundSchema = CustomFields$outboundSchema;
  /** @deprecated use `CustomFields$Outbound` instead. */
  export type Outbound = CustomFields$Outbound;
}

export function customFieldsToJSON(customFields: CustomFields): string {
  return JSON.stringify(CustomFields$outboundSchema.parse(customFields));
}

export function customFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFields' from JSON`,
  );
}

/** @internal */
export const PostV1Incidents$inboundSchema: z.ZodType<
  PostV1Incidents,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  summary: z.string().optional(),
  customer_impact_summary: z.string().optional(),
  description: z.string().optional(),
  priority: z.string().optional(),
  severity: z.string().optional(),
  severity_condition_id: z.string().optional(),
  severity_impact_id: z.string().optional(),
  alert_ids: z.array(z.string()).optional(),
  labels: z.lazy(() => PostV1IncidentsLabels$inboundSchema).optional(),
  runbook_ids: z.array(z.string()).optional(),
  tag_list: z.array(z.string()).optional(),
  impacts: z.array(z.lazy(() => Impacts$inboundSchema)).optional(),
  milestones: z.array(z.lazy(() => Milestones$inboundSchema)).optional(),
  restricted: z.boolean().optional(),
  team_ids: z.array(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => CustomFields$inboundSchema)).optional(),
  external_links: z.string().optional(),
  skip_incident_type_values: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "customer_impact_summary": "customerImpactSummary",
    "severity_condition_id": "severityConditionId",
    "severity_impact_id": "severityImpactId",
    "alert_ids": "alertIds",
    "runbook_ids": "runbookIds",
    "tag_list": "tagList",
    "team_ids": "teamIds",
    "custom_fields": "customFields",
    "external_links": "externalLinks",
    "skip_incident_type_values": "skipIncidentTypeValues",
  });
});

/** @internal */
export type PostV1Incidents$Outbound = {
  name: string;
  summary?: string | undefined;
  customer_impact_summary?: string | undefined;
  description?: string | undefined;
  priority?: string | undefined;
  severity?: string | undefined;
  severity_condition_id?: string | undefined;
  severity_impact_id?: string | undefined;
  alert_ids?: Array<string> | undefined;
  labels?: PostV1IncidentsLabels$Outbound | undefined;
  runbook_ids?: Array<string> | undefined;
  tag_list?: Array<string> | undefined;
  impacts?: Array<Impacts$Outbound> | undefined;
  milestones?: Array<Milestones$Outbound> | undefined;
  restricted?: boolean | undefined;
  team_ids?: Array<string> | undefined;
  custom_fields?: Array<CustomFields$Outbound> | undefined;
  external_links?: string | undefined;
  skip_incident_type_values: boolean;
};

/** @internal */
export const PostV1Incidents$outboundSchema: z.ZodType<
  PostV1Incidents$Outbound,
  z.ZodTypeDef,
  PostV1Incidents
> = z.object({
  name: z.string(),
  summary: z.string().optional(),
  customerImpactSummary: z.string().optional(),
  description: z.string().optional(),
  priority: z.string().optional(),
  severity: z.string().optional(),
  severityConditionId: z.string().optional(),
  severityImpactId: z.string().optional(),
  alertIds: z.array(z.string()).optional(),
  labels: z.lazy(() => PostV1IncidentsLabels$outboundSchema).optional(),
  runbookIds: z.array(z.string()).optional(),
  tagList: z.array(z.string()).optional(),
  impacts: z.array(z.lazy(() => Impacts$outboundSchema)).optional(),
  milestones: z.array(z.lazy(() => Milestones$outboundSchema)).optional(),
  restricted: z.boolean().optional(),
  teamIds: z.array(z.string()).optional(),
  customFields: z.array(z.lazy(() => CustomFields$outboundSchema)).optional(),
  externalLinks: z.string().optional(),
  skipIncidentTypeValues: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    customerImpactSummary: "customer_impact_summary",
    severityConditionId: "severity_condition_id",
    severityImpactId: "severity_impact_id",
    alertIds: "alert_ids",
    runbookIds: "runbook_ids",
    tagList: "tag_list",
    teamIds: "team_ids",
    customFields: "custom_fields",
    externalLinks: "external_links",
    skipIncidentTypeValues: "skip_incident_type_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Incidents$ {
  /** @deprecated use `PostV1Incidents$inboundSchema` instead. */
  export const inboundSchema = PostV1Incidents$inboundSchema;
  /** @deprecated use `PostV1Incidents$outboundSchema` instead. */
  export const outboundSchema = PostV1Incidents$outboundSchema;
  /** @deprecated use `PostV1Incidents$Outbound` instead. */
  export type Outbound = PostV1Incidents$Outbound;
}

export function postV1IncidentsToJSON(
  postV1Incidents: PostV1Incidents,
): string {
  return JSON.stringify(PostV1Incidents$outboundSchema.parse(postV1Incidents));
}

export function postV1IncidentsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Incidents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Incidents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Incidents' from JSON`,
  );
}
