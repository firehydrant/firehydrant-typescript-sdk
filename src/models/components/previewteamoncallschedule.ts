/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PreviewTeamOnCallScheduleMember = {
  /**
   * The ID of a user who should be added to the rotation. You can add a user to the rotation
   *
   * @remarks
   * multiple times to construct more complex rotations, and you can specify a `null` user ID to create
   * unassigned slots in the rotation.
   */
  userId?: string | null | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const PreviewTeamOnCallScheduleType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type PreviewTeamOnCallScheduleType = ClosedEnum<
  typeof PreviewTeamOnCallScheduleType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const PreviewTeamOnCallScheduleHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type PreviewTeamOnCallScheduleHandoffDay = ClosedEnum<
  typeof PreviewTeamOnCallScheduleHandoffDay
>;

/**
 * An object that specifies how the rotation's on-call shifts should be generated.
 */
export type PreviewTeamOnCallScheduleStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: PreviewTeamOnCallScheduleType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | null | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?: PreviewTeamOnCallScheduleHandoffDay | null | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | null | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const PreviewTeamOnCallScheduleStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type PreviewTeamOnCallScheduleStartDay = ClosedEnum<
  typeof PreviewTeamOnCallScheduleStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const PreviewTeamOnCallScheduleEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type PreviewTeamOnCallScheduleEndDay = ClosedEnum<
  typeof PreviewTeamOnCallScheduleEndDay
>;

export type PreviewTeamOnCallScheduleRestriction = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: PreviewTeamOnCallScheduleStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: PreviewTeamOnCallScheduleEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

export type PreviewTeamOnCallScheduleRotation = {
  /**
   * The name of the on-call rotation
   */
  name: string;
  /**
   * A detailed description of the on-call schedule.
   */
  description?: string | null | undefined;
  /**
   * The timezone of the on-call rotation as a string
   */
  timeZone: string;
  /**
   * The Slack Usergroup ID for the on-call rotation
   */
  slackUserGroupId?: string | null | undefined;
  /**
   * Notify the team's Slack channel when handoffs occur
   */
  enableSlackChannelNotifications?: boolean | null | undefined;
  /**
   * Prevent shifts from being deleted by users and leading to gaps in coverage.
   */
  preventShiftDeletion?: boolean | null | undefined;
  /**
   * An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
   */
  coverageGapNotificationInterval?: string | null | undefined;
  /**
   * A hex color code that will be used to represent the rotation in FireHydrant's UI.
   */
  color?: string | null | undefined;
  /**
   * An ordered list of objects that specify members of the schedule's rotation.
   */
  members?: Array<PreviewTeamOnCallScheduleMember> | null | undefined;
  /**
   * An object that specifies how the rotation's on-call shifts should be generated.
   */
  strategy: PreviewTeamOnCallScheduleStrategy;
  /**
   * A list of objects that restrict the rotation to specific on-call periods.
   */
  restrictions?: Array<PreviewTeamOnCallScheduleRestriction> | null | undefined;
  /**
   * An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
   */
  startTime?: string | null | undefined;
};

/**
 * Preview a new on-call schedule based on the provided rotations, allowing you to see how the schedule will look before saving it.
 */
export type PreviewTeamOnCallSchedule = {
  /**
   * The on-call schedule's name.
   */
  name: string;
  /**
   * A detailed description of the on-call schedule.
   */
  description?: string | null | undefined;
  /**
   * An array of objects that specify rotations for the schedule. If not provided, the deprecated single-rotation parameters can be used instead, with `time_zone` and `strategy` being required.
   */
  rotations: Array<PreviewTeamOnCallScheduleRotation>;
  /**
   * An ISO8601 time string specifying the start of the time window to preview. Defaults to now.
   */
  from?: string | null | undefined;
  /**
   * An ISO8601 time string specifying the end of the time window to preview. Defaults to two weeks from now.
   */
  to?: string | null | undefined;
};

/** @internal */
export const PreviewTeamOnCallScheduleMember$inboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type PreviewTeamOnCallScheduleMember$Outbound = {
  user_id?: string | null | undefined;
};

/** @internal */
export const PreviewTeamOnCallScheduleMember$outboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleMember$Outbound,
  z.ZodTypeDef,
  PreviewTeamOnCallScheduleMember
> = z.object({
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleMember$ {
  /** @deprecated use `PreviewTeamOnCallScheduleMember$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallScheduleMember$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleMember$outboundSchema` instead. */
  export const outboundSchema = PreviewTeamOnCallScheduleMember$outboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleMember$Outbound` instead. */
  export type Outbound = PreviewTeamOnCallScheduleMember$Outbound;
}

export function previewTeamOnCallScheduleMemberToJSON(
  previewTeamOnCallScheduleMember: PreviewTeamOnCallScheduleMember,
): string {
  return JSON.stringify(
    PreviewTeamOnCallScheduleMember$outboundSchema.parse(
      previewTeamOnCallScheduleMember,
    ),
  );
}

export function previewTeamOnCallScheduleMemberFromJSON(
  jsonString: string,
): SafeParseResult<PreviewTeamOnCallScheduleMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewTeamOnCallScheduleMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewTeamOnCallScheduleMember' from JSON`,
  );
}

/** @internal */
export const PreviewTeamOnCallScheduleType$inboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleType
> = z.nativeEnum(PreviewTeamOnCallScheduleType);

/** @internal */
export const PreviewTeamOnCallScheduleType$outboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleType
> = PreviewTeamOnCallScheduleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleType$ {
  /** @deprecated use `PreviewTeamOnCallScheduleType$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallScheduleType$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleType$outboundSchema` instead. */
  export const outboundSchema = PreviewTeamOnCallScheduleType$outboundSchema;
}

/** @internal */
export const PreviewTeamOnCallScheduleHandoffDay$inboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleHandoffDay
> = z.nativeEnum(PreviewTeamOnCallScheduleHandoffDay);

/** @internal */
export const PreviewTeamOnCallScheduleHandoffDay$outboundSchema:
  z.ZodNativeEnum<typeof PreviewTeamOnCallScheduleHandoffDay> =
    PreviewTeamOnCallScheduleHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleHandoffDay$ {
  /** @deprecated use `PreviewTeamOnCallScheduleHandoffDay$inboundSchema` instead. */
  export const inboundSchema =
    PreviewTeamOnCallScheduleHandoffDay$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    PreviewTeamOnCallScheduleHandoffDay$outboundSchema;
}

/** @internal */
export const PreviewTeamOnCallScheduleStrategy$inboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PreviewTeamOnCallScheduleType$inboundSchema,
  handoff_time: z.nullable(z.string()).optional(),
  handoff_day: z.nullable(PreviewTeamOnCallScheduleHandoffDay$inboundSchema)
    .optional(),
  shift_duration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_time": "handoffTime",
    "handoff_day": "handoffDay",
    "shift_duration": "shiftDuration",
  });
});

/** @internal */
export type PreviewTeamOnCallScheduleStrategy$Outbound = {
  type: string;
  handoff_time?: string | null | undefined;
  handoff_day?: string | null | undefined;
  shift_duration?: string | null | undefined;
};

/** @internal */
export const PreviewTeamOnCallScheduleStrategy$outboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleStrategy$Outbound,
  z.ZodTypeDef,
  PreviewTeamOnCallScheduleStrategy
> = z.object({
  type: PreviewTeamOnCallScheduleType$outboundSchema,
  handoffTime: z.nullable(z.string()).optional(),
  handoffDay: z.nullable(PreviewTeamOnCallScheduleHandoffDay$outboundSchema)
    .optional(),
  shiftDuration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffTime: "handoff_time",
    handoffDay: "handoff_day",
    shiftDuration: "shift_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleStrategy$ {
  /** @deprecated use `PreviewTeamOnCallScheduleStrategy$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallScheduleStrategy$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleStrategy$outboundSchema` instead. */
  export const outboundSchema =
    PreviewTeamOnCallScheduleStrategy$outboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleStrategy$Outbound` instead. */
  export type Outbound = PreviewTeamOnCallScheduleStrategy$Outbound;
}

export function previewTeamOnCallScheduleStrategyToJSON(
  previewTeamOnCallScheduleStrategy: PreviewTeamOnCallScheduleStrategy,
): string {
  return JSON.stringify(
    PreviewTeamOnCallScheduleStrategy$outboundSchema.parse(
      previewTeamOnCallScheduleStrategy,
    ),
  );
}

export function previewTeamOnCallScheduleStrategyFromJSON(
  jsonString: string,
): SafeParseResult<PreviewTeamOnCallScheduleStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewTeamOnCallScheduleStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewTeamOnCallScheduleStrategy' from JSON`,
  );
}

/** @internal */
export const PreviewTeamOnCallScheduleStartDay$inboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleStartDay
> = z.nativeEnum(PreviewTeamOnCallScheduleStartDay);

/** @internal */
export const PreviewTeamOnCallScheduleStartDay$outboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleStartDay
> = PreviewTeamOnCallScheduleStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleStartDay$ {
  /** @deprecated use `PreviewTeamOnCallScheduleStartDay$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallScheduleStartDay$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleStartDay$outboundSchema` instead. */
  export const outboundSchema =
    PreviewTeamOnCallScheduleStartDay$outboundSchema;
}

/** @internal */
export const PreviewTeamOnCallScheduleEndDay$inboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleEndDay
> = z.nativeEnum(PreviewTeamOnCallScheduleEndDay);

/** @internal */
export const PreviewTeamOnCallScheduleEndDay$outboundSchema: z.ZodNativeEnum<
  typeof PreviewTeamOnCallScheduleEndDay
> = PreviewTeamOnCallScheduleEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleEndDay$ {
  /** @deprecated use `PreviewTeamOnCallScheduleEndDay$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallScheduleEndDay$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleEndDay$outboundSchema` instead. */
  export const outboundSchema = PreviewTeamOnCallScheduleEndDay$outboundSchema;
}

/** @internal */
export const PreviewTeamOnCallScheduleRestriction$inboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_day: PreviewTeamOnCallScheduleStartDay$inboundSchema,
  start_time: z.string(),
  end_day: PreviewTeamOnCallScheduleEndDay$inboundSchema,
  end_time: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_day": "startDay",
    "start_time": "startTime",
    "end_day": "endDay",
    "end_time": "endTime",
  });
});

/** @internal */
export type PreviewTeamOnCallScheduleRestriction$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const PreviewTeamOnCallScheduleRestriction$outboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleRestriction$Outbound,
  z.ZodTypeDef,
  PreviewTeamOnCallScheduleRestriction
> = z.object({
  startDay: PreviewTeamOnCallScheduleStartDay$outboundSchema,
  startTime: z.string(),
  endDay: PreviewTeamOnCallScheduleEndDay$outboundSchema,
  endTime: z.string(),
}).transform((v) => {
  return remap$(v, {
    startDay: "start_day",
    startTime: "start_time",
    endDay: "end_day",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleRestriction$ {
  /** @deprecated use `PreviewTeamOnCallScheduleRestriction$inboundSchema` instead. */
  export const inboundSchema =
    PreviewTeamOnCallScheduleRestriction$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleRestriction$outboundSchema` instead. */
  export const outboundSchema =
    PreviewTeamOnCallScheduleRestriction$outboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleRestriction$Outbound` instead. */
  export type Outbound = PreviewTeamOnCallScheduleRestriction$Outbound;
}

export function previewTeamOnCallScheduleRestrictionToJSON(
  previewTeamOnCallScheduleRestriction: PreviewTeamOnCallScheduleRestriction,
): string {
  return JSON.stringify(
    PreviewTeamOnCallScheduleRestriction$outboundSchema.parse(
      previewTeamOnCallScheduleRestriction,
    ),
  );
}

export function previewTeamOnCallScheduleRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<PreviewTeamOnCallScheduleRestriction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PreviewTeamOnCallScheduleRestriction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewTeamOnCallScheduleRestriction' from JSON`,
  );
}

/** @internal */
export const PreviewTeamOnCallScheduleRotation$inboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleRotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  time_zone: z.string(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  enable_slack_channel_notifications: z.nullable(z.boolean()).optional(),
  prevent_shift_deletion: z.nullable(z.boolean()).optional(),
  coverage_gap_notification_interval: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => PreviewTeamOnCallScheduleMember$inboundSchema)),
  ).optional(),
  strategy: z.lazy(() => PreviewTeamOnCallScheduleStrategy$inboundSchema),
  restrictions: z.nullable(
    z.array(z.lazy(() => PreviewTeamOnCallScheduleRestriction$inboundSchema)),
  ).optional(),
  start_time: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "enable_slack_channel_notifications": "enableSlackChannelNotifications",
    "prevent_shift_deletion": "preventShiftDeletion",
    "coverage_gap_notification_interval": "coverageGapNotificationInterval",
    "start_time": "startTime",
  });
});

/** @internal */
export type PreviewTeamOnCallScheduleRotation$Outbound = {
  name: string;
  description?: string | null | undefined;
  time_zone: string;
  slack_user_group_id?: string | null | undefined;
  enable_slack_channel_notifications?: boolean | null | undefined;
  prevent_shift_deletion?: boolean | null | undefined;
  coverage_gap_notification_interval?: string | null | undefined;
  color?: string | null | undefined;
  members?: Array<PreviewTeamOnCallScheduleMember$Outbound> | null | undefined;
  strategy: PreviewTeamOnCallScheduleStrategy$Outbound;
  restrictions?:
    | Array<PreviewTeamOnCallScheduleRestriction$Outbound>
    | null
    | undefined;
  start_time?: string | null | undefined;
};

/** @internal */
export const PreviewTeamOnCallScheduleRotation$outboundSchema: z.ZodType<
  PreviewTeamOnCallScheduleRotation$Outbound,
  z.ZodTypeDef,
  PreviewTeamOnCallScheduleRotation
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  timeZone: z.string(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  enableSlackChannelNotifications: z.nullable(z.boolean()).optional(),
  preventShiftDeletion: z.nullable(z.boolean()).optional(),
  coverageGapNotificationInterval: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => PreviewTeamOnCallScheduleMember$outboundSchema)),
  ).optional(),
  strategy: z.lazy(() => PreviewTeamOnCallScheduleStrategy$outboundSchema),
  restrictions: z.nullable(
    z.array(z.lazy(() => PreviewTeamOnCallScheduleRestriction$outboundSchema)),
  ).optional(),
  startTime: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    enableSlackChannelNotifications: "enable_slack_channel_notifications",
    preventShiftDeletion: "prevent_shift_deletion",
    coverageGapNotificationInterval: "coverage_gap_notification_interval",
    startTime: "start_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallScheduleRotation$ {
  /** @deprecated use `PreviewTeamOnCallScheduleRotation$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallScheduleRotation$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleRotation$outboundSchema` instead. */
  export const outboundSchema =
    PreviewTeamOnCallScheduleRotation$outboundSchema;
  /** @deprecated use `PreviewTeamOnCallScheduleRotation$Outbound` instead. */
  export type Outbound = PreviewTeamOnCallScheduleRotation$Outbound;
}

export function previewTeamOnCallScheduleRotationToJSON(
  previewTeamOnCallScheduleRotation: PreviewTeamOnCallScheduleRotation,
): string {
  return JSON.stringify(
    PreviewTeamOnCallScheduleRotation$outboundSchema.parse(
      previewTeamOnCallScheduleRotation,
    ),
  );
}

export function previewTeamOnCallScheduleRotationFromJSON(
  jsonString: string,
): SafeParseResult<PreviewTeamOnCallScheduleRotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewTeamOnCallScheduleRotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewTeamOnCallScheduleRotation' from JSON`,
  );
}

/** @internal */
export const PreviewTeamOnCallSchedule$inboundSchema: z.ZodType<
  PreviewTeamOnCallSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  rotations: z.array(
    z.lazy(() => PreviewTeamOnCallScheduleRotation$inboundSchema),
  ),
  from: z.nullable(z.string()).optional(),
  to: z.nullable(z.string()).optional(),
});

/** @internal */
export type PreviewTeamOnCallSchedule$Outbound = {
  name: string;
  description?: string | null | undefined;
  rotations: Array<PreviewTeamOnCallScheduleRotation$Outbound>;
  from?: string | null | undefined;
  to?: string | null | undefined;
};

/** @internal */
export const PreviewTeamOnCallSchedule$outboundSchema: z.ZodType<
  PreviewTeamOnCallSchedule$Outbound,
  z.ZodTypeDef,
  PreviewTeamOnCallSchedule
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  rotations: z.array(
    z.lazy(() => PreviewTeamOnCallScheduleRotation$outboundSchema),
  ),
  from: z.nullable(z.string()).optional(),
  to: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewTeamOnCallSchedule$ {
  /** @deprecated use `PreviewTeamOnCallSchedule$inboundSchema` instead. */
  export const inboundSchema = PreviewTeamOnCallSchedule$inboundSchema;
  /** @deprecated use `PreviewTeamOnCallSchedule$outboundSchema` instead. */
  export const outboundSchema = PreviewTeamOnCallSchedule$outboundSchema;
  /** @deprecated use `PreviewTeamOnCallSchedule$Outbound` instead. */
  export type Outbound = PreviewTeamOnCallSchedule$Outbound;
}

export function previewTeamOnCallScheduleToJSON(
  previewTeamOnCallSchedule: PreviewTeamOnCallSchedule,
): string {
  return JSON.stringify(
    PreviewTeamOnCallSchedule$outboundSchema.parse(previewTeamOnCallSchedule),
  );
}

export function previewTeamOnCallScheduleFromJSON(
  jsonString: string,
): SafeParseResult<PreviewTeamOnCallSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewTeamOnCallSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewTeamOnCallSchedule' from JSON`,
  );
}
