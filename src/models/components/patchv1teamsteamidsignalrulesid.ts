/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the rule will notify when matched.
 */
export const PatchV1TeamsTeamIdSignalRulesIdTargetType = {
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the rule will notify when matched.
 */
export type PatchV1TeamsTeamIdSignalRulesIdTargetType = ClosedEnum<
  typeof PatchV1TeamsTeamIdSignalRulesIdTargetType
>;

/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export const PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
  Unknown: "",
} as const;
/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export type PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride =
  ClosedEnum<
    typeof PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride
  >;

/**
 * Update a Signals rule by ID
 */
export type PatchV1TeamsTeamIdSignalRulesId = {
  /**
   * The rule's name.
   */
  name?: string | undefined;
  /**
   * The CEL expression that defines the rule.
   */
  expression?: string | undefined;
  /**
   * The type of target that the rule will notify when matched.
   */
  targetType?: PatchV1TeamsTeamIdSignalRulesIdTargetType | undefined;
  /**
   * The ID of the target that the rule will notify when matched.
   */
  targetId?: string | undefined;
  /**
   * The ID of an incident type that should be used when an alert is promoted to an incident
   */
  incidentTypeId?: string | undefined;
  /**
   * A notification priority that will be set on the resulting alert (default: HIGH)
   */
  notificationPriorityOverride?:
    | PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride
    | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdSignalRulesIdTargetType$inboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdSignalRulesIdTargetType> = z
    .nativeEnum(PatchV1TeamsTeamIdSignalRulesIdTargetType);

/** @internal */
export const PatchV1TeamsTeamIdSignalRulesIdTargetType$outboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdSignalRulesIdTargetType> =
    PatchV1TeamsTeamIdSignalRulesIdTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdSignalRulesIdTargetType$ {
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesIdTargetType$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdSignalRulesIdTargetType$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesIdTargetType$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdSignalRulesIdTargetType$outboundSchema;
}

/** @internal */
export const PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride
  > = z.nativeEnum(PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride);

/** @internal */
export const PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride
  > = PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$ {
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$outboundSchema;
}

/** @internal */
export const PatchV1TeamsTeamIdSignalRulesId$inboundSchema: z.ZodType<
  PatchV1TeamsTeamIdSignalRulesId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  expression: z.string().optional(),
  target_type: PatchV1TeamsTeamIdSignalRulesIdTargetType$inboundSchema
    .optional(),
  target_id: z.string().optional(),
  incident_type_id: z.string().optional(),
  notification_priority_override:
    PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
    "incident_type_id": "incidentTypeId",
    "notification_priority_override": "notificationPriorityOverride",
  });
});

/** @internal */
export type PatchV1TeamsTeamIdSignalRulesId$Outbound = {
  name?: string | undefined;
  expression?: string | undefined;
  target_type?: string | undefined;
  target_id?: string | undefined;
  incident_type_id?: string | undefined;
  notification_priority_override?: string | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdSignalRulesId$outboundSchema: z.ZodType<
  PatchV1TeamsTeamIdSignalRulesId$Outbound,
  z.ZodTypeDef,
  PatchV1TeamsTeamIdSignalRulesId
> = z.object({
  name: z.string().optional(),
  expression: z.string().optional(),
  targetType: PatchV1TeamsTeamIdSignalRulesIdTargetType$outboundSchema
    .optional(),
  targetId: z.string().optional(),
  incidentTypeId: z.string().optional(),
  notificationPriorityOverride:
    PatchV1TeamsTeamIdSignalRulesIdNotificationPriorityOverride$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
    incidentTypeId: "incident_type_id",
    notificationPriorityOverride: "notification_priority_override",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdSignalRulesId$ {
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesId$inboundSchema` instead. */
  export const inboundSchema = PatchV1TeamsTeamIdSignalRulesId$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesId$outboundSchema` instead. */
  export const outboundSchema = PatchV1TeamsTeamIdSignalRulesId$outboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdSignalRulesId$Outbound` instead. */
  export type Outbound = PatchV1TeamsTeamIdSignalRulesId$Outbound;
}

export function patchV1TeamsTeamIdSignalRulesIdToJSON(
  patchV1TeamsTeamIdSignalRulesId: PatchV1TeamsTeamIdSignalRulesId,
): string {
  return JSON.stringify(
    PatchV1TeamsTeamIdSignalRulesId$outboundSchema.parse(
      patchV1TeamsTeamIdSignalRulesId,
    ),
  );
}

export function patchV1TeamsTeamIdSignalRulesIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TeamsTeamIdSignalRulesId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TeamsTeamIdSignalRulesId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TeamsTeamIdSignalRulesId' from JSON`,
  );
}
