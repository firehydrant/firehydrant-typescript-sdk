/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateIncidentChangeEventType = {
  Caused: "caused",
  Fixed: "fixed",
  Suspect: "suspect",
  Dismissed: "dismissed",
} as const;
export type CreateIncidentChangeEventType = ClosedEnum<
  typeof CreateIncidentChangeEventType
>;

/**
 * Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
 */
export type CreateIncidentChangeEvent = {
  /**
   * The ID of the change event to associate
   */
  changeEventId: string;
  type: CreateIncidentChangeEventType;
  /**
   * A short description about why this change event is related
   */
  why?: string | null | undefined;
};

/** @internal */
export const CreateIncidentChangeEventType$inboundSchema: z.ZodNativeEnum<
  typeof CreateIncidentChangeEventType
> = z.nativeEnum(CreateIncidentChangeEventType);

/** @internal */
export const CreateIncidentChangeEventType$outboundSchema: z.ZodNativeEnum<
  typeof CreateIncidentChangeEventType
> = CreateIncidentChangeEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentChangeEventType$ {
  /** @deprecated use `CreateIncidentChangeEventType$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentChangeEventType$inboundSchema;
  /** @deprecated use `CreateIncidentChangeEventType$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentChangeEventType$outboundSchema;
}

/** @internal */
export const CreateIncidentChangeEvent$inboundSchema: z.ZodType<
  CreateIncidentChangeEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  change_event_id: z.string(),
  type: CreateIncidentChangeEventType$inboundSchema,
  why: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "change_event_id": "changeEventId",
  });
});

/** @internal */
export type CreateIncidentChangeEvent$Outbound = {
  change_event_id: string;
  type: string;
  why?: string | null | undefined;
};

/** @internal */
export const CreateIncidentChangeEvent$outboundSchema: z.ZodType<
  CreateIncidentChangeEvent$Outbound,
  z.ZodTypeDef,
  CreateIncidentChangeEvent
> = z.object({
  changeEventId: z.string(),
  type: CreateIncidentChangeEventType$outboundSchema,
  why: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    changeEventId: "change_event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentChangeEvent$ {
  /** @deprecated use `CreateIncidentChangeEvent$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentChangeEvent$inboundSchema;
  /** @deprecated use `CreateIncidentChangeEvent$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentChangeEvent$outboundSchema;
  /** @deprecated use `CreateIncidentChangeEvent$Outbound` instead. */
  export type Outbound = CreateIncidentChangeEvent$Outbound;
}

export function createIncidentChangeEventToJSON(
  createIncidentChangeEvent: CreateIncidentChangeEvent,
): string {
  return JSON.stringify(
    CreateIncidentChangeEvent$outboundSchema.parse(createIncidentChangeEvent),
  );
}

export function createIncidentChangeEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentChangeEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentChangeEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentChangeEvent' from JSON`,
  );
}
