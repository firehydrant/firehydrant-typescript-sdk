/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The components of the user's name
 */
export type PutV1ScimV2UsersIdName = {
  /**
   * The family name of the User, or last name in most Western languages
   */
  givenName: string;
  /**
   * The given name of the User, or first name in most Western languages
   */
  familyName: string;
};

export type PutV1ScimV2UsersIdEmails = {
  /**
   * String that represents an email address for the User
   */
  value: string;
  /**
   * Boolean which signifies if an email is intended as the primary email for the User
   */
  primary?: boolean | undefined;
};

/**
 * PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.
 */
export type PutV1ScimV2UsersId = {
  /**
   * A service provider's unique identifier for the user
   */
  userName?: string | undefined;
  /**
   * The components of the user's name
   */
  name?: PutV1ScimV2UsersIdName | undefined;
  /**
   * Email addresses for the User
   */
  emails?: Array<PutV1ScimV2UsersIdEmails> | undefined;
  /**
   * Roles for the User
   */
  roles?: Array<string> | undefined;
  /**
   * Boolean that represents whether user is active
   */
  active?: boolean | undefined;
};

/** @internal */
export const PutV1ScimV2UsersIdName$inboundSchema: z.ZodType<
  PutV1ScimV2UsersIdName,
  z.ZodTypeDef,
  unknown
> = z.object({
  givenName: z.string(),
  familyName: z.string(),
});

/** @internal */
export type PutV1ScimV2UsersIdName$Outbound = {
  givenName: string;
  familyName: string;
};

/** @internal */
export const PutV1ScimV2UsersIdName$outboundSchema: z.ZodType<
  PutV1ScimV2UsersIdName$Outbound,
  z.ZodTypeDef,
  PutV1ScimV2UsersIdName
> = z.object({
  givenName: z.string(),
  familyName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ScimV2UsersIdName$ {
  /** @deprecated use `PutV1ScimV2UsersIdName$inboundSchema` instead. */
  export const inboundSchema = PutV1ScimV2UsersIdName$inboundSchema;
  /** @deprecated use `PutV1ScimV2UsersIdName$outboundSchema` instead. */
  export const outboundSchema = PutV1ScimV2UsersIdName$outboundSchema;
  /** @deprecated use `PutV1ScimV2UsersIdName$Outbound` instead. */
  export type Outbound = PutV1ScimV2UsersIdName$Outbound;
}

export function putV1ScimV2UsersIdNameToJSON(
  putV1ScimV2UsersIdName: PutV1ScimV2UsersIdName,
): string {
  return JSON.stringify(
    PutV1ScimV2UsersIdName$outboundSchema.parse(putV1ScimV2UsersIdName),
  );
}

export function putV1ScimV2UsersIdNameFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ScimV2UsersIdName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ScimV2UsersIdName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ScimV2UsersIdName' from JSON`,
  );
}

/** @internal */
export const PutV1ScimV2UsersIdEmails$inboundSchema: z.ZodType<
  PutV1ScimV2UsersIdEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  primary: z.boolean().optional(),
});

/** @internal */
export type PutV1ScimV2UsersIdEmails$Outbound = {
  value: string;
  primary?: boolean | undefined;
};

/** @internal */
export const PutV1ScimV2UsersIdEmails$outboundSchema: z.ZodType<
  PutV1ScimV2UsersIdEmails$Outbound,
  z.ZodTypeDef,
  PutV1ScimV2UsersIdEmails
> = z.object({
  value: z.string(),
  primary: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ScimV2UsersIdEmails$ {
  /** @deprecated use `PutV1ScimV2UsersIdEmails$inboundSchema` instead. */
  export const inboundSchema = PutV1ScimV2UsersIdEmails$inboundSchema;
  /** @deprecated use `PutV1ScimV2UsersIdEmails$outboundSchema` instead. */
  export const outboundSchema = PutV1ScimV2UsersIdEmails$outboundSchema;
  /** @deprecated use `PutV1ScimV2UsersIdEmails$Outbound` instead. */
  export type Outbound = PutV1ScimV2UsersIdEmails$Outbound;
}

export function putV1ScimV2UsersIdEmailsToJSON(
  putV1ScimV2UsersIdEmails: PutV1ScimV2UsersIdEmails,
): string {
  return JSON.stringify(
    PutV1ScimV2UsersIdEmails$outboundSchema.parse(putV1ScimV2UsersIdEmails),
  );
}

export function putV1ScimV2UsersIdEmailsFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ScimV2UsersIdEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ScimV2UsersIdEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ScimV2UsersIdEmails' from JSON`,
  );
}

/** @internal */
export const PutV1ScimV2UsersId$inboundSchema: z.ZodType<
  PutV1ScimV2UsersId,
  z.ZodTypeDef,
  unknown
> = z.object({
  userName: z.string().optional(),
  name: z.lazy(() => PutV1ScimV2UsersIdName$inboundSchema).optional(),
  emails: z.array(z.lazy(() => PutV1ScimV2UsersIdEmails$inboundSchema))
    .optional(),
  roles: z.array(z.string()).optional(),
  active: z.boolean().optional(),
});

/** @internal */
export type PutV1ScimV2UsersId$Outbound = {
  userName?: string | undefined;
  name?: PutV1ScimV2UsersIdName$Outbound | undefined;
  emails?: Array<PutV1ScimV2UsersIdEmails$Outbound> | undefined;
  roles?: Array<string> | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const PutV1ScimV2UsersId$outboundSchema: z.ZodType<
  PutV1ScimV2UsersId$Outbound,
  z.ZodTypeDef,
  PutV1ScimV2UsersId
> = z.object({
  userName: z.string().optional(),
  name: z.lazy(() => PutV1ScimV2UsersIdName$outboundSchema).optional(),
  emails: z.array(z.lazy(() => PutV1ScimV2UsersIdEmails$outboundSchema))
    .optional(),
  roles: z.array(z.string()).optional(),
  active: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ScimV2UsersId$ {
  /** @deprecated use `PutV1ScimV2UsersId$inboundSchema` instead. */
  export const inboundSchema = PutV1ScimV2UsersId$inboundSchema;
  /** @deprecated use `PutV1ScimV2UsersId$outboundSchema` instead. */
  export const outboundSchema = PutV1ScimV2UsersId$outboundSchema;
  /** @deprecated use `PutV1ScimV2UsersId$Outbound` instead. */
  export type Outbound = PutV1ScimV2UsersId$Outbound;
}

export function putV1ScimV2UsersIdToJSON(
  putV1ScimV2UsersId: PutV1ScimV2UsersId,
): string {
  return JSON.stringify(
    PutV1ScimV2UsersId$outboundSchema.parse(putV1ScimV2UsersId),
  );
}

export function putV1ScimV2UsersIdFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ScimV2UsersId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ScimV2UsersId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ScimV2UsersId' from JSON`,
  );
}
