/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Ticketing_ProjectInboundMappableFieldEntity model
 */
export type TicketingProjectInboundMappableFieldEntity = {
  /**
   * The ID of the field
   */
  value?: string | null | undefined;
  /**
   * The human-readable name of the field
   */
  label?: string | null | undefined;
};

/** @internal */
export const TicketingProjectInboundMappableFieldEntity$inboundSchema:
  z.ZodType<TicketingProjectInboundMappableFieldEntity, z.ZodTypeDef, unknown> =
    z.object({
      value: z.nullable(z.string()).optional(),
      label: z.nullable(z.string()).optional(),
    });

/** @internal */
export type TicketingProjectInboundMappableFieldEntity$Outbound = {
  value?: string | null | undefined;
  label?: string | null | undefined;
};

/** @internal */
export const TicketingProjectInboundMappableFieldEntity$outboundSchema:
  z.ZodType<
    TicketingProjectInboundMappableFieldEntity$Outbound,
    z.ZodTypeDef,
    TicketingProjectInboundMappableFieldEntity
  > = z.object({
    value: z.nullable(z.string()).optional(),
    label: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingProjectInboundMappableFieldEntity$ {
  /** @deprecated use `TicketingProjectInboundMappableFieldEntity$inboundSchema` instead. */
  export const inboundSchema =
    TicketingProjectInboundMappableFieldEntity$inboundSchema;
  /** @deprecated use `TicketingProjectInboundMappableFieldEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingProjectInboundMappableFieldEntity$outboundSchema;
  /** @deprecated use `TicketingProjectInboundMappableFieldEntity$Outbound` instead. */
  export type Outbound = TicketingProjectInboundMappableFieldEntity$Outbound;
}

export function ticketingProjectInboundMappableFieldEntityToJSON(
  ticketingProjectInboundMappableFieldEntity:
    TicketingProjectInboundMappableFieldEntity,
): string {
  return JSON.stringify(
    TicketingProjectInboundMappableFieldEntity$outboundSchema.parse(
      ticketingProjectInboundMappableFieldEntity,
    ),
  );
}

export function ticketingProjectInboundMappableFieldEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingProjectInboundMappableFieldEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingProjectInboundMappableFieldEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingProjectInboundMappableFieldEntity' from JSON`,
  );
}
