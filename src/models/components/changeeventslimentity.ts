/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  EnvironmentEntryEntity,
  EnvironmentEntryEntity$inboundSchema,
  EnvironmentEntryEntity$Outbound,
  EnvironmentEntryEntity$outboundSchema,
} from "./environmententryentity.js";
import {
  ServiceEntityLite,
  ServiceEntityLite$inboundSchema,
  ServiceEntityLite$Outbound,
  ServiceEntityLite$outboundSchema,
} from "./serviceentitylite.js";

/**
 * An object of label key and values
 */
export type ChangeEventSlimEntityLabels = {};

export type ChangeEventSlimEntity = {
  id?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  externalId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  startsAt?: Date | undefined;
  endsAt?: Date | null | undefined;
  durationMs?: number | null | undefined;
  durationIso8601?: string | null | undefined;
  environments?: Array<EnvironmentEntryEntity> | undefined;
  authors?: Array<AuthorEntity> | undefined;
  /**
   * An object of label key and values
   */
  labels?: ChangeEventSlimEntityLabels | undefined;
  services?: Array<ServiceEntityLite> | undefined;
};

/** @internal */
export const ChangeEventSlimEntityLabels$inboundSchema: z.ZodType<
  ChangeEventSlimEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ChangeEventSlimEntityLabels$Outbound = {};

/** @internal */
export const ChangeEventSlimEntityLabels$outboundSchema: z.ZodType<
  ChangeEventSlimEntityLabels$Outbound,
  z.ZodTypeDef,
  ChangeEventSlimEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeEventSlimEntityLabels$ {
  /** @deprecated use `ChangeEventSlimEntityLabels$inboundSchema` instead. */
  export const inboundSchema = ChangeEventSlimEntityLabels$inboundSchema;
  /** @deprecated use `ChangeEventSlimEntityLabels$outboundSchema` instead. */
  export const outboundSchema = ChangeEventSlimEntityLabels$outboundSchema;
  /** @deprecated use `ChangeEventSlimEntityLabels$Outbound` instead. */
  export type Outbound = ChangeEventSlimEntityLabels$Outbound;
}

export function changeEventSlimEntityLabelsToJSON(
  changeEventSlimEntityLabels: ChangeEventSlimEntityLabels,
): string {
  return JSON.stringify(
    ChangeEventSlimEntityLabels$outboundSchema.parse(
      changeEventSlimEntityLabels,
    ),
  );
}

export function changeEventSlimEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<ChangeEventSlimEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangeEventSlimEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeEventSlimEntityLabels' from JSON`,
  );
}

/** @internal */
export const ChangeEventSlimEntity$inboundSchema: z.ZodType<
  ChangeEventSlimEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  external_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  duration_ms: z.nullable(z.number().int()).optional(),
  duration_iso8601: z.nullable(z.string()).optional(),
  environments: z.array(EnvironmentEntryEntity$inboundSchema).optional(),
  authors: z.array(AuthorEntity$inboundSchema).optional(),
  labels: z.lazy(() => ChangeEventSlimEntityLabels$inboundSchema).optional(),
  services: z.array(ServiceEntityLite$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "duration_ms": "durationMs",
    "duration_iso8601": "durationIso8601",
  });
});

/** @internal */
export type ChangeEventSlimEntity$Outbound = {
  id?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  external_id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  starts_at?: string | undefined;
  ends_at?: string | null | undefined;
  duration_ms?: number | null | undefined;
  duration_iso8601?: string | null | undefined;
  environments?: Array<EnvironmentEntryEntity$Outbound> | undefined;
  authors?: Array<AuthorEntity$Outbound> | undefined;
  labels?: ChangeEventSlimEntityLabels$Outbound | undefined;
  services?: Array<ServiceEntityLite$Outbound> | undefined;
};

/** @internal */
export const ChangeEventSlimEntity$outboundSchema: z.ZodType<
  ChangeEventSlimEntity$Outbound,
  z.ZodTypeDef,
  ChangeEventSlimEntity
> = z.object({
  id: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  externalId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  startsAt: z.date().transform(v => v.toISOString()).optional(),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  durationMs: z.nullable(z.number().int()).optional(),
  durationIso8601: z.nullable(z.string()).optional(),
  environments: z.array(EnvironmentEntryEntity$outboundSchema).optional(),
  authors: z.array(AuthorEntity$outboundSchema).optional(),
  labels: z.lazy(() => ChangeEventSlimEntityLabels$outboundSchema).optional(),
  services: z.array(ServiceEntityLite$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startsAt: "starts_at",
    endsAt: "ends_at",
    durationMs: "duration_ms",
    durationIso8601: "duration_iso8601",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeEventSlimEntity$ {
  /** @deprecated use `ChangeEventSlimEntity$inboundSchema` instead. */
  export const inboundSchema = ChangeEventSlimEntity$inboundSchema;
  /** @deprecated use `ChangeEventSlimEntity$outboundSchema` instead. */
  export const outboundSchema = ChangeEventSlimEntity$outboundSchema;
  /** @deprecated use `ChangeEventSlimEntity$Outbound` instead. */
  export type Outbound = ChangeEventSlimEntity$Outbound;
}

export function changeEventSlimEntityToJSON(
  changeEventSlimEntity: ChangeEventSlimEntity,
): string {
  return JSON.stringify(
    ChangeEventSlimEntity$outboundSchema.parse(changeEventSlimEntity),
  );
}

export function changeEventSlimEntityFromJSON(
  jsonString: string,
): SafeParseResult<ChangeEventSlimEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangeEventSlimEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeEventSlimEntity' from JSON`,
  );
}
