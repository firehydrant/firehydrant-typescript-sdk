/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The field to use for grouping alerts
 */
export const UpdateSignalsAlertGroupingConfigurationFieldName = {
  Summary: "summary",
  Body: "body",
  Tags: "tags",
} as const;
/**
 * The field to use for grouping alerts
 */
export type UpdateSignalsAlertGroupingConfigurationFieldName = ClosedEnum<
  typeof UpdateSignalsAlertGroupingConfigurationFieldName
>;

/**
 * The type of strategy to use for grouping alerts
 */
export type UpdateSignalsAlertGroupingConfigurationSubstring = {
  /**
   * The field to use for grouping alerts
   */
  fieldName: UpdateSignalsAlertGroupingConfigurationFieldName;
  /**
   * The value to use for grouping alerts
   */
  value: string;
};

/**
 * The strategy to use for grouping alerts
 */
export type UpdateSignalsAlertGroupingConfigurationStrategy = {
  /**
   * The type of strategy to use for grouping alerts
   */
  substring?:
    | UpdateSignalsAlertGroupingConfigurationSubstring
    | null
    | undefined;
};

/**
 * Send FYI notification
 */
export type UpdateSignalsAlertGroupingConfigurationFyi = {
  /**
   * The slack channel ids to send the notification to
   */
  slackChannelIds: Array<string>;
};

/**
 * The action to take when grouping alerts
 */
export type UpdateSignalsAlertGroupingConfigurationAction = {
  /**
   * Link the alerts and do not notify anyone
   */
  link?: boolean | null | undefined;
  /**
   * Send FYI notification
   */
  fyi?: UpdateSignalsAlertGroupingConfigurationFyi | null | undefined;
};

/**
 * Update a Signals alert grouping rule for the organization.
 */
export type UpdateSignalsAlertGroupingConfiguration = {
  /**
   * The strategy to use for grouping alerts
   */
  strategy?: UpdateSignalsAlertGroupingConfigurationStrategy | null | undefined;
  /**
   * The action to take when grouping alerts
   */
  action?: UpdateSignalsAlertGroupingConfigurationAction | null | undefined;
  /**
   * How long to group alerts for
   */
  referenceAlertTimePeriod?: string | null | undefined;
};

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationFieldName$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSignalsAlertGroupingConfigurationFieldName> = z
    .nativeEnum(UpdateSignalsAlertGroupingConfigurationFieldName);

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationFieldName$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSignalsAlertGroupingConfigurationFieldName> =
    UpdateSignalsAlertGroupingConfigurationFieldName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertGroupingConfigurationFieldName$ {
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationFieldName$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsAlertGroupingConfigurationFieldName$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationFieldName$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsAlertGroupingConfigurationFieldName$outboundSchema;
}

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationSubstring$inboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationSubstring,
    z.ZodTypeDef,
    unknown
  > = z.object({
    field_name: UpdateSignalsAlertGroupingConfigurationFieldName$inboundSchema,
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "field_name": "fieldName",
    });
  });

/** @internal */
export type UpdateSignalsAlertGroupingConfigurationSubstring$Outbound = {
  field_name: string;
  value: string;
};

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationSubstring$outboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationSubstring$Outbound,
    z.ZodTypeDef,
    UpdateSignalsAlertGroupingConfigurationSubstring
  > = z.object({
    fieldName: UpdateSignalsAlertGroupingConfigurationFieldName$outboundSchema,
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      fieldName: "field_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertGroupingConfigurationSubstring$ {
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationSubstring$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsAlertGroupingConfigurationSubstring$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationSubstring$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsAlertGroupingConfigurationSubstring$outboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationSubstring$Outbound` instead. */
  export type Outbound =
    UpdateSignalsAlertGroupingConfigurationSubstring$Outbound;
}

export function updateSignalsAlertGroupingConfigurationSubstringToJSON(
  updateSignalsAlertGroupingConfigurationSubstring:
    UpdateSignalsAlertGroupingConfigurationSubstring,
): string {
  return JSON.stringify(
    UpdateSignalsAlertGroupingConfigurationSubstring$outboundSchema.parse(
      updateSignalsAlertGroupingConfigurationSubstring,
    ),
  );
}

export function updateSignalsAlertGroupingConfigurationSubstringFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSignalsAlertGroupingConfigurationSubstring,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSignalsAlertGroupingConfigurationSubstring$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSignalsAlertGroupingConfigurationSubstring' from JSON`,
  );
}

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationStrategy$inboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    substring: z.nullable(
      z.lazy(() =>
        UpdateSignalsAlertGroupingConfigurationSubstring$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type UpdateSignalsAlertGroupingConfigurationStrategy$Outbound = {
  substring?:
    | UpdateSignalsAlertGroupingConfigurationSubstring$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationStrategy$outboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationStrategy$Outbound,
    z.ZodTypeDef,
    UpdateSignalsAlertGroupingConfigurationStrategy
  > = z.object({
    substring: z.nullable(
      z.lazy(() =>
        UpdateSignalsAlertGroupingConfigurationSubstring$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertGroupingConfigurationStrategy$ {
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationStrategy$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsAlertGroupingConfigurationStrategy$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationStrategy$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsAlertGroupingConfigurationStrategy$outboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationStrategy$Outbound` instead. */
  export type Outbound =
    UpdateSignalsAlertGroupingConfigurationStrategy$Outbound;
}

export function updateSignalsAlertGroupingConfigurationStrategyToJSON(
  updateSignalsAlertGroupingConfigurationStrategy:
    UpdateSignalsAlertGroupingConfigurationStrategy,
): string {
  return JSON.stringify(
    UpdateSignalsAlertGroupingConfigurationStrategy$outboundSchema.parse(
      updateSignalsAlertGroupingConfigurationStrategy,
    ),
  );
}

export function updateSignalsAlertGroupingConfigurationStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSignalsAlertGroupingConfigurationStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSignalsAlertGroupingConfigurationStrategy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSignalsAlertGroupingConfigurationStrategy' from JSON`,
  );
}

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationFyi$inboundSchema:
  z.ZodType<UpdateSignalsAlertGroupingConfigurationFyi, z.ZodTypeDef, unknown> =
    z.object({
      slack_channel_ids: z.array(z.string()),
    }).transform((v) => {
      return remap$(v, {
        "slack_channel_ids": "slackChannelIds",
      });
    });

/** @internal */
export type UpdateSignalsAlertGroupingConfigurationFyi$Outbound = {
  slack_channel_ids: Array<string>;
};

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationFyi$outboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationFyi$Outbound,
    z.ZodTypeDef,
    UpdateSignalsAlertGroupingConfigurationFyi
  > = z.object({
    slackChannelIds: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      slackChannelIds: "slack_channel_ids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertGroupingConfigurationFyi$ {
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationFyi$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsAlertGroupingConfigurationFyi$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationFyi$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsAlertGroupingConfigurationFyi$outboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationFyi$Outbound` instead. */
  export type Outbound = UpdateSignalsAlertGroupingConfigurationFyi$Outbound;
}

export function updateSignalsAlertGroupingConfigurationFyiToJSON(
  updateSignalsAlertGroupingConfigurationFyi:
    UpdateSignalsAlertGroupingConfigurationFyi,
): string {
  return JSON.stringify(
    UpdateSignalsAlertGroupingConfigurationFyi$outboundSchema.parse(
      updateSignalsAlertGroupingConfigurationFyi,
    ),
  );
}

export function updateSignalsAlertGroupingConfigurationFyiFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSignalsAlertGroupingConfigurationFyi,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSignalsAlertGroupingConfigurationFyi$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSignalsAlertGroupingConfigurationFyi' from JSON`,
  );
}

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationAction$inboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationAction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    link: z.nullable(z.boolean()).optional(),
    fyi: z.nullable(
      z.lazy(() => UpdateSignalsAlertGroupingConfigurationFyi$inboundSchema),
    ).optional(),
  });

/** @internal */
export type UpdateSignalsAlertGroupingConfigurationAction$Outbound = {
  link?: boolean | null | undefined;
  fyi?: UpdateSignalsAlertGroupingConfigurationFyi$Outbound | null | undefined;
};

/** @internal */
export const UpdateSignalsAlertGroupingConfigurationAction$outboundSchema:
  z.ZodType<
    UpdateSignalsAlertGroupingConfigurationAction$Outbound,
    z.ZodTypeDef,
    UpdateSignalsAlertGroupingConfigurationAction
  > = z.object({
    link: z.nullable(z.boolean()).optional(),
    fyi: z.nullable(
      z.lazy(() => UpdateSignalsAlertGroupingConfigurationFyi$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertGroupingConfigurationAction$ {
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationAction$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsAlertGroupingConfigurationAction$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationAction$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsAlertGroupingConfigurationAction$outboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfigurationAction$Outbound` instead. */
  export type Outbound = UpdateSignalsAlertGroupingConfigurationAction$Outbound;
}

export function updateSignalsAlertGroupingConfigurationActionToJSON(
  updateSignalsAlertGroupingConfigurationAction:
    UpdateSignalsAlertGroupingConfigurationAction,
): string {
  return JSON.stringify(
    UpdateSignalsAlertGroupingConfigurationAction$outboundSchema.parse(
      updateSignalsAlertGroupingConfigurationAction,
    ),
  );
}

export function updateSignalsAlertGroupingConfigurationActionFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSignalsAlertGroupingConfigurationAction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSignalsAlertGroupingConfigurationAction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSignalsAlertGroupingConfigurationAction' from JSON`,
  );
}

/** @internal */
export const UpdateSignalsAlertGroupingConfiguration$inboundSchema: z.ZodType<
  UpdateSignalsAlertGroupingConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  strategy: z.nullable(
    z.lazy(() => UpdateSignalsAlertGroupingConfigurationStrategy$inboundSchema),
  ).optional(),
  action: z.nullable(
    z.lazy(() => UpdateSignalsAlertGroupingConfigurationAction$inboundSchema),
  ).optional(),
  reference_alert_time_period: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "reference_alert_time_period": "referenceAlertTimePeriod",
  });
});

/** @internal */
export type UpdateSignalsAlertGroupingConfiguration$Outbound = {
  strategy?:
    | UpdateSignalsAlertGroupingConfigurationStrategy$Outbound
    | null
    | undefined;
  action?:
    | UpdateSignalsAlertGroupingConfigurationAction$Outbound
    | null
    | undefined;
  reference_alert_time_period?: string | null | undefined;
};

/** @internal */
export const UpdateSignalsAlertGroupingConfiguration$outboundSchema: z.ZodType<
  UpdateSignalsAlertGroupingConfiguration$Outbound,
  z.ZodTypeDef,
  UpdateSignalsAlertGroupingConfiguration
> = z.object({
  strategy: z.nullable(
    z.lazy(() =>
      UpdateSignalsAlertGroupingConfigurationStrategy$outboundSchema
    ),
  ).optional(),
  action: z.nullable(
    z.lazy(() => UpdateSignalsAlertGroupingConfigurationAction$outboundSchema),
  ).optional(),
  referenceAlertTimePeriod: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    referenceAlertTimePeriod: "reference_alert_time_period",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertGroupingConfiguration$ {
  /** @deprecated use `UpdateSignalsAlertGroupingConfiguration$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsAlertGroupingConfiguration$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfiguration$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsAlertGroupingConfiguration$outboundSchema;
  /** @deprecated use `UpdateSignalsAlertGroupingConfiguration$Outbound` instead. */
  export type Outbound = UpdateSignalsAlertGroupingConfiguration$Outbound;
}

export function updateSignalsAlertGroupingConfigurationToJSON(
  updateSignalsAlertGroupingConfiguration:
    UpdateSignalsAlertGroupingConfiguration,
): string {
  return JSON.stringify(
    UpdateSignalsAlertGroupingConfiguration$outboundSchema.parse(
      updateSignalsAlertGroupingConfiguration,
    ),
  );
}

export function updateSignalsAlertGroupingConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSignalsAlertGroupingConfiguration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSignalsAlertGroupingConfiguration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSignalsAlertGroupingConfiguration' from JSON`,
  );
}
