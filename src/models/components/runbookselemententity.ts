/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableRunbooksElementDynamicSelectEntity,
  NullableRunbooksElementDynamicSelectEntity$inboundSchema,
  NullableRunbooksElementDynamicSelectEntity$Outbound,
  NullableRunbooksElementDynamicSelectEntity$outboundSchema,
} from "./nullablerunbookselementdynamicselectentity.js";
import {
  NullableRunbooksElementInputEntity,
  NullableRunbooksElementInputEntity$inboundSchema,
  NullableRunbooksElementInputEntity$Outbound,
  NullableRunbooksElementInputEntity$outboundSchema,
} from "./nullablerunbookselementinputentity.js";
import {
  NullableRunbooksElementMarkdownEntity,
  NullableRunbooksElementMarkdownEntity$inboundSchema,
  NullableRunbooksElementMarkdownEntity$Outbound,
  NullableRunbooksElementMarkdownEntity$outboundSchema,
} from "./nullablerunbookselementmarkdownentity.js";
import {
  NullableRunbooksElementTextareaEntity,
  NullableRunbooksElementTextareaEntity$inboundSchema,
  NullableRunbooksElementTextareaEntity$Outbound,
  NullableRunbooksElementTextareaEntity$outboundSchema,
} from "./nullablerunbookselementtextareaentity.js";

export type RunbooksElementEntity = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  markdown?: NullableRunbooksElementMarkdownEntity | null | undefined;
  textarea?: NullableRunbooksElementTextareaEntity | null | undefined;
  input?: NullableRunbooksElementInputEntity | null | undefined;
  plainText?: NullableRunbooksElementMarkdownEntity | null | undefined;
  dynamicSelect?: NullableRunbooksElementDynamicSelectEntity | null | undefined;
};

/** @internal */
export const RunbooksElementEntity$inboundSchema: z.ZodType<
  RunbooksElementEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  markdown: z.nullable(NullableRunbooksElementMarkdownEntity$inboundSchema)
    .optional(),
  textarea: z.nullable(NullableRunbooksElementTextareaEntity$inboundSchema)
    .optional(),
  input: z.nullable(NullableRunbooksElementInputEntity$inboundSchema)
    .optional(),
  plain_text: z.nullable(NullableRunbooksElementMarkdownEntity$inboundSchema)
    .optional(),
  dynamic_select: z.nullable(
    NullableRunbooksElementDynamicSelectEntity$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "plain_text": "plainText",
    "dynamic_select": "dynamicSelect",
  });
});

/** @internal */
export type RunbooksElementEntity$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  markdown?: NullableRunbooksElementMarkdownEntity$Outbound | null | undefined;
  textarea?: NullableRunbooksElementTextareaEntity$Outbound | null | undefined;
  input?: NullableRunbooksElementInputEntity$Outbound | null | undefined;
  plain_text?:
    | NullableRunbooksElementMarkdownEntity$Outbound
    | null
    | undefined;
  dynamic_select?:
    | NullableRunbooksElementDynamicSelectEntity$Outbound
    | null
    | undefined;
};

/** @internal */
export const RunbooksElementEntity$outboundSchema: z.ZodType<
  RunbooksElementEntity$Outbound,
  z.ZodTypeDef,
  RunbooksElementEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  markdown: z.nullable(NullableRunbooksElementMarkdownEntity$outboundSchema)
    .optional(),
  textarea: z.nullable(NullableRunbooksElementTextareaEntity$outboundSchema)
    .optional(),
  input: z.nullable(NullableRunbooksElementInputEntity$outboundSchema)
    .optional(),
  plainText: z.nullable(NullableRunbooksElementMarkdownEntity$outboundSchema)
    .optional(),
  dynamicSelect: z.nullable(
    NullableRunbooksElementDynamicSelectEntity$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    plainText: "plain_text",
    dynamicSelect: "dynamic_select",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksElementEntity$ {
  /** @deprecated use `RunbooksElementEntity$inboundSchema` instead. */
  export const inboundSchema = RunbooksElementEntity$inboundSchema;
  /** @deprecated use `RunbooksElementEntity$outboundSchema` instead. */
  export const outboundSchema = RunbooksElementEntity$outboundSchema;
  /** @deprecated use `RunbooksElementEntity$Outbound` instead. */
  export type Outbound = RunbooksElementEntity$Outbound;
}

export function runbooksElementEntityToJSON(
  runbooksElementEntity: RunbooksElementEntity,
): string {
  return JSON.stringify(
    RunbooksElementEntity$outboundSchema.parse(runbooksElementEntity),
  );
}

export function runbooksElementEntityFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksElementEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunbooksElementEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksElementEntity' from JSON`,
  );
}
