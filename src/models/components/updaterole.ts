/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateRolePermission = {
  CreateAlerts: "create_alerts",
  RespondToAlerts: "respond_to_alerts",
  ReadAlerts: "read_alerts",
  ManageAlertGrouping: "manage_alert_grouping",
  ReadAlertGrouping: "read_alert_grouping",
  ManageAlertRules: "manage_alert_rules",
  ReadAlertRules: "read_alert_rules",
  ManageCallRoutes: "manage_call_routes",
  ReadCallRoutes: "read_call_routes",
  ManageEscalationPolicies: "manage_escalation_policies",
  ReadEscalationPolicies: "read_escalation_policies",
  ManageEventSources: "manage_event_sources",
  ReadEventSources: "read_event_sources",
  ManageOnCallSchedules: "manage_on_call_schedules",
  ReadOnCallSchedules: "read_on_call_schedules",
  ManageOnCallShifts: "manage_on_call_shifts",
  ClaimOnCallShifts: "claim_on_call_shifts",
  ManageOrganizationNotificationPolicies:
    "manage_organization_notification_policies",
  ReadNotificationPolicyCompliance: "read_notification_policy_compliance",
  ManageWebhookTargets: "manage_webhook_targets",
  ReadWebhookTargets: "read_webhook_targets",
  ReadAnalytics: "read_analytics",
  ManageApiKeys: "manage_api_keys",
  ReadApiKeys: "read_api_keys",
  ManageAudiences: "manage_audiences",
  ReadAudiences: "read_audiences",
  ReadAuditEvents: "read_audit_events",
  ManageChangeEvents: "manage_change_events",
  ReadChangeEvents: "read_change_events",
  ManageIncidents: "manage_incidents",
  CreateIncidents: "create_incidents",
  ReadIncidents: "read_incidents",
  ManageIncidentSettings: "manage_incident_settings",
  ReadIncidentSettings: "read_incident_settings",
  ManageIntegrations: "manage_integrations",
  ReadIntegrations: "read_integrations",
  ManagePrivateIncidents: "manage_private_incidents",
  ManageOrganizationSecrets: "manage_organization_secrets",
  ReadOrganizationSecrets: "read_organization_secrets",
  ManageOrganizationSettings: "manage_organization_settings",
  ReadOrganizationSettings: "read_organization_settings",
  ManageRoles: "manage_roles",
  ReadRoles: "read_roles",
  ManageRunbooks: "manage_runbooks",
  ReadRunbooks: "read_runbooks",
  ManageServiceCatalog: "manage_service_catalog",
  ReadServiceCatalog: "read_service_catalog",
  ManageStatusTemplates: "manage_status_templates",
  ReadStatusTemplates: "read_status_templates",
  ManageStatusPageUpdates: "manage_status_page_updates",
  ManageSupportHours: "manage_support_hours",
  ReadSupportHours: "read_support_hours",
  ManageTeams: "manage_teams",
  ReadTeams: "read_teams",
  ManageUsers: "manage_users",
  ReadUsers: "read_users",
  ManageWebhooks: "manage_webhooks",
  ReadWebhooks: "read_webhooks",
} as const;
export type UpdateRolePermission = ClosedEnum<typeof UpdateRolePermission>;

/**
 * Update a role
 */
export type UpdateRole = {
  /**
   * The name of the role.
   */
  name: string;
  /**
   * A long-form description of the role's purpose.
   */
  description?: string | null | undefined;
  /**
   * An array of permission slugs to assign to the role.
   */
  permissions?: Array<UpdateRolePermission> | null | undefined;
};

/** @internal */
export const UpdateRolePermission$inboundSchema: z.ZodNativeEnum<
  typeof UpdateRolePermission
> = z.nativeEnum(UpdateRolePermission);

/** @internal */
export const UpdateRolePermission$outboundSchema: z.ZodNativeEnum<
  typeof UpdateRolePermission
> = UpdateRolePermission$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRolePermission$ {
  /** @deprecated use `UpdateRolePermission$inboundSchema` instead. */
  export const inboundSchema = UpdateRolePermission$inboundSchema;
  /** @deprecated use `UpdateRolePermission$outboundSchema` instead. */
  export const outboundSchema = UpdateRolePermission$outboundSchema;
}

/** @internal */
export const UpdateRole$inboundSchema: z.ZodType<
  UpdateRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.nullable(z.array(UpdateRolePermission$inboundSchema))
    .optional(),
});

/** @internal */
export type UpdateRole$Outbound = {
  name: string;
  description?: string | null | undefined;
  permissions?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateRole$outboundSchema: z.ZodType<
  UpdateRole$Outbound,
  z.ZodTypeDef,
  UpdateRole
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.nullable(z.array(UpdateRolePermission$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRole$ {
  /** @deprecated use `UpdateRole$inboundSchema` instead. */
  export const inboundSchema = UpdateRole$inboundSchema;
  /** @deprecated use `UpdateRole$outboundSchema` instead. */
  export const outboundSchema = UpdateRole$outboundSchema;
  /** @deprecated use `UpdateRole$Outbound` instead. */
  export type Outbound = UpdateRole$Outbound;
}

export function updateRoleToJSON(updateRole: UpdateRole): string {
  return JSON.stringify(UpdateRole$outboundSchema.parse(updateRole));
}

export function updateRoleFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRole' from JSON`,
  );
}
