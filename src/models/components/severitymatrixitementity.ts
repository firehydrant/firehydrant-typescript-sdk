/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SeverityMatrixItemEntity = {
  severity?: string | undefined;
  conditionId?: string | undefined;
  impactId?: string | undefined;
  impactType?: string | undefined;
};

/** @internal */
export const SeverityMatrixItemEntity$inboundSchema: z.ZodType<
  SeverityMatrixItemEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity: z.string().optional(),
  condition_id: z.string().optional(),
  impact_id: z.string().optional(),
  impact_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
    "impact_id": "impactId",
    "impact_type": "impactType",
  });
});

/** @internal */
export type SeverityMatrixItemEntity$Outbound = {
  severity?: string | undefined;
  condition_id?: string | undefined;
  impact_id?: string | undefined;
  impact_type?: string | undefined;
};

/** @internal */
export const SeverityMatrixItemEntity$outboundSchema: z.ZodType<
  SeverityMatrixItemEntity$Outbound,
  z.ZodTypeDef,
  SeverityMatrixItemEntity
> = z.object({
  severity: z.string().optional(),
  conditionId: z.string().optional(),
  impactId: z.string().optional(),
  impactType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
    impactId: "impact_id",
    impactType: "impact_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeverityMatrixItemEntity$ {
  /** @deprecated use `SeverityMatrixItemEntity$inboundSchema` instead. */
  export const inboundSchema = SeverityMatrixItemEntity$inboundSchema;
  /** @deprecated use `SeverityMatrixItemEntity$outboundSchema` instead. */
  export const outboundSchema = SeverityMatrixItemEntity$outboundSchema;
  /** @deprecated use `SeverityMatrixItemEntity$Outbound` instead. */
  export type Outbound = SeverityMatrixItemEntity$Outbound;
}

export function severityMatrixItemEntityToJSON(
  severityMatrixItemEntity: SeverityMatrixItemEntity,
): string {
  return JSON.stringify(
    SeverityMatrixItemEntity$outboundSchema.parse(severityMatrixItemEntity),
  );
}

export function severityMatrixItemEntityFromJSON(
  jsonString: string,
): SafeParseResult<SeverityMatrixItemEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeverityMatrixItemEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeverityMatrixItemEntity' from JSON`,
  );
}
