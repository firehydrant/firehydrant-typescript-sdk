/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An unstructured key/value pair of saved values for searching
 */
export type FilterValues = {};

/**
 * SavedSearchEntity model
 */
export type SavedSearchEntity = {
  id?: string | undefined;
  name?: string | undefined;
  resourceType?: string | undefined;
  userId?: string | undefined;
  /**
   * Whether or not this saved search is private
   */
  isPrivate?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * An unstructured key/value pair of saved values for searching
   */
  filterValues?: FilterValues | undefined;
};

/** @internal */
export const FilterValues$inboundSchema: z.ZodType<
  FilterValues,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FilterValues$Outbound = {};

/** @internal */
export const FilterValues$outboundSchema: z.ZodType<
  FilterValues$Outbound,
  z.ZodTypeDef,
  FilterValues
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterValues$ {
  /** @deprecated use `FilterValues$inboundSchema` instead. */
  export const inboundSchema = FilterValues$inboundSchema;
  /** @deprecated use `FilterValues$outboundSchema` instead. */
  export const outboundSchema = FilterValues$outboundSchema;
  /** @deprecated use `FilterValues$Outbound` instead. */
  export type Outbound = FilterValues$Outbound;
}

export function filterValuesToJSON(filterValues: FilterValues): string {
  return JSON.stringify(FilterValues$outboundSchema.parse(filterValues));
}

export function filterValuesFromJSON(
  jsonString: string,
): SafeParseResult<FilterValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterValues' from JSON`,
  );
}

/** @internal */
export const SavedSearchEntity$inboundSchema: z.ZodType<
  SavedSearchEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  resource_type: z.string().optional(),
  user_id: z.string().optional(),
  is_private: z.boolean().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  filter_values: z.lazy(() => FilterValues$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "user_id": "userId",
    "is_private": "isPrivate",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "filter_values": "filterValues",
  });
});

/** @internal */
export type SavedSearchEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  resource_type?: string | undefined;
  user_id?: string | undefined;
  is_private?: boolean | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  filter_values?: FilterValues$Outbound | undefined;
};

/** @internal */
export const SavedSearchEntity$outboundSchema: z.ZodType<
  SavedSearchEntity$Outbound,
  z.ZodTypeDef,
  SavedSearchEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  resourceType: z.string().optional(),
  userId: z.string().optional(),
  isPrivate: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  filterValues: z.lazy(() => FilterValues$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    userId: "user_id",
    isPrivate: "is_private",
    createdAt: "created_at",
    updatedAt: "updated_at",
    filterValues: "filter_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SavedSearchEntity$ {
  /** @deprecated use `SavedSearchEntity$inboundSchema` instead. */
  export const inboundSchema = SavedSearchEntity$inboundSchema;
  /** @deprecated use `SavedSearchEntity$outboundSchema` instead. */
  export const outboundSchema = SavedSearchEntity$outboundSchema;
  /** @deprecated use `SavedSearchEntity$Outbound` instead. */
  export type Outbound = SavedSearchEntity$Outbound;
}

export function savedSearchEntityToJSON(
  savedSearchEntity: SavedSearchEntity,
): string {
  return JSON.stringify(
    SavedSearchEntity$outboundSchema.parse(savedSearchEntity),
  );
}

export function savedSearchEntityFromJSON(
  jsonString: string,
): SafeParseResult<SavedSearchEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SavedSearchEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SavedSearchEntity' from JSON`,
  );
}
