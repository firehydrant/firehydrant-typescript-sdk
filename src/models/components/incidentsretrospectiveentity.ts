/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentsRetrospectiveEntitySectionEntity,
  IncidentsRetrospectiveEntitySectionEntity$inboundSchema,
  IncidentsRetrospectiveEntitySectionEntity$Outbound,
  IncidentsRetrospectiveEntitySectionEntity$outboundSchema,
} from "./incidentsretrospectiveentitysectionentity.js";
import {
  IncidentsRetrospectiveFieldEntity,
  IncidentsRetrospectiveFieldEntity$inboundSchema,
  IncidentsRetrospectiveFieldEntity$Outbound,
  IncidentsRetrospectiveFieldEntity$outboundSchema,
} from "./incidentsretrospectivefieldentity.js";

/**
 * Incidents_RetrospectiveEntity model
 */
export type IncidentsRetrospectiveEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  sections?:
    | Array<IncidentsRetrospectiveEntitySectionEntity>
    | null
    | undefined;
  isHidden?: boolean | null | undefined;
  fields?: Array<IncidentsRetrospectiveFieldEntity> | null | undefined;
  exports?: Array<string> | null | undefined;
};

/** @internal */
export const IncidentsRetrospectiveEntity$inboundSchema: z.ZodType<
  IncidentsRetrospectiveEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  sections: z.nullable(
    z.array(IncidentsRetrospectiveEntitySectionEntity$inboundSchema),
  ).optional(),
  is_hidden: z.nullable(z.boolean()).optional(),
  fields: z.nullable(z.array(IncidentsRetrospectiveFieldEntity$inboundSchema))
    .optional(),
  exports: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_hidden": "isHidden",
  });
});

/** @internal */
export type IncidentsRetrospectiveEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  sections?:
    | Array<IncidentsRetrospectiveEntitySectionEntity$Outbound>
    | null
    | undefined;
  is_hidden?: boolean | null | undefined;
  fields?: Array<IncidentsRetrospectiveFieldEntity$Outbound> | null | undefined;
  exports?: Array<string> | null | undefined;
};

/** @internal */
export const IncidentsRetrospectiveEntity$outboundSchema: z.ZodType<
  IncidentsRetrospectiveEntity$Outbound,
  z.ZodTypeDef,
  IncidentsRetrospectiveEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  sections: z.nullable(
    z.array(IncidentsRetrospectiveEntitySectionEntity$outboundSchema),
  ).optional(),
  isHidden: z.nullable(z.boolean()).optional(),
  fields: z.nullable(z.array(IncidentsRetrospectiveFieldEntity$outboundSchema))
    .optional(),
  exports: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    isHidden: "is_hidden",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRetrospectiveEntity$ {
  /** @deprecated use `IncidentsRetrospectiveEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsRetrospectiveEntity$inboundSchema;
  /** @deprecated use `IncidentsRetrospectiveEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsRetrospectiveEntity$outboundSchema;
  /** @deprecated use `IncidentsRetrospectiveEntity$Outbound` instead. */
  export type Outbound = IncidentsRetrospectiveEntity$Outbound;
}

export function incidentsRetrospectiveEntityToJSON(
  incidentsRetrospectiveEntity: IncidentsRetrospectiveEntity,
): string {
  return JSON.stringify(
    IncidentsRetrospectiveEntity$outboundSchema.parse(
      incidentsRetrospectiveEntity,
    ),
  );
}

export function incidentsRetrospectiveEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsRetrospectiveEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsRetrospectiveEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsRetrospectiveEntity' from JSON`,
  );
}
