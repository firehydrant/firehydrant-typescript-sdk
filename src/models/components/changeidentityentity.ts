/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * ChangeIdentityEntity model
 */
export type ChangeIdentityEntity = {
  id?: string | undefined;
  type?: string | undefined;
  value?: string | undefined;
  changeId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const ChangeIdentityEntity$inboundSchema: z.ZodType<
  ChangeIdentityEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  value: z.string().optional(),
  change_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "change_id": "changeId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ChangeIdentityEntity$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  value?: string | undefined;
  change_id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const ChangeIdentityEntity$outboundSchema: z.ZodType<
  ChangeIdentityEntity$Outbound,
  z.ZodTypeDef,
  ChangeIdentityEntity
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  value: z.string().optional(),
  changeId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    changeId: "change_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeIdentityEntity$ {
  /** @deprecated use `ChangeIdentityEntity$inboundSchema` instead. */
  export const inboundSchema = ChangeIdentityEntity$inboundSchema;
  /** @deprecated use `ChangeIdentityEntity$outboundSchema` instead. */
  export const outboundSchema = ChangeIdentityEntity$outboundSchema;
  /** @deprecated use `ChangeIdentityEntity$Outbound` instead. */
  export type Outbound = ChangeIdentityEntity$Outbound;
}

export function changeIdentityEntityToJSON(
  changeIdentityEntity: ChangeIdentityEntity,
): string {
  return JSON.stringify(
    ChangeIdentityEntity$outboundSchema.parse(changeIdentityEntity),
  );
}

export function changeIdentityEntityFromJSON(
  jsonString: string,
): SafeParseResult<ChangeIdentityEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangeIdentityEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeIdentityEntity' from JSON`,
  );
}
