/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages = {
  /**
   * The slug identifying the type of status page
   */
  integrationSlug?: string | undefined;
  /**
   * The UUID of the status page to display this maintenance on
   */
  connectionId: string;
};

export type PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts = {
  /**
   * The type of impact
   */
  type: string;
  /**
   * The id of impact
   */
  id: string;
  /**
   * The id of the condition
   */
  conditionId: string;
};

/**
 * Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.
 */
export type PatchV1ScheduledMaintenancesScheduledMaintenanceId = {
  name?: string | undefined;
  summary?: string | undefined;
  /**
   * ISO8601 timestamp for the start time of the scheduled maintenance
   */
  startsAt?: Date | undefined;
  /**
   * ISO8601 timestamp for the end time of the scheduled maintenance
   */
  endsAt?: Date | undefined;
  description?: string | undefined;
  /**
   * A json object of label keys and values
   */
  labels?: { [k: string]: string } | undefined;
  /**
   * An array of status pages to display this maintenance on
   */
  statusPages?:
    | Array<PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages>
    | undefined;
  /**
   * An array of impact/condition combinations
   */
  impacts?:
    | Array<PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts>
    | undefined;
};

/** @internal */
export const PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$inboundSchema:
  z.ZodType<
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    integration_slug: z.string().optional(),
    connection_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "integration_slug": "integrationSlug",
      "connection_id": "connectionId",
    });
  });

/** @internal */
export type PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$Outbound =
  {
    integration_slug?: string | undefined;
    connection_id: string;
  };

/** @internal */
export const PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$outboundSchema:
  z.ZodType<
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$Outbound,
    z.ZodTypeDef,
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages
  > = z.object({
    integrationSlug: z.string().optional(),
    connectionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      integrationSlug: "integration_slug",
      connectionId: "connection_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$ {
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$inboundSchema;
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$outboundSchema;
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$Outbound` instead. */
  export type Outbound =
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$Outbound;
}

export function patchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPagesToJSON(
  patchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages:
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages,
): string {
  return JSON.stringify(
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$outboundSchema
      .parse(patchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages),
  );
}

export function patchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPagesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages' from JSON`,
  );
}

/** @internal */
export const PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$inboundSchema:
  z.ZodType<
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    id: z.string(),
    condition_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "condition_id": "conditionId",
    });
  });

/** @internal */
export type PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$Outbound =
  {
    type: string;
    id: string;
    condition_id: string;
  };

/** @internal */
export const PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$outboundSchema:
  z.ZodType<
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$Outbound,
    z.ZodTypeDef,
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts
  > = z.object({
    type: z.string(),
    id: z.string(),
    conditionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      conditionId: "condition_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$ {
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$inboundSchema;
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$outboundSchema;
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$Outbound` instead. */
  export type Outbound =
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$Outbound;
}

export function patchV1ScheduledMaintenancesScheduledMaintenanceIdImpactsToJSON(
  patchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts:
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts,
): string {
  return JSON.stringify(
    PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$outboundSchema
      .parse(patchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts),
  );
}

export function patchV1ScheduledMaintenancesScheduledMaintenanceIdImpactsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts' from JSON`,
  );
}

/** @internal */
export const PatchV1ScheduledMaintenancesScheduledMaintenanceId$inboundSchema:
  z.ZodType<
    PatchV1ScheduledMaintenancesScheduledMaintenanceId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string().optional(),
    summary: z.string().optional(),
    starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    description: z.string().optional(),
    labels: z.record(z.string()).optional(),
    status_pages: z.array(
      z.lazy(() =>
        PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$inboundSchema
      ),
    ).optional(),
    impacts: z.array(
      z.lazy(() =>
        PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
      "status_pages": "statusPages",
    });
  });

/** @internal */
export type PatchV1ScheduledMaintenancesScheduledMaintenanceId$Outbound = {
  name?: string | undefined;
  summary?: string | undefined;
  starts_at?: string | undefined;
  ends_at?: string | undefined;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  status_pages?:
    | Array<
      PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$Outbound
    >
    | undefined;
  impacts?:
    | Array<PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$Outbound>
    | undefined;
};

/** @internal */
export const PatchV1ScheduledMaintenancesScheduledMaintenanceId$outboundSchema:
  z.ZodType<
    PatchV1ScheduledMaintenancesScheduledMaintenanceId$Outbound,
    z.ZodTypeDef,
    PatchV1ScheduledMaintenancesScheduledMaintenanceId
  > = z.object({
    name: z.string().optional(),
    summary: z.string().optional(),
    startsAt: z.date().transform(v => v.toISOString()).optional(),
    endsAt: z.date().transform(v => v.toISOString()).optional(),
    description: z.string().optional(),
    labels: z.record(z.string()).optional(),
    statusPages: z.array(
      z.lazy(() =>
        PatchV1ScheduledMaintenancesScheduledMaintenanceIdStatusPages$outboundSchema
      ),
    ).optional(),
    impacts: z.array(
      z.lazy(() =>
        PatchV1ScheduledMaintenancesScheduledMaintenanceIdImpacts$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
      statusPages: "status_pages",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ScheduledMaintenancesScheduledMaintenanceId$ {
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ScheduledMaintenancesScheduledMaintenanceId$inboundSchema;
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ScheduledMaintenancesScheduledMaintenanceId$outboundSchema;
  /** @deprecated use `PatchV1ScheduledMaintenancesScheduledMaintenanceId$Outbound` instead. */
  export type Outbound =
    PatchV1ScheduledMaintenancesScheduledMaintenanceId$Outbound;
}

export function patchV1ScheduledMaintenancesScheduledMaintenanceIdToJSON(
  patchV1ScheduledMaintenancesScheduledMaintenanceId:
    PatchV1ScheduledMaintenancesScheduledMaintenanceId,
): string {
  return JSON.stringify(
    PatchV1ScheduledMaintenancesScheduledMaintenanceId$outboundSchema.parse(
      patchV1ScheduledMaintenancesScheduledMaintenanceId,
    ),
  );
}

export function patchV1ScheduledMaintenancesScheduledMaintenanceIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ScheduledMaintenancesScheduledMaintenanceId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ScheduledMaintenancesScheduledMaintenanceId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1ScheduledMaintenancesScheduledMaintenanceId' from JSON`,
  );
}
