/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Integrations_Slack_UsergroupEntity model
 */
export type IntegrationsSlackUsergroupEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  handle?: string | null | undefined;
  isDisabled?: boolean | null | undefined;
};

/** @internal */
export const IntegrationsSlackUsergroupEntity$inboundSchema: z.ZodType<
  IntegrationsSlackUsergroupEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  handle: z.nullable(z.string()).optional(),
  is_disabled: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_disabled": "isDisabled",
  });
});

/** @internal */
export type IntegrationsSlackUsergroupEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  handle?: string | null | undefined;
  is_disabled?: boolean | null | undefined;
};

/** @internal */
export const IntegrationsSlackUsergroupEntity$outboundSchema: z.ZodType<
  IntegrationsSlackUsergroupEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsSlackUsergroupEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  handle: z.nullable(z.string()).optional(),
  isDisabled: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    isDisabled: "is_disabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsSlackUsergroupEntity$ {
  /** @deprecated use `IntegrationsSlackUsergroupEntity$inboundSchema` instead. */
  export const inboundSchema = IntegrationsSlackUsergroupEntity$inboundSchema;
  /** @deprecated use `IntegrationsSlackUsergroupEntity$outboundSchema` instead. */
  export const outboundSchema = IntegrationsSlackUsergroupEntity$outboundSchema;
  /** @deprecated use `IntegrationsSlackUsergroupEntity$Outbound` instead. */
  export type Outbound = IntegrationsSlackUsergroupEntity$Outbound;
}

export function integrationsSlackUsergroupEntityToJSON(
  integrationsSlackUsergroupEntity: IntegrationsSlackUsergroupEntity,
): string {
  return JSON.stringify(
    IntegrationsSlackUsergroupEntity$outboundSchema.parse(
      integrationsSlackUsergroupEntity,
    ),
  );
}

export function integrationsSlackUsergroupEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsSlackUsergroupEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationsSlackUsergroupEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsSlackUsergroupEntity' from JSON`,
  );
}
