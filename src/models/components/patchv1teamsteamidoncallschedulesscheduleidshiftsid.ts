/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a Signals on-call shift by ID
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId = {
  /**
   * The start time of the shift in ISO8601 format.
   */
  startTime?: string | undefined;
  /**
   * The end time of the shift in ISO8601 format.
   */
  endTime?: string | undefined;
  /**
   * The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.
   */
  userId?: string | undefined;
  /**
   * A description of why coverage is needed for this shift. If the shift is re-assigned, this will automatically be cleared unless provided again.
   */
  coverageRequest?: string | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$inboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    start_time: z.string().optional(),
    end_time: z.string().optional(),
    user_id: z.string().optional(),
    coverage_request: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "start_time": "startTime",
      "end_time": "endTime",
      "user_id": "userId",
      "coverage_request": "coverageRequest",
    });
  });

/** @internal */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$Outbound = {
  start_time?: string | undefined;
  end_time?: string | undefined;
  user_id?: string | undefined;
  coverage_request?: string | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$outboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$Outbound,
    z.ZodTypeDef,
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId
  > = z.object({
    startTime: z.string().optional(),
    endTime: z.string().optional(),
    userId: z.string().optional(),
    coverageRequest: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      startTime: "start_time",
      endTime: "end_time",
      userId: "user_id",
      coverageRequest: "coverage_request",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$outboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$Outbound` instead. */
  export type Outbound =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$Outbound;
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsIdToJSON(
  patchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId:
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId,
): string {
  return JSON.stringify(
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$outboundSchema.parse(
      patchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId,
    ),
  );
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId' from JSON`,
  );
}
