/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTaskListTaskListItem = {
  /**
   * A summary of the task
   */
  summary: string;
  /**
   * A long-form description for the task if additional context is helpful
   */
  description?: string | null | undefined;
};

/**
 * Creates a new task list
 */
export type CreateTaskList = {
  name: string;
  description?: string | null | undefined;
  taskListItems: Array<CreateTaskListTaskListItem>;
};

/** @internal */
export const CreateTaskListTaskListItem$inboundSchema: z.ZodType<
  CreateTaskListTaskListItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateTaskListTaskListItem$Outbound = {
  summary: string;
  description?: string | null | undefined;
};

/** @internal */
export const CreateTaskListTaskListItem$outboundSchema: z.ZodType<
  CreateTaskListTaskListItem$Outbound,
  z.ZodTypeDef,
  CreateTaskListTaskListItem
> = z.object({
  summary: z.string(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTaskListTaskListItem$ {
  /** @deprecated use `CreateTaskListTaskListItem$inboundSchema` instead. */
  export const inboundSchema = CreateTaskListTaskListItem$inboundSchema;
  /** @deprecated use `CreateTaskListTaskListItem$outboundSchema` instead. */
  export const outboundSchema = CreateTaskListTaskListItem$outboundSchema;
  /** @deprecated use `CreateTaskListTaskListItem$Outbound` instead. */
  export type Outbound = CreateTaskListTaskListItem$Outbound;
}

export function createTaskListTaskListItemToJSON(
  createTaskListTaskListItem: CreateTaskListTaskListItem,
): string {
  return JSON.stringify(
    CreateTaskListTaskListItem$outboundSchema.parse(createTaskListTaskListItem),
  );
}

export function createTaskListTaskListItemFromJSON(
  jsonString: string,
): SafeParseResult<CreateTaskListTaskListItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTaskListTaskListItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTaskListTaskListItem' from JSON`,
  );
}

/** @internal */
export const CreateTaskList$inboundSchema: z.ZodType<
  CreateTaskList,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  task_list_items: z.array(
    z.lazy(() => CreateTaskListTaskListItem$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "task_list_items": "taskListItems",
  });
});

/** @internal */
export type CreateTaskList$Outbound = {
  name: string;
  description?: string | null | undefined;
  task_list_items: Array<CreateTaskListTaskListItem$Outbound>;
};

/** @internal */
export const CreateTaskList$outboundSchema: z.ZodType<
  CreateTaskList$Outbound,
  z.ZodTypeDef,
  CreateTaskList
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  taskListItems: z.array(
    z.lazy(() => CreateTaskListTaskListItem$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    taskListItems: "task_list_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTaskList$ {
  /** @deprecated use `CreateTaskList$inboundSchema` instead. */
  export const inboundSchema = CreateTaskList$inboundSchema;
  /** @deprecated use `CreateTaskList$outboundSchema` instead. */
  export const outboundSchema = CreateTaskList$outboundSchema;
  /** @deprecated use `CreateTaskList$Outbound` instead. */
  export type Outbound = CreateTaskList$Outbound;
}

export function createTaskListToJSON(createTaskList: CreateTaskList): string {
  return JSON.stringify(CreateTaskList$outboundSchema.parse(createTaskList));
}

export function createTaskListFromJSON(
  jsonString: string,
): SafeParseResult<CreateTaskList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTaskList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTaskList' from JSON`,
  );
}
