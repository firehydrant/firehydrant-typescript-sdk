/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Color = {
  Red: "red",
  Orange: "orange",
  Yellow: "yellow",
  Blue: "blue",
  Teal: "teal",
  Grey: "grey",
} as const;
export type Color = ClosedEnum<typeof Color>;

/**
 * Create a new severity
 */
export type PostV1Severities = {
  slug: string;
  description?: string | undefined;
  position?: number | undefined;
  color?: Color | undefined;
};

/** @internal */
export const Color$inboundSchema: z.ZodNativeEnum<typeof Color> = z.nativeEnum(
  Color,
);

/** @internal */
export const Color$outboundSchema: z.ZodNativeEnum<typeof Color> =
  Color$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Color$ {
  /** @deprecated use `Color$inboundSchema` instead. */
  export const inboundSchema = Color$inboundSchema;
  /** @deprecated use `Color$outboundSchema` instead. */
  export const outboundSchema = Color$outboundSchema;
}

/** @internal */
export const PostV1Severities$inboundSchema: z.ZodType<
  PostV1Severities,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  description: z.string().optional(),
  position: z.number().int().optional(),
  color: Color$inboundSchema.optional(),
});

/** @internal */
export type PostV1Severities$Outbound = {
  slug: string;
  description?: string | undefined;
  position?: number | undefined;
  color?: string | undefined;
};

/** @internal */
export const PostV1Severities$outboundSchema: z.ZodType<
  PostV1Severities$Outbound,
  z.ZodTypeDef,
  PostV1Severities
> = z.object({
  slug: z.string(),
  description: z.string().optional(),
  position: z.number().int().optional(),
  color: Color$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Severities$ {
  /** @deprecated use `PostV1Severities$inboundSchema` instead. */
  export const inboundSchema = PostV1Severities$inboundSchema;
  /** @deprecated use `PostV1Severities$outboundSchema` instead. */
  export const outboundSchema = PostV1Severities$outboundSchema;
  /** @deprecated use `PostV1Severities$Outbound` instead. */
  export type Outbound = PostV1Severities$Outbound;
}

export function postV1SeveritiesToJSON(
  postV1Severities: PostV1Severities,
): string {
  return JSON.stringify(
    PostV1Severities$outboundSchema.parse(postV1Severities),
  );
}

export function postV1SeveritiesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Severities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Severities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Severities' from JSON`,
  );
}
