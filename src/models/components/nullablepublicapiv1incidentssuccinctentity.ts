/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullablePublicApiv1IncidentsSuccinctEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  number?: number | null | undefined;
};

/** @internal */
export const NullablePublicApiv1IncidentsSuccinctEntity$inboundSchema:
  z.ZodType<NullablePublicApiv1IncidentsSuccinctEntity, z.ZodTypeDef, unknown> =
    z.object({
      id: z.nullable(z.string()).optional(),
      name: z.nullable(z.string()).optional(),
      number: z.nullable(z.number().int()).optional(),
    });

/** @internal */
export type NullablePublicApiv1IncidentsSuccinctEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  number?: number | null | undefined;
};

/** @internal */
export const NullablePublicApiv1IncidentsSuccinctEntity$outboundSchema:
  z.ZodType<
    NullablePublicApiv1IncidentsSuccinctEntity$Outbound,
    z.ZodTypeDef,
    NullablePublicApiv1IncidentsSuccinctEntity
  > = z.object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    number: z.nullable(z.number().int()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullablePublicApiv1IncidentsSuccinctEntity$ {
  /** @deprecated use `NullablePublicApiv1IncidentsSuccinctEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullablePublicApiv1IncidentsSuccinctEntity$inboundSchema;
  /** @deprecated use `NullablePublicApiv1IncidentsSuccinctEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullablePublicApiv1IncidentsSuccinctEntity$outboundSchema;
  /** @deprecated use `NullablePublicApiv1IncidentsSuccinctEntity$Outbound` instead. */
  export type Outbound = NullablePublicApiv1IncidentsSuccinctEntity$Outbound;
}

export function nullablePublicAPIV1IncidentsSuccinctEntityToJSON(
  nullablePublicApiv1IncidentsSuccinctEntity:
    NullablePublicApiv1IncidentsSuccinctEntity,
): string {
  return JSON.stringify(
    NullablePublicApiv1IncidentsSuccinctEntity$outboundSchema.parse(
      nullablePublicApiv1IncidentsSuccinctEntity,
    ),
  );
}

export function nullablePublicAPIV1IncidentsSuccinctEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullablePublicApiv1IncidentsSuccinctEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullablePublicApiv1IncidentsSuccinctEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullablePublicApiv1IncidentsSuccinctEntity' from JSON`,
  );
}
