/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFunctionalityService = {
  /**
   * ID of a service
   */
  id: string;
  /**
   * Set to true if you want to remove the given service from the functionality
   */
  remove?: boolean | null | undefined;
};

export type UpdateFunctionalityLink = {
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | null | undefined;
  /**
   * If you are trying to remove a link, set this to 'true'
   */
  remove?: boolean | null | undefined;
  /**
   * If updating an existing link, specify it's id.
   */
  id?: string | null | undefined;
};

/**
 * An object representing a Team that owns the functionality
 */
export type UpdateFunctionalityOwner = {
  id: string;
};

export type UpdateFunctionalityTeam = {
  id: string;
  /**
   * If you are trying to remove a team from a functionality, set this to 'true'
   */
  remove?: boolean | null | undefined;
};

export type UpdateFunctionalityExternalResource = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | null | undefined;
  /**
   * If you are trying to remove an external resource from a service, set this to 'true'.
   */
  remove?: boolean | null | undefined;
};

/**
 * Update a functionalities attributes
 */
export type UpdateFunctionality = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  services?: Array<UpdateFunctionalityService> | null | undefined;
  /**
   * An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
   */
  links?: Array<UpdateFunctionalityLink> | null | undefined;
  /**
   * An object representing a Team that owns the functionality
   */
  owner?: UpdateFunctionalityOwner | null | undefined;
  /**
   * If you are trying to remove a team as an owner from a functionality, set this to 'true'
   */
  removeOwner?: boolean | null | undefined;
  /**
   * An array of teams to attach to this functionality.
   */
  teams?: Array<UpdateFunctionalityTeam> | null | undefined;
  /**
   * If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
   */
  removeRemainingTeams?: boolean | null | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?:
    | Array<UpdateFunctionalityExternalResource>
    | null
    | undefined;
  /**
   * If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
   */
  removeRemainingExternalResources?: boolean | null | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  /**
   * Set this to true if you want to remove all of the services that are not included in the services array from the functionality
   */
  removeRemainingServices?: boolean | null | undefined;
};

/** @internal */
export const UpdateFunctionalityService$inboundSchema: z.ZodType<
  UpdateFunctionalityService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateFunctionalityService$Outbound = {
  id: string;
  remove?: boolean | null | undefined;
};

/** @internal */
export const UpdateFunctionalityService$outboundSchema: z.ZodType<
  UpdateFunctionalityService$Outbound,
  z.ZodTypeDef,
  UpdateFunctionalityService
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionalityService$ {
  /** @deprecated use `UpdateFunctionalityService$inboundSchema` instead. */
  export const inboundSchema = UpdateFunctionalityService$inboundSchema;
  /** @deprecated use `UpdateFunctionalityService$outboundSchema` instead. */
  export const outboundSchema = UpdateFunctionalityService$outboundSchema;
  /** @deprecated use `UpdateFunctionalityService$Outbound` instead. */
  export type Outbound = UpdateFunctionalityService$Outbound;
}

export function updateFunctionalityServiceToJSON(
  updateFunctionalityService: UpdateFunctionalityService,
): string {
  return JSON.stringify(
    UpdateFunctionalityService$outboundSchema.parse(updateFunctionalityService),
  );
}

export function updateFunctionalityServiceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionalityService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFunctionalityService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionalityService' from JSON`,
  );
}

/** @internal */
export const UpdateFunctionalityLink$inboundSchema: z.ZodType<
  UpdateFunctionalityLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href_url: z.string(),
  name: z.string(),
  icon_url: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type UpdateFunctionalityLink$Outbound = {
  href_url: string;
  name: string;
  icon_url?: string | null | undefined;
  remove?: boolean | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const UpdateFunctionalityLink$outboundSchema: z.ZodType<
  UpdateFunctionalityLink$Outbound,
  z.ZodTypeDef,
  UpdateFunctionalityLink
> = z.object({
  hrefUrl: z.string(),
  name: z.string(),
  iconUrl: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionalityLink$ {
  /** @deprecated use `UpdateFunctionalityLink$inboundSchema` instead. */
  export const inboundSchema = UpdateFunctionalityLink$inboundSchema;
  /** @deprecated use `UpdateFunctionalityLink$outboundSchema` instead. */
  export const outboundSchema = UpdateFunctionalityLink$outboundSchema;
  /** @deprecated use `UpdateFunctionalityLink$Outbound` instead. */
  export type Outbound = UpdateFunctionalityLink$Outbound;
}

export function updateFunctionalityLinkToJSON(
  updateFunctionalityLink: UpdateFunctionalityLink,
): string {
  return JSON.stringify(
    UpdateFunctionalityLink$outboundSchema.parse(updateFunctionalityLink),
  );
}

export function updateFunctionalityLinkFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionalityLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFunctionalityLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionalityLink' from JSON`,
  );
}

/** @internal */
export const UpdateFunctionalityOwner$inboundSchema: z.ZodType<
  UpdateFunctionalityOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateFunctionalityOwner$Outbound = {
  id: string;
};

/** @internal */
export const UpdateFunctionalityOwner$outboundSchema: z.ZodType<
  UpdateFunctionalityOwner$Outbound,
  z.ZodTypeDef,
  UpdateFunctionalityOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionalityOwner$ {
  /** @deprecated use `UpdateFunctionalityOwner$inboundSchema` instead. */
  export const inboundSchema = UpdateFunctionalityOwner$inboundSchema;
  /** @deprecated use `UpdateFunctionalityOwner$outboundSchema` instead. */
  export const outboundSchema = UpdateFunctionalityOwner$outboundSchema;
  /** @deprecated use `UpdateFunctionalityOwner$Outbound` instead. */
  export type Outbound = UpdateFunctionalityOwner$Outbound;
}

export function updateFunctionalityOwnerToJSON(
  updateFunctionalityOwner: UpdateFunctionalityOwner,
): string {
  return JSON.stringify(
    UpdateFunctionalityOwner$outboundSchema.parse(updateFunctionalityOwner),
  );
}

export function updateFunctionalityOwnerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionalityOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFunctionalityOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionalityOwner' from JSON`,
  );
}

/** @internal */
export const UpdateFunctionalityTeam$inboundSchema: z.ZodType<
  UpdateFunctionalityTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateFunctionalityTeam$Outbound = {
  id: string;
  remove?: boolean | null | undefined;
};

/** @internal */
export const UpdateFunctionalityTeam$outboundSchema: z.ZodType<
  UpdateFunctionalityTeam$Outbound,
  z.ZodTypeDef,
  UpdateFunctionalityTeam
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionalityTeam$ {
  /** @deprecated use `UpdateFunctionalityTeam$inboundSchema` instead. */
  export const inboundSchema = UpdateFunctionalityTeam$inboundSchema;
  /** @deprecated use `UpdateFunctionalityTeam$outboundSchema` instead. */
  export const outboundSchema = UpdateFunctionalityTeam$outboundSchema;
  /** @deprecated use `UpdateFunctionalityTeam$Outbound` instead. */
  export type Outbound = UpdateFunctionalityTeam$Outbound;
}

export function updateFunctionalityTeamToJSON(
  updateFunctionalityTeam: UpdateFunctionalityTeam,
): string {
  return JSON.stringify(
    UpdateFunctionalityTeam$outboundSchema.parse(updateFunctionalityTeam),
  );
}

export function updateFunctionalityTeamFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionalityTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFunctionalityTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionalityTeam' from JSON`,
  );
}

/** @internal */
export const UpdateFunctionalityExternalResource$inboundSchema: z.ZodType<
  UpdateFunctionalityExternalResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.string(),
  connection_type: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type UpdateFunctionalityExternalResource$Outbound = {
  remote_id: string;
  connection_type?: string | null | undefined;
  remove?: boolean | null | undefined;
};

/** @internal */
export const UpdateFunctionalityExternalResource$outboundSchema: z.ZodType<
  UpdateFunctionalityExternalResource$Outbound,
  z.ZodTypeDef,
  UpdateFunctionalityExternalResource
> = z.object({
  remoteId: z.string(),
  connectionType: z.nullable(z.string()).optional(),
  remove: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    connectionType: "connection_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionalityExternalResource$ {
  /** @deprecated use `UpdateFunctionalityExternalResource$inboundSchema` instead. */
  export const inboundSchema =
    UpdateFunctionalityExternalResource$inboundSchema;
  /** @deprecated use `UpdateFunctionalityExternalResource$outboundSchema` instead. */
  export const outboundSchema =
    UpdateFunctionalityExternalResource$outboundSchema;
  /** @deprecated use `UpdateFunctionalityExternalResource$Outbound` instead. */
  export type Outbound = UpdateFunctionalityExternalResource$Outbound;
}

export function updateFunctionalityExternalResourceToJSON(
  updateFunctionalityExternalResource: UpdateFunctionalityExternalResource,
): string {
  return JSON.stringify(
    UpdateFunctionalityExternalResource$outboundSchema.parse(
      updateFunctionalityExternalResource,
    ),
  );
}

export function updateFunctionalityExternalResourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionalityExternalResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateFunctionalityExternalResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionalityExternalResource' from JSON`,
  );
}

/** @internal */
export const UpdateFunctionality$inboundSchema: z.ZodType<
  UpdateFunctionality,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  services: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityService$inboundSchema)),
  ).optional(),
  links: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityLink$inboundSchema)),
  ).optional(),
  owner: z.nullable(z.lazy(() => UpdateFunctionalityOwner$inboundSchema))
    .optional(),
  remove_owner: z.nullable(z.boolean()).optional(),
  teams: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityTeam$inboundSchema)),
  ).optional(),
  remove_remaining_teams: z.nullable(z.boolean()).optional(),
  external_resources: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityExternalResource$inboundSchema)),
  ).optional(),
  remove_remaining_external_resources: z.nullable(z.boolean()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  remove_remaining_services: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    "remove_owner": "removeOwner",
    "remove_remaining_teams": "removeRemainingTeams",
    "external_resources": "externalResources",
    "remove_remaining_external_resources": "removeRemainingExternalResources",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "remove_remaining_services": "removeRemainingServices",
  });
});

/** @internal */
export type UpdateFunctionality$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  services?: Array<UpdateFunctionalityService$Outbound> | null | undefined;
  links?: Array<UpdateFunctionalityLink$Outbound> | null | undefined;
  owner?: UpdateFunctionalityOwner$Outbound | null | undefined;
  remove_owner?: boolean | null | undefined;
  teams?: Array<UpdateFunctionalityTeam$Outbound> | null | undefined;
  remove_remaining_teams?: boolean | null | undefined;
  external_resources?:
    | Array<UpdateFunctionalityExternalResource$Outbound>
    | null
    | undefined;
  remove_remaining_external_resources?: boolean | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  remove_remaining_services: boolean | null;
};

/** @internal */
export const UpdateFunctionality$outboundSchema: z.ZodType<
  UpdateFunctionality$Outbound,
  z.ZodTypeDef,
  UpdateFunctionality
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  services: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityService$outboundSchema)),
  ).optional(),
  links: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityLink$outboundSchema)),
  ).optional(),
  owner: z.nullable(z.lazy(() => UpdateFunctionalityOwner$outboundSchema))
    .optional(),
  removeOwner: z.nullable(z.boolean()).optional(),
  teams: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityTeam$outboundSchema)),
  ).optional(),
  removeRemainingTeams: z.nullable(z.boolean()).optional(),
  externalResources: z.nullable(
    z.array(z.lazy(() => UpdateFunctionalityExternalResource$outboundSchema)),
  ).optional(),
  removeRemainingExternalResources: z.nullable(z.boolean()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  removeRemainingServices: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    removeOwner: "remove_owner",
    removeRemainingTeams: "remove_remaining_teams",
    externalResources: "external_resources",
    removeRemainingExternalResources: "remove_remaining_external_resources",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    removeRemainingServices: "remove_remaining_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionality$ {
  /** @deprecated use `UpdateFunctionality$inboundSchema` instead. */
  export const inboundSchema = UpdateFunctionality$inboundSchema;
  /** @deprecated use `UpdateFunctionality$outboundSchema` instead. */
  export const outboundSchema = UpdateFunctionality$outboundSchema;
  /** @deprecated use `UpdateFunctionality$Outbound` instead. */
  export type Outbound = UpdateFunctionality$Outbound;
}

export function updateFunctionalityToJSON(
  updateFunctionality: UpdateFunctionality,
): string {
  return JSON.stringify(
    UpdateFunctionality$outboundSchema.parse(updateFunctionality),
  );
}

export function updateFunctionalityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionality, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFunctionality$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionality' from JSON`,
  );
}
