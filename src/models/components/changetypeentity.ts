/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChangeTypeEntity = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ChangeTypeEntity$inboundSchema: z.ZodType<
  ChangeTypeEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type ChangeTypeEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ChangeTypeEntity$outboundSchema: z.ZodType<
  ChangeTypeEntity$Outbound,
  z.ZodTypeDef,
  ChangeTypeEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeTypeEntity$ {
  /** @deprecated use `ChangeTypeEntity$inboundSchema` instead. */
  export const inboundSchema = ChangeTypeEntity$inboundSchema;
  /** @deprecated use `ChangeTypeEntity$outboundSchema` instead. */
  export const outboundSchema = ChangeTypeEntity$outboundSchema;
  /** @deprecated use `ChangeTypeEntity$Outbound` instead. */
  export type Outbound = ChangeTypeEntity$Outbound;
}

export function changeTypeEntityToJSON(
  changeTypeEntity: ChangeTypeEntity,
): string {
  return JSON.stringify(
    ChangeTypeEntity$outboundSchema.parse(changeTypeEntity),
  );
}

export function changeTypeEntityFromJSON(
  jsonString: string,
): SafeParseResult<ChangeTypeEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangeTypeEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeTypeEntity' from JSON`,
  );
}
