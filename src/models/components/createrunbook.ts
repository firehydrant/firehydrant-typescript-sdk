/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Deprecated, but still required. Please just use 'incident'
 */
export const CreateRunbookType = {
  Incident: "incident",
  General: "general",
  Infrastructure: "infrastructure",
  IncidentRole: "incident_role",
} as const;
/**
 * Deprecated, but still required. Please just use 'incident'
 */
export type CreateRunbookType = ClosedEnum<typeof CreateRunbookType>;

/**
 * An object representing a Team that owns the runbook
 */
export type CreateRunbookOwner = {
  id: string;
};

export type CreateRunbookAttachmentRule = {
  /**
   * The JSON logic for the attaching the runbook
   */
  logic: string;
  /**
   * The user data for the rule
   */
  userData?: string | null | undefined;
};

export type CreateRunbookRule = {
  /**
   * The JSON logic for the rule
   */
  logic: string;
  /**
   * The user data for the rule
   */
  userData?: string | null | undefined;
};

export type CreateRunbookStep = {
  /**
   * Name for step
   */
  name: string;
  /**
   * ID of action to use for this step.
   */
  actionId: string;
  rule?: CreateRunbookRule | null | undefined;
};

/**
 * Create a new runbook for use with incidents.
 */
export type CreateRunbook = {
  name: string;
  /**
   * Deprecated, but still required. Please just use 'incident'
   */
  type: CreateRunbookType;
  /**
   * Deprecated. Use description
   */
  summary?: string | null | undefined;
  /**
   * A longer description about the Runbook. Supports markdown format
   */
  description?: string | null | undefined;
  /**
   * Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.
   */
  autoAttachToRestrictedIncidents?: boolean | null | undefined;
  /**
   * Whether or not this runbook is a tutorial runbook
   */
  tutorial?: boolean | null | undefined;
  /**
   * An object representing a Team that owns the runbook
   */
  owner?: CreateRunbookOwner | null | undefined;
  attachmentRule?: CreateRunbookAttachmentRule | null | undefined;
  steps?: Array<CreateRunbookStep> | null | undefined;
};

/** @internal */
export const CreateRunbookType$inboundSchema: z.ZodNativeEnum<
  typeof CreateRunbookType
> = z.nativeEnum(CreateRunbookType);

/** @internal */
export const CreateRunbookType$outboundSchema: z.ZodNativeEnum<
  typeof CreateRunbookType
> = CreateRunbookType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbookType$ {
  /** @deprecated use `CreateRunbookType$inboundSchema` instead. */
  export const inboundSchema = CreateRunbookType$inboundSchema;
  /** @deprecated use `CreateRunbookType$outboundSchema` instead. */
  export const outboundSchema = CreateRunbookType$outboundSchema;
}

/** @internal */
export const CreateRunbookOwner$inboundSchema: z.ZodType<
  CreateRunbookOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateRunbookOwner$Outbound = {
  id: string;
};

/** @internal */
export const CreateRunbookOwner$outboundSchema: z.ZodType<
  CreateRunbookOwner$Outbound,
  z.ZodTypeDef,
  CreateRunbookOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbookOwner$ {
  /** @deprecated use `CreateRunbookOwner$inboundSchema` instead. */
  export const inboundSchema = CreateRunbookOwner$inboundSchema;
  /** @deprecated use `CreateRunbookOwner$outboundSchema` instead. */
  export const outboundSchema = CreateRunbookOwner$outboundSchema;
  /** @deprecated use `CreateRunbookOwner$Outbound` instead. */
  export type Outbound = CreateRunbookOwner$Outbound;
}

export function createRunbookOwnerToJSON(
  createRunbookOwner: CreateRunbookOwner,
): string {
  return JSON.stringify(
    CreateRunbookOwner$outboundSchema.parse(createRunbookOwner),
  );
}

export function createRunbookOwnerFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunbookOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunbookOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunbookOwner' from JSON`,
  );
}

/** @internal */
export const CreateRunbookAttachmentRule$inboundSchema: z.ZodType<
  CreateRunbookAttachmentRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.string(),
  user_data: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_data": "userData",
  });
});

/** @internal */
export type CreateRunbookAttachmentRule$Outbound = {
  logic: string;
  user_data?: string | null | undefined;
};

/** @internal */
export const CreateRunbookAttachmentRule$outboundSchema: z.ZodType<
  CreateRunbookAttachmentRule$Outbound,
  z.ZodTypeDef,
  CreateRunbookAttachmentRule
> = z.object({
  logic: z.string(),
  userData: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbookAttachmentRule$ {
  /** @deprecated use `CreateRunbookAttachmentRule$inboundSchema` instead. */
  export const inboundSchema = CreateRunbookAttachmentRule$inboundSchema;
  /** @deprecated use `CreateRunbookAttachmentRule$outboundSchema` instead. */
  export const outboundSchema = CreateRunbookAttachmentRule$outboundSchema;
  /** @deprecated use `CreateRunbookAttachmentRule$Outbound` instead. */
  export type Outbound = CreateRunbookAttachmentRule$Outbound;
}

export function createRunbookAttachmentRuleToJSON(
  createRunbookAttachmentRule: CreateRunbookAttachmentRule,
): string {
  return JSON.stringify(
    CreateRunbookAttachmentRule$outboundSchema.parse(
      createRunbookAttachmentRule,
    ),
  );
}

export function createRunbookAttachmentRuleFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunbookAttachmentRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunbookAttachmentRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunbookAttachmentRule' from JSON`,
  );
}

/** @internal */
export const CreateRunbookRule$inboundSchema: z.ZodType<
  CreateRunbookRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.string(),
  user_data: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_data": "userData",
  });
});

/** @internal */
export type CreateRunbookRule$Outbound = {
  logic: string;
  user_data?: string | null | undefined;
};

/** @internal */
export const CreateRunbookRule$outboundSchema: z.ZodType<
  CreateRunbookRule$Outbound,
  z.ZodTypeDef,
  CreateRunbookRule
> = z.object({
  logic: z.string(),
  userData: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbookRule$ {
  /** @deprecated use `CreateRunbookRule$inboundSchema` instead. */
  export const inboundSchema = CreateRunbookRule$inboundSchema;
  /** @deprecated use `CreateRunbookRule$outboundSchema` instead. */
  export const outboundSchema = CreateRunbookRule$outboundSchema;
  /** @deprecated use `CreateRunbookRule$Outbound` instead. */
  export type Outbound = CreateRunbookRule$Outbound;
}

export function createRunbookRuleToJSON(
  createRunbookRule: CreateRunbookRule,
): string {
  return JSON.stringify(
    CreateRunbookRule$outboundSchema.parse(createRunbookRule),
  );
}

export function createRunbookRuleFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunbookRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunbookRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunbookRule' from JSON`,
  );
}

/** @internal */
export const CreateRunbookStep$inboundSchema: z.ZodType<
  CreateRunbookStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  action_id: z.string(),
  rule: z.nullable(z.lazy(() => CreateRunbookRule$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_id": "actionId",
  });
});

/** @internal */
export type CreateRunbookStep$Outbound = {
  name: string;
  action_id: string;
  rule?: CreateRunbookRule$Outbound | null | undefined;
};

/** @internal */
export const CreateRunbookStep$outboundSchema: z.ZodType<
  CreateRunbookStep$Outbound,
  z.ZodTypeDef,
  CreateRunbookStep
> = z.object({
  name: z.string(),
  actionId: z.string(),
  rule: z.nullable(z.lazy(() => CreateRunbookRule$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    actionId: "action_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbookStep$ {
  /** @deprecated use `CreateRunbookStep$inboundSchema` instead. */
  export const inboundSchema = CreateRunbookStep$inboundSchema;
  /** @deprecated use `CreateRunbookStep$outboundSchema` instead. */
  export const outboundSchema = CreateRunbookStep$outboundSchema;
  /** @deprecated use `CreateRunbookStep$Outbound` instead. */
  export type Outbound = CreateRunbookStep$Outbound;
}

export function createRunbookStepToJSON(
  createRunbookStep: CreateRunbookStep,
): string {
  return JSON.stringify(
    CreateRunbookStep$outboundSchema.parse(createRunbookStep),
  );
}

export function createRunbookStepFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunbookStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunbookStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunbookStep' from JSON`,
  );
}

/** @internal */
export const CreateRunbook$inboundSchema: z.ZodType<
  CreateRunbook,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: CreateRunbookType$inboundSchema,
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  auto_attach_to_restricted_incidents: z.nullable(z.boolean()).optional(),
  tutorial: z.nullable(z.boolean()).optional(),
  owner: z.nullable(z.lazy(() => CreateRunbookOwner$inboundSchema)).optional(),
  attachment_rule: z.nullable(
    z.lazy(() => CreateRunbookAttachmentRule$inboundSchema),
  ).optional(),
  steps: z.nullable(z.array(z.lazy(() => CreateRunbookStep$inboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "auto_attach_to_restricted_incidents": "autoAttachToRestrictedIncidents",
    "attachment_rule": "attachmentRule",
  });
});

/** @internal */
export type CreateRunbook$Outbound = {
  name: string;
  type: string;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  auto_attach_to_restricted_incidents?: boolean | null | undefined;
  tutorial?: boolean | null | undefined;
  owner?: CreateRunbookOwner$Outbound | null | undefined;
  attachment_rule?: CreateRunbookAttachmentRule$Outbound | null | undefined;
  steps?: Array<CreateRunbookStep$Outbound> | null | undefined;
};

/** @internal */
export const CreateRunbook$outboundSchema: z.ZodType<
  CreateRunbook$Outbound,
  z.ZodTypeDef,
  CreateRunbook
> = z.object({
  name: z.string(),
  type: CreateRunbookType$outboundSchema,
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  autoAttachToRestrictedIncidents: z.nullable(z.boolean()).optional(),
  tutorial: z.nullable(z.boolean()).optional(),
  owner: z.nullable(z.lazy(() => CreateRunbookOwner$outboundSchema)).optional(),
  attachmentRule: z.nullable(
    z.lazy(() => CreateRunbookAttachmentRule$outboundSchema),
  ).optional(),
  steps: z.nullable(z.array(z.lazy(() => CreateRunbookStep$outboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    autoAttachToRestrictedIncidents: "auto_attach_to_restricted_incidents",
    attachmentRule: "attachment_rule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunbook$ {
  /** @deprecated use `CreateRunbook$inboundSchema` instead. */
  export const inboundSchema = CreateRunbook$inboundSchema;
  /** @deprecated use `CreateRunbook$outboundSchema` instead. */
  export const outboundSchema = CreateRunbook$outboundSchema;
  /** @deprecated use `CreateRunbook$Outbound` instead. */
  export type Outbound = CreateRunbook$Outbound;
}

export function createRunbookToJSON(createRunbook: CreateRunbook): string {
  return JSON.stringify(CreateRunbook$outboundSchema.parse(createRunbook));
}

export function createRunbookFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunbook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunbook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunbook' from JSON`,
  );
}
