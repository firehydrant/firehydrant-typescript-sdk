/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentsRequiredFieldEntity = {
  /**
   * A unique identifier for the field. For built-in fields, this will be human-readable. For custom fields or milestone timestamps, it will be a prefixed version of the field or milestone's UUID.
   */
  id?: string | null | undefined;
  /**
   * The milestone at which this field is required. If null, this field is always required.
   */
  requiredAtMilestoneId?: string | null | undefined;
};

/** @internal */
export const IncidentsRequiredFieldEntity$inboundSchema: z.ZodType<
  IncidentsRequiredFieldEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  required_at_milestone_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type IncidentsRequiredFieldEntity$Outbound = {
  id?: string | null | undefined;
  required_at_milestone_id?: string | null | undefined;
};

/** @internal */
export const IncidentsRequiredFieldEntity$outboundSchema: z.ZodType<
  IncidentsRequiredFieldEntity$Outbound,
  z.ZodTypeDef,
  IncidentsRequiredFieldEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  requiredAtMilestoneId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRequiredFieldEntity$ {
  /** @deprecated use `IncidentsRequiredFieldEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsRequiredFieldEntity$inboundSchema;
  /** @deprecated use `IncidentsRequiredFieldEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsRequiredFieldEntity$outboundSchema;
  /** @deprecated use `IncidentsRequiredFieldEntity$Outbound` instead. */
  export type Outbound = IncidentsRequiredFieldEntity$Outbound;
}

export function incidentsRequiredFieldEntityToJSON(
  incidentsRequiredFieldEntity: IncidentsRequiredFieldEntity,
): string {
  return JSON.stringify(
    IncidentsRequiredFieldEntity$outboundSchema.parse(
      incidentsRequiredFieldEntity,
    ),
  );
}

export function incidentsRequiredFieldEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsRequiredFieldEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsRequiredFieldEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsRequiredFieldEntity' from JSON`,
  );
}
