/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChangeIdentities = {
  type: string;
  value: string;
};

export const ChangesEventsType = {
  Link: "link",
} as const;
export type ChangesEventsType = ClosedEnum<typeof ChangesEventsType>;

export type Attachments = {
  type: ChangesEventsType;
};

export type Authors = {
  source: string;
  sourceId: string;
  name: string;
};

/**
 * Create a change event
 */
export type ChangesEvents = {
  summary: string;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  startsAt?: Date | undefined;
  endsAt?: Date | undefined;
  /**
   * An array of environment IDs
   */
  environments?: Array<string> | undefined;
  /**
   * An array of service IDs
   */
  services?: Array<string> | undefined;
  /**
   * An array of change IDs
   */
  changes?: Array<string> | undefined;
  /**
   * The ID of a change event as assigned by an external provider
   */
  externalId?: string | undefined;
  /**
   * If provided and valid, the event will be linked to all changes that have the same identities. Identity *values* must be unique.
   */
  changeIdentities?: Array<ChangeIdentities> | undefined;
  /**
   * JSON objects representing attachments, see attachments documentation for the schema
   */
  attachments?: Array<Attachments> | undefined;
  /**
   * Array of additional authors to add to the change event, the creating actor will automatically be added as an author
   */
  authors?: Array<Authors> | undefined;
};

/** @internal */
export const ChangeIdentities$inboundSchema: z.ZodType<
  ChangeIdentities,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  value: z.string(),
});

/** @internal */
export type ChangeIdentities$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const ChangeIdentities$outboundSchema: z.ZodType<
  ChangeIdentities$Outbound,
  z.ZodTypeDef,
  ChangeIdentities
> = z.object({
  type: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeIdentities$ {
  /** @deprecated use `ChangeIdentities$inboundSchema` instead. */
  export const inboundSchema = ChangeIdentities$inboundSchema;
  /** @deprecated use `ChangeIdentities$outboundSchema` instead. */
  export const outboundSchema = ChangeIdentities$outboundSchema;
  /** @deprecated use `ChangeIdentities$Outbound` instead. */
  export type Outbound = ChangeIdentities$Outbound;
}

export function changeIdentitiesToJSON(
  changeIdentities: ChangeIdentities,
): string {
  return JSON.stringify(
    ChangeIdentities$outboundSchema.parse(changeIdentities),
  );
}

export function changeIdentitiesFromJSON(
  jsonString: string,
): SafeParseResult<ChangeIdentities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangeIdentities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeIdentities' from JSON`,
  );
}

/** @internal */
export const ChangesEventsType$inboundSchema: z.ZodNativeEnum<
  typeof ChangesEventsType
> = z.nativeEnum(ChangesEventsType);

/** @internal */
export const ChangesEventsType$outboundSchema: z.ZodNativeEnum<
  typeof ChangesEventsType
> = ChangesEventsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangesEventsType$ {
  /** @deprecated use `ChangesEventsType$inboundSchema` instead. */
  export const inboundSchema = ChangesEventsType$inboundSchema;
  /** @deprecated use `ChangesEventsType$outboundSchema` instead. */
  export const outboundSchema = ChangesEventsType$outboundSchema;
}

/** @internal */
export const Attachments$inboundSchema: z.ZodType<
  Attachments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChangesEventsType$inboundSchema,
});

/** @internal */
export type Attachments$Outbound = {
  type: string;
};

/** @internal */
export const Attachments$outboundSchema: z.ZodType<
  Attachments$Outbound,
  z.ZodTypeDef,
  Attachments
> = z.object({
  type: ChangesEventsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
  /** @deprecated use `Attachments$Outbound` instead. */
  export type Outbound = Attachments$Outbound;
}

export function attachmentsToJSON(attachments: Attachments): string {
  return JSON.stringify(Attachments$outboundSchema.parse(attachments));
}

export function attachmentsFromJSON(
  jsonString: string,
): SafeParseResult<Attachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachments' from JSON`,
  );
}

/** @internal */
export const Authors$inboundSchema: z.ZodType<Authors, z.ZodTypeDef, unknown> =
  z.object({
    source: z.string(),
    source_id: z.string(),
    name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "source_id": "sourceId",
    });
  });

/** @internal */
export type Authors$Outbound = {
  source: string;
  source_id: string;
  name: string;
};

/** @internal */
export const Authors$outboundSchema: z.ZodType<
  Authors$Outbound,
  z.ZodTypeDef,
  Authors
> = z.object({
  source: z.string(),
  sourceId: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    sourceId: "source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Authors$ {
  /** @deprecated use `Authors$inboundSchema` instead. */
  export const inboundSchema = Authors$inboundSchema;
  /** @deprecated use `Authors$outboundSchema` instead. */
  export const outboundSchema = Authors$outboundSchema;
  /** @deprecated use `Authors$Outbound` instead. */
  export type Outbound = Authors$Outbound;
}

export function authorsToJSON(authors: Authors): string {
  return JSON.stringify(Authors$outboundSchema.parse(authors));
}

export function authorsFromJSON(
  jsonString: string,
): SafeParseResult<Authors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Authors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Authors' from JSON`,
  );
}

/** @internal */
export const ChangesEvents$inboundSchema: z.ZodType<
  ChangesEvents,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  environments: z.array(z.string()).optional(),
  services: z.array(z.string()).optional(),
  changes: z.array(z.string()).optional(),
  external_id: z.string().optional(),
  change_identities: z.array(z.lazy(() => ChangeIdentities$inboundSchema))
    .optional(),
  attachments: z.array(z.lazy(() => Attachments$inboundSchema)).optional(),
  authors: z.array(z.lazy(() => Authors$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "external_id": "externalId",
    "change_identities": "changeIdentities",
  });
});

/** @internal */
export type ChangesEvents$Outbound = {
  summary: string;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  starts_at?: string | undefined;
  ends_at?: string | undefined;
  environments?: Array<string> | undefined;
  services?: Array<string> | undefined;
  changes?: Array<string> | undefined;
  external_id?: string | undefined;
  change_identities?: Array<ChangeIdentities$Outbound> | undefined;
  attachments?: Array<Attachments$Outbound> | undefined;
  authors?: Array<Authors$Outbound> | undefined;
};

/** @internal */
export const ChangesEvents$outboundSchema: z.ZodType<
  ChangesEvents$Outbound,
  z.ZodTypeDef,
  ChangesEvents
> = z.object({
  summary: z.string(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
  startsAt: z.date().transform(v => v.toISOString()).optional(),
  endsAt: z.date().transform(v => v.toISOString()).optional(),
  environments: z.array(z.string()).optional(),
  services: z.array(z.string()).optional(),
  changes: z.array(z.string()).optional(),
  externalId: z.string().optional(),
  changeIdentities: z.array(z.lazy(() => ChangeIdentities$outboundSchema))
    .optional(),
  attachments: z.array(z.lazy(() => Attachments$outboundSchema)).optional(),
  authors: z.array(z.lazy(() => Authors$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
    externalId: "external_id",
    changeIdentities: "change_identities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangesEvents$ {
  /** @deprecated use `ChangesEvents$inboundSchema` instead. */
  export const inboundSchema = ChangesEvents$inboundSchema;
  /** @deprecated use `ChangesEvents$outboundSchema` instead. */
  export const outboundSchema = ChangesEvents$outboundSchema;
  /** @deprecated use `ChangesEvents$Outbound` instead. */
  export type Outbound = ChangesEvents$Outbound;
}

export function changesEventsToJSON(changesEvents: ChangesEvents): string {
  return JSON.stringify(ChangesEvents$outboundSchema.parse(changesEvents));
}

export function changesEventsFromJSON(
  jsonString: string,
): SafeParseResult<ChangesEvents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangesEvents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangesEvents' from JSON`,
  );
}
