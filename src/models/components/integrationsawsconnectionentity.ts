/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const IntegrationsAwsConnectionEntityConnectionStatus = {
  PendingSetup: "pending_setup",
  RoleAssumed: "role_assumed",
  CantAssumeRole: "cant_assume_role",
  InvalidPermissions: "invalid_permissions",
  Validated: "validated",
} as const;
export type IntegrationsAwsConnectionEntityConnectionStatus = ClosedEnum<
  typeof IntegrationsAwsConnectionEntityConnectionStatus
>;

/**
 * Integrations_Aws_ConnectionEntity model
 */
export type IntegrationsAwsConnectionEntity = {
  id?: string | null | undefined;
  awsAccountId?: string | null | undefined;
  targetArn?: string | null | undefined;
  externalId?: string | null | undefined;
  connectionStatus?:
    | IntegrationsAwsConnectionEntityConnectionStatus
    | null
    | undefined;
  statusText?: string | null | undefined;
  statusDescription?: string | null | undefined;
  environmentId?: string | null | undefined;
  environmentName?: string | null | undefined;
  regions?: Array<string> | null | undefined;
};

/** @internal */
export const IntegrationsAwsConnectionEntityConnectionStatus$inboundSchema:
  z.ZodNativeEnum<typeof IntegrationsAwsConnectionEntityConnectionStatus> = z
    .nativeEnum(IntegrationsAwsConnectionEntityConnectionStatus);

/** @internal */
export const IntegrationsAwsConnectionEntityConnectionStatus$outboundSchema:
  z.ZodNativeEnum<typeof IntegrationsAwsConnectionEntityConnectionStatus> =
    IntegrationsAwsConnectionEntityConnectionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsAwsConnectionEntityConnectionStatus$ {
  /** @deprecated use `IntegrationsAwsConnectionEntityConnectionStatus$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsAwsConnectionEntityConnectionStatus$inboundSchema;
  /** @deprecated use `IntegrationsAwsConnectionEntityConnectionStatus$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsAwsConnectionEntityConnectionStatus$outboundSchema;
}

/** @internal */
export const IntegrationsAwsConnectionEntity$inboundSchema: z.ZodType<
  IntegrationsAwsConnectionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  aws_account_id: z.nullable(z.string()).optional(),
  target_arn: z.nullable(z.string()).optional(),
  external_id: z.nullable(z.string()).optional(),
  connection_status: z.nullable(
    IntegrationsAwsConnectionEntityConnectionStatus$inboundSchema,
  ).optional(),
  status_text: z.nullable(z.string()).optional(),
  status_description: z.nullable(z.string()).optional(),
  environment_id: z.nullable(z.string()).optional(),
  environment_name: z.nullable(z.string()).optional(),
  regions: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "aws_account_id": "awsAccountId",
    "target_arn": "targetArn",
    "external_id": "externalId",
    "connection_status": "connectionStatus",
    "status_text": "statusText",
    "status_description": "statusDescription",
    "environment_id": "environmentId",
    "environment_name": "environmentName",
  });
});

/** @internal */
export type IntegrationsAwsConnectionEntity$Outbound = {
  id?: string | null | undefined;
  aws_account_id?: string | null | undefined;
  target_arn?: string | null | undefined;
  external_id?: string | null | undefined;
  connection_status?: string | null | undefined;
  status_text?: string | null | undefined;
  status_description?: string | null | undefined;
  environment_id?: string | null | undefined;
  environment_name?: string | null | undefined;
  regions?: Array<string> | null | undefined;
};

/** @internal */
export const IntegrationsAwsConnectionEntity$outboundSchema: z.ZodType<
  IntegrationsAwsConnectionEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsAwsConnectionEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  awsAccountId: z.nullable(z.string()).optional(),
  targetArn: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
  connectionStatus: z.nullable(
    IntegrationsAwsConnectionEntityConnectionStatus$outboundSchema,
  ).optional(),
  statusText: z.nullable(z.string()).optional(),
  statusDescription: z.nullable(z.string()).optional(),
  environmentId: z.nullable(z.string()).optional(),
  environmentName: z.nullable(z.string()).optional(),
  regions: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    awsAccountId: "aws_account_id",
    targetArn: "target_arn",
    externalId: "external_id",
    connectionStatus: "connection_status",
    statusText: "status_text",
    statusDescription: "status_description",
    environmentId: "environment_id",
    environmentName: "environment_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsAwsConnectionEntity$ {
  /** @deprecated use `IntegrationsAwsConnectionEntity$inboundSchema` instead. */
  export const inboundSchema = IntegrationsAwsConnectionEntity$inboundSchema;
  /** @deprecated use `IntegrationsAwsConnectionEntity$outboundSchema` instead. */
  export const outboundSchema = IntegrationsAwsConnectionEntity$outboundSchema;
  /** @deprecated use `IntegrationsAwsConnectionEntity$Outbound` instead. */
  export type Outbound = IntegrationsAwsConnectionEntity$Outbound;
}

export function integrationsAwsConnectionEntityToJSON(
  integrationsAwsConnectionEntity: IntegrationsAwsConnectionEntity,
): string {
  return JSON.stringify(
    IntegrationsAwsConnectionEntity$outboundSchema.parse(
      integrationsAwsConnectionEntity,
    ),
  );
}

export function integrationsAwsConnectionEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsAwsConnectionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationsAwsConnectionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsAwsConnectionEntity' from JSON`,
  );
}
