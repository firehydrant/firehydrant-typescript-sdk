/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RetrospectivesFieldEntityType = {
  Text: "text",
  SingleSelect: "single_select",
  MultiSelect: "multi_select",
  Numeric: "numeric",
  Datetime: "datetime",
  DynamicInputGroup: "dynamic_input_group",
  Markdown: "markdown",
  MarkdownText: "markdown_text",
} as const;
export type RetrospectivesFieldEntityType = ClosedEnum<
  typeof RetrospectivesFieldEntityType
>;

export type RetrospectivesFieldEntity = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  type?: RetrospectivesFieldEntityType | null | undefined;
  helpText?: string | null | undefined;
  permissibleValues?: Array<string> | null | undefined;
  isRequired?: boolean | null | undefined;
  requiredAtMilestoneId?: string | null | undefined;
  schema?: Array<string> | null | undefined;
};

/** @internal */
export const RetrospectivesFieldEntityType$inboundSchema: z.ZodNativeEnum<
  typeof RetrospectivesFieldEntityType
> = z.nativeEnum(RetrospectivesFieldEntityType);

/** @internal */
export const RetrospectivesFieldEntityType$outboundSchema: z.ZodNativeEnum<
  typeof RetrospectivesFieldEntityType
> = RetrospectivesFieldEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrospectivesFieldEntityType$ {
  /** @deprecated use `RetrospectivesFieldEntityType$inboundSchema` instead. */
  export const inboundSchema = RetrospectivesFieldEntityType$inboundSchema;
  /** @deprecated use `RetrospectivesFieldEntityType$outboundSchema` instead. */
  export const outboundSchema = RetrospectivesFieldEntityType$outboundSchema;
}

/** @internal */
export const RetrospectivesFieldEntity$inboundSchema: z.ZodType<
  RetrospectivesFieldEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.nullable(RetrospectivesFieldEntityType$inboundSchema).optional(),
  help_text: z.nullable(z.string()).optional(),
  permissible_values: z.nullable(z.array(z.string())).optional(),
  is_required: z.nullable(z.boolean()).optional(),
  required_at_milestone_id: z.nullable(z.string()).optional(),
  schema: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "help_text": "helpText",
    "permissible_values": "permissibleValues",
    "is_required": "isRequired",
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type RetrospectivesFieldEntity$Outbound = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  type?: string | null | undefined;
  help_text?: string | null | undefined;
  permissible_values?: Array<string> | null | undefined;
  is_required?: boolean | null | undefined;
  required_at_milestone_id?: string | null | undefined;
  schema?: Array<string> | null | undefined;
};

/** @internal */
export const RetrospectivesFieldEntity$outboundSchema: z.ZodType<
  RetrospectivesFieldEntity$Outbound,
  z.ZodTypeDef,
  RetrospectivesFieldEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.nullable(RetrospectivesFieldEntityType$outboundSchema).optional(),
  helpText: z.nullable(z.string()).optional(),
  permissibleValues: z.nullable(z.array(z.string())).optional(),
  isRequired: z.nullable(z.boolean()).optional(),
  requiredAtMilestoneId: z.nullable(z.string()).optional(),
  schema: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    helpText: "help_text",
    permissibleValues: "permissible_values",
    isRequired: "is_required",
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrospectivesFieldEntity$ {
  /** @deprecated use `RetrospectivesFieldEntity$inboundSchema` instead. */
  export const inboundSchema = RetrospectivesFieldEntity$inboundSchema;
  /** @deprecated use `RetrospectivesFieldEntity$outboundSchema` instead. */
  export const outboundSchema = RetrospectivesFieldEntity$outboundSchema;
  /** @deprecated use `RetrospectivesFieldEntity$Outbound` instead. */
  export type Outbound = RetrospectivesFieldEntity$Outbound;
}

export function retrospectivesFieldEntityToJSON(
  retrospectivesFieldEntity: RetrospectivesFieldEntity,
): string {
  return JSON.stringify(
    RetrospectivesFieldEntity$outboundSchema.parse(retrospectivesFieldEntity),
  );
}

export function retrospectivesFieldEntityFromJSON(
  jsonString: string,
): SafeParseResult<RetrospectivesFieldEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrospectivesFieldEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrospectivesFieldEntity' from JSON`,
  );
}
