/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  ChangeEntity,
  ChangeEntity$inboundSchema,
  ChangeEntity$Outbound,
  ChangeEntity$outboundSchema,
} from "./changeentity.js";
import {
  ChangeIdentityEntity,
  ChangeIdentityEntity$inboundSchema,
  ChangeIdentityEntity$Outbound,
  ChangeIdentityEntity$outboundSchema,
} from "./changeidentityentity.js";
import {
  EnvironmentEntryEntity,
  EnvironmentEntryEntity$inboundSchema,
  EnvironmentEntryEntity$Outbound,
  EnvironmentEntryEntity$outboundSchema,
} from "./environmententryentity.js";
import {
  ServiceEntityLite,
  ServiceEntityLite$inboundSchema,
  ServiceEntityLite$Outbound,
  ServiceEntityLite$outboundSchema,
} from "./serviceentitylite.js";

export type NullableChangeEventEntityAttachment = {};

/**
 * An object of label key and values
 */
export type NullableChangeEventEntityLabels = {};

/**
 * ChangeEventEntity model
 */
export type NullableChangeEventEntity = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  externalId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  startsAt?: Date | null | undefined;
  endsAt?: Date | null | undefined;
  durationMs?: number | null | undefined;
  durationIso8601?: string | null | undefined;
  environments?: Array<EnvironmentEntryEntity> | null | undefined;
  relatedChanges?: Array<ChangeEntity> | null | undefined;
  identities?: Array<ChangeIdentityEntity> | null | undefined;
  authors?: Array<AuthorEntity> | null | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  attachments?: Array<NullableChangeEventEntityAttachment> | null | undefined;
  /**
   * An object of label key and values
   */
  labels?: NullableChangeEventEntityLabels | null | undefined;
  services?: Array<ServiceEntityLite> | null | undefined;
};

/** @internal */
export const NullableChangeEventEntityAttachment$inboundSchema: z.ZodType<
  NullableChangeEventEntityAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NullableChangeEventEntityAttachment$Outbound = {};

/** @internal */
export const NullableChangeEventEntityAttachment$outboundSchema: z.ZodType<
  NullableChangeEventEntityAttachment$Outbound,
  z.ZodTypeDef,
  NullableChangeEventEntityAttachment
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableChangeEventEntityAttachment$ {
  /** @deprecated use `NullableChangeEventEntityAttachment$inboundSchema` instead. */
  export const inboundSchema =
    NullableChangeEventEntityAttachment$inboundSchema;
  /** @deprecated use `NullableChangeEventEntityAttachment$outboundSchema` instead. */
  export const outboundSchema =
    NullableChangeEventEntityAttachment$outboundSchema;
  /** @deprecated use `NullableChangeEventEntityAttachment$Outbound` instead. */
  export type Outbound = NullableChangeEventEntityAttachment$Outbound;
}

export function nullableChangeEventEntityAttachmentToJSON(
  nullableChangeEventEntityAttachment: NullableChangeEventEntityAttachment,
): string {
  return JSON.stringify(
    NullableChangeEventEntityAttachment$outboundSchema.parse(
      nullableChangeEventEntityAttachment,
    ),
  );
}

export function nullableChangeEventEntityAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<NullableChangeEventEntityAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableChangeEventEntityAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableChangeEventEntityAttachment' from JSON`,
  );
}

/** @internal */
export const NullableChangeEventEntityLabels$inboundSchema: z.ZodType<
  NullableChangeEventEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NullableChangeEventEntityLabels$Outbound = {};

/** @internal */
export const NullableChangeEventEntityLabels$outboundSchema: z.ZodType<
  NullableChangeEventEntityLabels$Outbound,
  z.ZodTypeDef,
  NullableChangeEventEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableChangeEventEntityLabels$ {
  /** @deprecated use `NullableChangeEventEntityLabels$inboundSchema` instead. */
  export const inboundSchema = NullableChangeEventEntityLabels$inboundSchema;
  /** @deprecated use `NullableChangeEventEntityLabels$outboundSchema` instead. */
  export const outboundSchema = NullableChangeEventEntityLabels$outboundSchema;
  /** @deprecated use `NullableChangeEventEntityLabels$Outbound` instead. */
  export type Outbound = NullableChangeEventEntityLabels$Outbound;
}

export function nullableChangeEventEntityLabelsToJSON(
  nullableChangeEventEntityLabels: NullableChangeEventEntityLabels,
): string {
  return JSON.stringify(
    NullableChangeEventEntityLabels$outboundSchema.parse(
      nullableChangeEventEntityLabels,
    ),
  );
}

export function nullableChangeEventEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<NullableChangeEventEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableChangeEventEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableChangeEventEntityLabels' from JSON`,
  );
}

/** @internal */
export const NullableChangeEventEntity$inboundSchema: z.ZodType<
  NullableChangeEventEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  external_id: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  starts_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  duration_ms: z.nullable(z.number().int()).optional(),
  duration_iso8601: z.nullable(z.string()).optional(),
  environments: z.nullable(z.array(EnvironmentEntryEntity$inboundSchema))
    .optional(),
  related_changes: z.nullable(z.array(ChangeEntity$inboundSchema)).optional(),
  identities: z.nullable(z.array(ChangeIdentityEntity$inboundSchema))
    .optional(),
  authors: z.nullable(z.array(AuthorEntity$inboundSchema)).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => NullableChangeEventEntityAttachment$inboundSchema)),
  ).optional(),
  labels: z.nullable(
    z.lazy(() => NullableChangeEventEntityLabels$inboundSchema),
  ).optional(),
  services: z.nullable(z.array(ServiceEntityLite$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "duration_ms": "durationMs",
    "duration_iso8601": "durationIso8601",
    "related_changes": "relatedChanges",
  });
});

/** @internal */
export type NullableChangeEventEntity$Outbound = {
  id?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  external_id?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  starts_at?: string | null | undefined;
  ends_at?: string | null | undefined;
  duration_ms?: number | null | undefined;
  duration_iso8601?: string | null | undefined;
  environments?: Array<EnvironmentEntryEntity$Outbound> | null | undefined;
  related_changes?: Array<ChangeEntity$Outbound> | null | undefined;
  identities?: Array<ChangeIdentityEntity$Outbound> | null | undefined;
  authors?: Array<AuthorEntity$Outbound> | null | undefined;
  attachments?:
    | Array<NullableChangeEventEntityAttachment$Outbound>
    | null
    | undefined;
  labels?: NullableChangeEventEntityLabels$Outbound | null | undefined;
  services?: Array<ServiceEntityLite$Outbound> | null | undefined;
};

/** @internal */
export const NullableChangeEventEntity$outboundSchema: z.ZodType<
  NullableChangeEventEntity$Outbound,
  z.ZodTypeDef,
  NullableChangeEventEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  durationMs: z.nullable(z.number().int()).optional(),
  durationIso8601: z.nullable(z.string()).optional(),
  environments: z.nullable(z.array(EnvironmentEntryEntity$outboundSchema))
    .optional(),
  relatedChanges: z.nullable(z.array(ChangeEntity$outboundSchema)).optional(),
  identities: z.nullable(z.array(ChangeIdentityEntity$outboundSchema))
    .optional(),
  authors: z.nullable(z.array(AuthorEntity$outboundSchema)).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => NullableChangeEventEntityAttachment$outboundSchema)),
  ).optional(),
  labels: z.nullable(
    z.lazy(() => NullableChangeEventEntityLabels$outboundSchema),
  ).optional(),
  services: z.nullable(z.array(ServiceEntityLite$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startsAt: "starts_at",
    endsAt: "ends_at",
    durationMs: "duration_ms",
    durationIso8601: "duration_iso8601",
    relatedChanges: "related_changes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableChangeEventEntity$ {
  /** @deprecated use `NullableChangeEventEntity$inboundSchema` instead. */
  export const inboundSchema = NullableChangeEventEntity$inboundSchema;
  /** @deprecated use `NullableChangeEventEntity$outboundSchema` instead. */
  export const outboundSchema = NullableChangeEventEntity$outboundSchema;
  /** @deprecated use `NullableChangeEventEntity$Outbound` instead. */
  export type Outbound = NullableChangeEventEntity$Outbound;
}

export function nullableChangeEventEntityToJSON(
  nullableChangeEventEntity: NullableChangeEventEntity,
): string {
  return JSON.stringify(
    NullableChangeEventEntity$outboundSchema.parse(nullableChangeEventEntity),
  );
}

export function nullableChangeEventEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableChangeEventEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableChangeEventEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableChangeEventEntity' from JSON`,
  );
}
