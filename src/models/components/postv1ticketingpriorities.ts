/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a single ticketing priority
 */
export type PostV1TicketingPriorities = {
  name: string;
  /**
   * The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, that priority and all priorities following it will automatically be moved down the list to make room for the new priority.
   */
  position?: number | undefined;
};

/** @internal */
export const PostV1TicketingPriorities$inboundSchema: z.ZodType<
  PostV1TicketingPriorities,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  position: z.number().int().optional(),
});

/** @internal */
export type PostV1TicketingPriorities$Outbound = {
  name: string;
  position?: number | undefined;
};

/** @internal */
export const PostV1TicketingPriorities$outboundSchema: z.ZodType<
  PostV1TicketingPriorities$Outbound,
  z.ZodTypeDef,
  PostV1TicketingPriorities
> = z.object({
  name: z.string(),
  position: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TicketingPriorities$ {
  /** @deprecated use `PostV1TicketingPriorities$inboundSchema` instead. */
  export const inboundSchema = PostV1TicketingPriorities$inboundSchema;
  /** @deprecated use `PostV1TicketingPriorities$outboundSchema` instead. */
  export const outboundSchema = PostV1TicketingPriorities$outboundSchema;
  /** @deprecated use `PostV1TicketingPriorities$Outbound` instead. */
  export type Outbound = PostV1TicketingPriorities$Outbound;
}

export function postV1TicketingPrioritiesToJSON(
  postV1TicketingPriorities: PostV1TicketingPriorities,
): string {
  return JSON.stringify(
    PostV1TicketingPriorities$outboundSchema.parse(postV1TicketingPriorities),
  );
}

export function postV1TicketingPrioritiesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TicketingPriorities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TicketingPriorities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TicketingPriorities' from JSON`,
  );
}
