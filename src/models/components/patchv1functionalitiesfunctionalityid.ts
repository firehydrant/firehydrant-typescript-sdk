/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1FunctionalitiesFunctionalityIdServices = {
  /**
   * ID of a service
   */
  id: string;
  /**
   * Set to true if you want to remove the given service from the functionality
   */
  remove?: boolean | undefined;
};

export type PatchV1FunctionalitiesFunctionalityIdLinks = {
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | undefined;
  /**
   * If you are trying to remove a link, set this to 'true'
   */
  remove?: boolean | undefined;
  /**
   * If updating an existing link, specify it's id.
   */
  id?: string | undefined;
};

/**
 * An object representing a Team that owns the functionality
 */
export type PatchV1FunctionalitiesFunctionalityIdOwner = {
  id: string;
};

export type PatchV1FunctionalitiesFunctionalityIdTeams = {
  id: string;
  /**
   * If you are trying to remove a team from a functionality, set this to 'true'
   */
  remove?: boolean | undefined;
};

export type PatchV1FunctionalitiesFunctionalityIdExternalResources = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | undefined;
  /**
   * If you are trying to remove an external resource from a service, set this to 'true'.
   */
  remove?: boolean | undefined;
};

/**
 * Update a functionalities attributes
 */
export type PatchV1FunctionalitiesFunctionalityId = {
  name?: string | undefined;
  description?: string | undefined;
  services?: Array<PatchV1FunctionalitiesFunctionalityIdServices> | undefined;
  /**
   * An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
   */
  links?: Array<PatchV1FunctionalitiesFunctionalityIdLinks> | undefined;
  /**
   * An object representing a Team that owns the functionality
   */
  owner?: PatchV1FunctionalitiesFunctionalityIdOwner | undefined;
  /**
   * If you are trying to remove a team as an owner from a functionality, set this to 'true'
   */
  removeOwner?: boolean | undefined;
  /**
   * An array of teams to attach to this functionality.
   */
  teams?: Array<PatchV1FunctionalitiesFunctionalityIdTeams> | undefined;
  /**
   * If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
   */
  removeRemainingTeams?: boolean | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?:
    | Array<PatchV1FunctionalitiesFunctionalityIdExternalResources>
    | undefined;
  /**
   * If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
   */
  removeRemainingExternalResources?: boolean | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | undefined;
  alertOnAdd?: boolean | undefined;
  autoAddRespondingTeam?: boolean | undefined;
  /**
   * Set this to true if you want to remove all of the services that are not included in the services array from the functionality
   */
  removeRemainingServices?: boolean | undefined;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdServices$inboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdServices,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    remove: z.boolean().optional(),
  });

/** @internal */
export type PatchV1FunctionalitiesFunctionalityIdServices$Outbound = {
  id: string;
  remove?: boolean | undefined;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdServices$outboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdServices$Outbound,
    z.ZodTypeDef,
    PatchV1FunctionalitiesFunctionalityIdServices
  > = z.object({
    id: z.string(),
    remove: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1FunctionalitiesFunctionalityIdServices$ {
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdServices$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1FunctionalitiesFunctionalityIdServices$inboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdServices$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1FunctionalitiesFunctionalityIdServices$outboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdServices$Outbound` instead. */
  export type Outbound = PatchV1FunctionalitiesFunctionalityIdServices$Outbound;
}

export function patchV1FunctionalitiesFunctionalityIdServicesToJSON(
  patchV1FunctionalitiesFunctionalityIdServices:
    PatchV1FunctionalitiesFunctionalityIdServices,
): string {
  return JSON.stringify(
    PatchV1FunctionalitiesFunctionalityIdServices$outboundSchema.parse(
      patchV1FunctionalitiesFunctionalityIdServices,
    ),
  );
}

export function patchV1FunctionalitiesFunctionalityIdServicesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1FunctionalitiesFunctionalityIdServices,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1FunctionalitiesFunctionalityIdServices$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1FunctionalitiesFunctionalityIdServices' from JSON`,
  );
}

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdLinks$inboundSchema:
  z.ZodType<PatchV1FunctionalitiesFunctionalityIdLinks, z.ZodTypeDef, unknown> =
    z.object({
      href_url: z.string(),
      name: z.string(),
      icon_url: z.string().optional(),
      remove: z.boolean().optional(),
      id: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        "href_url": "hrefUrl",
        "icon_url": "iconUrl",
      });
    });

/** @internal */
export type PatchV1FunctionalitiesFunctionalityIdLinks$Outbound = {
  href_url: string;
  name: string;
  icon_url?: string | undefined;
  remove?: boolean | undefined;
  id?: string | undefined;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdLinks$outboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdLinks$Outbound,
    z.ZodTypeDef,
    PatchV1FunctionalitiesFunctionalityIdLinks
  > = z.object({
    hrefUrl: z.string(),
    name: z.string(),
    iconUrl: z.string().optional(),
    remove: z.boolean().optional(),
    id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      hrefUrl: "href_url",
      iconUrl: "icon_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1FunctionalitiesFunctionalityIdLinks$ {
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdLinks$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1FunctionalitiesFunctionalityIdLinks$inboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdLinks$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1FunctionalitiesFunctionalityIdLinks$outboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdLinks$Outbound` instead. */
  export type Outbound = PatchV1FunctionalitiesFunctionalityIdLinks$Outbound;
}

export function patchV1FunctionalitiesFunctionalityIdLinksToJSON(
  patchV1FunctionalitiesFunctionalityIdLinks:
    PatchV1FunctionalitiesFunctionalityIdLinks,
): string {
  return JSON.stringify(
    PatchV1FunctionalitiesFunctionalityIdLinks$outboundSchema.parse(
      patchV1FunctionalitiesFunctionalityIdLinks,
    ),
  );
}

export function patchV1FunctionalitiesFunctionalityIdLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1FunctionalitiesFunctionalityIdLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1FunctionalitiesFunctionalityIdLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1FunctionalitiesFunctionalityIdLinks' from JSON`,
  );
}

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdOwner$inboundSchema:
  z.ZodType<PatchV1FunctionalitiesFunctionalityIdOwner, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
    });

/** @internal */
export type PatchV1FunctionalitiesFunctionalityIdOwner$Outbound = {
  id: string;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdOwner$outboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdOwner$Outbound,
    z.ZodTypeDef,
    PatchV1FunctionalitiesFunctionalityIdOwner
  > = z.object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1FunctionalitiesFunctionalityIdOwner$ {
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdOwner$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1FunctionalitiesFunctionalityIdOwner$inboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdOwner$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1FunctionalitiesFunctionalityIdOwner$outboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdOwner$Outbound` instead. */
  export type Outbound = PatchV1FunctionalitiesFunctionalityIdOwner$Outbound;
}

export function patchV1FunctionalitiesFunctionalityIdOwnerToJSON(
  patchV1FunctionalitiesFunctionalityIdOwner:
    PatchV1FunctionalitiesFunctionalityIdOwner,
): string {
  return JSON.stringify(
    PatchV1FunctionalitiesFunctionalityIdOwner$outboundSchema.parse(
      patchV1FunctionalitiesFunctionalityIdOwner,
    ),
  );
}

export function patchV1FunctionalitiesFunctionalityIdOwnerFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1FunctionalitiesFunctionalityIdOwner,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1FunctionalitiesFunctionalityIdOwner$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1FunctionalitiesFunctionalityIdOwner' from JSON`,
  );
}

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdTeams$inboundSchema:
  z.ZodType<PatchV1FunctionalitiesFunctionalityIdTeams, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
      remove: z.boolean().optional(),
    });

/** @internal */
export type PatchV1FunctionalitiesFunctionalityIdTeams$Outbound = {
  id: string;
  remove?: boolean | undefined;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdTeams$outboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdTeams$Outbound,
    z.ZodTypeDef,
    PatchV1FunctionalitiesFunctionalityIdTeams
  > = z.object({
    id: z.string(),
    remove: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1FunctionalitiesFunctionalityIdTeams$ {
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdTeams$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1FunctionalitiesFunctionalityIdTeams$inboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdTeams$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1FunctionalitiesFunctionalityIdTeams$outboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdTeams$Outbound` instead. */
  export type Outbound = PatchV1FunctionalitiesFunctionalityIdTeams$Outbound;
}

export function patchV1FunctionalitiesFunctionalityIdTeamsToJSON(
  patchV1FunctionalitiesFunctionalityIdTeams:
    PatchV1FunctionalitiesFunctionalityIdTeams,
): string {
  return JSON.stringify(
    PatchV1FunctionalitiesFunctionalityIdTeams$outboundSchema.parse(
      patchV1FunctionalitiesFunctionalityIdTeams,
    ),
  );
}

export function patchV1FunctionalitiesFunctionalityIdTeamsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1FunctionalitiesFunctionalityIdTeams,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1FunctionalitiesFunctionalityIdTeams$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1FunctionalitiesFunctionalityIdTeams' from JSON`,
  );
}

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdExternalResources$inboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdExternalResources,
    z.ZodTypeDef,
    unknown
  > = z.object({
    remote_id: z.string(),
    connection_type: z.string().optional(),
    remove: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "remote_id": "remoteId",
      "connection_type": "connectionType",
    });
  });

/** @internal */
export type PatchV1FunctionalitiesFunctionalityIdExternalResources$Outbound = {
  remote_id: string;
  connection_type?: string | undefined;
  remove?: boolean | undefined;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityIdExternalResources$outboundSchema:
  z.ZodType<
    PatchV1FunctionalitiesFunctionalityIdExternalResources$Outbound,
    z.ZodTypeDef,
    PatchV1FunctionalitiesFunctionalityIdExternalResources
  > = z.object({
    remoteId: z.string(),
    connectionType: z.string().optional(),
    remove: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      remoteId: "remote_id",
      connectionType: "connection_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1FunctionalitiesFunctionalityIdExternalResources$ {
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdExternalResources$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1FunctionalitiesFunctionalityIdExternalResources$inboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdExternalResources$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1FunctionalitiesFunctionalityIdExternalResources$outboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityIdExternalResources$Outbound` instead. */
  export type Outbound =
    PatchV1FunctionalitiesFunctionalityIdExternalResources$Outbound;
}

export function patchV1FunctionalitiesFunctionalityIdExternalResourcesToJSON(
  patchV1FunctionalitiesFunctionalityIdExternalResources:
    PatchV1FunctionalitiesFunctionalityIdExternalResources,
): string {
  return JSON.stringify(
    PatchV1FunctionalitiesFunctionalityIdExternalResources$outboundSchema.parse(
      patchV1FunctionalitiesFunctionalityIdExternalResources,
    ),
  );
}

export function patchV1FunctionalitiesFunctionalityIdExternalResourcesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1FunctionalitiesFunctionalityIdExternalResources,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1FunctionalitiesFunctionalityIdExternalResources$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1FunctionalitiesFunctionalityIdExternalResources' from JSON`,
  );
}

/** @internal */
export const PatchV1FunctionalitiesFunctionalityId$inboundSchema: z.ZodType<
  PatchV1FunctionalitiesFunctionalityId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  services: z.array(
    z.lazy(() => PatchV1FunctionalitiesFunctionalityIdServices$inboundSchema),
  ).optional(),
  links: z.array(
    z.lazy(() => PatchV1FunctionalitiesFunctionalityIdLinks$inboundSchema),
  ).optional(),
  owner: z.lazy(() => PatchV1FunctionalitiesFunctionalityIdOwner$inboundSchema)
    .optional(),
  remove_owner: z.boolean().optional(),
  teams: z.array(
    z.lazy(() => PatchV1FunctionalitiesFunctionalityIdTeams$inboundSchema),
  ).optional(),
  remove_remaining_teams: z.boolean().optional(),
  external_resources: z.array(
    z.lazy(() =>
      PatchV1FunctionalitiesFunctionalityIdExternalResources$inboundSchema
    ),
  ).optional(),
  remove_remaining_external_resources: z.boolean().optional(),
  labels: z.record(z.string()).optional(),
  alert_on_add: z.boolean().optional(),
  auto_add_responding_team: z.boolean().optional(),
  remove_remaining_services: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "remove_owner": "removeOwner",
    "remove_remaining_teams": "removeRemainingTeams",
    "external_resources": "externalResources",
    "remove_remaining_external_resources": "removeRemainingExternalResources",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "remove_remaining_services": "removeRemainingServices",
  });
});

/** @internal */
export type PatchV1FunctionalitiesFunctionalityId$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  services?:
    | Array<PatchV1FunctionalitiesFunctionalityIdServices$Outbound>
    | undefined;
  links?:
    | Array<PatchV1FunctionalitiesFunctionalityIdLinks$Outbound>
    | undefined;
  owner?: PatchV1FunctionalitiesFunctionalityIdOwner$Outbound | undefined;
  remove_owner?: boolean | undefined;
  teams?:
    | Array<PatchV1FunctionalitiesFunctionalityIdTeams$Outbound>
    | undefined;
  remove_remaining_teams?: boolean | undefined;
  external_resources?:
    | Array<PatchV1FunctionalitiesFunctionalityIdExternalResources$Outbound>
    | undefined;
  remove_remaining_external_resources?: boolean | undefined;
  labels?: { [k: string]: string } | undefined;
  alert_on_add?: boolean | undefined;
  auto_add_responding_team?: boolean | undefined;
  remove_remaining_services: boolean;
};

/** @internal */
export const PatchV1FunctionalitiesFunctionalityId$outboundSchema: z.ZodType<
  PatchV1FunctionalitiesFunctionalityId$Outbound,
  z.ZodTypeDef,
  PatchV1FunctionalitiesFunctionalityId
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  services: z.array(
    z.lazy(() => PatchV1FunctionalitiesFunctionalityIdServices$outboundSchema),
  ).optional(),
  links: z.array(
    z.lazy(() => PatchV1FunctionalitiesFunctionalityIdLinks$outboundSchema),
  ).optional(),
  owner: z.lazy(() => PatchV1FunctionalitiesFunctionalityIdOwner$outboundSchema)
    .optional(),
  removeOwner: z.boolean().optional(),
  teams: z.array(
    z.lazy(() => PatchV1FunctionalitiesFunctionalityIdTeams$outboundSchema),
  ).optional(),
  removeRemainingTeams: z.boolean().optional(),
  externalResources: z.array(
    z.lazy(() =>
      PatchV1FunctionalitiesFunctionalityIdExternalResources$outboundSchema
    ),
  ).optional(),
  removeRemainingExternalResources: z.boolean().optional(),
  labels: z.record(z.string()).optional(),
  alertOnAdd: z.boolean().optional(),
  autoAddRespondingTeam: z.boolean().optional(),
  removeRemainingServices: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    removeOwner: "remove_owner",
    removeRemainingTeams: "remove_remaining_teams",
    externalResources: "external_resources",
    removeRemainingExternalResources: "remove_remaining_external_resources",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    removeRemainingServices: "remove_remaining_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1FunctionalitiesFunctionalityId$ {
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1FunctionalitiesFunctionalityId$inboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1FunctionalitiesFunctionalityId$outboundSchema;
  /** @deprecated use `PatchV1FunctionalitiesFunctionalityId$Outbound` instead. */
  export type Outbound = PatchV1FunctionalitiesFunctionalityId$Outbound;
}

export function patchV1FunctionalitiesFunctionalityIdToJSON(
  patchV1FunctionalitiesFunctionalityId: PatchV1FunctionalitiesFunctionalityId,
): string {
  return JSON.stringify(
    PatchV1FunctionalitiesFunctionalityId$outboundSchema.parse(
      patchV1FunctionalitiesFunctionalityId,
    ),
  );
}

export function patchV1FunctionalitiesFunctionalityIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1FunctionalitiesFunctionalityId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1FunctionalitiesFunctionalityId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1FunctionalitiesFunctionalityId' from JSON`,
  );
}
