/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1ScimV2GroupsIdMembers = {
  /**
   * String that represents the user's UUID to assign to the team
   */
  value: string;
};

/**
 * SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.
 */
export type PutV1ScimV2GroupsId = {
  /**
   * The name of the team being updated
   */
  displayName: string;
  members: Array<PutV1ScimV2GroupsIdMembers>;
};

/** @internal */
export const PutV1ScimV2GroupsIdMembers$inboundSchema: z.ZodType<
  PutV1ScimV2GroupsIdMembers,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type PutV1ScimV2GroupsIdMembers$Outbound = {
  value: string;
};

/** @internal */
export const PutV1ScimV2GroupsIdMembers$outboundSchema: z.ZodType<
  PutV1ScimV2GroupsIdMembers$Outbound,
  z.ZodTypeDef,
  PutV1ScimV2GroupsIdMembers
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ScimV2GroupsIdMembers$ {
  /** @deprecated use `PutV1ScimV2GroupsIdMembers$inboundSchema` instead. */
  export const inboundSchema = PutV1ScimV2GroupsIdMembers$inboundSchema;
  /** @deprecated use `PutV1ScimV2GroupsIdMembers$outboundSchema` instead. */
  export const outboundSchema = PutV1ScimV2GroupsIdMembers$outboundSchema;
  /** @deprecated use `PutV1ScimV2GroupsIdMembers$Outbound` instead. */
  export type Outbound = PutV1ScimV2GroupsIdMembers$Outbound;
}

export function putV1ScimV2GroupsIdMembersToJSON(
  putV1ScimV2GroupsIdMembers: PutV1ScimV2GroupsIdMembers,
): string {
  return JSON.stringify(
    PutV1ScimV2GroupsIdMembers$outboundSchema.parse(putV1ScimV2GroupsIdMembers),
  );
}

export function putV1ScimV2GroupsIdMembersFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ScimV2GroupsIdMembers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ScimV2GroupsIdMembers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ScimV2GroupsIdMembers' from JSON`,
  );
}

/** @internal */
export const PutV1ScimV2GroupsId$inboundSchema: z.ZodType<
  PutV1ScimV2GroupsId,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => PutV1ScimV2GroupsIdMembers$inboundSchema)),
});

/** @internal */
export type PutV1ScimV2GroupsId$Outbound = {
  displayName: string;
  members: Array<PutV1ScimV2GroupsIdMembers$Outbound>;
};

/** @internal */
export const PutV1ScimV2GroupsId$outboundSchema: z.ZodType<
  PutV1ScimV2GroupsId$Outbound,
  z.ZodTypeDef,
  PutV1ScimV2GroupsId
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => PutV1ScimV2GroupsIdMembers$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ScimV2GroupsId$ {
  /** @deprecated use `PutV1ScimV2GroupsId$inboundSchema` instead. */
  export const inboundSchema = PutV1ScimV2GroupsId$inboundSchema;
  /** @deprecated use `PutV1ScimV2GroupsId$outboundSchema` instead. */
  export const outboundSchema = PutV1ScimV2GroupsId$outboundSchema;
  /** @deprecated use `PutV1ScimV2GroupsId$Outbound` instead. */
  export type Outbound = PutV1ScimV2GroupsId$Outbound;
}

export function putV1ScimV2GroupsIdToJSON(
  putV1ScimV2GroupsId: PutV1ScimV2GroupsId,
): string {
  return JSON.stringify(
    PutV1ScimV2GroupsId$outboundSchema.parse(putV1ScimV2GroupsId),
  );
}

export function putV1ScimV2GroupsIdFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ScimV2GroupsId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ScimV2GroupsId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ScimV2GroupsId' from JSON`,
  );
}
