/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketingProjectFieldMapExternalValueEntity,
  TicketingProjectFieldMapExternalValueEntity$inboundSchema,
  TicketingProjectFieldMapExternalValueEntity$Outbound,
  TicketingProjectFieldMapExternalValueEntity$outboundSchema,
} from "./ticketingprojectfieldmapexternalvalueentity.js";

export type TicketingProjectFieldMapCasesElseEntity = {
  externalValue?: TicketingProjectFieldMapExternalValueEntity | undefined;
};

/** @internal */
export const TicketingProjectFieldMapCasesElseEntity$inboundSchema: z.ZodType<
  TicketingProjectFieldMapCasesElseEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_value: TicketingProjectFieldMapExternalValueEntity$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "external_value": "externalValue",
  });
});

/** @internal */
export type TicketingProjectFieldMapCasesElseEntity$Outbound = {
  external_value?:
    | TicketingProjectFieldMapExternalValueEntity$Outbound
    | undefined;
};

/** @internal */
export const TicketingProjectFieldMapCasesElseEntity$outboundSchema: z.ZodType<
  TicketingProjectFieldMapCasesElseEntity$Outbound,
  z.ZodTypeDef,
  TicketingProjectFieldMapCasesElseEntity
> = z.object({
  externalValue: TicketingProjectFieldMapExternalValueEntity$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    externalValue: "external_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingProjectFieldMapCasesElseEntity$ {
  /** @deprecated use `TicketingProjectFieldMapCasesElseEntity$inboundSchema` instead. */
  export const inboundSchema =
    TicketingProjectFieldMapCasesElseEntity$inboundSchema;
  /** @deprecated use `TicketingProjectFieldMapCasesElseEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingProjectFieldMapCasesElseEntity$outboundSchema;
  /** @deprecated use `TicketingProjectFieldMapCasesElseEntity$Outbound` instead. */
  export type Outbound = TicketingProjectFieldMapCasesElseEntity$Outbound;
}

export function ticketingProjectFieldMapCasesElseEntityToJSON(
  ticketingProjectFieldMapCasesElseEntity:
    TicketingProjectFieldMapCasesElseEntity,
): string {
  return JSON.stringify(
    TicketingProjectFieldMapCasesElseEntity$outboundSchema.parse(
      ticketingProjectFieldMapCasesElseEntity,
    ),
  );
}

export function ticketingProjectFieldMapCasesElseEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingProjectFieldMapCasesElseEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingProjectFieldMapCasesElseEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingProjectFieldMapCasesElseEntity' from JSON`,
  );
}
