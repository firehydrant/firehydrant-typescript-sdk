/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Encoding for submitted data
 */
export const Encoding = {
  TextYaml: "text/yaml",
  ApplicationXYaml: "application/x-yaml",
  ApplicationJson: "application/json",
} as const;
/**
 * Encoding for submitted data
 */
export type Encoding = ClosedEnum<typeof Encoding>;

/**
 * Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.
 */
export type PostV1CatalogsCatalogIdIngest = {
  /**
   * Encoding for submitted data
   */
  encoding: Encoding;
  /**
   * Service data
   */
  data: string;
};

/** @internal */
export const Encoding$inboundSchema: z.ZodNativeEnum<typeof Encoding> = z
  .nativeEnum(Encoding);

/** @internal */
export const Encoding$outboundSchema: z.ZodNativeEnum<typeof Encoding> =
  Encoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Encoding$ {
  /** @deprecated use `Encoding$inboundSchema` instead. */
  export const inboundSchema = Encoding$inboundSchema;
  /** @deprecated use `Encoding$outboundSchema` instead. */
  export const outboundSchema = Encoding$outboundSchema;
}

/** @internal */
export const PostV1CatalogsCatalogIdIngest$inboundSchema: z.ZodType<
  PostV1CatalogsCatalogIdIngest,
  z.ZodTypeDef,
  unknown
> = z.object({
  encoding: Encoding$inboundSchema,
  data: z.string(),
});

/** @internal */
export type PostV1CatalogsCatalogIdIngest$Outbound = {
  encoding: string;
  data: string;
};

/** @internal */
export const PostV1CatalogsCatalogIdIngest$outboundSchema: z.ZodType<
  PostV1CatalogsCatalogIdIngest$Outbound,
  z.ZodTypeDef,
  PostV1CatalogsCatalogIdIngest
> = z.object({
  encoding: Encoding$outboundSchema,
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CatalogsCatalogIdIngest$ {
  /** @deprecated use `PostV1CatalogsCatalogIdIngest$inboundSchema` instead. */
  export const inboundSchema = PostV1CatalogsCatalogIdIngest$inboundSchema;
  /** @deprecated use `PostV1CatalogsCatalogIdIngest$outboundSchema` instead. */
  export const outboundSchema = PostV1CatalogsCatalogIdIngest$outboundSchema;
  /** @deprecated use `PostV1CatalogsCatalogIdIngest$Outbound` instead. */
  export type Outbound = PostV1CatalogsCatalogIdIngest$Outbound;
}

export function postV1CatalogsCatalogIdIngestToJSON(
  postV1CatalogsCatalogIdIngest: PostV1CatalogsCatalogIdIngest,
): string {
  return JSON.stringify(
    PostV1CatalogsCatalogIdIngest$outboundSchema.parse(
      postV1CatalogsCatalogIdIngest,
    ),
  );
}

export function postV1CatalogsCatalogIdIngestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CatalogsCatalogIdIngest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CatalogsCatalogIdIngest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CatalogsCatalogIdIngest' from JSON`,
  );
}
