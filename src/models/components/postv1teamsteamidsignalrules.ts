/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the rule will notify when matched.
 */
export const TargetType = {
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the rule will notify when matched.
 */
export type TargetType = ClosedEnum<typeof TargetType>;

/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export const PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
  Unknown: "",
} as const;
/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export type PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride =
  ClosedEnum<typeof PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride>;

/**
 * Create a Signals rule for a team.
 */
export type PostV1TeamsTeamIdSignalRules = {
  /**
   * The rule's name.
   */
  name: string;
  /**
   * The CEL expression that defines the rule.
   */
  expression: string;
  /**
   * The type of target that the rule will notify when matched.
   */
  targetType: TargetType;
  /**
   * The ID of the target that the rule will notify when matched.
   */
  targetId: string;
  /**
   * The ID of an incident type that should be used when an alert is promoted to an incident
   */
  incidentTypeId?: string | undefined;
  /**
   * A notification priority that will be set on the resulting alert (default: HIGH)
   */
  notificationPriorityOverride?:
    | PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride
    | undefined;
};

/** @internal */
export const TargetType$inboundSchema: z.ZodNativeEnum<typeof TargetType> = z
  .nativeEnum(TargetType);

/** @internal */
export const TargetType$outboundSchema: z.ZodNativeEnum<typeof TargetType> =
  TargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetType$ {
  /** @deprecated use `TargetType$inboundSchema` instead. */
  export const inboundSchema = TargetType$inboundSchema;
  /** @deprecated use `TargetType$outboundSchema` instead. */
  export const outboundSchema = TargetType$outboundSchema;
}

/** @internal */
export const PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride
  > = z.nativeEnum(PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride);

/** @internal */
export const PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride
  > = PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$ {
  /** @deprecated use `PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$inboundSchema` instead. */
  export const inboundSchema =
    PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$inboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$outboundSchema` instead. */
  export const outboundSchema =
    PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$outboundSchema;
}

/** @internal */
export const PostV1TeamsTeamIdSignalRules$inboundSchema: z.ZodType<
  PostV1TeamsTeamIdSignalRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  expression: z.string(),
  target_type: TargetType$inboundSchema,
  target_id: z.string(),
  incident_type_id: z.string().optional(),
  notification_priority_override:
    PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
    "incident_type_id": "incidentTypeId",
    "notification_priority_override": "notificationPriorityOverride",
  });
});

/** @internal */
export type PostV1TeamsTeamIdSignalRules$Outbound = {
  name: string;
  expression: string;
  target_type: string;
  target_id: string;
  incident_type_id?: string | undefined;
  notification_priority_override?: string | undefined;
};

/** @internal */
export const PostV1TeamsTeamIdSignalRules$outboundSchema: z.ZodType<
  PostV1TeamsTeamIdSignalRules$Outbound,
  z.ZodTypeDef,
  PostV1TeamsTeamIdSignalRules
> = z.object({
  name: z.string(),
  expression: z.string(),
  targetType: TargetType$outboundSchema,
  targetId: z.string(),
  incidentTypeId: z.string().optional(),
  notificationPriorityOverride:
    PostV1TeamsTeamIdSignalRulesNotificationPriorityOverride$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
    incidentTypeId: "incident_type_id",
    notificationPriorityOverride: "notification_priority_override",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TeamsTeamIdSignalRules$ {
  /** @deprecated use `PostV1TeamsTeamIdSignalRules$inboundSchema` instead. */
  export const inboundSchema = PostV1TeamsTeamIdSignalRules$inboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdSignalRules$outboundSchema` instead. */
  export const outboundSchema = PostV1TeamsTeamIdSignalRules$outboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdSignalRules$Outbound` instead. */
  export type Outbound = PostV1TeamsTeamIdSignalRules$Outbound;
}

export function postV1TeamsTeamIdSignalRulesToJSON(
  postV1TeamsTeamIdSignalRules: PostV1TeamsTeamIdSignalRules,
): string {
  return JSON.stringify(
    PostV1TeamsTeamIdSignalRules$outboundSchema.parse(
      postV1TeamsTeamIdSignalRules,
    ),
  );
}

export function postV1TeamsTeamIdSignalRulesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TeamsTeamIdSignalRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TeamsTeamIdSignalRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TeamsTeamIdSignalRules' from JSON`,
  );
}
