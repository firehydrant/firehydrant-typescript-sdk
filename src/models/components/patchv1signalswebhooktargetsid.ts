/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a Signals webhook target by ID
 */
export type PatchV1SignalsWebhookTargetsId = {
  /**
   * The webhook target's name.
   */
  name?: string | undefined;
  /**
   * An optional detailed description of the webhook target.
   */
  description?: string | undefined;
  /**
   * The URL that the webhook target will notify.
   */
  url?: string | undefined;
  /**
   * An optional secret we will provide in the `FH-Signature` header
   *
   * @remarks
   * when sending a payload to the webhook target. This key will not be
   * shown in any response once configured.
   */
  signingKey?: string | undefined;
};

/** @internal */
export const PatchV1SignalsWebhookTargetsId$inboundSchema: z.ZodType<
  PatchV1SignalsWebhookTargetsId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  url: z.string().optional(),
  signing_key: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "signing_key": "signingKey",
  });
});

/** @internal */
export type PatchV1SignalsWebhookTargetsId$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  url?: string | undefined;
  signing_key?: string | undefined;
};

/** @internal */
export const PatchV1SignalsWebhookTargetsId$outboundSchema: z.ZodType<
  PatchV1SignalsWebhookTargetsId$Outbound,
  z.ZodTypeDef,
  PatchV1SignalsWebhookTargetsId
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  url: z.string().optional(),
  signingKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    signingKey: "signing_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1SignalsWebhookTargetsId$ {
  /** @deprecated use `PatchV1SignalsWebhookTargetsId$inboundSchema` instead. */
  export const inboundSchema = PatchV1SignalsWebhookTargetsId$inboundSchema;
  /** @deprecated use `PatchV1SignalsWebhookTargetsId$outboundSchema` instead. */
  export const outboundSchema = PatchV1SignalsWebhookTargetsId$outboundSchema;
  /** @deprecated use `PatchV1SignalsWebhookTargetsId$Outbound` instead. */
  export type Outbound = PatchV1SignalsWebhookTargetsId$Outbound;
}

export function patchV1SignalsWebhookTargetsIdToJSON(
  patchV1SignalsWebhookTargetsId: PatchV1SignalsWebhookTargetsId,
): string {
  return JSON.stringify(
    PatchV1SignalsWebhookTargetsId$outboundSchema.parse(
      patchV1SignalsWebhookTargetsId,
    ),
  );
}

export function patchV1SignalsWebhookTargetsIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1SignalsWebhookTargetsId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1SignalsWebhookTargetsId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1SignalsWebhookTargetsId' from JSON`,
  );
}
