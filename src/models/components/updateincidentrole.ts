/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a single incident role from its ID
 */
export type UpdateIncidentRole = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
};

/** @internal */
export const UpdateIncidentRole$inboundSchema: z.ZodType<
  UpdateIncidentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateIncidentRole$Outbound = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
};

/** @internal */
export const UpdateIncidentRole$outboundSchema: z.ZodType<
  UpdateIncidentRole$Outbound,
  z.ZodTypeDef,
  UpdateIncidentRole
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentRole$ {
  /** @deprecated use `UpdateIncidentRole$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentRole$inboundSchema;
  /** @deprecated use `UpdateIncidentRole$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentRole$outboundSchema;
  /** @deprecated use `UpdateIncidentRole$Outbound` instead. */
  export type Outbound = UpdateIncidentRole$Outbound;
}

export function updateIncidentRoleToJSON(
  updateIncidentRole: UpdateIncidentRole,
): string {
  return JSON.stringify(
    UpdateIncidentRole$outboundSchema.parse(updateIncidentRole),
  );
}

export function updateIncidentRoleFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentRole' from JSON`,
  );
}
