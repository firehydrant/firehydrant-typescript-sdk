/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Incidents_ShareRetrospectivesResultEntity model
 */
export type IncidentsShareRetrospectivesResultEntity = {
  /**
   * The IDs of the retrospectives that were shared.
   */
  retrospectiveIds?: Array<string> | null | undefined;
  /**
   * The IDs of the users with whom the retrospectives were shared.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const IncidentsShareRetrospectivesResultEntity$inboundSchema: z.ZodType<
  IncidentsShareRetrospectivesResultEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrospective_ids: z.nullable(z.array(z.string())).optional(),
  user_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "retrospective_ids": "retrospectiveIds",
    "user_ids": "userIds",
  });
});

/** @internal */
export type IncidentsShareRetrospectivesResultEntity$Outbound = {
  retrospective_ids?: Array<string> | null | undefined;
  user_ids?: Array<string> | null | undefined;
};

/** @internal */
export const IncidentsShareRetrospectivesResultEntity$outboundSchema: z.ZodType<
  IncidentsShareRetrospectivesResultEntity$Outbound,
  z.ZodTypeDef,
  IncidentsShareRetrospectivesResultEntity
> = z.object({
  retrospectiveIds: z.nullable(z.array(z.string())).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    retrospectiveIds: "retrospective_ids",
    userIds: "user_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsShareRetrospectivesResultEntity$ {
  /** @deprecated use `IncidentsShareRetrospectivesResultEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsShareRetrospectivesResultEntity$inboundSchema;
  /** @deprecated use `IncidentsShareRetrospectivesResultEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsShareRetrospectivesResultEntity$outboundSchema;
  /** @deprecated use `IncidentsShareRetrospectivesResultEntity$Outbound` instead. */
  export type Outbound = IncidentsShareRetrospectivesResultEntity$Outbound;
}

export function incidentsShareRetrospectivesResultEntityToJSON(
  incidentsShareRetrospectivesResultEntity:
    IncidentsShareRetrospectivesResultEntity,
): string {
  return JSON.stringify(
    IncidentsShareRetrospectivesResultEntity$outboundSchema.parse(
      incidentsShareRetrospectivesResultEntity,
    ),
  );
}

export function incidentsShareRetrospectivesResultEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  IncidentsShareRetrospectivesResultEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentsShareRetrospectivesResultEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncidentsShareRetrospectivesResultEntity' from JSON`,
  );
}
