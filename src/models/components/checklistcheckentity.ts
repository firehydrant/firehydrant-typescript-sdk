/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChecklistCheckEntity = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  status?: boolean | undefined;
};

/** @internal */
export const ChecklistCheckEntity$inboundSchema: z.ZodType<
  ChecklistCheckEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  status: z.boolean().optional(),
});

/** @internal */
export type ChecklistCheckEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  status?: boolean | undefined;
};

/** @internal */
export const ChecklistCheckEntity$outboundSchema: z.ZodType<
  ChecklistCheckEntity$Outbound,
  z.ZodTypeDef,
  ChecklistCheckEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  status: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChecklistCheckEntity$ {
  /** @deprecated use `ChecklistCheckEntity$inboundSchema` instead. */
  export const inboundSchema = ChecklistCheckEntity$inboundSchema;
  /** @deprecated use `ChecklistCheckEntity$outboundSchema` instead. */
  export const outboundSchema = ChecklistCheckEntity$outboundSchema;
  /** @deprecated use `ChecklistCheckEntity$Outbound` instead. */
  export type Outbound = ChecklistCheckEntity$Outbound;
}

export function checklistCheckEntityToJSON(
  checklistCheckEntity: ChecklistCheckEntity,
): string {
  return JSON.stringify(
    ChecklistCheckEntity$outboundSchema.parse(checklistCheckEntity),
  );
}

export function checklistCheckEntityFromJSON(
  jsonString: string,
): SafeParseResult<ChecklistCheckEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChecklistCheckEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChecklistCheckEntity' from JSON`,
  );
}
