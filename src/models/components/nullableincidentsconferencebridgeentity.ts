/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableIncidentsConferenceBridgeEntityAttachment = {};

/**
 * Incidents_ConferenceBridgeEntity model
 */
export type NullableIncidentsConferenceBridgeEntity = {
  id?: string | null | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  attachments?:
    | Array<NullableIncidentsConferenceBridgeEntityAttachment>
    | null
    | undefined;
  hasTranslatedTranscripts?: boolean | null | undefined;
  /**
   * A list of language codes that have translated transcripts for this conference bridge
   */
  languageCodes?: Array<string> | null | undefined;
  transcriptionStatus?: string | null | undefined;
  transcriptionSubCode?: string | null | undefined;
  previousHostAssignment?: string | null | undefined;
};

/** @internal */
export const NullableIncidentsConferenceBridgeEntityAttachment$inboundSchema:
  z.ZodType<
    NullableIncidentsConferenceBridgeEntityAttachment,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type NullableIncidentsConferenceBridgeEntityAttachment$Outbound = {};

/** @internal */
export const NullableIncidentsConferenceBridgeEntityAttachment$outboundSchema:
  z.ZodType<
    NullableIncidentsConferenceBridgeEntityAttachment$Outbound,
    z.ZodTypeDef,
    NullableIncidentsConferenceBridgeEntityAttachment
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIncidentsConferenceBridgeEntityAttachment$ {
  /** @deprecated use `NullableIncidentsConferenceBridgeEntityAttachment$inboundSchema` instead. */
  export const inboundSchema =
    NullableIncidentsConferenceBridgeEntityAttachment$inboundSchema;
  /** @deprecated use `NullableIncidentsConferenceBridgeEntityAttachment$outboundSchema` instead. */
  export const outboundSchema =
    NullableIncidentsConferenceBridgeEntityAttachment$outboundSchema;
  /** @deprecated use `NullableIncidentsConferenceBridgeEntityAttachment$Outbound` instead. */
  export type Outbound =
    NullableIncidentsConferenceBridgeEntityAttachment$Outbound;
}

export function nullableIncidentsConferenceBridgeEntityAttachmentToJSON(
  nullableIncidentsConferenceBridgeEntityAttachment:
    NullableIncidentsConferenceBridgeEntityAttachment,
): string {
  return JSON.stringify(
    NullableIncidentsConferenceBridgeEntityAttachment$outboundSchema.parse(
      nullableIncidentsConferenceBridgeEntityAttachment,
    ),
  );
}

export function nullableIncidentsConferenceBridgeEntityAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableIncidentsConferenceBridgeEntityAttachment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIncidentsConferenceBridgeEntityAttachment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableIncidentsConferenceBridgeEntityAttachment' from JSON`,
  );
}

/** @internal */
export const NullableIncidentsConferenceBridgeEntity$inboundSchema: z.ZodType<
  NullableIncidentsConferenceBridgeEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() =>
      NullableIncidentsConferenceBridgeEntityAttachment$inboundSchema
    )),
  ).optional(),
  has_translated_transcripts: z.nullable(z.boolean()).optional(),
  language_codes: z.nullable(z.array(z.string())).optional(),
  transcription_status: z.nullable(z.string()).optional(),
  transcription_sub_code: z.nullable(z.string()).optional(),
  previous_host_assignment: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "has_translated_transcripts": "hasTranslatedTranscripts",
    "language_codes": "languageCodes",
    "transcription_status": "transcriptionStatus",
    "transcription_sub_code": "transcriptionSubCode",
    "previous_host_assignment": "previousHostAssignment",
  });
});

/** @internal */
export type NullableIncidentsConferenceBridgeEntity$Outbound = {
  id?: string | null | undefined;
  attachments?:
    | Array<NullableIncidentsConferenceBridgeEntityAttachment$Outbound>
    | null
    | undefined;
  has_translated_transcripts?: boolean | null | undefined;
  language_codes?: Array<string> | null | undefined;
  transcription_status?: string | null | undefined;
  transcription_sub_code?: string | null | undefined;
  previous_host_assignment?: string | null | undefined;
};

/** @internal */
export const NullableIncidentsConferenceBridgeEntity$outboundSchema: z.ZodType<
  NullableIncidentsConferenceBridgeEntity$Outbound,
  z.ZodTypeDef,
  NullableIncidentsConferenceBridgeEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() =>
      NullableIncidentsConferenceBridgeEntityAttachment$outboundSchema
    )),
  ).optional(),
  hasTranslatedTranscripts: z.nullable(z.boolean()).optional(),
  languageCodes: z.nullable(z.array(z.string())).optional(),
  transcriptionStatus: z.nullable(z.string()).optional(),
  transcriptionSubCode: z.nullable(z.string()).optional(),
  previousHostAssignment: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hasTranslatedTranscripts: "has_translated_transcripts",
    languageCodes: "language_codes",
    transcriptionStatus: "transcription_status",
    transcriptionSubCode: "transcription_sub_code",
    previousHostAssignment: "previous_host_assignment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIncidentsConferenceBridgeEntity$ {
  /** @deprecated use `NullableIncidentsConferenceBridgeEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableIncidentsConferenceBridgeEntity$inboundSchema;
  /** @deprecated use `NullableIncidentsConferenceBridgeEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableIncidentsConferenceBridgeEntity$outboundSchema;
  /** @deprecated use `NullableIncidentsConferenceBridgeEntity$Outbound` instead. */
  export type Outbound = NullableIncidentsConferenceBridgeEntity$Outbound;
}

export function nullableIncidentsConferenceBridgeEntityToJSON(
  nullableIncidentsConferenceBridgeEntity:
    NullableIncidentsConferenceBridgeEntity,
): string {
  return JSON.stringify(
    NullableIncidentsConferenceBridgeEntity$outboundSchema.parse(
      nullableIncidentsConferenceBridgeEntity,
    ),
  );
}

export function nullableIncidentsConferenceBridgeEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableIncidentsConferenceBridgeEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIncidentsConferenceBridgeEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableIncidentsConferenceBridgeEntity' from JSON`,
  );
}
