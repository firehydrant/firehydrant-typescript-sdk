/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CalendarsEventEntity,
  CalendarsEventEntity$inboundSchema,
  CalendarsEventEntity$Outbound,
  CalendarsEventEntity$outboundSchema,
} from "./calendarsevententity.js";
import {
  IncidentEntity,
  IncidentEntity$inboundSchema,
  IncidentEntity$Outbound,
  IncidentEntity$outboundSchema,
} from "./incidententity.js";
import {
  PostMortemsQuestionEntity,
  PostMortemsQuestionEntity$inboundSchema,
  PostMortemsQuestionEntity$Outbound,
  PostMortemsQuestionEntity$outboundSchema,
} from "./postmortemsquestionentity.js";

/**
 * PostMortems_PostMortemReportEntity model
 */
export type PostMortemsPostMortemReportEntity = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  incidentId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  tagList?: Array<string> | undefined;
  additionalDetails?: Array<string> | undefined;
  /**
   * IncidentEntity model
   */
  incident?: IncidentEntity | undefined;
  questions?: PostMortemsQuestionEntity | undefined;
  calendarEvents?: CalendarsEventEntity | undefined;
};

/** @internal */
export const PostMortemsPostMortemReportEntity$inboundSchema: z.ZodType<
  PostMortemsPostMortemReportEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  incident_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tag_list: z.array(z.string()).optional(),
  additional_details: z.array(z.string()).optional(),
  incident: IncidentEntity$inboundSchema.optional(),
  questions: PostMortemsQuestionEntity$inboundSchema.optional(),
  calendar_events: CalendarsEventEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "tag_list": "tagList",
    "additional_details": "additionalDetails",
    "calendar_events": "calendarEvents",
  });
});

/** @internal */
export type PostMortemsPostMortemReportEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  incident_id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  tag_list?: Array<string> | undefined;
  additional_details?: Array<string> | undefined;
  incident?: IncidentEntity$Outbound | undefined;
  questions?: PostMortemsQuestionEntity$Outbound | undefined;
  calendar_events?: CalendarsEventEntity$Outbound | undefined;
};

/** @internal */
export const PostMortemsPostMortemReportEntity$outboundSchema: z.ZodType<
  PostMortemsPostMortemReportEntity$Outbound,
  z.ZodTypeDef,
  PostMortemsPostMortemReportEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  incidentId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tagList: z.array(z.string()).optional(),
  additionalDetails: z.array(z.string()).optional(),
  incident: IncidentEntity$outboundSchema.optional(),
  questions: PostMortemsQuestionEntity$outboundSchema.optional(),
  calendarEvents: CalendarsEventEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    tagList: "tag_list",
    additionalDetails: "additional_details",
    calendarEvents: "calendar_events",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMortemsPostMortemReportEntity$ {
  /** @deprecated use `PostMortemsPostMortemReportEntity$inboundSchema` instead. */
  export const inboundSchema = PostMortemsPostMortemReportEntity$inboundSchema;
  /** @deprecated use `PostMortemsPostMortemReportEntity$outboundSchema` instead. */
  export const outboundSchema =
    PostMortemsPostMortemReportEntity$outboundSchema;
  /** @deprecated use `PostMortemsPostMortemReportEntity$Outbound` instead. */
  export type Outbound = PostMortemsPostMortemReportEntity$Outbound;
}

export function postMortemsPostMortemReportEntityToJSON(
  postMortemsPostMortemReportEntity: PostMortemsPostMortemReportEntity,
): string {
  return JSON.stringify(
    PostMortemsPostMortemReportEntity$outboundSchema.parse(
      postMortemsPostMortemReportEntity,
    ),
  );
}

export function postMortemsPostMortemReportEntityFromJSON(
  jsonString: string,
): SafeParseResult<PostMortemsPostMortemReportEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostMortemsPostMortemReportEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMortemsPostMortemReportEntity' from JSON`,
  );
}
