/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SuccinctEntity,
  SuccinctEntity$inboundSchema,
  SuccinctEntity$Outbound,
  SuccinctEntity$outboundSchema,
} from "./succinctentity.js";

/**
 * IncidentImpactEntity model
 */
export type IncidentImpactEntity = {
  id?: string | undefined;
  type?: string | undefined;
  infrastructure?: SuccinctEntity | undefined;
};

/** @internal */
export const IncidentImpactEntity$inboundSchema: z.ZodType<
  IncidentImpactEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  infrastructure: SuccinctEntity$inboundSchema.optional(),
});

/** @internal */
export type IncidentImpactEntity$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  infrastructure?: SuccinctEntity$Outbound | undefined;
};

/** @internal */
export const IncidentImpactEntity$outboundSchema: z.ZodType<
  IncidentImpactEntity$Outbound,
  z.ZodTypeDef,
  IncidentImpactEntity
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  infrastructure: SuccinctEntity$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentImpactEntity$ {
  /** @deprecated use `IncidentImpactEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentImpactEntity$inboundSchema;
  /** @deprecated use `IncidentImpactEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentImpactEntity$outboundSchema;
  /** @deprecated use `IncidentImpactEntity$Outbound` instead. */
  export type Outbound = IncidentImpactEntity$Outbound;
}

export function incidentImpactEntityToJSON(
  incidentImpactEntity: IncidentImpactEntity,
): string {
  return JSON.stringify(
    IncidentImpactEntity$outboundSchema.parse(incidentImpactEntity),
  );
}

export function incidentImpactEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentImpactEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentImpactEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentImpactEntity' from JSON`,
  );
}
