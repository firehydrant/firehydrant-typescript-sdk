/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1SeverityMatrixData = {
  /**
   * Slug of a severity
   */
  severity: string;
  /**
   * Impact id
   */
  impactId: string;
  /**
   * Condition id
   */
  conditionId: string;
};

/**
 * Update available severities and impacts in your organization's severity matrix.
 */
export type PatchV1SeverityMatrix = {
  summary?: string | undefined;
  data: Array<PatchV1SeverityMatrixData>;
};

/** @internal */
export const PatchV1SeverityMatrixData$inboundSchema: z.ZodType<
  PatchV1SeverityMatrixData,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity: z.string(),
  impact_id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "impact_id": "impactId",
    "condition_id": "conditionId",
  });
});

/** @internal */
export type PatchV1SeverityMatrixData$Outbound = {
  severity: string;
  impact_id: string;
  condition_id: string;
};

/** @internal */
export const PatchV1SeverityMatrixData$outboundSchema: z.ZodType<
  PatchV1SeverityMatrixData$Outbound,
  z.ZodTypeDef,
  PatchV1SeverityMatrixData
> = z.object({
  severity: z.string(),
  impactId: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    impactId: "impact_id",
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1SeverityMatrixData$ {
  /** @deprecated use `PatchV1SeverityMatrixData$inboundSchema` instead. */
  export const inboundSchema = PatchV1SeverityMatrixData$inboundSchema;
  /** @deprecated use `PatchV1SeverityMatrixData$outboundSchema` instead. */
  export const outboundSchema = PatchV1SeverityMatrixData$outboundSchema;
  /** @deprecated use `PatchV1SeverityMatrixData$Outbound` instead. */
  export type Outbound = PatchV1SeverityMatrixData$Outbound;
}

export function patchV1SeverityMatrixDataToJSON(
  patchV1SeverityMatrixData: PatchV1SeverityMatrixData,
): string {
  return JSON.stringify(
    PatchV1SeverityMatrixData$outboundSchema.parse(patchV1SeverityMatrixData),
  );
}

export function patchV1SeverityMatrixDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1SeverityMatrixData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1SeverityMatrixData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1SeverityMatrixData' from JSON`,
  );
}

/** @internal */
export const PatchV1SeverityMatrix$inboundSchema: z.ZodType<
  PatchV1SeverityMatrix,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string().optional(),
  data: z.array(z.lazy(() => PatchV1SeverityMatrixData$inboundSchema)),
});

/** @internal */
export type PatchV1SeverityMatrix$Outbound = {
  summary?: string | undefined;
  data: Array<PatchV1SeverityMatrixData$Outbound>;
};

/** @internal */
export const PatchV1SeverityMatrix$outboundSchema: z.ZodType<
  PatchV1SeverityMatrix$Outbound,
  z.ZodTypeDef,
  PatchV1SeverityMatrix
> = z.object({
  summary: z.string().optional(),
  data: z.array(z.lazy(() => PatchV1SeverityMatrixData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1SeverityMatrix$ {
  /** @deprecated use `PatchV1SeverityMatrix$inboundSchema` instead. */
  export const inboundSchema = PatchV1SeverityMatrix$inboundSchema;
  /** @deprecated use `PatchV1SeverityMatrix$outboundSchema` instead. */
  export const outboundSchema = PatchV1SeverityMatrix$outboundSchema;
  /** @deprecated use `PatchV1SeverityMatrix$Outbound` instead. */
  export type Outbound = PatchV1SeverityMatrix$Outbound;
}

export function patchV1SeverityMatrixToJSON(
  patchV1SeverityMatrix: PatchV1SeverityMatrix,
): string {
  return JSON.stringify(
    PatchV1SeverityMatrix$outboundSchema.parse(patchV1SeverityMatrix),
  );
}

export function patchV1SeverityMatrixFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1SeverityMatrix, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1SeverityMatrix$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1SeverityMatrix' from JSON`,
  );
}
