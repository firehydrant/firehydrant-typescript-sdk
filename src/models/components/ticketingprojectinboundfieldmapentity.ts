/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TicketType = {
  Incident: "incident",
  Task: "task",
  FollowUp: "follow_up",
} as const;
export type TicketType = ClosedEnum<typeof TicketType>;

/**
 * Ticketing_ProjectInboundFieldMapEntity model
 */
export type TicketingProjectInboundFieldMapEntity = {
  id?: string | null | undefined;
  connectionId?: string | null | undefined;
  connectionType?: string | null | undefined;
  ticketingProjectId?: string | null | undefined;
  externalFieldName?: string | null | undefined;
  internalFieldName?: string | null | undefined;
  ticketType?: TicketType | null | undefined;
};

/** @internal */
export const TicketType$inboundSchema: z.ZodNativeEnum<typeof TicketType> = z
  .nativeEnum(TicketType);

/** @internal */
export const TicketType$outboundSchema: z.ZodNativeEnum<typeof TicketType> =
  TicketType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketType$ {
  /** @deprecated use `TicketType$inboundSchema` instead. */
  export const inboundSchema = TicketType$inboundSchema;
  /** @deprecated use `TicketType$outboundSchema` instead. */
  export const outboundSchema = TicketType$outboundSchema;
}

/** @internal */
export const TicketingProjectInboundFieldMapEntity$inboundSchema: z.ZodType<
  TicketingProjectInboundFieldMapEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  connection_type: z.nullable(z.string()).optional(),
  ticketing_project_id: z.nullable(z.string()).optional(),
  external_field_name: z.nullable(z.string()).optional(),
  internal_field_name: z.nullable(z.string()).optional(),
  ticket_type: z.nullable(TicketType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "connection_type": "connectionType",
    "ticketing_project_id": "ticketingProjectId",
    "external_field_name": "externalFieldName",
    "internal_field_name": "internalFieldName",
    "ticket_type": "ticketType",
  });
});

/** @internal */
export type TicketingProjectInboundFieldMapEntity$Outbound = {
  id?: string | null | undefined;
  connection_id?: string | null | undefined;
  connection_type?: string | null | undefined;
  ticketing_project_id?: string | null | undefined;
  external_field_name?: string | null | undefined;
  internal_field_name?: string | null | undefined;
  ticket_type?: string | null | undefined;
};

/** @internal */
export const TicketingProjectInboundFieldMapEntity$outboundSchema: z.ZodType<
  TicketingProjectInboundFieldMapEntity$Outbound,
  z.ZodTypeDef,
  TicketingProjectInboundFieldMapEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  connectionType: z.nullable(z.string()).optional(),
  ticketingProjectId: z.nullable(z.string()).optional(),
  externalFieldName: z.nullable(z.string()).optional(),
  internalFieldName: z.nullable(z.string()).optional(),
  ticketType: z.nullable(TicketType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    connectionType: "connection_type",
    ticketingProjectId: "ticketing_project_id",
    externalFieldName: "external_field_name",
    internalFieldName: "internal_field_name",
    ticketType: "ticket_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingProjectInboundFieldMapEntity$ {
  /** @deprecated use `TicketingProjectInboundFieldMapEntity$inboundSchema` instead. */
  export const inboundSchema =
    TicketingProjectInboundFieldMapEntity$inboundSchema;
  /** @deprecated use `TicketingProjectInboundFieldMapEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingProjectInboundFieldMapEntity$outboundSchema;
  /** @deprecated use `TicketingProjectInboundFieldMapEntity$Outbound` instead. */
  export type Outbound = TicketingProjectInboundFieldMapEntity$Outbound;
}

export function ticketingProjectInboundFieldMapEntityToJSON(
  ticketingProjectInboundFieldMapEntity: TicketingProjectInboundFieldMapEntity,
): string {
  return JSON.stringify(
    TicketingProjectInboundFieldMapEntity$outboundSchema.parse(
      ticketingProjectInboundFieldMapEntity,
    ),
  );
}

export function ticketingProjectInboundFieldMapEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingProjectInboundFieldMapEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingProjectInboundFieldMapEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingProjectInboundFieldMapEntity' from JSON`,
  );
}
