/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Convert a task to a follow-up
 */
export type ConvertIncidentTask = {
  summary?: string | null | undefined;
  projectId?: string | null | undefined;
  description?: string | null | undefined;
  state?: string | null | undefined;
  /**
   * List of tags for the ticket
   */
  tagList?: Array<string> | null | undefined;
};

/** @internal */
export const ConvertIncidentTask$inboundSchema: z.ZodType<
  ConvertIncidentTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  project_id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  tag_list: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "tag_list": "tagList",
  });
});

/** @internal */
export type ConvertIncidentTask$Outbound = {
  summary?: string | null | undefined;
  project_id?: string | null | undefined;
  description?: string | null | undefined;
  state?: string | null | undefined;
  tag_list?: Array<string> | null | undefined;
};

/** @internal */
export const ConvertIncidentTask$outboundSchema: z.ZodType<
  ConvertIncidentTask$Outbound,
  z.ZodTypeDef,
  ConvertIncidentTask
> = z.object({
  summary: z.nullable(z.string()).optional(),
  projectId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  tagList: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    tagList: "tag_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConvertIncidentTask$ {
  /** @deprecated use `ConvertIncidentTask$inboundSchema` instead. */
  export const inboundSchema = ConvertIncidentTask$inboundSchema;
  /** @deprecated use `ConvertIncidentTask$outboundSchema` instead. */
  export const outboundSchema = ConvertIncidentTask$outboundSchema;
  /** @deprecated use `ConvertIncidentTask$Outbound` instead. */
  export type Outbound = ConvertIncidentTask$Outbound;
}

export function convertIncidentTaskToJSON(
  convertIncidentTask: ConvertIncidentTask,
): string {
  return JSON.stringify(
    ConvertIncidentTask$outboundSchema.parse(convertIncidentTask),
  );
}

export function convertIncidentTaskFromJSON(
  jsonString: string,
): SafeParseResult<ConvertIncidentTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConvertIncidentTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConvertIncidentTask' from JSON`,
  );
}
