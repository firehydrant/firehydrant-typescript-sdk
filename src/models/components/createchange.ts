/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a new change entry
 */
export type CreateChange = {
  summary?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * A labels hash of keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const CreateChange$inboundSchema: z.ZodType<
  CreateChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type CreateChange$Outbound = {
  summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const CreateChange$outboundSchema: z.ZodType<
  CreateChange$Outbound,
  z.ZodTypeDef,
  CreateChange
> = z.object({
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChange$ {
  /** @deprecated use `CreateChange$inboundSchema` instead. */
  export const inboundSchema = CreateChange$inboundSchema;
  /** @deprecated use `CreateChange$outboundSchema` instead. */
  export const outboundSchema = CreateChange$outboundSchema;
  /** @deprecated use `CreateChange$Outbound` instead. */
  export type Outbound = CreateChange$Outbound;
}

export function createChangeToJSON(createChange: CreateChange): string {
  return JSON.stringify(CreateChange$outboundSchema.parse(createChange));
}

export function createChangeFromJSON(
  jsonString: string,
): SafeParseResult<CreateChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateChange' from JSON`,
  );
}
