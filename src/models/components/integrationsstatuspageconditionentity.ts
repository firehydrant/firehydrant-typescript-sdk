/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const StatuspageioCondition = {
  Operational: "operational",
  MajorOutage: "major_outage",
  MinorOutage: "minor_outage",
  DegradedPerformance: "degraded_performance",
} as const;
export type StatuspageioCondition = ClosedEnum<typeof StatuspageioCondition>;

export type IntegrationsStatuspageConditionEntity = {
  conditionId?: string | null | undefined;
  conditionName?: string | null | undefined;
  statuspageioCondition?: StatuspageioCondition | null | undefined;
};

/** @internal */
export const StatuspageioCondition$inboundSchema: z.ZodNativeEnum<
  typeof StatuspageioCondition
> = z.nativeEnum(StatuspageioCondition);

/** @internal */
export const StatuspageioCondition$outboundSchema: z.ZodNativeEnum<
  typeof StatuspageioCondition
> = StatuspageioCondition$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatuspageioCondition$ {
  /** @deprecated use `StatuspageioCondition$inboundSchema` instead. */
  export const inboundSchema = StatuspageioCondition$inboundSchema;
  /** @deprecated use `StatuspageioCondition$outboundSchema` instead. */
  export const outboundSchema = StatuspageioCondition$outboundSchema;
}

/** @internal */
export const IntegrationsStatuspageConditionEntity$inboundSchema: z.ZodType<
  IntegrationsStatuspageConditionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition_id: z.nullable(z.string()).optional(),
  condition_name: z.nullable(z.string()).optional(),
  statuspageio_condition: z.nullable(StatuspageioCondition$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
    "condition_name": "conditionName",
    "statuspageio_condition": "statuspageioCondition",
  });
});

/** @internal */
export type IntegrationsStatuspageConditionEntity$Outbound = {
  condition_id?: string | null | undefined;
  condition_name?: string | null | undefined;
  statuspageio_condition?: string | null | undefined;
};

/** @internal */
export const IntegrationsStatuspageConditionEntity$outboundSchema: z.ZodType<
  IntegrationsStatuspageConditionEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsStatuspageConditionEntity
> = z.object({
  conditionId: z.nullable(z.string()).optional(),
  conditionName: z.nullable(z.string()).optional(),
  statuspageioCondition: z.nullable(StatuspageioCondition$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
    conditionName: "condition_name",
    statuspageioCondition: "statuspageio_condition",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsStatuspageConditionEntity$ {
  /** @deprecated use `IntegrationsStatuspageConditionEntity$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsStatuspageConditionEntity$inboundSchema;
  /** @deprecated use `IntegrationsStatuspageConditionEntity$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsStatuspageConditionEntity$outboundSchema;
  /** @deprecated use `IntegrationsStatuspageConditionEntity$Outbound` instead. */
  export type Outbound = IntegrationsStatuspageConditionEntity$Outbound;
}

export function integrationsStatuspageConditionEntityToJSON(
  integrationsStatuspageConditionEntity: IntegrationsStatuspageConditionEntity,
): string {
  return JSON.stringify(
    IntegrationsStatuspageConditionEntity$outboundSchema.parse(
      integrationsStatuspageConditionEntity,
    ),
  );
}

export function integrationsStatuspageConditionEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsStatuspageConditionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsStatuspageConditionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsStatuspageConditionEntity' from JSON`,
  );
}
