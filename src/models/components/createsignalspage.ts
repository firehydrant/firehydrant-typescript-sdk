/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateSignalsPageTargetType = {
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  Team: "Team",
  User: "User",
} as const;
export type CreateSignalsPageTargetType = ClosedEnum<
  typeof CreateSignalsPageTargetType
>;

/**
 * Used for paging an on-call target within FireHydrant's signals product. This can be used for paging users, teams, on-call schedules, and escalation policies.
 */
export type CreateSignalsPage = {
  summary: string;
  targetType: CreateSignalsPageTargetType;
  /**
   * The ID of the target. Should be a UUID for the target type.
   */
  targetId: string;
  body?: string | null | undefined;
};

/** @internal */
export const CreateSignalsPageTargetType$inboundSchema: z.ZodNativeEnum<
  typeof CreateSignalsPageTargetType
> = z.nativeEnum(CreateSignalsPageTargetType);

/** @internal */
export const CreateSignalsPageTargetType$outboundSchema: z.ZodNativeEnum<
  typeof CreateSignalsPageTargetType
> = CreateSignalsPageTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsPageTargetType$ {
  /** @deprecated use `CreateSignalsPageTargetType$inboundSchema` instead. */
  export const inboundSchema = CreateSignalsPageTargetType$inboundSchema;
  /** @deprecated use `CreateSignalsPageTargetType$outboundSchema` instead. */
  export const outboundSchema = CreateSignalsPageTargetType$outboundSchema;
}

/** @internal */
export const CreateSignalsPage$inboundSchema: z.ZodType<
  CreateSignalsPage,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  target_type: CreateSignalsPageTargetType$inboundSchema,
  target_id: z.string(),
  body: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type CreateSignalsPage$Outbound = {
  summary: string;
  target_type: string;
  target_id: string;
  body?: string | null | undefined;
};

/** @internal */
export const CreateSignalsPage$outboundSchema: z.ZodType<
  CreateSignalsPage$Outbound,
  z.ZodTypeDef,
  CreateSignalsPage
> = z.object({
  summary: z.string(),
  targetType: CreateSignalsPageTargetType$outboundSchema,
  targetId: z.string(),
  body: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsPage$ {
  /** @deprecated use `CreateSignalsPage$inboundSchema` instead. */
  export const inboundSchema = CreateSignalsPage$inboundSchema;
  /** @deprecated use `CreateSignalsPage$outboundSchema` instead. */
  export const outboundSchema = CreateSignalsPage$outboundSchema;
  /** @deprecated use `CreateSignalsPage$Outbound` instead. */
  export type Outbound = CreateSignalsPage$Outbound;
}

export function createSignalsPageToJSON(
  createSignalsPage: CreateSignalsPage,
): string {
  return JSON.stringify(
    CreateSignalsPage$outboundSchema.parse(createSignalsPage),
  );
}

export function createSignalsPageFromJSON(
  jsonString: string,
): SafeParseResult<CreateSignalsPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSignalsPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSignalsPage' from JSON`,
  );
}
