/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  ConversationsAPIEntitiesReference,
  ConversationsAPIEntitiesReference$inboundSchema,
  ConversationsAPIEntitiesReference$Outbound,
  ConversationsAPIEntitiesReference$outboundSchema,
} from "./conversationsapientitiesreference.js";
import {
  CustomFieldsFieldValue,
  CustomFieldsFieldValue$inboundSchema,
  CustomFieldsFieldValue$Outbound,
  CustomFieldsFieldValue$outboundSchema,
} from "./customfieldsfieldvalue.js";
import {
  EventNoteEntity,
  EventNoteEntity$inboundSchema,
  EventNoteEntity$Outbound,
  EventNoteEntity$outboundSchema,
} from "./eventnoteentity.js";
import {
  IncidentEntityFieldRequirementEntity,
  IncidentEntityFieldRequirementEntity$inboundSchema,
  IncidentEntityFieldRequirementEntity$Outbound,
  IncidentEntityFieldRequirementEntity$outboundSchema,
} from "./incidententityfieldrequiremententity.js";
import {
  IncidentsChannelEntity,
  IncidentsChannelEntity$inboundSchema,
  IncidentsChannelEntity$Outbound,
  IncidentsChannelEntity$outboundSchema,
} from "./incidentschannelentity.js";
import {
  IncidentsConferenceBridgeEntity,
  IncidentsConferenceBridgeEntity$inboundSchema,
  IncidentsConferenceBridgeEntity$Outbound,
  IncidentsConferenceBridgeEntity$outboundSchema,
} from "./incidentsconferencebridgeentity.js";
import {
  IncidentsContextObjectEntity,
  IncidentsContextObjectEntity$inboundSchema,
  IncidentsContextObjectEntity$Outbound,
  IncidentsContextObjectEntity$outboundSchema,
} from "./incidentscontextobjectentity.js";
import {
  IncidentsImpactEntity,
  IncidentsImpactEntity$inboundSchema,
  IncidentsImpactEntity$Outbound,
  IncidentsImpactEntity$outboundSchema,
} from "./incidentsimpactentity.js";
import {
  IncidentsLifecycleMeasurementEntity,
  IncidentsLifecycleMeasurementEntity$inboundSchema,
  IncidentsLifecycleMeasurementEntity$Outbound,
  IncidentsLifecycleMeasurementEntity$outboundSchema,
} from "./incidentslifecyclemeasuremententity.js";
import {
  IncidentsLifecyclePhaseEntity,
  IncidentsLifecyclePhaseEntity$inboundSchema,
  IncidentsLifecyclePhaseEntity$Outbound,
  IncidentsLifecyclePhaseEntity$outboundSchema,
} from "./incidentslifecyclephaseentity.js";
import {
  IncidentsMilestoneEntity,
  IncidentsMilestoneEntity$inboundSchema,
  IncidentsMilestoneEntity$Outbound,
  IncidentsMilestoneEntity$outboundSchema,
} from "./incidentsmilestoneentity.js";
import {
  IncidentsRoleAssignmentEntity,
  IncidentsRoleAssignmentEntity$inboundSchema,
  IncidentsRoleAssignmentEntity$Outbound,
  IncidentsRoleAssignmentEntity$outboundSchema,
} from "./incidentsroleassignmententity.js";
import {
  IncidentsStatusPageEntity,
  IncidentsStatusPageEntity$inboundSchema,
  IncidentsStatusPageEntity$Outbound,
  IncidentsStatusPageEntity$outboundSchema,
} from "./incidentsstatuspageentity.js";
import {
  IncidentsTeamAssignmentEntityLite,
  IncidentsTeamAssignmentEntityLite$inboundSchema,
  IncidentsTeamAssignmentEntityLite$Outbound,
  IncidentsTeamAssignmentEntityLite$outboundSchema,
} from "./incidentsteamassignmententitylite.js";
import {
  OrganizationEntity,
  OrganizationEntity$inboundSchema,
  OrganizationEntity$Outbound,
  OrganizationEntity$outboundSchema,
} from "./organizationentity.js";
import {
  SeverityMatrixConditionEntity,
  SeverityMatrixConditionEntity$inboundSchema,
  SeverityMatrixConditionEntity$Outbound,
  SeverityMatrixConditionEntity$outboundSchema,
} from "./severitymatrixconditionentity.js";
import {
  SeverityMatrixImpactEntity,
  SeverityMatrixImpactEntity$inboundSchema,
  SeverityMatrixImpactEntity$Outbound,
  SeverityMatrixImpactEntity$outboundSchema,
} from "./severitymatriximpactentity.js";
import {
  SuccinctEntity,
  SuccinctEntity$inboundSchema,
  SuccinctEntity$Outbound,
  SuccinctEntity$outboundSchema,
} from "./succinctentity.js";
import {
  TicketingTicketEntity,
  TicketingTicketEntity$inboundSchema,
  TicketingTicketEntity$Outbound,
  TicketingTicketEntity$outboundSchema,
} from "./ticketingticketentity.js";

/**
 * A key/value of labels
 */
export type IncidentEntityLabels = {};

export type RetroExports = {};

/**
 * IncidentEntity model
 */
export type IncidentEntity = {
  /**
   * UUID of the Incident
   */
  id?: string | undefined;
  /**
   * Name of the incident
   */
  name?: string | undefined;
  /**
   * The time the incident was opened
   */
  createdAt?: Date | undefined;
  /**
   * The time the incident started
   */
  startedAt?: Date | undefined;
  /**
   * The time the incident was archived
   */
  discardedAt?: Date | undefined;
  summary?: string | undefined;
  customerImpactSummary?: string | undefined;
  description?: string | undefined;
  /**
   * The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.
   */
  currentMilestone?: string | undefined;
  /**
   * Incident number
   */
  number?: number | undefined;
  priority?: string | undefined;
  severity?: string | undefined;
  severityColor?: string | undefined;
  severityImpact?: string | undefined;
  severityCondition?: string | undefined;
  tagList?: Array<string> | undefined;
  /**
   * SeverityMatrix_ImpactEntity model
   */
  severityImpactObject?: SeverityMatrixImpactEntity | undefined;
  /**
   * SeverityMatrix_ConditionEntity model
   */
  severityConditionObject?: SeverityMatrixConditionEntity | undefined;
  privateId?: string | undefined;
  organizationId?: string | undefined;
  /**
   * DEPRECATED: Please use lifecycle phases instead
   */
  milestones?: Array<IncidentsMilestoneEntity> | undefined;
  lifecyclePhases?: Array<IncidentsLifecyclePhaseEntity> | undefined;
  lifecycleMeasurements?:
    | Array<IncidentsLifecycleMeasurementEntity>
    | undefined;
  active?: boolean | undefined;
  /**
   * A key/value of labels
   */
  labels?: IncidentEntityLabels | undefined;
  roleAssignments?: Array<IncidentsRoleAssignmentEntity> | undefined;
  statusPages?: Array<IncidentsStatusPageEntity> | undefined;
  incidentUrl?: string | undefined;
  privateStatusPageUrl?: string | undefined;
  organization?: OrganizationEntity | undefined;
  customersImpacted?: number | undefined;
  monetaryImpact?: number | undefined;
  monetaryImpactCents?: number | undefined;
  lastUpdate?: string | undefined;
  /**
   * Event_NoteEntity model
   */
  lastNote?: EventNoteEntity | undefined;
  reportId?: string | undefined;
  aiIncidentSummary?: string | undefined;
  services?: Array<SuccinctEntity> | undefined;
  environments?: Array<SuccinctEntity> | undefined;
  functionalities?: Array<SuccinctEntity> | undefined;
  channelName?: string | undefined;
  channelReference?: string | undefined;
  channelId?: string | undefined;
  /**
   * inoperative: 0, operational: 1, archived: 2
   */
  channelStatus?: string | undefined;
  incidentTickets?: Array<TicketingTicketEntity> | undefined;
  /**
   * Ticketing_TicketEntity model
   */
  ticket?: TicketingTicketEntity | undefined;
  impacts?: Array<IncidentsImpactEntity> | undefined;
  conferenceBridges?: Array<IncidentsConferenceBridgeEntity> | undefined;
  incidentChannels?: Array<IncidentsChannelEntity> | undefined;
  /**
   * A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
   */
  retroExports?: Array<RetroExports> | undefined;
  createdBy?: AuthorEntity | undefined;
  contextObject?: IncidentsContextObjectEntity | undefined;
  teamAssignments?: Array<IncidentsTeamAssignmentEntityLite> | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference> | undefined;
  customFields?: Array<CustomFieldsFieldValue> | undefined;
  fieldRequirements?: Array<IncidentEntityFieldRequirementEntity> | undefined;
};

/** @internal */
export const IncidentEntityLabels$inboundSchema: z.ZodType<
  IncidentEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IncidentEntityLabels$Outbound = {};

/** @internal */
export const IncidentEntityLabels$outboundSchema: z.ZodType<
  IncidentEntityLabels$Outbound,
  z.ZodTypeDef,
  IncidentEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentEntityLabels$ {
  /** @deprecated use `IncidentEntityLabels$inboundSchema` instead. */
  export const inboundSchema = IncidentEntityLabels$inboundSchema;
  /** @deprecated use `IncidentEntityLabels$outboundSchema` instead. */
  export const outboundSchema = IncidentEntityLabels$outboundSchema;
  /** @deprecated use `IncidentEntityLabels$Outbound` instead. */
  export type Outbound = IncidentEntityLabels$Outbound;
}

export function incidentEntityLabelsToJSON(
  incidentEntityLabels: IncidentEntityLabels,
): string {
  return JSON.stringify(
    IncidentEntityLabels$outboundSchema.parse(incidentEntityLabels),
  );
}

export function incidentEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<IncidentEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentEntityLabels' from JSON`,
  );
}

/** @internal */
export const RetroExports$inboundSchema: z.ZodType<
  RetroExports,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RetroExports$Outbound = {};

/** @internal */
export const RetroExports$outboundSchema: z.ZodType<
  RetroExports$Outbound,
  z.ZodTypeDef,
  RetroExports
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetroExports$ {
  /** @deprecated use `RetroExports$inboundSchema` instead. */
  export const inboundSchema = RetroExports$inboundSchema;
  /** @deprecated use `RetroExports$outboundSchema` instead. */
  export const outboundSchema = RetroExports$outboundSchema;
  /** @deprecated use `RetroExports$Outbound` instead. */
  export type Outbound = RetroExports$Outbound;
}

export function retroExportsToJSON(retroExports: RetroExports): string {
  return JSON.stringify(RetroExports$outboundSchema.parse(retroExports));
}

export function retroExportsFromJSON(
  jsonString: string,
): SafeParseResult<RetroExports, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetroExports$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetroExports' from JSON`,
  );
}

/** @internal */
export const IncidentEntity$inboundSchema: z.ZodType<
  IncidentEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  discarded_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  summary: z.string().optional(),
  customer_impact_summary: z.string().optional(),
  description: z.string().optional(),
  current_milestone: z.string().optional(),
  number: z.number().int().optional(),
  priority: z.string().optional(),
  severity: z.string().optional(),
  severity_color: z.string().optional(),
  severity_impact: z.string().optional(),
  severity_condition: z.string().optional(),
  tag_list: z.array(z.string()).optional(),
  severity_impact_object: SeverityMatrixImpactEntity$inboundSchema.optional(),
  severity_condition_object: SeverityMatrixConditionEntity$inboundSchema
    .optional(),
  private_id: z.string().optional(),
  organization_id: z.string().optional(),
  milestones: z.array(IncidentsMilestoneEntity$inboundSchema).optional(),
  lifecycle_phases: z.array(IncidentsLifecyclePhaseEntity$inboundSchema)
    .optional(),
  lifecycle_measurements: z.array(
    IncidentsLifecycleMeasurementEntity$inboundSchema,
  ).optional(),
  active: z.boolean().optional(),
  labels: z.lazy(() => IncidentEntityLabels$inboundSchema).optional(),
  role_assignments: z.array(IncidentsRoleAssignmentEntity$inboundSchema)
    .optional(),
  status_pages: z.array(IncidentsStatusPageEntity$inboundSchema).optional(),
  incident_url: z.string().optional(),
  private_status_page_url: z.string().optional(),
  organization: OrganizationEntity$inboundSchema.optional(),
  customers_impacted: z.number().int().optional(),
  monetary_impact: z.number().int().optional(),
  monetary_impact_cents: z.number().int().optional(),
  last_update: z.string().optional(),
  last_note: EventNoteEntity$inboundSchema.optional(),
  report_id: z.string().optional(),
  ai_incident_summary: z.string().optional(),
  services: z.array(SuccinctEntity$inboundSchema).optional(),
  environments: z.array(SuccinctEntity$inboundSchema).optional(),
  functionalities: z.array(SuccinctEntity$inboundSchema).optional(),
  channel_name: z.string().optional(),
  channel_reference: z.string().optional(),
  channel_id: z.string().optional(),
  channel_status: z.string().optional(),
  incident_tickets: z.array(TicketingTicketEntity$inboundSchema).optional(),
  ticket: TicketingTicketEntity$inboundSchema.optional(),
  impacts: z.array(IncidentsImpactEntity$inboundSchema).optional(),
  conference_bridges: z.array(IncidentsConferenceBridgeEntity$inboundSchema)
    .optional(),
  incident_channels: z.array(IncidentsChannelEntity$inboundSchema).optional(),
  retro_exports: z.array(z.lazy(() => RetroExports$inboundSchema)).optional(),
  created_by: AuthorEntity$inboundSchema.optional(),
  context_object: IncidentsContextObjectEntity$inboundSchema.optional(),
  team_assignments: z.array(IncidentsTeamAssignmentEntityLite$inboundSchema)
    .optional(),
  conversations: z.array(ConversationsAPIEntitiesReference$inboundSchema)
    .optional(),
  custom_fields: z.array(CustomFieldsFieldValue$inboundSchema).optional(),
  field_requirements: z.array(
    IncidentEntityFieldRequirementEntity$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "started_at": "startedAt",
    "discarded_at": "discardedAt",
    "customer_impact_summary": "customerImpactSummary",
    "current_milestone": "currentMilestone",
    "severity_color": "severityColor",
    "severity_impact": "severityImpact",
    "severity_condition": "severityCondition",
    "tag_list": "tagList",
    "severity_impact_object": "severityImpactObject",
    "severity_condition_object": "severityConditionObject",
    "private_id": "privateId",
    "organization_id": "organizationId",
    "lifecycle_phases": "lifecyclePhases",
    "lifecycle_measurements": "lifecycleMeasurements",
    "role_assignments": "roleAssignments",
    "status_pages": "statusPages",
    "incident_url": "incidentUrl",
    "private_status_page_url": "privateStatusPageUrl",
    "customers_impacted": "customersImpacted",
    "monetary_impact": "monetaryImpact",
    "monetary_impact_cents": "monetaryImpactCents",
    "last_update": "lastUpdate",
    "last_note": "lastNote",
    "report_id": "reportId",
    "ai_incident_summary": "aiIncidentSummary",
    "channel_name": "channelName",
    "channel_reference": "channelReference",
    "channel_id": "channelId",
    "channel_status": "channelStatus",
    "incident_tickets": "incidentTickets",
    "conference_bridges": "conferenceBridges",
    "incident_channels": "incidentChannels",
    "retro_exports": "retroExports",
    "created_by": "createdBy",
    "context_object": "contextObject",
    "team_assignments": "teamAssignments",
    "custom_fields": "customFields",
    "field_requirements": "fieldRequirements",
  });
});

/** @internal */
export type IncidentEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  created_at?: string | undefined;
  started_at?: string | undefined;
  discarded_at?: string | undefined;
  summary?: string | undefined;
  customer_impact_summary?: string | undefined;
  description?: string | undefined;
  current_milestone?: string | undefined;
  number?: number | undefined;
  priority?: string | undefined;
  severity?: string | undefined;
  severity_color?: string | undefined;
  severity_impact?: string | undefined;
  severity_condition?: string | undefined;
  tag_list?: Array<string> | undefined;
  severity_impact_object?: SeverityMatrixImpactEntity$Outbound | undefined;
  severity_condition_object?:
    | SeverityMatrixConditionEntity$Outbound
    | undefined;
  private_id?: string | undefined;
  organization_id?: string | undefined;
  milestones?: Array<IncidentsMilestoneEntity$Outbound> | undefined;
  lifecycle_phases?: Array<IncidentsLifecyclePhaseEntity$Outbound> | undefined;
  lifecycle_measurements?:
    | Array<IncidentsLifecycleMeasurementEntity$Outbound>
    | undefined;
  active?: boolean | undefined;
  labels?: IncidentEntityLabels$Outbound | undefined;
  role_assignments?: Array<IncidentsRoleAssignmentEntity$Outbound> | undefined;
  status_pages?: Array<IncidentsStatusPageEntity$Outbound> | undefined;
  incident_url?: string | undefined;
  private_status_page_url?: string | undefined;
  organization?: OrganizationEntity$Outbound | undefined;
  customers_impacted?: number | undefined;
  monetary_impact?: number | undefined;
  monetary_impact_cents?: number | undefined;
  last_update?: string | undefined;
  last_note?: EventNoteEntity$Outbound | undefined;
  report_id?: string | undefined;
  ai_incident_summary?: string | undefined;
  services?: Array<SuccinctEntity$Outbound> | undefined;
  environments?: Array<SuccinctEntity$Outbound> | undefined;
  functionalities?: Array<SuccinctEntity$Outbound> | undefined;
  channel_name?: string | undefined;
  channel_reference?: string | undefined;
  channel_id?: string | undefined;
  channel_status?: string | undefined;
  incident_tickets?: Array<TicketingTicketEntity$Outbound> | undefined;
  ticket?: TicketingTicketEntity$Outbound | undefined;
  impacts?: Array<IncidentsImpactEntity$Outbound> | undefined;
  conference_bridges?:
    | Array<IncidentsConferenceBridgeEntity$Outbound>
    | undefined;
  incident_channels?: Array<IncidentsChannelEntity$Outbound> | undefined;
  retro_exports?: Array<RetroExports$Outbound> | undefined;
  created_by?: AuthorEntity$Outbound | undefined;
  context_object?: IncidentsContextObjectEntity$Outbound | undefined;
  team_assignments?:
    | Array<IncidentsTeamAssignmentEntityLite$Outbound>
    | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference$Outbound> | undefined;
  custom_fields?: Array<CustomFieldsFieldValue$Outbound> | undefined;
  field_requirements?:
    | Array<IncidentEntityFieldRequirementEntity$Outbound>
    | undefined;
};

/** @internal */
export const IncidentEntity$outboundSchema: z.ZodType<
  IncidentEntity$Outbound,
  z.ZodTypeDef,
  IncidentEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  discardedAt: z.date().transform(v => v.toISOString()).optional(),
  summary: z.string().optional(),
  customerImpactSummary: z.string().optional(),
  description: z.string().optional(),
  currentMilestone: z.string().optional(),
  number: z.number().int().optional(),
  priority: z.string().optional(),
  severity: z.string().optional(),
  severityColor: z.string().optional(),
  severityImpact: z.string().optional(),
  severityCondition: z.string().optional(),
  tagList: z.array(z.string()).optional(),
  severityImpactObject: SeverityMatrixImpactEntity$outboundSchema.optional(),
  severityConditionObject: SeverityMatrixConditionEntity$outboundSchema
    .optional(),
  privateId: z.string().optional(),
  organizationId: z.string().optional(),
  milestones: z.array(IncidentsMilestoneEntity$outboundSchema).optional(),
  lifecyclePhases: z.array(IncidentsLifecyclePhaseEntity$outboundSchema)
    .optional(),
  lifecycleMeasurements: z.array(
    IncidentsLifecycleMeasurementEntity$outboundSchema,
  ).optional(),
  active: z.boolean().optional(),
  labels: z.lazy(() => IncidentEntityLabels$outboundSchema).optional(),
  roleAssignments: z.array(IncidentsRoleAssignmentEntity$outboundSchema)
    .optional(),
  statusPages: z.array(IncidentsStatusPageEntity$outboundSchema).optional(),
  incidentUrl: z.string().optional(),
  privateStatusPageUrl: z.string().optional(),
  organization: OrganizationEntity$outboundSchema.optional(),
  customersImpacted: z.number().int().optional(),
  monetaryImpact: z.number().int().optional(),
  monetaryImpactCents: z.number().int().optional(),
  lastUpdate: z.string().optional(),
  lastNote: EventNoteEntity$outboundSchema.optional(),
  reportId: z.string().optional(),
  aiIncidentSummary: z.string().optional(),
  services: z.array(SuccinctEntity$outboundSchema).optional(),
  environments: z.array(SuccinctEntity$outboundSchema).optional(),
  functionalities: z.array(SuccinctEntity$outboundSchema).optional(),
  channelName: z.string().optional(),
  channelReference: z.string().optional(),
  channelId: z.string().optional(),
  channelStatus: z.string().optional(),
  incidentTickets: z.array(TicketingTicketEntity$outboundSchema).optional(),
  ticket: TicketingTicketEntity$outboundSchema.optional(),
  impacts: z.array(IncidentsImpactEntity$outboundSchema).optional(),
  conferenceBridges: z.array(IncidentsConferenceBridgeEntity$outboundSchema)
    .optional(),
  incidentChannels: z.array(IncidentsChannelEntity$outboundSchema).optional(),
  retroExports: z.array(z.lazy(() => RetroExports$outboundSchema)).optional(),
  createdBy: AuthorEntity$outboundSchema.optional(),
  contextObject: IncidentsContextObjectEntity$outboundSchema.optional(),
  teamAssignments: z.array(IncidentsTeamAssignmentEntityLite$outboundSchema)
    .optional(),
  conversations: z.array(ConversationsAPIEntitiesReference$outboundSchema)
    .optional(),
  customFields: z.array(CustomFieldsFieldValue$outboundSchema).optional(),
  fieldRequirements: z.array(
    IncidentEntityFieldRequirementEntity$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    startedAt: "started_at",
    discardedAt: "discarded_at",
    customerImpactSummary: "customer_impact_summary",
    currentMilestone: "current_milestone",
    severityColor: "severity_color",
    severityImpact: "severity_impact",
    severityCondition: "severity_condition",
    tagList: "tag_list",
    severityImpactObject: "severity_impact_object",
    severityConditionObject: "severity_condition_object",
    privateId: "private_id",
    organizationId: "organization_id",
    lifecyclePhases: "lifecycle_phases",
    lifecycleMeasurements: "lifecycle_measurements",
    roleAssignments: "role_assignments",
    statusPages: "status_pages",
    incidentUrl: "incident_url",
    privateStatusPageUrl: "private_status_page_url",
    customersImpacted: "customers_impacted",
    monetaryImpact: "monetary_impact",
    monetaryImpactCents: "monetary_impact_cents",
    lastUpdate: "last_update",
    lastNote: "last_note",
    reportId: "report_id",
    aiIncidentSummary: "ai_incident_summary",
    channelName: "channel_name",
    channelReference: "channel_reference",
    channelId: "channel_id",
    channelStatus: "channel_status",
    incidentTickets: "incident_tickets",
    conferenceBridges: "conference_bridges",
    incidentChannels: "incident_channels",
    retroExports: "retro_exports",
    createdBy: "created_by",
    contextObject: "context_object",
    teamAssignments: "team_assignments",
    customFields: "custom_fields",
    fieldRequirements: "field_requirements",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentEntity$ {
  /** @deprecated use `IncidentEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentEntity$inboundSchema;
  /** @deprecated use `IncidentEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentEntity$outboundSchema;
  /** @deprecated use `IncidentEntity$Outbound` instead. */
  export type Outbound = IncidentEntity$Outbound;
}

export function incidentEntityToJSON(incidentEntity: IncidentEntity): string {
  return JSON.stringify(IncidentEntity$outboundSchema.parse(incidentEntity));
}

export function incidentEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentEntity' from JSON`,
  );
}
