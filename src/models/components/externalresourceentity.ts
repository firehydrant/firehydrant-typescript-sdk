/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExternalResourceEntity = {
  connectionType?: string | null | undefined;
  connectionName?: string | null | undefined;
  connectionFullFaviconUrl?: string | null | undefined;
  connectionId?: string | null | undefined;
  remoteId?: string | null | undefined;
  remoteUrl?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ExternalResourceEntity$inboundSchema: z.ZodType<
  ExternalResourceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_type: z.nullable(z.string()).optional(),
  connection_name: z.nullable(z.string()).optional(),
  connection_full_favicon_url: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_url: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_type": "connectionType",
    "connection_name": "connectionName",
    "connection_full_favicon_url": "connectionFullFaviconUrl",
    "connection_id": "connectionId",
    "remote_id": "remoteId",
    "remote_url": "remoteUrl",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ExternalResourceEntity$Outbound = {
  connection_type?: string | null | undefined;
  connection_name?: string | null | undefined;
  connection_full_favicon_url?: string | null | undefined;
  connection_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_url?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ExternalResourceEntity$outboundSchema: z.ZodType<
  ExternalResourceEntity$Outbound,
  z.ZodTypeDef,
  ExternalResourceEntity
> = z.object({
  connectionType: z.nullable(z.string()).optional(),
  connectionName: z.nullable(z.string()).optional(),
  connectionFullFaviconUrl: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionType: "connection_type",
    connectionName: "connection_name",
    connectionFullFaviconUrl: "connection_full_favicon_url",
    connectionId: "connection_id",
    remoteId: "remote_id",
    remoteUrl: "remote_url",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalResourceEntity$ {
  /** @deprecated use `ExternalResourceEntity$inboundSchema` instead. */
  export const inboundSchema = ExternalResourceEntity$inboundSchema;
  /** @deprecated use `ExternalResourceEntity$outboundSchema` instead. */
  export const outboundSchema = ExternalResourceEntity$outboundSchema;
  /** @deprecated use `ExternalResourceEntity$Outbound` instead. */
  export type Outbound = ExternalResourceEntity$Outbound;
}

export function externalResourceEntityToJSON(
  externalResourceEntity: ExternalResourceEntity,
): string {
  return JSON.stringify(
    ExternalResourceEntity$outboundSchema.parse(externalResourceEntity),
  );
}

export function externalResourceEntityFromJSON(
  jsonString: string,
): SafeParseResult<ExternalResourceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalResourceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalResourceEntity' from JSON`,
  );
}
