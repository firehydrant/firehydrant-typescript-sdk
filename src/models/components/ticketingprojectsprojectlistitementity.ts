/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketingProjectConfigEntity,
  TicketingProjectConfigEntity$inboundSchema,
  TicketingProjectConfigEntity$Outbound,
  TicketingProjectConfigEntity$outboundSchema,
} from "./ticketingprojectconfigentity.js";
import {
  TicketingProjectFieldMapEntity,
  TicketingProjectFieldMapEntity$inboundSchema,
  TicketingProjectFieldMapEntity$Outbound,
  TicketingProjectFieldMapEntity$outboundSchema,
} from "./ticketingprojectfieldmapentity.js";

/**
 * Ticketing_Projects_ProjectListItemEntity model
 */
export type TicketingProjectsProjectListItemEntity = {
  id?: string | undefined;
  name?: string | undefined;
  /**
   * Ticketing_ProjectConfigEntity model
   */
  config?: TicketingProjectConfigEntity | undefined;
  /**
   * Ticketing_ProjectFieldMapEntity model
   */
  fieldMap?: TicketingProjectFieldMapEntity | undefined;
  updatedAt?: Date | undefined;
  connectionSlug?: string | undefined;
};

/** @internal */
export const TicketingProjectsProjectListItemEntity$inboundSchema: z.ZodType<
  TicketingProjectsProjectListItemEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  config: TicketingProjectConfigEntity$inboundSchema.optional(),
  field_map: TicketingProjectFieldMapEntity$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  connection_slug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "field_map": "fieldMap",
    "updated_at": "updatedAt",
    "connection_slug": "connectionSlug",
  });
});

/** @internal */
export type TicketingProjectsProjectListItemEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  config?: TicketingProjectConfigEntity$Outbound | undefined;
  field_map?: TicketingProjectFieldMapEntity$Outbound | undefined;
  updated_at?: string | undefined;
  connection_slug?: string | undefined;
};

/** @internal */
export const TicketingProjectsProjectListItemEntity$outboundSchema: z.ZodType<
  TicketingProjectsProjectListItemEntity$Outbound,
  z.ZodTypeDef,
  TicketingProjectsProjectListItemEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  config: TicketingProjectConfigEntity$outboundSchema.optional(),
  fieldMap: TicketingProjectFieldMapEntity$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  connectionSlug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fieldMap: "field_map",
    updatedAt: "updated_at",
    connectionSlug: "connection_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingProjectsProjectListItemEntity$ {
  /** @deprecated use `TicketingProjectsProjectListItemEntity$inboundSchema` instead. */
  export const inboundSchema =
    TicketingProjectsProjectListItemEntity$inboundSchema;
  /** @deprecated use `TicketingProjectsProjectListItemEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingProjectsProjectListItemEntity$outboundSchema;
  /** @deprecated use `TicketingProjectsProjectListItemEntity$Outbound` instead. */
  export type Outbound = TicketingProjectsProjectListItemEntity$Outbound;
}

export function ticketingProjectsProjectListItemEntityToJSON(
  ticketingProjectsProjectListItemEntity:
    TicketingProjectsProjectListItemEntity,
): string {
  return JSON.stringify(
    TicketingProjectsProjectListItemEntity$outboundSchema.parse(
      ticketingProjectsProjectListItemEntity,
    ),
  );
}

export function ticketingProjectsProjectListItemEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingProjectsProjectListItemEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingProjectsProjectListItemEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingProjectsProjectListItemEntity' from JSON`,
  );
}
