/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReportsDataPointEntity,
  ReportsDataPointEntity$inboundSchema,
  ReportsDataPointEntity$Outbound,
  ReportsDataPointEntity$outboundSchema,
} from "./reportsdatapointentity.js";

export type ReportsBucketEntity = {
  bucket?: string | null | undefined;
  points?: Array<ReportsDataPointEntity> | null | undefined;
};

/** @internal */
export const ReportsBucketEntity$inboundSchema: z.ZodType<
  ReportsBucketEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket: z.nullable(z.string()).optional(),
  points: z.nullable(z.array(ReportsDataPointEntity$inboundSchema)).optional(),
});

/** @internal */
export type ReportsBucketEntity$Outbound = {
  bucket?: string | null | undefined;
  points?: Array<ReportsDataPointEntity$Outbound> | null | undefined;
};

/** @internal */
export const ReportsBucketEntity$outboundSchema: z.ZodType<
  ReportsBucketEntity$Outbound,
  z.ZodTypeDef,
  ReportsBucketEntity
> = z.object({
  bucket: z.nullable(z.string()).optional(),
  points: z.nullable(z.array(ReportsDataPointEntity$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportsBucketEntity$ {
  /** @deprecated use `ReportsBucketEntity$inboundSchema` instead. */
  export const inboundSchema = ReportsBucketEntity$inboundSchema;
  /** @deprecated use `ReportsBucketEntity$outboundSchema` instead. */
  export const outboundSchema = ReportsBucketEntity$outboundSchema;
  /** @deprecated use `ReportsBucketEntity$Outbound` instead. */
  export type Outbound = ReportsBucketEntity$Outbound;
}

export function reportsBucketEntityToJSON(
  reportsBucketEntity: ReportsBucketEntity,
): string {
  return JSON.stringify(
    ReportsBucketEntity$outboundSchema.parse(reportsBucketEntity),
  );
}

export function reportsBucketEntityFromJSON(
  jsonString: string,
): SafeParseResult<ReportsBucketEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportsBucketEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportsBucketEntity' from JSON`,
  );
}
