/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIncidentTypeImpact = {
  /**
   * The id of impact
   */
  id: string;
  /**
   * The id of the condition
   */
  conditionId: string;
};

export type UpdateIncidentTypeTemplate = {
  description?: string | null | undefined;
  customerImpactSummary?: string | null | undefined;
  /**
   * A labels hash of keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
  severity?: string | null | undefined;
  priority?: string | null | undefined;
  /**
   * List of tags for the incident
   */
  tagList?: Array<string> | null | undefined;
  /**
   * List of ids of Runbooks to attach to incidents created from this type
   */
  runbookIds?: Array<string> | null | undefined;
  privateIncident?: boolean | null | undefined;
  /**
   * List of ids of teams to be assigned to incidents
   */
  teamIds?: Array<string> | null | undefined;
  /**
   * An array of impact/condition combinations
   */
  impacts?: Array<UpdateIncidentTypeImpact> | null | undefined;
};

/**
 * Update a single incident type from its ID
 */
export type UpdateIncidentType = {
  name: string;
  template: UpdateIncidentTypeTemplate;
};

/** @internal */
export const UpdateIncidentTypeImpact$inboundSchema: z.ZodType<
  UpdateIncidentTypeImpact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type UpdateIncidentTypeImpact$Outbound = {
  id: string;
  condition_id: string;
};

/** @internal */
export const UpdateIncidentTypeImpact$outboundSchema: z.ZodType<
  UpdateIncidentTypeImpact$Outbound,
  z.ZodTypeDef,
  UpdateIncidentTypeImpact
> = z.object({
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentTypeImpact$ {
  /** @deprecated use `UpdateIncidentTypeImpact$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentTypeImpact$inboundSchema;
  /** @deprecated use `UpdateIncidentTypeImpact$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentTypeImpact$outboundSchema;
  /** @deprecated use `UpdateIncidentTypeImpact$Outbound` instead. */
  export type Outbound = UpdateIncidentTypeImpact$Outbound;
}

export function updateIncidentTypeImpactToJSON(
  updateIncidentTypeImpact: UpdateIncidentTypeImpact,
): string {
  return JSON.stringify(
    UpdateIncidentTypeImpact$outboundSchema.parse(updateIncidentTypeImpact),
  );
}

export function updateIncidentTypeImpactFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentTypeImpact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentTypeImpact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentTypeImpact' from JSON`,
  );
}

/** @internal */
export const UpdateIncidentTypeTemplate$inboundSchema: z.ZodType<
  UpdateIncidentTypeTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  customer_impact_summary: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  severity: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  tag_list: z.nullable(z.array(z.string())).optional(),
  runbook_ids: z.nullable(z.array(z.string())).optional(),
  private_incident: z.nullable(z.boolean()).optional(),
  team_ids: z.nullable(z.array(z.string())).optional(),
  impacts: z.nullable(
    z.array(z.lazy(() => UpdateIncidentTypeImpact$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_impact_summary": "customerImpactSummary",
    "tag_list": "tagList",
    "runbook_ids": "runbookIds",
    "private_incident": "privateIncident",
    "team_ids": "teamIds",
  });
});

/** @internal */
export type UpdateIncidentTypeTemplate$Outbound = {
  description?: string | null | undefined;
  customer_impact_summary?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  severity?: string | null | undefined;
  priority?: string | null | undefined;
  tag_list?: Array<string> | null | undefined;
  runbook_ids?: Array<string> | null | undefined;
  private_incident?: boolean | null | undefined;
  team_ids?: Array<string> | null | undefined;
  impacts?: Array<UpdateIncidentTypeImpact$Outbound> | null | undefined;
};

/** @internal */
export const UpdateIncidentTypeTemplate$outboundSchema: z.ZodType<
  UpdateIncidentTypeTemplate$Outbound,
  z.ZodTypeDef,
  UpdateIncidentTypeTemplate
> = z.object({
  description: z.nullable(z.string()).optional(),
  customerImpactSummary: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  severity: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  tagList: z.nullable(z.array(z.string())).optional(),
  runbookIds: z.nullable(z.array(z.string())).optional(),
  privateIncident: z.nullable(z.boolean()).optional(),
  teamIds: z.nullable(z.array(z.string())).optional(),
  impacts: z.nullable(
    z.array(z.lazy(() => UpdateIncidentTypeImpact$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerImpactSummary: "customer_impact_summary",
    tagList: "tag_list",
    runbookIds: "runbook_ids",
    privateIncident: "private_incident",
    teamIds: "team_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentTypeTemplate$ {
  /** @deprecated use `UpdateIncidentTypeTemplate$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentTypeTemplate$inboundSchema;
  /** @deprecated use `UpdateIncidentTypeTemplate$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentTypeTemplate$outboundSchema;
  /** @deprecated use `UpdateIncidentTypeTemplate$Outbound` instead. */
  export type Outbound = UpdateIncidentTypeTemplate$Outbound;
}

export function updateIncidentTypeTemplateToJSON(
  updateIncidentTypeTemplate: UpdateIncidentTypeTemplate,
): string {
  return JSON.stringify(
    UpdateIncidentTypeTemplate$outboundSchema.parse(updateIncidentTypeTemplate),
  );
}

export function updateIncidentTypeTemplateFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentTypeTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentTypeTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentTypeTemplate' from JSON`,
  );
}

/** @internal */
export const UpdateIncidentType$inboundSchema: z.ZodType<
  UpdateIncidentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  template: z.lazy(() => UpdateIncidentTypeTemplate$inboundSchema),
});

/** @internal */
export type UpdateIncidentType$Outbound = {
  name: string;
  template: UpdateIncidentTypeTemplate$Outbound;
};

/** @internal */
export const UpdateIncidentType$outboundSchema: z.ZodType<
  UpdateIncidentType$Outbound,
  z.ZodTypeDef,
  UpdateIncidentType
> = z.object({
  name: z.string(),
  template: z.lazy(() => UpdateIncidentTypeTemplate$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentType$ {
  /** @deprecated use `UpdateIncidentType$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentType$inboundSchema;
  /** @deprecated use `UpdateIncidentType$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentType$outboundSchema;
  /** @deprecated use `UpdateIncidentType$Outbound` instead. */
  export type Outbound = UpdateIncidentType$Outbound;
}

export function updateIncidentTypeToJSON(
  updateIncidentType: UpdateIncidentType,
): string {
  return JSON.stringify(
    UpdateIncidentType$outboundSchema.parse(updateIncidentType),
  );
}

export function updateIncidentTypeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentType' from JSON`,
  );
}
