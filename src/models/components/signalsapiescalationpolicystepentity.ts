/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableSignalsAPITargetEntity,
  NullableSignalsAPITargetEntity$inboundSchema,
  NullableSignalsAPITargetEntity$Outbound,
  NullableSignalsAPITargetEntity$outboundSchema,
} from "./nullablesignalsapitargetentity.js";
import {
  SignalsAPITargetEntity,
  SignalsAPITargetEntity$inboundSchema,
  SignalsAPITargetEntity$Outbound,
  SignalsAPITargetEntity$outboundSchema,
} from "./signalsapitargetentity.js";

/**
 * The distribution type for the step
 */
export const SignalsAPIEscalationPolicyStepEntityDistributionType = {
  Unspecified: "unspecified",
  RoundRobinByAlert: "round_robin_by_alert",
  RoundRobinByEscalationPolicy: "round_robin_by_escalation_policy",
} as const;
/**
 * The distribution type for the step
 */
export type SignalsAPIEscalationPolicyStepEntityDistributionType = ClosedEnum<
  typeof SignalsAPIEscalationPolicyStepEntityDistributionType
>;

export type SignalsAPIEscalationPolicyStepEntity = {
  id?: string | null | undefined;
  position?: number | null | undefined;
  parentPosition?: number | null | undefined;
  targets?: Array<SignalsAPITargetEntity> | null | undefined;
  timeout?: string | null | undefined;
  /**
   * The distribution type for the step
   */
  distributionType?:
    | SignalsAPIEscalationPolicyStepEntityDistributionType
    | null
    | undefined;
  nextTargetForRoundRobin?: NullableSignalsAPITargetEntity | null | undefined;
  /**
   * The notification priorities that this step is assigned to. Valid values are HIGH, MEDIUM, and LOW.
   */
  priorities?: Array<string> | null | undefined;
};

/** @internal */
export const SignalsAPIEscalationPolicyStepEntityDistributionType$inboundSchema:
  z.ZodNativeEnum<typeof SignalsAPIEscalationPolicyStepEntityDistributionType> =
    z.nativeEnum(SignalsAPIEscalationPolicyStepEntityDistributionType);

/** @internal */
export const SignalsAPIEscalationPolicyStepEntityDistributionType$outboundSchema:
  z.ZodNativeEnum<typeof SignalsAPIEscalationPolicyStepEntityDistributionType> =
    SignalsAPIEscalationPolicyStepEntityDistributionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIEscalationPolicyStepEntityDistributionType$ {
  /** @deprecated use `SignalsAPIEscalationPolicyStepEntityDistributionType$inboundSchema` instead. */
  export const inboundSchema =
    SignalsAPIEscalationPolicyStepEntityDistributionType$inboundSchema;
  /** @deprecated use `SignalsAPIEscalationPolicyStepEntityDistributionType$outboundSchema` instead. */
  export const outboundSchema =
    SignalsAPIEscalationPolicyStepEntityDistributionType$outboundSchema;
}

/** @internal */
export const SignalsAPIEscalationPolicyStepEntity$inboundSchema: z.ZodType<
  SignalsAPIEscalationPolicyStepEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  parent_position: z.nullable(z.number().int()).optional(),
  targets: z.nullable(z.array(SignalsAPITargetEntity$inboundSchema)).optional(),
  timeout: z.nullable(z.string()).optional(),
  distribution_type: z.nullable(
    SignalsAPIEscalationPolicyStepEntityDistributionType$inboundSchema,
  ).optional(),
  next_target_for_round_robin: z.nullable(
    NullableSignalsAPITargetEntity$inboundSchema,
  ).optional(),
  priorities: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_position": "parentPosition",
    "distribution_type": "distributionType",
    "next_target_for_round_robin": "nextTargetForRoundRobin",
  });
});

/** @internal */
export type SignalsAPIEscalationPolicyStepEntity$Outbound = {
  id?: string | null | undefined;
  position?: number | null | undefined;
  parent_position?: number | null | undefined;
  targets?: Array<SignalsAPITargetEntity$Outbound> | null | undefined;
  timeout?: string | null | undefined;
  distribution_type?: string | null | undefined;
  next_target_for_round_robin?:
    | NullableSignalsAPITargetEntity$Outbound
    | null
    | undefined;
  priorities?: Array<string> | null | undefined;
};

/** @internal */
export const SignalsAPIEscalationPolicyStepEntity$outboundSchema: z.ZodType<
  SignalsAPIEscalationPolicyStepEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIEscalationPolicyStepEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  parentPosition: z.nullable(z.number().int()).optional(),
  targets: z.nullable(z.array(SignalsAPITargetEntity$outboundSchema))
    .optional(),
  timeout: z.nullable(z.string()).optional(),
  distributionType: z.nullable(
    SignalsAPIEscalationPolicyStepEntityDistributionType$outboundSchema,
  ).optional(),
  nextTargetForRoundRobin: z.nullable(
    NullableSignalsAPITargetEntity$outboundSchema,
  ).optional(),
  priorities: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    parentPosition: "parent_position",
    distributionType: "distribution_type",
    nextTargetForRoundRobin: "next_target_for_round_robin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIEscalationPolicyStepEntity$ {
  /** @deprecated use `SignalsAPIEscalationPolicyStepEntity$inboundSchema` instead. */
  export const inboundSchema =
    SignalsAPIEscalationPolicyStepEntity$inboundSchema;
  /** @deprecated use `SignalsAPIEscalationPolicyStepEntity$outboundSchema` instead. */
  export const outboundSchema =
    SignalsAPIEscalationPolicyStepEntity$outboundSchema;
  /** @deprecated use `SignalsAPIEscalationPolicyStepEntity$Outbound` instead. */
  export type Outbound = SignalsAPIEscalationPolicyStepEntity$Outbound;
}

export function signalsAPIEscalationPolicyStepEntityToJSON(
  signalsAPIEscalationPolicyStepEntity: SignalsAPIEscalationPolicyStepEntity,
): string {
  return JSON.stringify(
    SignalsAPIEscalationPolicyStepEntity$outboundSchema.parse(
      signalsAPIEscalationPolicyStepEntity,
    ),
  );
}

export function signalsAPIEscalationPolicyStepEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIEscalationPolicyStepEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SignalsAPIEscalationPolicyStepEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIEscalationPolicyStepEntity' from JSON`,
  );
}
