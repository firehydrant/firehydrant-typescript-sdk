/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LinksEntity,
  LinksEntity$inboundSchema,
  LinksEntity$Outbound,
  LinksEntity$outboundSchema,
} from "./linksentity.js";
import {
  MediaImageEntity,
  MediaImageEntity$inboundSchema,
  MediaImageEntity$Outbound,
  MediaImageEntity$outboundSchema,
} from "./mediaimageentity.js";
import {
  NuncComponentEntity,
  NuncComponentEntity$inboundSchema,
  NuncComponentEntity$Outbound,
  NuncComponentEntity$outboundSchema,
} from "./nunccomponententity.js";
import {
  NuncComponentGroupEntity,
  NuncComponentGroupEntity$inboundSchema,
  NuncComponentGroupEntity$Outbound,
  NuncComponentGroupEntity$outboundSchema,
} from "./nunccomponentgroupentity.js";
import {
  NuncConditionEntity,
  NuncConditionEntity$inboundSchema,
  NuncConditionEntity$Outbound,
  NuncConditionEntity$outboundSchema,
} from "./nuncconditionentity.js";

/**
 * NuncConnectionEntity model
 */
export type NuncConnectionEntity = {
  id?: string | undefined;
  domain?: string | undefined;
  companyName?: string | undefined;
  companyWebsite?: string | undefined;
  cname?: string | undefined;
  greetingTitle?: string | undefined;
  greetingBody?: string | undefined;
  operationalMessage?: string | undefined;
  companyTosUrl?: string | undefined;
  primaryColor?: string | undefined;
  secondaryColor?: string | undefined;
  buttonBackgroundColor?: string | undefined;
  buttonTextColor?: string | undefined;
  linkColor?: string | undefined;
  title?: string | undefined;
  exposedFields?: string | undefined;
  conditions?: NuncConditionEntity | undefined;
  components?: NuncComponentEntity | undefined;
  componentGroups?: NuncComponentGroupEntity | undefined;
  logo?: MediaImageEntity | undefined;
  coverImage?: MediaImageEntity | undefined;
  favicon?: MediaImageEntity | undefined;
  openGraphImage?: MediaImageEntity | undefined;
  darkLogo?: MediaImageEntity | undefined;
  enableHistogram?: boolean | undefined;
  uiVersion?: number | undefined;
  /**
   * List of links attached to this status page.
   */
  links?: Array<LinksEntity> | undefined;
};

/** @internal */
export const NuncConnectionEntity$inboundSchema: z.ZodType<
  NuncConnectionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  domain: z.string().optional(),
  company_name: z.string().optional(),
  company_website: z.string().optional(),
  cname: z.string().optional(),
  greeting_title: z.string().optional(),
  greeting_body: z.string().optional(),
  operational_message: z.string().optional(),
  company_tos_url: z.string().optional(),
  primary_color: z.string().optional(),
  secondary_color: z.string().optional(),
  button_background_color: z.string().optional(),
  button_text_color: z.string().optional(),
  link_color: z.string().optional(),
  title: z.string().optional(),
  exposed_fields: z.string().optional(),
  conditions: NuncConditionEntity$inboundSchema.optional(),
  components: NuncComponentEntity$inboundSchema.optional(),
  component_groups: NuncComponentGroupEntity$inboundSchema.optional(),
  logo: MediaImageEntity$inboundSchema.optional(),
  cover_image: MediaImageEntity$inboundSchema.optional(),
  favicon: MediaImageEntity$inboundSchema.optional(),
  open_graph_image: MediaImageEntity$inboundSchema.optional(),
  dark_logo: MediaImageEntity$inboundSchema.optional(),
  enable_histogram: z.boolean().optional(),
  ui_version: z.number().int().optional(),
  links: z.array(LinksEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "company_website": "companyWebsite",
    "greeting_title": "greetingTitle",
    "greeting_body": "greetingBody",
    "operational_message": "operationalMessage",
    "company_tos_url": "companyTosUrl",
    "primary_color": "primaryColor",
    "secondary_color": "secondaryColor",
    "button_background_color": "buttonBackgroundColor",
    "button_text_color": "buttonTextColor",
    "link_color": "linkColor",
    "exposed_fields": "exposedFields",
    "component_groups": "componentGroups",
    "cover_image": "coverImage",
    "open_graph_image": "openGraphImage",
    "dark_logo": "darkLogo",
    "enable_histogram": "enableHistogram",
    "ui_version": "uiVersion",
  });
});

/** @internal */
export type NuncConnectionEntity$Outbound = {
  id?: string | undefined;
  domain?: string | undefined;
  company_name?: string | undefined;
  company_website?: string | undefined;
  cname?: string | undefined;
  greeting_title?: string | undefined;
  greeting_body?: string | undefined;
  operational_message?: string | undefined;
  company_tos_url?: string | undefined;
  primary_color?: string | undefined;
  secondary_color?: string | undefined;
  button_background_color?: string | undefined;
  button_text_color?: string | undefined;
  link_color?: string | undefined;
  title?: string | undefined;
  exposed_fields?: string | undefined;
  conditions?: NuncConditionEntity$Outbound | undefined;
  components?: NuncComponentEntity$Outbound | undefined;
  component_groups?: NuncComponentGroupEntity$Outbound | undefined;
  logo?: MediaImageEntity$Outbound | undefined;
  cover_image?: MediaImageEntity$Outbound | undefined;
  favicon?: MediaImageEntity$Outbound | undefined;
  open_graph_image?: MediaImageEntity$Outbound | undefined;
  dark_logo?: MediaImageEntity$Outbound | undefined;
  enable_histogram?: boolean | undefined;
  ui_version?: number | undefined;
  links?: Array<LinksEntity$Outbound> | undefined;
};

/** @internal */
export const NuncConnectionEntity$outboundSchema: z.ZodType<
  NuncConnectionEntity$Outbound,
  z.ZodTypeDef,
  NuncConnectionEntity
> = z.object({
  id: z.string().optional(),
  domain: z.string().optional(),
  companyName: z.string().optional(),
  companyWebsite: z.string().optional(),
  cname: z.string().optional(),
  greetingTitle: z.string().optional(),
  greetingBody: z.string().optional(),
  operationalMessage: z.string().optional(),
  companyTosUrl: z.string().optional(),
  primaryColor: z.string().optional(),
  secondaryColor: z.string().optional(),
  buttonBackgroundColor: z.string().optional(),
  buttonTextColor: z.string().optional(),
  linkColor: z.string().optional(),
  title: z.string().optional(),
  exposedFields: z.string().optional(),
  conditions: NuncConditionEntity$outboundSchema.optional(),
  components: NuncComponentEntity$outboundSchema.optional(),
  componentGroups: NuncComponentGroupEntity$outboundSchema.optional(),
  logo: MediaImageEntity$outboundSchema.optional(),
  coverImage: MediaImageEntity$outboundSchema.optional(),
  favicon: MediaImageEntity$outboundSchema.optional(),
  openGraphImage: MediaImageEntity$outboundSchema.optional(),
  darkLogo: MediaImageEntity$outboundSchema.optional(),
  enableHistogram: z.boolean().optional(),
  uiVersion: z.number().int().optional(),
  links: z.array(LinksEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    companyWebsite: "company_website",
    greetingTitle: "greeting_title",
    greetingBody: "greeting_body",
    operationalMessage: "operational_message",
    companyTosUrl: "company_tos_url",
    primaryColor: "primary_color",
    secondaryColor: "secondary_color",
    buttonBackgroundColor: "button_background_color",
    buttonTextColor: "button_text_color",
    linkColor: "link_color",
    exposedFields: "exposed_fields",
    componentGroups: "component_groups",
    coverImage: "cover_image",
    openGraphImage: "open_graph_image",
    darkLogo: "dark_logo",
    enableHistogram: "enable_histogram",
    uiVersion: "ui_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NuncConnectionEntity$ {
  /** @deprecated use `NuncConnectionEntity$inboundSchema` instead. */
  export const inboundSchema = NuncConnectionEntity$inboundSchema;
  /** @deprecated use `NuncConnectionEntity$outboundSchema` instead. */
  export const outboundSchema = NuncConnectionEntity$outboundSchema;
  /** @deprecated use `NuncConnectionEntity$Outbound` instead. */
  export type Outbound = NuncConnectionEntity$Outbound;
}

export function nuncConnectionEntityToJSON(
  nuncConnectionEntity: NuncConnectionEntity,
): string {
  return JSON.stringify(
    NuncConnectionEntity$outboundSchema.parse(nuncConnectionEntity),
  );
}

export function nuncConnectionEntityFromJSON(
  jsonString: string,
): SafeParseResult<NuncConnectionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NuncConnectionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NuncConnectionEntity' from JSON`,
  );
}
