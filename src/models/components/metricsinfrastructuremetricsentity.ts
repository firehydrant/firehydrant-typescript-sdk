/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Metrics_InfrastructureMetricsEntity model
 */
export type MetricsInfrastructureMetricsEntity = {
  /**
   * The UUID of the component
   */
  id?: string | undefined;
  /**
   * The name of the component
   */
  name?: string | undefined;
  /**
   * Mean Time To Detection (seconds) for all incidents for this component in this time period
   */
  mttd?: number | undefined;
  /**
   * Mean Time To Acknowledgement (seconds) for all incidents for this component in this time period
   */
  mtta?: number | undefined;
  /**
   * Mean Time To Mitigation (seconds) for all incidents for this component in this time period
   */
  mttm?: number | undefined;
  /**
   * Mean Time To Resolution (seconds) for all incidents for this component in this time period
   */
  mttr?: number | undefined;
  /**
   * Number of incidents in this time period for this component
   */
  count?: number | undefined;
  /**
   * Total time (seconds) the component was impacted (MTTR x Incident Count)
   */
  totalTime?: number | undefined;
};

/** @internal */
export const MetricsInfrastructureMetricsEntity$inboundSchema: z.ZodType<
  MetricsInfrastructureMetricsEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  mttd: z.number().int().optional(),
  mtta: z.number().int().optional(),
  mttm: z.number().int().optional(),
  mttr: z.number().int().optional(),
  count: z.number().int().optional(),
  total_time: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "total_time": "totalTime",
  });
});

/** @internal */
export type MetricsInfrastructureMetricsEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  mttd?: number | undefined;
  mtta?: number | undefined;
  mttm?: number | undefined;
  mttr?: number | undefined;
  count?: number | undefined;
  total_time?: number | undefined;
};

/** @internal */
export const MetricsInfrastructureMetricsEntity$outboundSchema: z.ZodType<
  MetricsInfrastructureMetricsEntity$Outbound,
  z.ZodTypeDef,
  MetricsInfrastructureMetricsEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  mttd: z.number().int().optional(),
  mtta: z.number().int().optional(),
  mttm: z.number().int().optional(),
  mttr: z.number().int().optional(),
  count: z.number().int().optional(),
  totalTime: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    totalTime: "total_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsInfrastructureMetricsEntity$ {
  /** @deprecated use `MetricsInfrastructureMetricsEntity$inboundSchema` instead. */
  export const inboundSchema = MetricsInfrastructureMetricsEntity$inboundSchema;
  /** @deprecated use `MetricsInfrastructureMetricsEntity$outboundSchema` instead. */
  export const outboundSchema =
    MetricsInfrastructureMetricsEntity$outboundSchema;
  /** @deprecated use `MetricsInfrastructureMetricsEntity$Outbound` instead. */
  export type Outbound = MetricsInfrastructureMetricsEntity$Outbound;
}

export function metricsInfrastructureMetricsEntityToJSON(
  metricsInfrastructureMetricsEntity: MetricsInfrastructureMetricsEntity,
): string {
  return JSON.stringify(
    MetricsInfrastructureMetricsEntity$outboundSchema.parse(
      metricsInfrastructureMetricsEntity,
    ),
  );
}

export function metricsInfrastructureMetricsEntityFromJSON(
  jsonString: string,
): SafeParseResult<MetricsInfrastructureMetricsEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsInfrastructureMetricsEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsInfrastructureMetricsEntity' from JSON`,
  );
}
