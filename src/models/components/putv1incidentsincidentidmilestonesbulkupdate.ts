/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Bulk = {
  True: "true",
} as const;
export type Bulk = ClosedEnum<typeof Bulk>;

export type PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones = {
  /**
   * The type/slug of the milestone. Must be one of the currently configured milestones for the given incident.
   */
  type: string;
  /**
   * An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
   */
  occurredAt: Date;
  /**
   * If set to true, the milestone will be removed from the incident
   */
  remove?: boolean | undefined;
};

/**
 * Update milestone times in bulk for a given incident. All milestone
 *
 * @remarks
 * times for an incident must occur in chronological order
 * corresponding to the configured order of milestones. If the result
 * of this request would cause any milestone(s) to appear out of place,
 * a 422 response will instead be returned. This includes milestones
 * not explicitly submitted or updated in this request.
 */
export type PutV1IncidentsIncidentIdMilestonesBulkUpdate = {
  bulk?: Bulk | undefined;
  milestones: Array<PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones>;
};

/** @internal */
export const Bulk$inboundSchema: z.ZodNativeEnum<typeof Bulk> = z.nativeEnum(
  Bulk,
);

/** @internal */
export const Bulk$outboundSchema: z.ZodNativeEnum<typeof Bulk> =
  Bulk$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bulk$ {
  /** @deprecated use `Bulk$inboundSchema` instead. */
  export const inboundSchema = Bulk$inboundSchema;
  /** @deprecated use `Bulk$outboundSchema` instead. */
  export const outboundSchema = Bulk$outboundSchema;
}

/** @internal */
export const PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$inboundSchema:
  z.ZodType<
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    occurred_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    remove: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "occurred_at": "occurredAt",
    });
  });

/** @internal */
export type PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$Outbound = {
  type: string;
  occurred_at: string;
  remove?: boolean | undefined;
};

/** @internal */
export const PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$outboundSchema:
  z.ZodType<
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$Outbound,
    z.ZodTypeDef,
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones
  > = z.object({
    type: z.string(),
    occurredAt: z.date().transform(v => v.toISOString()),
    remove: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      occurredAt: "occurred_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$ {
  /** @deprecated use `PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$inboundSchema` instead. */
  export const inboundSchema =
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$inboundSchema;
  /** @deprecated use `PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$outboundSchema` instead. */
  export const outboundSchema =
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$outboundSchema;
  /** @deprecated use `PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$Outbound` instead. */
  export type Outbound =
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$Outbound;
}

export function putV1IncidentsIncidentIdMilestonesBulkUpdateMilestonesToJSON(
  putV1IncidentsIncidentIdMilestonesBulkUpdateMilestones:
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones,
): string {
  return JSON.stringify(
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$outboundSchema.parse(
      putV1IncidentsIncidentIdMilestonesBulkUpdateMilestones,
    ),
  );
}

export function putV1IncidentsIncidentIdMilestonesBulkUpdateMilestonesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones' from JSON`,
  );
}

/** @internal */
export const PutV1IncidentsIncidentIdMilestonesBulkUpdate$inboundSchema:
  z.ZodType<
    PutV1IncidentsIncidentIdMilestonesBulkUpdate,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bulk: Bulk$inboundSchema.optional(),
    milestones: z.array(
      z.lazy(() =>
        PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$inboundSchema
      ),
    ),
  });

/** @internal */
export type PutV1IncidentsIncidentIdMilestonesBulkUpdate$Outbound = {
  bulk?: string | undefined;
  milestones: Array<
    PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$Outbound
  >;
};

/** @internal */
export const PutV1IncidentsIncidentIdMilestonesBulkUpdate$outboundSchema:
  z.ZodType<
    PutV1IncidentsIncidentIdMilestonesBulkUpdate$Outbound,
    z.ZodTypeDef,
    PutV1IncidentsIncidentIdMilestonesBulkUpdate
  > = z.object({
    bulk: Bulk$outboundSchema.optional(),
    milestones: z.array(
      z.lazy(() =>
        PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestones$outboundSchema
      ),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1IncidentsIncidentIdMilestonesBulkUpdate$ {
  /** @deprecated use `PutV1IncidentsIncidentIdMilestonesBulkUpdate$inboundSchema` instead. */
  export const inboundSchema =
    PutV1IncidentsIncidentIdMilestonesBulkUpdate$inboundSchema;
  /** @deprecated use `PutV1IncidentsIncidentIdMilestonesBulkUpdate$outboundSchema` instead. */
  export const outboundSchema =
    PutV1IncidentsIncidentIdMilestonesBulkUpdate$outboundSchema;
  /** @deprecated use `PutV1IncidentsIncidentIdMilestonesBulkUpdate$Outbound` instead. */
  export type Outbound = PutV1IncidentsIncidentIdMilestonesBulkUpdate$Outbound;
}

export function putV1IncidentsIncidentIdMilestonesBulkUpdateToJSON(
  putV1IncidentsIncidentIdMilestonesBulkUpdate:
    PutV1IncidentsIncidentIdMilestonesBulkUpdate,
): string {
  return JSON.stringify(
    PutV1IncidentsIncidentIdMilestonesBulkUpdate$outboundSchema.parse(
      putV1IncidentsIncidentIdMilestonesBulkUpdate,
    ),
  );
}

export function putV1IncidentsIncidentIdMilestonesBulkUpdateFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1IncidentsIncidentIdMilestonesBulkUpdate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1IncidentsIncidentIdMilestonesBulkUpdate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1IncidentsIncidentIdMilestonesBulkUpdate' from JSON`,
  );
}
