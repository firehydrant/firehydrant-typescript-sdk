/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Organizations_CustomFieldDefinitionEntity model
 */
export type OrganizationsCustomFieldDefinitionEntity = {
  displayName?: string | null | undefined;
  fieldId?: string | null | undefined;
  fieldType?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  required?: boolean | null | undefined;
  /**
   * The milestone at which this field is required, if `required` is set to `true`. When null, a required field is always required.
   */
  requiredAtMilestoneId?: string | null | undefined;
  permissibleValues?: Array<string> | null | undefined;
};

/** @internal */
export const OrganizationsCustomFieldDefinitionEntity$inboundSchema: z.ZodType<
  OrganizationsCustomFieldDefinitionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.nullable(z.string()).optional(),
  field_id: z.nullable(z.string()).optional(),
  field_type: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  required: z.nullable(z.boolean()).optional(),
  required_at_milestone_id: z.nullable(z.string()).optional(),
  permissible_values: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "field_id": "fieldId",
    "field_type": "fieldType",
    "required_at_milestone_id": "requiredAtMilestoneId",
    "permissible_values": "permissibleValues",
  });
});

/** @internal */
export type OrganizationsCustomFieldDefinitionEntity$Outbound = {
  display_name?: string | null | undefined;
  field_id?: string | null | undefined;
  field_type?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  required?: boolean | null | undefined;
  required_at_milestone_id?: string | null | undefined;
  permissible_values?: Array<string> | null | undefined;
};

/** @internal */
export const OrganizationsCustomFieldDefinitionEntity$outboundSchema: z.ZodType<
  OrganizationsCustomFieldDefinitionEntity$Outbound,
  z.ZodTypeDef,
  OrganizationsCustomFieldDefinitionEntity
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  fieldId: z.nullable(z.string()).optional(),
  fieldType: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  required: z.nullable(z.boolean()).optional(),
  requiredAtMilestoneId: z.nullable(z.string()).optional(),
  permissibleValues: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    fieldId: "field_id",
    fieldType: "field_type",
    requiredAtMilestoneId: "required_at_milestone_id",
    permissibleValues: "permissible_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationsCustomFieldDefinitionEntity$ {
  /** @deprecated use `OrganizationsCustomFieldDefinitionEntity$inboundSchema` instead. */
  export const inboundSchema =
    OrganizationsCustomFieldDefinitionEntity$inboundSchema;
  /** @deprecated use `OrganizationsCustomFieldDefinitionEntity$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationsCustomFieldDefinitionEntity$outboundSchema;
  /** @deprecated use `OrganizationsCustomFieldDefinitionEntity$Outbound` instead. */
  export type Outbound = OrganizationsCustomFieldDefinitionEntity$Outbound;
}

export function organizationsCustomFieldDefinitionEntityToJSON(
  organizationsCustomFieldDefinitionEntity:
    OrganizationsCustomFieldDefinitionEntity,
): string {
  return JSON.stringify(
    OrganizationsCustomFieldDefinitionEntity$outboundSchema.parse(
      organizationsCustomFieldDefinitionEntity,
    ),
  );
}

export function organizationsCustomFieldDefinitionEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  OrganizationsCustomFieldDefinitionEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OrganizationsCustomFieldDefinitionEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OrganizationsCustomFieldDefinitionEntity' from JSON`,
  );
}
