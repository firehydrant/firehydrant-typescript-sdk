/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LifecyclesPhaseEntity,
  LifecyclesPhaseEntity$inboundSchema,
  LifecyclesPhaseEntity$Outbound,
  LifecyclesPhaseEntity$outboundSchema,
} from "./lifecyclesphaseentity.js";

/**
 * Lifecycles_PhaseEntityList model
 */
export type LifecyclesPhaseEntityList = {
  data?: Array<LifecyclesPhaseEntity> | undefined;
};

/** @internal */
export const LifecyclesPhaseEntityList$inboundSchema: z.ZodType<
  LifecyclesPhaseEntityList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(LifecyclesPhaseEntity$inboundSchema).optional(),
});

/** @internal */
export type LifecyclesPhaseEntityList$Outbound = {
  data?: Array<LifecyclesPhaseEntity$Outbound> | undefined;
};

/** @internal */
export const LifecyclesPhaseEntityList$outboundSchema: z.ZodType<
  LifecyclesPhaseEntityList$Outbound,
  z.ZodTypeDef,
  LifecyclesPhaseEntityList
> = z.object({
  data: z.array(LifecyclesPhaseEntity$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LifecyclesPhaseEntityList$ {
  /** @deprecated use `LifecyclesPhaseEntityList$inboundSchema` instead. */
  export const inboundSchema = LifecyclesPhaseEntityList$inboundSchema;
  /** @deprecated use `LifecyclesPhaseEntityList$outboundSchema` instead. */
  export const outboundSchema = LifecyclesPhaseEntityList$outboundSchema;
  /** @deprecated use `LifecyclesPhaseEntityList$Outbound` instead. */
  export type Outbound = LifecyclesPhaseEntityList$Outbound;
}

export function lifecyclesPhaseEntityListToJSON(
  lifecyclesPhaseEntityList: LifecyclesPhaseEntityList,
): string {
  return JSON.stringify(
    LifecyclesPhaseEntityList$outboundSchema.parse(lifecyclesPhaseEntityList),
  );
}

export function lifecyclesPhaseEntityListFromJSON(
  jsonString: string,
): SafeParseResult<LifecyclesPhaseEntityList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LifecyclesPhaseEntityList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LifecyclesPhaseEntityList' from JSON`,
  );
}
