/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceEntity,
  ServiceEntity$inboundSchema,
  ServiceEntity$Outbound,
  ServiceEntity$outboundSchema,
} from "./serviceentity.js";

/**
 * ServiceDependencyEntity model
 */
export type ServiceDependencyEntity = {
  id?: string | undefined;
  notes?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ServiceEntity model
   */
  service?: ServiceEntity | undefined;
  /**
   * ServiceEntity model
   */
  connectedService?: ServiceEntity | undefined;
};

/** @internal */
export const ServiceDependencyEntity$inboundSchema: z.ZodType<
  ServiceDependencyEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  notes: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  service: ServiceEntity$inboundSchema.optional(),
  connected_service: ServiceEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "connected_service": "connectedService",
  });
});

/** @internal */
export type ServiceDependencyEntity$Outbound = {
  id?: string | undefined;
  notes?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  service?: ServiceEntity$Outbound | undefined;
  connected_service?: ServiceEntity$Outbound | undefined;
};

/** @internal */
export const ServiceDependencyEntity$outboundSchema: z.ZodType<
  ServiceDependencyEntity$Outbound,
  z.ZodTypeDef,
  ServiceDependencyEntity
> = z.object({
  id: z.string().optional(),
  notes: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  service: ServiceEntity$outboundSchema.optional(),
  connectedService: ServiceEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    connectedService: "connected_service",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDependencyEntity$ {
  /** @deprecated use `ServiceDependencyEntity$inboundSchema` instead. */
  export const inboundSchema = ServiceDependencyEntity$inboundSchema;
  /** @deprecated use `ServiceDependencyEntity$outboundSchema` instead. */
  export const outboundSchema = ServiceDependencyEntity$outboundSchema;
  /** @deprecated use `ServiceDependencyEntity$Outbound` instead. */
  export type Outbound = ServiceDependencyEntity$Outbound;
}

export function serviceDependencyEntityToJSON(
  serviceDependencyEntity: ServiceDependencyEntity,
): string {
  return JSON.stringify(
    ServiceDependencyEntity$outboundSchema.parse(serviceDependencyEntity),
  );
}

export function serviceDependencyEntityFromJSON(
  jsonString: string,
): SafeParseResult<ServiceDependencyEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceDependencyEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceDependencyEntity' from JSON`,
  );
}
