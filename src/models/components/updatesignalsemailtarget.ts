/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the inbound email will notify when matched.
 */
export const UpdateSignalsEmailTargetType = {
  Team: "Team",
  EntireTeam: "EntireTeam",
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  SlackChannel: "SlackChannel",
  MicrosoftTeamsChannel: "MicrosoftTeamsChannel",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the inbound email will notify when matched.
 */
export type UpdateSignalsEmailTargetType = ClosedEnum<
  typeof UpdateSignalsEmailTargetType
>;

/**
 * The target that the email target will notify. This object must contain a `type`
 *
 * @remarks
 * field that specifies the type of target and an `id` field that specifies the ID of
 * the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
 * "team", "user", or "slack_channel".
 */
export type UpdateSignalsEmailTargetTarget = {
  /**
   * The type of target that the inbound email will notify when matched.
   */
  type: UpdateSignalsEmailTargetType;
  /**
   * The ID of the target that the inbound email will notify when matched.
   */
  id: string;
};

/**
 * Whether or not all rules must match, or if only one rule must match.
 */
export const UpdateSignalsEmailTargetRuleMatchingStrategy = {
  All: "all",
  Any: "any",
} as const;
/**
 * Whether or not all rules must match, or if only one rule must match.
 */
export type UpdateSignalsEmailTargetRuleMatchingStrategy = ClosedEnum<
  typeof UpdateSignalsEmailTargetRuleMatchingStrategy
>;

/**
 * Update a Signals email target by ID
 */
export type UpdateSignalsEmailTarget = {
  /**
   * The email target's name.
   */
  name?: string | null | undefined;
  /**
   * The email address that will be listening to events.
   */
  slug?: string | null | undefined;
  /**
   * A detailed description of the email target.
   */
  description?: string | null | undefined;
  /**
   * The target that the email target will notify. This object must contain a `type`
   *
   * @remarks
   * field that specifies the type of target and an `id` field that specifies the ID of
   * the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
   * "team", "user", or "slack_channel".
   */
  target?: UpdateSignalsEmailTargetTarget | null | undefined;
  /**
   * A list of email addresses that are allowed to send events to the target. Must be exact match.
   */
  allowedSenders?: Array<string> | null | undefined;
  /**
   * The CEL expression that defines the status of an incoming email that is sent to the target.
   */
  statusCel?: string | null | undefined;
  /**
   * The CEL expression that defines the level of an incoming email that is sent to the target.
   */
  levelCel?: string | null | undefined;
  /**
   * A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.
   */
  rules?: Array<string> | null | undefined;
  /**
   * Whether or not all rules must match, or if only one rule must match.
   */
  ruleMatchingStrategy?:
    | UpdateSignalsEmailTargetRuleMatchingStrategy
    | null
    | undefined;
};

/** @internal */
export const UpdateSignalsEmailTargetType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSignalsEmailTargetType
> = z.nativeEnum(UpdateSignalsEmailTargetType);

/** @internal */
export const UpdateSignalsEmailTargetType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSignalsEmailTargetType
> = UpdateSignalsEmailTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsEmailTargetType$ {
  /** @deprecated use `UpdateSignalsEmailTargetType$inboundSchema` instead. */
  export const inboundSchema = UpdateSignalsEmailTargetType$inboundSchema;
  /** @deprecated use `UpdateSignalsEmailTargetType$outboundSchema` instead. */
  export const outboundSchema = UpdateSignalsEmailTargetType$outboundSchema;
}

/** @internal */
export const UpdateSignalsEmailTargetTarget$inboundSchema: z.ZodType<
  UpdateSignalsEmailTargetTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSignalsEmailTargetType$inboundSchema,
  id: z.string(),
});

/** @internal */
export type UpdateSignalsEmailTargetTarget$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const UpdateSignalsEmailTargetTarget$outboundSchema: z.ZodType<
  UpdateSignalsEmailTargetTarget$Outbound,
  z.ZodTypeDef,
  UpdateSignalsEmailTargetTarget
> = z.object({
  type: UpdateSignalsEmailTargetType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsEmailTargetTarget$ {
  /** @deprecated use `UpdateSignalsEmailTargetTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateSignalsEmailTargetTarget$inboundSchema;
  /** @deprecated use `UpdateSignalsEmailTargetTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateSignalsEmailTargetTarget$outboundSchema;
  /** @deprecated use `UpdateSignalsEmailTargetTarget$Outbound` instead. */
  export type Outbound = UpdateSignalsEmailTargetTarget$Outbound;
}

export function updateSignalsEmailTargetTargetToJSON(
  updateSignalsEmailTargetTarget: UpdateSignalsEmailTargetTarget,
): string {
  return JSON.stringify(
    UpdateSignalsEmailTargetTarget$outboundSchema.parse(
      updateSignalsEmailTargetTarget,
    ),
  );
}

export function updateSignalsEmailTargetTargetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignalsEmailTargetTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSignalsEmailTargetTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignalsEmailTargetTarget' from JSON`,
  );
}

/** @internal */
export const UpdateSignalsEmailTargetRuleMatchingStrategy$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSignalsEmailTargetRuleMatchingStrategy> = z
    .nativeEnum(UpdateSignalsEmailTargetRuleMatchingStrategy);

/** @internal */
export const UpdateSignalsEmailTargetRuleMatchingStrategy$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSignalsEmailTargetRuleMatchingStrategy> =
    UpdateSignalsEmailTargetRuleMatchingStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsEmailTargetRuleMatchingStrategy$ {
  /** @deprecated use `UpdateSignalsEmailTargetRuleMatchingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSignalsEmailTargetRuleMatchingStrategy$inboundSchema;
  /** @deprecated use `UpdateSignalsEmailTargetRuleMatchingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsEmailTargetRuleMatchingStrategy$outboundSchema;
}

/** @internal */
export const UpdateSignalsEmailTarget$inboundSchema: z.ZodType<
  UpdateSignalsEmailTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  target: z.nullable(z.lazy(() => UpdateSignalsEmailTargetTarget$inboundSchema))
    .optional(),
  allowed_senders: z.nullable(z.array(z.string())).optional(),
  status_cel: z.nullable(z.string()).optional(),
  level_cel: z.nullable(z.string()).optional(),
  rules: z.nullable(z.array(z.string())).optional(),
  rule_matching_strategy: z.nullable(
    UpdateSignalsEmailTargetRuleMatchingStrategy$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_senders": "allowedSenders",
    "status_cel": "statusCel",
    "level_cel": "levelCel",
    "rule_matching_strategy": "ruleMatchingStrategy",
  });
});

/** @internal */
export type UpdateSignalsEmailTarget$Outbound = {
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  target?: UpdateSignalsEmailTargetTarget$Outbound | null | undefined;
  allowed_senders?: Array<string> | null | undefined;
  status_cel?: string | null | undefined;
  level_cel?: string | null | undefined;
  rules?: Array<string> | null | undefined;
  rule_matching_strategy?: string | null | undefined;
};

/** @internal */
export const UpdateSignalsEmailTarget$outboundSchema: z.ZodType<
  UpdateSignalsEmailTarget$Outbound,
  z.ZodTypeDef,
  UpdateSignalsEmailTarget
> = z.object({
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  target: z.nullable(
    z.lazy(() => UpdateSignalsEmailTargetTarget$outboundSchema),
  ).optional(),
  allowedSenders: z.nullable(z.array(z.string())).optional(),
  statusCel: z.nullable(z.string()).optional(),
  levelCel: z.nullable(z.string()).optional(),
  rules: z.nullable(z.array(z.string())).optional(),
  ruleMatchingStrategy: z.nullable(
    UpdateSignalsEmailTargetRuleMatchingStrategy$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedSenders: "allowed_senders",
    statusCel: "status_cel",
    levelCel: "level_cel",
    ruleMatchingStrategy: "rule_matching_strategy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsEmailTarget$ {
  /** @deprecated use `UpdateSignalsEmailTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateSignalsEmailTarget$inboundSchema;
  /** @deprecated use `UpdateSignalsEmailTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateSignalsEmailTarget$outboundSchema;
  /** @deprecated use `UpdateSignalsEmailTarget$Outbound` instead. */
  export type Outbound = UpdateSignalsEmailTarget$Outbound;
}

export function updateSignalsEmailTargetToJSON(
  updateSignalsEmailTarget: UpdateSignalsEmailTarget,
): string {
  return JSON.stringify(
    UpdateSignalsEmailTarget$outboundSchema.parse(updateSignalsEmailTarget),
  );
}

export function updateSignalsEmailTargetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignalsEmailTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSignalsEmailTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignalsEmailTarget' from JSON`,
  );
}
