/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableTicketingProjectFieldMapCasesElseEntity,
  NullableTicketingProjectFieldMapCasesElseEntity$inboundSchema,
  NullableTicketingProjectFieldMapCasesElseEntity$Outbound,
  NullableTicketingProjectFieldMapCasesElseEntity$outboundSchema,
} from "./nullableticketingprojectfieldmapcaseselseentity.js";
import {
  NullableTicketingProjectFieldMapExternalValueEntity,
  NullableTicketingProjectFieldMapExternalValueEntity$inboundSchema,
  NullableTicketingProjectFieldMapExternalValueEntity$Outbound,
  NullableTicketingProjectFieldMapExternalValueEntity$outboundSchema,
} from "./nullableticketingprojectfieldmapexternalvalueentity.js";
import {
  TicketingProjectFieldMapCasesEntity,
  TicketingProjectFieldMapCasesEntity$inboundSchema,
  TicketingProjectFieldMapCasesEntity$Outbound,
  TicketingProjectFieldMapCasesEntity$outboundSchema,
} from "./ticketingprojectfieldmapcasesentity.js";

export const StrategyEnum = {
  Basic: "basic",
  Logic: "logic",
} as const;
export type StrategyEnum = ClosedEnum<typeof StrategyEnum>;

export type UserData = {};

export type TicketingProjectFieldMapBodyEntity = {
  strategy?: StrategyEnum | null | undefined;
  externalField?: string | null | undefined;
  externalValue?:
    | NullableTicketingProjectFieldMapExternalValueEntity
    | null
    | undefined;
  userData?: UserData | null | undefined;
  cases?: Array<TicketingProjectFieldMapCasesEntity> | null | undefined;
  else?: NullableTicketingProjectFieldMapCasesElseEntity | null | undefined;
};

/** @internal */
export const StrategyEnum$inboundSchema: z.ZodNativeEnum<typeof StrategyEnum> =
  z.nativeEnum(StrategyEnum);

/** @internal */
export const StrategyEnum$outboundSchema: z.ZodNativeEnum<typeof StrategyEnum> =
  StrategyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StrategyEnum$ {
  /** @deprecated use `StrategyEnum$inboundSchema` instead. */
  export const inboundSchema = StrategyEnum$inboundSchema;
  /** @deprecated use `StrategyEnum$outboundSchema` instead. */
  export const outboundSchema = StrategyEnum$outboundSchema;
}

/** @internal */
export const UserData$inboundSchema: z.ZodType<
  UserData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UserData$Outbound = {};

/** @internal */
export const UserData$outboundSchema: z.ZodType<
  UserData$Outbound,
  z.ZodTypeDef,
  UserData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserData$ {
  /** @deprecated use `UserData$inboundSchema` instead. */
  export const inboundSchema = UserData$inboundSchema;
  /** @deprecated use `UserData$outboundSchema` instead. */
  export const outboundSchema = UserData$outboundSchema;
  /** @deprecated use `UserData$Outbound` instead. */
  export type Outbound = UserData$Outbound;
}

export function userDataToJSON(userData: UserData): string {
  return JSON.stringify(UserData$outboundSchema.parse(userData));
}

export function userDataFromJSON(
  jsonString: string,
): SafeParseResult<UserData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserData' from JSON`,
  );
}

/** @internal */
export const TicketingProjectFieldMapBodyEntity$inboundSchema: z.ZodType<
  TicketingProjectFieldMapBodyEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  strategy: z.nullable(StrategyEnum$inboundSchema).optional(),
  external_field: z.nullable(z.string()).optional(),
  external_value: z.nullable(
    NullableTicketingProjectFieldMapExternalValueEntity$inboundSchema,
  ).optional(),
  user_data: z.nullable(z.lazy(() => UserData$inboundSchema)).optional(),
  cases: z.nullable(z.array(TicketingProjectFieldMapCasesEntity$inboundSchema))
    .optional(),
  else: z.nullable(
    NullableTicketingProjectFieldMapCasesElseEntity$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_field": "externalField",
    "external_value": "externalValue",
    "user_data": "userData",
  });
});

/** @internal */
export type TicketingProjectFieldMapBodyEntity$Outbound = {
  strategy?: string | null | undefined;
  external_field?: string | null | undefined;
  external_value?:
    | NullableTicketingProjectFieldMapExternalValueEntity$Outbound
    | null
    | undefined;
  user_data?: UserData$Outbound | null | undefined;
  cases?:
    | Array<TicketingProjectFieldMapCasesEntity$Outbound>
    | null
    | undefined;
  else?:
    | NullableTicketingProjectFieldMapCasesElseEntity$Outbound
    | null
    | undefined;
};

/** @internal */
export const TicketingProjectFieldMapBodyEntity$outboundSchema: z.ZodType<
  TicketingProjectFieldMapBodyEntity$Outbound,
  z.ZodTypeDef,
  TicketingProjectFieldMapBodyEntity
> = z.object({
  strategy: z.nullable(StrategyEnum$outboundSchema).optional(),
  externalField: z.nullable(z.string()).optional(),
  externalValue: z.nullable(
    NullableTicketingProjectFieldMapExternalValueEntity$outboundSchema,
  ).optional(),
  userData: z.nullable(z.lazy(() => UserData$outboundSchema)).optional(),
  cases: z.nullable(z.array(TicketingProjectFieldMapCasesEntity$outboundSchema))
    .optional(),
  else: z.nullable(
    NullableTicketingProjectFieldMapCasesElseEntity$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    externalField: "external_field",
    externalValue: "external_value",
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingProjectFieldMapBodyEntity$ {
  /** @deprecated use `TicketingProjectFieldMapBodyEntity$inboundSchema` instead. */
  export const inboundSchema = TicketingProjectFieldMapBodyEntity$inboundSchema;
  /** @deprecated use `TicketingProjectFieldMapBodyEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingProjectFieldMapBodyEntity$outboundSchema;
  /** @deprecated use `TicketingProjectFieldMapBodyEntity$Outbound` instead. */
  export type Outbound = TicketingProjectFieldMapBodyEntity$Outbound;
}

export function ticketingProjectFieldMapBodyEntityToJSON(
  ticketingProjectFieldMapBodyEntity: TicketingProjectFieldMapBodyEntity,
): string {
  return JSON.stringify(
    TicketingProjectFieldMapBodyEntity$outboundSchema.parse(
      ticketingProjectFieldMapBodyEntity,
    ),
  );
}

export function ticketingProjectFieldMapBodyEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingProjectFieldMapBodyEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingProjectFieldMapBodyEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingProjectFieldMapBodyEntity' from JSON`,
  );
}
