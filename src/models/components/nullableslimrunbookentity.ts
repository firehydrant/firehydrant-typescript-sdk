/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableRulesRuleEntity,
  NullableRulesRuleEntity$inboundSchema,
  NullableRulesRuleEntity$Outbound,
  NullableRulesRuleEntity$outboundSchema,
} from "./nullablerulesruleentity.js";
import {
  NullableTeamEntityLite,
  NullableTeamEntityLite$inboundSchema,
  NullableTeamEntityLite$Outbound,
  NullableTeamEntityLite$outboundSchema,
} from "./nullableteamentitylite.js";

export type NullableSlimRunbookEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  attachmentRule?: NullableRulesRuleEntity | null | undefined;
  owner?: NullableTeamEntityLite | null | undefined;
  /**
   * categories the runbook applies to
   */
  categories?: Array<string> | null | undefined;
};

/** @internal */
export const NullableSlimRunbookEntity$inboundSchema: z.ZodType<
  NullableSlimRunbookEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  attachment_rule: z.nullable(NullableRulesRuleEntity$inboundSchema).optional(),
  owner: z.nullable(NullableTeamEntityLite$inboundSchema).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "attachment_rule": "attachmentRule",
  });
});

/** @internal */
export type NullableSlimRunbookEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  attachment_rule?: NullableRulesRuleEntity$Outbound | null | undefined;
  owner?: NullableTeamEntityLite$Outbound | null | undefined;
  categories?: Array<string> | null | undefined;
};

/** @internal */
export const NullableSlimRunbookEntity$outboundSchema: z.ZodType<
  NullableSlimRunbookEntity$Outbound,
  z.ZodTypeDef,
  NullableSlimRunbookEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  attachmentRule: z.nullable(NullableRulesRuleEntity$outboundSchema).optional(),
  owner: z.nullable(NullableTeamEntityLite$outboundSchema).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    attachmentRule: "attachment_rule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableSlimRunbookEntity$ {
  /** @deprecated use `NullableSlimRunbookEntity$inboundSchema` instead. */
  export const inboundSchema = NullableSlimRunbookEntity$inboundSchema;
  /** @deprecated use `NullableSlimRunbookEntity$outboundSchema` instead. */
  export const outboundSchema = NullableSlimRunbookEntity$outboundSchema;
  /** @deprecated use `NullableSlimRunbookEntity$Outbound` instead. */
  export type Outbound = NullableSlimRunbookEntity$Outbound;
}

export function nullableSlimRunbookEntityToJSON(
  nullableSlimRunbookEntity: NullableSlimRunbookEntity,
): string {
  return JSON.stringify(
    NullableSlimRunbookEntity$outboundSchema.parse(nullableSlimRunbookEntity),
  );
}

export function nullableSlimRunbookEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableSlimRunbookEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableSlimRunbookEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableSlimRunbookEntity' from JSON`,
  );
}
