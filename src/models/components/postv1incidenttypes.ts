/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1IncidentTypesImpacts = {
  /**
   * The id of impact
   */
  id: string;
  /**
   * The id of the condition
   */
  conditionId: string;
};

export type Template = {
  description?: string | undefined;
  customerImpactSummary?: string | undefined;
  /**
   * A labels hash of keys and values
   */
  labels?: { [k: string]: string } | undefined;
  severity?: string | undefined;
  priority?: string | undefined;
  /**
   * List of tags for the incident
   */
  tagList?: Array<string> | undefined;
  /**
   * List of ids of Runbooks to attach to incidents created from this type
   */
  runbookIds?: Array<string> | undefined;
  privateIncident?: boolean | undefined;
  /**
   * List of ids of teams to be assigned to incidents
   */
  teamIds?: Array<string> | undefined;
  /**
   * An array of impact/condition combinations
   */
  impacts?: Array<PostV1IncidentTypesImpacts> | undefined;
};

/**
 * Create a new incident type
 */
export type PostV1IncidentTypes = {
  name: string;
  template: Template;
};

/** @internal */
export const PostV1IncidentTypesImpacts$inboundSchema: z.ZodType<
  PostV1IncidentTypesImpacts,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type PostV1IncidentTypesImpacts$Outbound = {
  id: string;
  condition_id: string;
};

/** @internal */
export const PostV1IncidentTypesImpacts$outboundSchema: z.ZodType<
  PostV1IncidentTypesImpacts$Outbound,
  z.ZodTypeDef,
  PostV1IncidentTypesImpacts
> = z.object({
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentTypesImpacts$ {
  /** @deprecated use `PostV1IncidentTypesImpacts$inboundSchema` instead. */
  export const inboundSchema = PostV1IncidentTypesImpacts$inboundSchema;
  /** @deprecated use `PostV1IncidentTypesImpacts$outboundSchema` instead. */
  export const outboundSchema = PostV1IncidentTypesImpacts$outboundSchema;
  /** @deprecated use `PostV1IncidentTypesImpacts$Outbound` instead. */
  export type Outbound = PostV1IncidentTypesImpacts$Outbound;
}

export function postV1IncidentTypesImpactsToJSON(
  postV1IncidentTypesImpacts: PostV1IncidentTypesImpacts,
): string {
  return JSON.stringify(
    PostV1IncidentTypesImpacts$outboundSchema.parse(postV1IncidentTypesImpacts),
  );
}

export function postV1IncidentTypesImpactsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1IncidentTypesImpacts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1IncidentTypesImpacts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1IncidentTypesImpacts' from JSON`,
  );
}

/** @internal */
export const Template$inboundSchema: z.ZodType<
  Template,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  customer_impact_summary: z.string().optional(),
  labels: z.record(z.string()).optional(),
  severity: z.string().optional(),
  priority: z.string().optional(),
  tag_list: z.array(z.string()).optional(),
  runbook_ids: z.array(z.string()).optional(),
  private_incident: z.boolean().optional(),
  team_ids: z.array(z.string()).optional(),
  impacts: z.array(z.lazy(() => PostV1IncidentTypesImpacts$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_impact_summary": "customerImpactSummary",
    "tag_list": "tagList",
    "runbook_ids": "runbookIds",
    "private_incident": "privateIncident",
    "team_ids": "teamIds",
  });
});

/** @internal */
export type Template$Outbound = {
  description?: string | undefined;
  customer_impact_summary?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  severity?: string | undefined;
  priority?: string | undefined;
  tag_list?: Array<string> | undefined;
  runbook_ids?: Array<string> | undefined;
  private_incident?: boolean | undefined;
  team_ids?: Array<string> | undefined;
  impacts?: Array<PostV1IncidentTypesImpacts$Outbound> | undefined;
};

/** @internal */
export const Template$outboundSchema: z.ZodType<
  Template$Outbound,
  z.ZodTypeDef,
  Template
> = z.object({
  description: z.string().optional(),
  customerImpactSummary: z.string().optional(),
  labels: z.record(z.string()).optional(),
  severity: z.string().optional(),
  priority: z.string().optional(),
  tagList: z.array(z.string()).optional(),
  runbookIds: z.array(z.string()).optional(),
  privateIncident: z.boolean().optional(),
  teamIds: z.array(z.string()).optional(),
  impacts: z.array(z.lazy(() => PostV1IncidentTypesImpacts$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    customerImpactSummary: "customer_impact_summary",
    tagList: "tag_list",
    runbookIds: "runbook_ids",
    privateIncident: "private_incident",
    teamIds: "team_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Template$ {
  /** @deprecated use `Template$inboundSchema` instead. */
  export const inboundSchema = Template$inboundSchema;
  /** @deprecated use `Template$outboundSchema` instead. */
  export const outboundSchema = Template$outboundSchema;
  /** @deprecated use `Template$Outbound` instead. */
  export type Outbound = Template$Outbound;
}

export function templateToJSON(template: Template): string {
  return JSON.stringify(Template$outboundSchema.parse(template));
}

export function templateFromJSON(
  jsonString: string,
): SafeParseResult<Template, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Template$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Template' from JSON`,
  );
}

/** @internal */
export const PostV1IncidentTypes$inboundSchema: z.ZodType<
  PostV1IncidentTypes,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  template: z.lazy(() => Template$inboundSchema),
});

/** @internal */
export type PostV1IncidentTypes$Outbound = {
  name: string;
  template: Template$Outbound;
};

/** @internal */
export const PostV1IncidentTypes$outboundSchema: z.ZodType<
  PostV1IncidentTypes$Outbound,
  z.ZodTypeDef,
  PostV1IncidentTypes
> = z.object({
  name: z.string(),
  template: z.lazy(() => Template$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentTypes$ {
  /** @deprecated use `PostV1IncidentTypes$inboundSchema` instead. */
  export const inboundSchema = PostV1IncidentTypes$inboundSchema;
  /** @deprecated use `PostV1IncidentTypes$outboundSchema` instead. */
  export const outboundSchema = PostV1IncidentTypes$outboundSchema;
  /** @deprecated use `PostV1IncidentTypes$Outbound` instead. */
  export type Outbound = PostV1IncidentTypes$Outbound;
}

export function postV1IncidentTypesToJSON(
  postV1IncidentTypes: PostV1IncidentTypes,
): string {
  return JSON.stringify(
    PostV1IncidentTypes$outboundSchema.parse(postV1IncidentTypes),
  );
}

export function postV1IncidentTypesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1IncidentTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1IncidentTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1IncidentTypes' from JSON`,
  );
}
