/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * FieldMapping_MappableFieldEntity model
 */
export type FieldMappingMappableFieldEntity = {
  /**
   * The ID of the field
   */
  value?: string | undefined;
  /**
   * The human-readable name of the field
   */
  label?: string | undefined;
  /**
   * The allowed type of the field
   */
  type?: string | undefined;
  /**
   * The allowed values of the field
   */
  allowedValues?: string | undefined;
  /**
   * If the field is required to be mapped
   */
  required?: string | undefined;
  /**
   * Short, inline documentation for the present field
   */
  helpText?: string | undefined;
};

/** @internal */
export const FieldMappingMappableFieldEntity$inboundSchema: z.ZodType<
  FieldMappingMappableFieldEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  label: z.string().optional(),
  type: z.string().optional(),
  allowed_values: z.string().optional(),
  required: z.string().optional(),
  help_text: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_values": "allowedValues",
    "help_text": "helpText",
  });
});

/** @internal */
export type FieldMappingMappableFieldEntity$Outbound = {
  value?: string | undefined;
  label?: string | undefined;
  type?: string | undefined;
  allowed_values?: string | undefined;
  required?: string | undefined;
  help_text?: string | undefined;
};

/** @internal */
export const FieldMappingMappableFieldEntity$outboundSchema: z.ZodType<
  FieldMappingMappableFieldEntity$Outbound,
  z.ZodTypeDef,
  FieldMappingMappableFieldEntity
> = z.object({
  value: z.string().optional(),
  label: z.string().optional(),
  type: z.string().optional(),
  allowedValues: z.string().optional(),
  required: z.string().optional(),
  helpText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allowedValues: "allowed_values",
    helpText: "help_text",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMappingMappableFieldEntity$ {
  /** @deprecated use `FieldMappingMappableFieldEntity$inboundSchema` instead. */
  export const inboundSchema = FieldMappingMappableFieldEntity$inboundSchema;
  /** @deprecated use `FieldMappingMappableFieldEntity$outboundSchema` instead. */
  export const outboundSchema = FieldMappingMappableFieldEntity$outboundSchema;
  /** @deprecated use `FieldMappingMappableFieldEntity$Outbound` instead. */
  export type Outbound = FieldMappingMappableFieldEntity$Outbound;
}

export function fieldMappingMappableFieldEntityToJSON(
  fieldMappingMappableFieldEntity: FieldMappingMappableFieldEntity,
): string {
  return JSON.stringify(
    FieldMappingMappableFieldEntity$outboundSchema.parse(
      fieldMappingMappableFieldEntity,
    ),
  );
}

export function fieldMappingMappableFieldEntityFromJSON(
  jsonString: string,
): SafeParseResult<FieldMappingMappableFieldEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMappingMappableFieldEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMappingMappableFieldEntity' from JSON`,
  );
}
