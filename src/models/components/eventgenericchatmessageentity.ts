/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Event_GenericChatMessageEntity model
 */
export type EventGenericChatMessageEntity = {
  id?: string | null | undefined;
  body?: string | null | undefined;
  createdAt?: Date | null | undefined;
};

/** @internal */
export const EventGenericChatMessageEntity$inboundSchema: z.ZodType<
  EventGenericChatMessageEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type EventGenericChatMessageEntity$Outbound = {
  id?: string | null | undefined;
  body?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const EventGenericChatMessageEntity$outboundSchema: z.ZodType<
  EventGenericChatMessageEntity$Outbound,
  z.ZodTypeDef,
  EventGenericChatMessageEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventGenericChatMessageEntity$ {
  /** @deprecated use `EventGenericChatMessageEntity$inboundSchema` instead. */
  export const inboundSchema = EventGenericChatMessageEntity$inboundSchema;
  /** @deprecated use `EventGenericChatMessageEntity$outboundSchema` instead. */
  export const outboundSchema = EventGenericChatMessageEntity$outboundSchema;
  /** @deprecated use `EventGenericChatMessageEntity$Outbound` instead. */
  export type Outbound = EventGenericChatMessageEntity$Outbound;
}

export function eventGenericChatMessageEntityToJSON(
  eventGenericChatMessageEntity: EventGenericChatMessageEntity,
): string {
  return JSON.stringify(
    EventGenericChatMessageEntity$outboundSchema.parse(
      eventGenericChatMessageEntity,
    ),
  );
}

export function eventGenericChatMessageEntityFromJSON(
  jsonString: string,
): SafeParseResult<EventGenericChatMessageEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventGenericChatMessageEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventGenericChatMessageEntity' from JSON`,
  );
}
