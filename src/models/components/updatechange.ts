/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a change entry
 */
export type UpdateChange = {
  summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const UpdateChange$inboundSchema: z.ZodType<
  UpdateChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type UpdateChange$Outbound = {
  summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const UpdateChange$outboundSchema: z.ZodType<
  UpdateChange$Outbound,
  z.ZodTypeDef,
  UpdateChange
> = z.object({
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChange$ {
  /** @deprecated use `UpdateChange$inboundSchema` instead. */
  export const inboundSchema = UpdateChange$inboundSchema;
  /** @deprecated use `UpdateChange$outboundSchema` instead. */
  export const outboundSchema = UpdateChange$outboundSchema;
  /** @deprecated use `UpdateChange$Outbound` instead. */
  export type Outbound = UpdateChange$Outbound;
}

export function updateChangeToJSON(updateChange: UpdateChange): string {
  return JSON.stringify(UpdateChange$outboundSchema.parse(updateChange));
}

export function updateChangeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChange' from JSON`,
  );
}
