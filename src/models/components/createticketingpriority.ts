/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a single ticketing priority
 */
export type CreateTicketingPriority = {
  name: string;
  /**
   * The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, that priority and all priorities following it will automatically be moved down the list to make room for the new priority.
   */
  position?: number | null | undefined;
};

/** @internal */
export const CreateTicketingPriority$inboundSchema: z.ZodType<
  CreateTicketingPriority,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  position: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type CreateTicketingPriority$Outbound = {
  name: string;
  position?: number | null | undefined;
};

/** @internal */
export const CreateTicketingPriority$outboundSchema: z.ZodType<
  CreateTicketingPriority$Outbound,
  z.ZodTypeDef,
  CreateTicketingPriority
> = z.object({
  name: z.string(),
  position: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketingPriority$ {
  /** @deprecated use `CreateTicketingPriority$inboundSchema` instead. */
  export const inboundSchema = CreateTicketingPriority$inboundSchema;
  /** @deprecated use `CreateTicketingPriority$outboundSchema` instead. */
  export const outboundSchema = CreateTicketingPriority$outboundSchema;
  /** @deprecated use `CreateTicketingPriority$Outbound` instead. */
  export type Outbound = CreateTicketingPriority$Outbound;
}

export function createTicketingPriorityToJSON(
  createTicketingPriority: CreateTicketingPriority,
): string {
  return JSON.stringify(
    CreateTicketingPriority$outboundSchema.parse(createTicketingPriority),
  );
}

export function createTicketingPriorityFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketingPriority, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketingPriority$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketingPriority' from JSON`,
  );
}
