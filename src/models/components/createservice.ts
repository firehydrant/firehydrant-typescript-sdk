/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.
 */
export const CreateServiceServiceTier = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
} as const;
/**
 * Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.
 */
export type CreateServiceServiceTier = ClosedEnum<
  typeof CreateServiceServiceTier
>;

export type CreateServiceFunctionality = {
  /**
   * If you are trying to create a new functionality and attach it to this service, set the summary key
   */
  summary?: string | null | undefined;
  /**
   * If you are trying to reuse a functionality, you may set the ID to attach it to the service
   */
  id?: string | null | undefined;
};

export type CreateServiceLink = {
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | null | undefined;
};

/**
 * An object representing a Team that owns the service
 */
export type CreateServiceOwner = {
  id: string;
};

export type CreateServiceTeam = {
  id: string;
};

export type CreateServiceExternalResource = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | null | undefined;
};

/**
 * Creates a service for the organization, you may also create or attach functionalities to the service on create.
 */
export type CreateService = {
  name: string;
  description?: string | null | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
  /**
   * Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.
   */
  serviceTier?: CreateServiceServiceTier | null | undefined;
  /**
   * An array of functionalities
   */
  functionalities?: Array<CreateServiceFunctionality> | null | undefined;
  /**
   * An array of links to associate with this service
   */
  links?: Array<CreateServiceLink> | null | undefined;
  /**
   * An object representing a Team that owns the service
   */
  owner?: CreateServiceOwner | null | undefined;
  /**
   * An array of teams to attach to this service.
   */
  teams?: Array<CreateServiceTeam> | null | undefined;
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?: Array<CreateServiceExternalResource> | null | undefined;
};

/** @internal */
export const CreateServiceServiceTier$inboundSchema: z.ZodNativeEnum<
  typeof CreateServiceServiceTier
> = z.nativeEnum(CreateServiceServiceTier);

/** @internal */
export const CreateServiceServiceTier$outboundSchema: z.ZodNativeEnum<
  typeof CreateServiceServiceTier
> = CreateServiceServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceServiceTier$ {
  /** @deprecated use `CreateServiceServiceTier$inboundSchema` instead. */
  export const inboundSchema = CreateServiceServiceTier$inboundSchema;
  /** @deprecated use `CreateServiceServiceTier$outboundSchema` instead. */
  export const outboundSchema = CreateServiceServiceTier$outboundSchema;
}

/** @internal */
export const CreateServiceFunctionality$inboundSchema: z.ZodType<
  CreateServiceFunctionality,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateServiceFunctionality$Outbound = {
  summary?: string | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const CreateServiceFunctionality$outboundSchema: z.ZodType<
  CreateServiceFunctionality$Outbound,
  z.ZodTypeDef,
  CreateServiceFunctionality
> = z.object({
  summary: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceFunctionality$ {
  /** @deprecated use `CreateServiceFunctionality$inboundSchema` instead. */
  export const inboundSchema = CreateServiceFunctionality$inboundSchema;
  /** @deprecated use `CreateServiceFunctionality$outboundSchema` instead. */
  export const outboundSchema = CreateServiceFunctionality$outboundSchema;
  /** @deprecated use `CreateServiceFunctionality$Outbound` instead. */
  export type Outbound = CreateServiceFunctionality$Outbound;
}

export function createServiceFunctionalityToJSON(
  createServiceFunctionality: CreateServiceFunctionality,
): string {
  return JSON.stringify(
    CreateServiceFunctionality$outboundSchema.parse(createServiceFunctionality),
  );
}

export function createServiceFunctionalityFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceFunctionality, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceFunctionality$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceFunctionality' from JSON`,
  );
}

/** @internal */
export const CreateServiceLink$inboundSchema: z.ZodType<
  CreateServiceLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  href_url: z.string(),
  icon_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type CreateServiceLink$Outbound = {
  name: string;
  href_url: string;
  icon_url?: string | null | undefined;
};

/** @internal */
export const CreateServiceLink$outboundSchema: z.ZodType<
  CreateServiceLink$Outbound,
  z.ZodTypeDef,
  CreateServiceLink
> = z.object({
  name: z.string(),
  hrefUrl: z.string(),
  iconUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceLink$ {
  /** @deprecated use `CreateServiceLink$inboundSchema` instead. */
  export const inboundSchema = CreateServiceLink$inboundSchema;
  /** @deprecated use `CreateServiceLink$outboundSchema` instead. */
  export const outboundSchema = CreateServiceLink$outboundSchema;
  /** @deprecated use `CreateServiceLink$Outbound` instead. */
  export type Outbound = CreateServiceLink$Outbound;
}

export function createServiceLinkToJSON(
  createServiceLink: CreateServiceLink,
): string {
  return JSON.stringify(
    CreateServiceLink$outboundSchema.parse(createServiceLink),
  );
}

export function createServiceLinkFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceLink' from JSON`,
  );
}

/** @internal */
export const CreateServiceOwner$inboundSchema: z.ZodType<
  CreateServiceOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateServiceOwner$Outbound = {
  id: string;
};

/** @internal */
export const CreateServiceOwner$outboundSchema: z.ZodType<
  CreateServiceOwner$Outbound,
  z.ZodTypeDef,
  CreateServiceOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceOwner$ {
  /** @deprecated use `CreateServiceOwner$inboundSchema` instead. */
  export const inboundSchema = CreateServiceOwner$inboundSchema;
  /** @deprecated use `CreateServiceOwner$outboundSchema` instead. */
  export const outboundSchema = CreateServiceOwner$outboundSchema;
  /** @deprecated use `CreateServiceOwner$Outbound` instead. */
  export type Outbound = CreateServiceOwner$Outbound;
}

export function createServiceOwnerToJSON(
  createServiceOwner: CreateServiceOwner,
): string {
  return JSON.stringify(
    CreateServiceOwner$outboundSchema.parse(createServiceOwner),
  );
}

export function createServiceOwnerFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceOwner' from JSON`,
  );
}

/** @internal */
export const CreateServiceTeam$inboundSchema: z.ZodType<
  CreateServiceTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateServiceTeam$Outbound = {
  id: string;
};

/** @internal */
export const CreateServiceTeam$outboundSchema: z.ZodType<
  CreateServiceTeam$Outbound,
  z.ZodTypeDef,
  CreateServiceTeam
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceTeam$ {
  /** @deprecated use `CreateServiceTeam$inboundSchema` instead. */
  export const inboundSchema = CreateServiceTeam$inboundSchema;
  /** @deprecated use `CreateServiceTeam$outboundSchema` instead. */
  export const outboundSchema = CreateServiceTeam$outboundSchema;
  /** @deprecated use `CreateServiceTeam$Outbound` instead. */
  export type Outbound = CreateServiceTeam$Outbound;
}

export function createServiceTeamToJSON(
  createServiceTeam: CreateServiceTeam,
): string {
  return JSON.stringify(
    CreateServiceTeam$outboundSchema.parse(createServiceTeam),
  );
}

export function createServiceTeamFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceTeam' from JSON`,
  );
}

/** @internal */
export const CreateServiceExternalResource$inboundSchema: z.ZodType<
  CreateServiceExternalResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.string(),
  connection_type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type CreateServiceExternalResource$Outbound = {
  remote_id: string;
  connection_type?: string | null | undefined;
};

/** @internal */
export const CreateServiceExternalResource$outboundSchema: z.ZodType<
  CreateServiceExternalResource$Outbound,
  z.ZodTypeDef,
  CreateServiceExternalResource
> = z.object({
  remoteId: z.string(),
  connectionType: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    connectionType: "connection_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateServiceExternalResource$ {
  /** @deprecated use `CreateServiceExternalResource$inboundSchema` instead. */
  export const inboundSchema = CreateServiceExternalResource$inboundSchema;
  /** @deprecated use `CreateServiceExternalResource$outboundSchema` instead. */
  export const outboundSchema = CreateServiceExternalResource$outboundSchema;
  /** @deprecated use `CreateServiceExternalResource$Outbound` instead. */
  export type Outbound = CreateServiceExternalResource$Outbound;
}

export function createServiceExternalResourceToJSON(
  createServiceExternalResource: CreateServiceExternalResource,
): string {
  return JSON.stringify(
    CreateServiceExternalResource$outboundSchema.parse(
      createServiceExternalResource,
    ),
  );
}

export function createServiceExternalResourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateServiceExternalResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateServiceExternalResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateServiceExternalResource' from JSON`,
  );
}

/** @internal */
export const CreateService$inboundSchema: z.ZodType<
  CreateService,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  service_tier: z.nullable(CreateServiceServiceTier$inboundSchema).optional(),
  functionalities: z.nullable(
    z.array(z.lazy(() => CreateServiceFunctionality$inboundSchema)),
  ).optional(),
  links: z.nullable(z.array(z.lazy(() => CreateServiceLink$inboundSchema)))
    .optional(),
  owner: z.nullable(z.lazy(() => CreateServiceOwner$inboundSchema)).optional(),
  teams: z.nullable(z.array(z.lazy(() => CreateServiceTeam$inboundSchema)))
    .optional(),
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  external_resources: z.nullable(
    z.array(z.lazy(() => CreateServiceExternalResource$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_tier": "serviceTier",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "external_resources": "externalResources",
  });
});

/** @internal */
export type CreateService$Outbound = {
  name: string;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  service_tier?: number | null | undefined;
  functionalities?:
    | Array<CreateServiceFunctionality$Outbound>
    | null
    | undefined;
  links?: Array<CreateServiceLink$Outbound> | null | undefined;
  owner?: CreateServiceOwner$Outbound | null | undefined;
  teams?: Array<CreateServiceTeam$Outbound> | null | undefined;
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  external_resources?:
    | Array<CreateServiceExternalResource$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateService$outboundSchema: z.ZodType<
  CreateService$Outbound,
  z.ZodTypeDef,
  CreateService
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  serviceTier: z.nullable(CreateServiceServiceTier$outboundSchema).optional(),
  functionalities: z.nullable(
    z.array(z.lazy(() => CreateServiceFunctionality$outboundSchema)),
  ).optional(),
  links: z.nullable(z.array(z.lazy(() => CreateServiceLink$outboundSchema)))
    .optional(),
  owner: z.nullable(z.lazy(() => CreateServiceOwner$outboundSchema)).optional(),
  teams: z.nullable(z.array(z.lazy(() => CreateServiceTeam$outboundSchema)))
    .optional(),
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  externalResources: z.nullable(
    z.array(z.lazy(() => CreateServiceExternalResource$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceTier: "service_tier",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    externalResources: "external_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateService$ {
  /** @deprecated use `CreateService$inboundSchema` instead. */
  export const inboundSchema = CreateService$inboundSchema;
  /** @deprecated use `CreateService$outboundSchema` instead. */
  export const outboundSchema = CreateService$outboundSchema;
  /** @deprecated use `CreateService$Outbound` instead. */
  export type Outbound = CreateService$Outbound;
}

export function createServiceToJSON(createService: CreateService): string {
  return JSON.stringify(CreateService$outboundSchema.parse(createService));
}

export function createServiceFromJSON(
  jsonString: string,
): SafeParseResult<CreateService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateService' from JSON`,
  );
}
