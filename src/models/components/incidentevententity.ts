/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsAPIEntitiesReference,
  ConversationsAPIEntitiesReference$inboundSchema,
  ConversationsAPIEntitiesReference$Outbound,
  ConversationsAPIEntitiesReference$outboundSchema,
} from "./conversationsapientitiesreference.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableVotesEntity,
  NullableVotesEntity$inboundSchema,
  NullableVotesEntity$Outbound,
  NullableVotesEntity$outboundSchema,
} from "./nullablevotesentity.js";

/**
 * Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity
 */
export type IncidentEventEntityData = {};

export const IncidentEventEntityVisibility = {
  PrivateToOrg: "private_to_org",
  OpenToPublic: "open_to_public",
  InternalStatusPage: "internal_status_page",
} as const;
export type IncidentEventEntityVisibility = ClosedEnum<
  typeof IncidentEventEntityVisibility
>;

/**
 * IncidentEventEntity model
 */
export type IncidentEventEntity = {
  id?: string | null | undefined;
  incidentId?: string | null | undefined;
  type?: string | null | undefined;
  context?: string | null | undefined;
  /**
   * Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity
   */
  data?: IncidentEventEntityData | null | undefined;
  occurredAt?: Date | null | undefined;
  visibility?: IncidentEventEntityVisibility | null | undefined;
  author?: NullableAuthorEntity | null | undefined;
  votes?: NullableVotesEntity | null | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference> | null | undefined;
};

/** @internal */
export const IncidentEventEntityData$inboundSchema: z.ZodType<
  IncidentEventEntityData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IncidentEventEntityData$Outbound = {};

/** @internal */
export const IncidentEventEntityData$outboundSchema: z.ZodType<
  IncidentEventEntityData$Outbound,
  z.ZodTypeDef,
  IncidentEventEntityData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentEventEntityData$ {
  /** @deprecated use `IncidentEventEntityData$inboundSchema` instead. */
  export const inboundSchema = IncidentEventEntityData$inboundSchema;
  /** @deprecated use `IncidentEventEntityData$outboundSchema` instead. */
  export const outboundSchema = IncidentEventEntityData$outboundSchema;
  /** @deprecated use `IncidentEventEntityData$Outbound` instead. */
  export type Outbound = IncidentEventEntityData$Outbound;
}

export function incidentEventEntityDataToJSON(
  incidentEventEntityData: IncidentEventEntityData,
): string {
  return JSON.stringify(
    IncidentEventEntityData$outboundSchema.parse(incidentEventEntityData),
  );
}

export function incidentEventEntityDataFromJSON(
  jsonString: string,
): SafeParseResult<IncidentEventEntityData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentEventEntityData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentEventEntityData' from JSON`,
  );
}

/** @internal */
export const IncidentEventEntityVisibility$inboundSchema: z.ZodNativeEnum<
  typeof IncidentEventEntityVisibility
> = z.nativeEnum(IncidentEventEntityVisibility);

/** @internal */
export const IncidentEventEntityVisibility$outboundSchema: z.ZodNativeEnum<
  typeof IncidentEventEntityVisibility
> = IncidentEventEntityVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentEventEntityVisibility$ {
  /** @deprecated use `IncidentEventEntityVisibility$inboundSchema` instead. */
  export const inboundSchema = IncidentEventEntityVisibility$inboundSchema;
  /** @deprecated use `IncidentEventEntityVisibility$outboundSchema` instead. */
  export const outboundSchema = IncidentEventEntityVisibility$outboundSchema;
}

/** @internal */
export const IncidentEventEntity$inboundSchema: z.ZodType<
  IncidentEventEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  incident_id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  context: z.nullable(z.string()).optional(),
  data: z.nullable(z.lazy(() => IncidentEventEntityData$inboundSchema))
    .optional(),
  occurred_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  visibility: z.nullable(IncidentEventEntityVisibility$inboundSchema)
    .optional(),
  author: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  votes: z.nullable(NullableVotesEntity$inboundSchema).optional(),
  conversations: z.nullable(
    z.array(ConversationsAPIEntitiesReference$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "occurred_at": "occurredAt",
  });
});

/** @internal */
export type IncidentEventEntity$Outbound = {
  id?: string | null | undefined;
  incident_id?: string | null | undefined;
  type?: string | null | undefined;
  context?: string | null | undefined;
  data?: IncidentEventEntityData$Outbound | null | undefined;
  occurred_at?: string | null | undefined;
  visibility?: string | null | undefined;
  author?: NullableAuthorEntity$Outbound | null | undefined;
  votes?: NullableVotesEntity$Outbound | null | undefined;
  conversations?:
    | Array<ConversationsAPIEntitiesReference$Outbound>
    | null
    | undefined;
};

/** @internal */
export const IncidentEventEntity$outboundSchema: z.ZodType<
  IncidentEventEntity$Outbound,
  z.ZodTypeDef,
  IncidentEventEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  incidentId: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  context: z.nullable(z.string()).optional(),
  data: z.nullable(z.lazy(() => IncidentEventEntityData$outboundSchema))
    .optional(),
  occurredAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  visibility: z.nullable(IncidentEventEntityVisibility$outboundSchema)
    .optional(),
  author: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  votes: z.nullable(NullableVotesEntity$outboundSchema).optional(),
  conversations: z.nullable(
    z.array(ConversationsAPIEntitiesReference$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    occurredAt: "occurred_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentEventEntity$ {
  /** @deprecated use `IncidentEventEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentEventEntity$inboundSchema;
  /** @deprecated use `IncidentEventEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentEventEntity$outboundSchema;
  /** @deprecated use `IncidentEventEntity$Outbound` instead. */
  export type Outbound = IncidentEventEntity$Outbound;
}

export function incidentEventEntityToJSON(
  incidentEventEntity: IncidentEventEntity,
): string {
  return JSON.stringify(
    IncidentEventEntity$outboundSchema.parse(incidentEventEntity),
  );
}

export function incidentEventEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentEventEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentEventEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentEventEntity' from JSON`,
  );
}
