/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsAPIEntitiesReference,
  ConversationsAPIEntitiesReference$inboundSchema,
  ConversationsAPIEntitiesReference$Outbound,
  ConversationsAPIEntitiesReference$outboundSchema,
} from "./conversationsapientitiesreference.js";
import {
  IncidentsStatusPageEntity,
  IncidentsStatusPageEntity$inboundSchema,
  IncidentsStatusPageEntity$Outbound,
  IncidentsStatusPageEntity$outboundSchema,
} from "./incidentsstatuspageentity.js";

/**
 * Event_NoteEntity model
 */
export type EventNoteEntity = {
  id?: string | undefined;
  body?: string | undefined;
  createdAt?: Date | undefined;
  statusPages?: Array<IncidentsStatusPageEntity> | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference> | undefined;
};

/** @internal */
export const EventNoteEntity$inboundSchema: z.ZodType<
  EventNoteEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  body: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  status_pages: z.array(IncidentsStatusPageEntity$inboundSchema).optional(),
  conversations: z.array(ConversationsAPIEntitiesReference$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "status_pages": "statusPages",
  });
});

/** @internal */
export type EventNoteEntity$Outbound = {
  id?: string | undefined;
  body?: string | undefined;
  created_at?: string | undefined;
  status_pages?: Array<IncidentsStatusPageEntity$Outbound> | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference$Outbound> | undefined;
};

/** @internal */
export const EventNoteEntity$outboundSchema: z.ZodType<
  EventNoteEntity$Outbound,
  z.ZodTypeDef,
  EventNoteEntity
> = z.object({
  id: z.string().optional(),
  body: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  statusPages: z.array(IncidentsStatusPageEntity$outboundSchema).optional(),
  conversations: z.array(ConversationsAPIEntitiesReference$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventNoteEntity$ {
  /** @deprecated use `EventNoteEntity$inboundSchema` instead. */
  export const inboundSchema = EventNoteEntity$inboundSchema;
  /** @deprecated use `EventNoteEntity$outboundSchema` instead. */
  export const outboundSchema = EventNoteEntity$outboundSchema;
  /** @deprecated use `EventNoteEntity$Outbound` instead. */
  export type Outbound = EventNoteEntity$Outbound;
}

export function eventNoteEntityToJSON(
  eventNoteEntity: EventNoteEntity,
): string {
  return JSON.stringify(EventNoteEntity$outboundSchema.parse(eventNoteEntity));
}

export function eventNoteEntityFromJSON(
  jsonString: string,
): SafeParseResult<EventNoteEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventNoteEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventNoteEntity' from JSON`,
  );
}
