/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Updates the body of a note
 */
export type PatchV1IncidentsIncidentIdNotesNoteId = {
  body: string;
};

/** @internal */
export const PatchV1IncidentsIncidentIdNotesNoteId$inboundSchema: z.ZodType<
  PatchV1IncidentsIncidentIdNotesNoteId,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string(),
});

/** @internal */
export type PatchV1IncidentsIncidentIdNotesNoteId$Outbound = {
  body: string;
};

/** @internal */
export const PatchV1IncidentsIncidentIdNotesNoteId$outboundSchema: z.ZodType<
  PatchV1IncidentsIncidentIdNotesNoteId$Outbound,
  z.ZodTypeDef,
  PatchV1IncidentsIncidentIdNotesNoteId
> = z.object({
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentsIncidentIdNotesNoteId$ {
  /** @deprecated use `PatchV1IncidentsIncidentIdNotesNoteId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1IncidentsIncidentIdNotesNoteId$inboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdNotesNoteId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1IncidentsIncidentIdNotesNoteId$outboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdNotesNoteId$Outbound` instead. */
  export type Outbound = PatchV1IncidentsIncidentIdNotesNoteId$Outbound;
}

export function patchV1IncidentsIncidentIdNotesNoteIdToJSON(
  patchV1IncidentsIncidentIdNotesNoteId: PatchV1IncidentsIncidentIdNotesNoteId,
): string {
  return JSON.stringify(
    PatchV1IncidentsIncidentIdNotesNoteId$outboundSchema.parse(
      patchV1IncidentsIncidentIdNotesNoteId,
    ),
  );
}

export function patchV1IncidentsIncidentIdNotesNoteIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1IncidentsIncidentIdNotesNoteId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1IncidentsIncidentIdNotesNoteId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1IncidentsIncidentIdNotesNoteId' from JSON`,
  );
}
