/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A config object containing details about the project config. Can be one of: Ticketing::JiraCloud::ProjectConfigEntity, Ticketing::JiraOnprem::ProjectConfigEntity, or Ticketing::Shortcut::ProjectConfigEntity
 */
export type NullableTicketingProjectConfigEntityDetails = {};

/**
 * Ticketing_ProjectConfigEntity model
 */
export type NullableTicketingProjectConfigEntity = {
  id?: string | null | undefined;
  connectionId?: string | null | undefined;
  connectionType?: string | null | undefined;
  ticketingProjectId?: string | null | undefined;
  ticketingProjectName?: string | null | undefined;
  /**
   * A config object containing details about the project config. Can be one of: Ticketing::JiraCloud::ProjectConfigEntity, Ticketing::JiraOnprem::ProjectConfigEntity, or Ticketing::Shortcut::ProjectConfigEntity
   */
  details?: NullableTicketingProjectConfigEntityDetails | null | undefined;
};

/** @internal */
export const NullableTicketingProjectConfigEntityDetails$inboundSchema:
  z.ZodType<
    NullableTicketingProjectConfigEntityDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type NullableTicketingProjectConfigEntityDetails$Outbound = {};

/** @internal */
export const NullableTicketingProjectConfigEntityDetails$outboundSchema:
  z.ZodType<
    NullableTicketingProjectConfigEntityDetails$Outbound,
    z.ZodTypeDef,
    NullableTicketingProjectConfigEntityDetails
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableTicketingProjectConfigEntityDetails$ {
  /** @deprecated use `NullableTicketingProjectConfigEntityDetails$inboundSchema` instead. */
  export const inboundSchema =
    NullableTicketingProjectConfigEntityDetails$inboundSchema;
  /** @deprecated use `NullableTicketingProjectConfigEntityDetails$outboundSchema` instead. */
  export const outboundSchema =
    NullableTicketingProjectConfigEntityDetails$outboundSchema;
  /** @deprecated use `NullableTicketingProjectConfigEntityDetails$Outbound` instead. */
  export type Outbound = NullableTicketingProjectConfigEntityDetails$Outbound;
}

export function nullableTicketingProjectConfigEntityDetailsToJSON(
  nullableTicketingProjectConfigEntityDetails:
    NullableTicketingProjectConfigEntityDetails,
): string {
  return JSON.stringify(
    NullableTicketingProjectConfigEntityDetails$outboundSchema.parse(
      nullableTicketingProjectConfigEntityDetails,
    ),
  );
}

export function nullableTicketingProjectConfigEntityDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableTicketingProjectConfigEntityDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableTicketingProjectConfigEntityDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableTicketingProjectConfigEntityDetails' from JSON`,
  );
}

/** @internal */
export const NullableTicketingProjectConfigEntity$inboundSchema: z.ZodType<
  NullableTicketingProjectConfigEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  connection_type: z.nullable(z.string()).optional(),
  ticketing_project_id: z.nullable(z.string()).optional(),
  ticketing_project_name: z.nullable(z.string()).optional(),
  details: z.nullable(
    z.lazy(() => NullableTicketingProjectConfigEntityDetails$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "connection_type": "connectionType",
    "ticketing_project_id": "ticketingProjectId",
    "ticketing_project_name": "ticketingProjectName",
  });
});

/** @internal */
export type NullableTicketingProjectConfigEntity$Outbound = {
  id?: string | null | undefined;
  connection_id?: string | null | undefined;
  connection_type?: string | null | undefined;
  ticketing_project_id?: string | null | undefined;
  ticketing_project_name?: string | null | undefined;
  details?:
    | NullableTicketingProjectConfigEntityDetails$Outbound
    | null
    | undefined;
};

/** @internal */
export const NullableTicketingProjectConfigEntity$outboundSchema: z.ZodType<
  NullableTicketingProjectConfigEntity$Outbound,
  z.ZodTypeDef,
  NullableTicketingProjectConfigEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  connectionType: z.nullable(z.string()).optional(),
  ticketingProjectId: z.nullable(z.string()).optional(),
  ticketingProjectName: z.nullable(z.string()).optional(),
  details: z.nullable(
    z.lazy(() => NullableTicketingProjectConfigEntityDetails$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    connectionType: "connection_type",
    ticketingProjectId: "ticketing_project_id",
    ticketingProjectName: "ticketing_project_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableTicketingProjectConfigEntity$ {
  /** @deprecated use `NullableTicketingProjectConfigEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableTicketingProjectConfigEntity$inboundSchema;
  /** @deprecated use `NullableTicketingProjectConfigEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableTicketingProjectConfigEntity$outboundSchema;
  /** @deprecated use `NullableTicketingProjectConfigEntity$Outbound` instead. */
  export type Outbound = NullableTicketingProjectConfigEntity$Outbound;
}

export function nullableTicketingProjectConfigEntityToJSON(
  nullableTicketingProjectConfigEntity: NullableTicketingProjectConfigEntity,
): string {
  return JSON.stringify(
    NullableTicketingProjectConfigEntity$outboundSchema.parse(
      nullableTicketingProjectConfigEntity,
    ),
  );
}

export function nullableTicketingProjectConfigEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableTicketingProjectConfigEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableTicketingProjectConfigEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableTicketingProjectConfigEntity' from JSON`,
  );
}
