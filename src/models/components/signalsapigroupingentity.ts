/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableSignalsAPIGroupingEntityActionEntity,
  NullableSignalsAPIGroupingEntityActionEntity$inboundSchema,
  NullableSignalsAPIGroupingEntityActionEntity$Outbound,
  NullableSignalsAPIGroupingEntityActionEntity$outboundSchema,
} from "./nullablesignalsapigroupingentityactionentity.js";
import {
  NullableSignalsAPIGroupingEntityStrategyEntity,
  NullableSignalsAPIGroupingEntityStrategyEntity$inboundSchema,
  NullableSignalsAPIGroupingEntityStrategyEntity$Outbound,
  NullableSignalsAPIGroupingEntityStrategyEntity$outboundSchema,
} from "./nullablesignalsapigroupingentitystrategyentity.js";

/**
 * Signals_API_GroupingEntity model
 */
export type SignalsAPIGroupingEntity = {
  id?: string | null | undefined;
  strategy?: NullableSignalsAPIGroupingEntityStrategyEntity | null | undefined;
  action?: NullableSignalsAPIGroupingEntityActionEntity | null | undefined;
  referenceAlertTimePeriod?: string | null | undefined;
};

/** @internal */
export const SignalsAPIGroupingEntity$inboundSchema: z.ZodType<
  SignalsAPIGroupingEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  strategy: z.nullable(
    NullableSignalsAPIGroupingEntityStrategyEntity$inboundSchema,
  ).optional(),
  action: z.nullable(NullableSignalsAPIGroupingEntityActionEntity$inboundSchema)
    .optional(),
  reference_alert_time_period: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "reference_alert_time_period": "referenceAlertTimePeriod",
  });
});

/** @internal */
export type SignalsAPIGroupingEntity$Outbound = {
  id?: string | null | undefined;
  strategy?:
    | NullableSignalsAPIGroupingEntityStrategyEntity$Outbound
    | null
    | undefined;
  action?:
    | NullableSignalsAPIGroupingEntityActionEntity$Outbound
    | null
    | undefined;
  reference_alert_time_period?: string | null | undefined;
};

/** @internal */
export const SignalsAPIGroupingEntity$outboundSchema: z.ZodType<
  SignalsAPIGroupingEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIGroupingEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  strategy: z.nullable(
    NullableSignalsAPIGroupingEntityStrategyEntity$outboundSchema,
  ).optional(),
  action: z.nullable(
    NullableSignalsAPIGroupingEntityActionEntity$outboundSchema,
  ).optional(),
  referenceAlertTimePeriod: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    referenceAlertTimePeriod: "reference_alert_time_period",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIGroupingEntity$ {
  /** @deprecated use `SignalsAPIGroupingEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPIGroupingEntity$inboundSchema;
  /** @deprecated use `SignalsAPIGroupingEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPIGroupingEntity$outboundSchema;
  /** @deprecated use `SignalsAPIGroupingEntity$Outbound` instead. */
  export type Outbound = SignalsAPIGroupingEntity$Outbound;
}

export function signalsAPIGroupingEntityToJSON(
  signalsAPIGroupingEntity: SignalsAPIGroupingEntity,
): string {
  return JSON.stringify(
    SignalsAPIGroupingEntity$outboundSchema.parse(signalsAPIGroupingEntity),
  );
}

export function signalsAPIGroupingEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIGroupingEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPIGroupingEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIGroupingEntity' from JSON`,
  );
}
