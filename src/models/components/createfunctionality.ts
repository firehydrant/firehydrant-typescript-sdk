/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFunctionalityService = {
  /**
   * ID of a service
   */
  id: string;
};

export type CreateFunctionalityExternalResource = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | null | undefined;
};

export type CreateFunctionalityLink = {
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | null | undefined;
};

/**
 * An object representing a Team that owns the service
 */
export type CreateFunctionalityOwner = {
  id: string;
};

export type CreateFunctionalityTeam = {
  id: string;
};

/**
 * Creates a functionality for the organization
 */
export type CreateFunctionality = {
  name: string;
  description?: string | null | undefined;
  services?: Array<CreateFunctionalityService> | null | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?:
    | Array<CreateFunctionalityExternalResource>
    | null
    | undefined;
  /**
   * An array of links to associate with this service
   */
  links?: Array<CreateFunctionalityLink> | null | undefined;
  /**
   * An object representing a Team that owns the service
   */
  owner?: CreateFunctionalityOwner | null | undefined;
  /**
   * An array of teams to attach to this service.
   */
  teams?: Array<CreateFunctionalityTeam> | null | undefined;
};

/** @internal */
export const CreateFunctionalityService$inboundSchema: z.ZodType<
  CreateFunctionalityService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateFunctionalityService$Outbound = {
  id: string;
};

/** @internal */
export const CreateFunctionalityService$outboundSchema: z.ZodType<
  CreateFunctionalityService$Outbound,
  z.ZodTypeDef,
  CreateFunctionalityService
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFunctionalityService$ {
  /** @deprecated use `CreateFunctionalityService$inboundSchema` instead. */
  export const inboundSchema = CreateFunctionalityService$inboundSchema;
  /** @deprecated use `CreateFunctionalityService$outboundSchema` instead. */
  export const outboundSchema = CreateFunctionalityService$outboundSchema;
  /** @deprecated use `CreateFunctionalityService$Outbound` instead. */
  export type Outbound = CreateFunctionalityService$Outbound;
}

export function createFunctionalityServiceToJSON(
  createFunctionalityService: CreateFunctionalityService,
): string {
  return JSON.stringify(
    CreateFunctionalityService$outboundSchema.parse(createFunctionalityService),
  );
}

export function createFunctionalityServiceFromJSON(
  jsonString: string,
): SafeParseResult<CreateFunctionalityService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFunctionalityService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFunctionalityService' from JSON`,
  );
}

/** @internal */
export const CreateFunctionalityExternalResource$inboundSchema: z.ZodType<
  CreateFunctionalityExternalResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.string(),
  connection_type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type CreateFunctionalityExternalResource$Outbound = {
  remote_id: string;
  connection_type?: string | null | undefined;
};

/** @internal */
export const CreateFunctionalityExternalResource$outboundSchema: z.ZodType<
  CreateFunctionalityExternalResource$Outbound,
  z.ZodTypeDef,
  CreateFunctionalityExternalResource
> = z.object({
  remoteId: z.string(),
  connectionType: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    connectionType: "connection_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFunctionalityExternalResource$ {
  /** @deprecated use `CreateFunctionalityExternalResource$inboundSchema` instead. */
  export const inboundSchema =
    CreateFunctionalityExternalResource$inboundSchema;
  /** @deprecated use `CreateFunctionalityExternalResource$outboundSchema` instead. */
  export const outboundSchema =
    CreateFunctionalityExternalResource$outboundSchema;
  /** @deprecated use `CreateFunctionalityExternalResource$Outbound` instead. */
  export type Outbound = CreateFunctionalityExternalResource$Outbound;
}

export function createFunctionalityExternalResourceToJSON(
  createFunctionalityExternalResource: CreateFunctionalityExternalResource,
): string {
  return JSON.stringify(
    CreateFunctionalityExternalResource$outboundSchema.parse(
      createFunctionalityExternalResource,
    ),
  );
}

export function createFunctionalityExternalResourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateFunctionalityExternalResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateFunctionalityExternalResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFunctionalityExternalResource' from JSON`,
  );
}

/** @internal */
export const CreateFunctionalityLink$inboundSchema: z.ZodType<
  CreateFunctionalityLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  href_url: z.string(),
  icon_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type CreateFunctionalityLink$Outbound = {
  name: string;
  href_url: string;
  icon_url?: string | null | undefined;
};

/** @internal */
export const CreateFunctionalityLink$outboundSchema: z.ZodType<
  CreateFunctionalityLink$Outbound,
  z.ZodTypeDef,
  CreateFunctionalityLink
> = z.object({
  name: z.string(),
  hrefUrl: z.string(),
  iconUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFunctionalityLink$ {
  /** @deprecated use `CreateFunctionalityLink$inboundSchema` instead. */
  export const inboundSchema = CreateFunctionalityLink$inboundSchema;
  /** @deprecated use `CreateFunctionalityLink$outboundSchema` instead. */
  export const outboundSchema = CreateFunctionalityLink$outboundSchema;
  /** @deprecated use `CreateFunctionalityLink$Outbound` instead. */
  export type Outbound = CreateFunctionalityLink$Outbound;
}

export function createFunctionalityLinkToJSON(
  createFunctionalityLink: CreateFunctionalityLink,
): string {
  return JSON.stringify(
    CreateFunctionalityLink$outboundSchema.parse(createFunctionalityLink),
  );
}

export function createFunctionalityLinkFromJSON(
  jsonString: string,
): SafeParseResult<CreateFunctionalityLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFunctionalityLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFunctionalityLink' from JSON`,
  );
}

/** @internal */
export const CreateFunctionalityOwner$inboundSchema: z.ZodType<
  CreateFunctionalityOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateFunctionalityOwner$Outbound = {
  id: string;
};

/** @internal */
export const CreateFunctionalityOwner$outboundSchema: z.ZodType<
  CreateFunctionalityOwner$Outbound,
  z.ZodTypeDef,
  CreateFunctionalityOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFunctionalityOwner$ {
  /** @deprecated use `CreateFunctionalityOwner$inboundSchema` instead. */
  export const inboundSchema = CreateFunctionalityOwner$inboundSchema;
  /** @deprecated use `CreateFunctionalityOwner$outboundSchema` instead. */
  export const outboundSchema = CreateFunctionalityOwner$outboundSchema;
  /** @deprecated use `CreateFunctionalityOwner$Outbound` instead. */
  export type Outbound = CreateFunctionalityOwner$Outbound;
}

export function createFunctionalityOwnerToJSON(
  createFunctionalityOwner: CreateFunctionalityOwner,
): string {
  return JSON.stringify(
    CreateFunctionalityOwner$outboundSchema.parse(createFunctionalityOwner),
  );
}

export function createFunctionalityOwnerFromJSON(
  jsonString: string,
): SafeParseResult<CreateFunctionalityOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFunctionalityOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFunctionalityOwner' from JSON`,
  );
}

/** @internal */
export const CreateFunctionalityTeam$inboundSchema: z.ZodType<
  CreateFunctionalityTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateFunctionalityTeam$Outbound = {
  id: string;
};

/** @internal */
export const CreateFunctionalityTeam$outboundSchema: z.ZodType<
  CreateFunctionalityTeam$Outbound,
  z.ZodTypeDef,
  CreateFunctionalityTeam
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFunctionalityTeam$ {
  /** @deprecated use `CreateFunctionalityTeam$inboundSchema` instead. */
  export const inboundSchema = CreateFunctionalityTeam$inboundSchema;
  /** @deprecated use `CreateFunctionalityTeam$outboundSchema` instead. */
  export const outboundSchema = CreateFunctionalityTeam$outboundSchema;
  /** @deprecated use `CreateFunctionalityTeam$Outbound` instead. */
  export type Outbound = CreateFunctionalityTeam$Outbound;
}

export function createFunctionalityTeamToJSON(
  createFunctionalityTeam: CreateFunctionalityTeam,
): string {
  return JSON.stringify(
    CreateFunctionalityTeam$outboundSchema.parse(createFunctionalityTeam),
  );
}

export function createFunctionalityTeamFromJSON(
  jsonString: string,
): SafeParseResult<CreateFunctionalityTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFunctionalityTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFunctionalityTeam' from JSON`,
  );
}

/** @internal */
export const CreateFunctionality$inboundSchema: z.ZodType<
  CreateFunctionality,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  services: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityService$inboundSchema)),
  ).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  external_resources: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityExternalResource$inboundSchema)),
  ).optional(),
  links: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityLink$inboundSchema)),
  ).optional(),
  owner: z.nullable(z.lazy(() => CreateFunctionalityOwner$inboundSchema))
    .optional(),
  teams: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityTeam$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "external_resources": "externalResources",
  });
});

/** @internal */
export type CreateFunctionality$Outbound = {
  name: string;
  description?: string | null | undefined;
  services?: Array<CreateFunctionalityService$Outbound> | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  external_resources?:
    | Array<CreateFunctionalityExternalResource$Outbound>
    | null
    | undefined;
  links?: Array<CreateFunctionalityLink$Outbound> | null | undefined;
  owner?: CreateFunctionalityOwner$Outbound | null | undefined;
  teams?: Array<CreateFunctionalityTeam$Outbound> | null | undefined;
};

/** @internal */
export const CreateFunctionality$outboundSchema: z.ZodType<
  CreateFunctionality$Outbound,
  z.ZodTypeDef,
  CreateFunctionality
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  services: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityService$outboundSchema)),
  ).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  externalResources: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityExternalResource$outboundSchema)),
  ).optional(),
  links: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityLink$outboundSchema)),
  ).optional(),
  owner: z.nullable(z.lazy(() => CreateFunctionalityOwner$outboundSchema))
    .optional(),
  teams: z.nullable(
    z.array(z.lazy(() => CreateFunctionalityTeam$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    externalResources: "external_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFunctionality$ {
  /** @deprecated use `CreateFunctionality$inboundSchema` instead. */
  export const inboundSchema = CreateFunctionality$inboundSchema;
  /** @deprecated use `CreateFunctionality$outboundSchema` instead. */
  export const outboundSchema = CreateFunctionality$outboundSchema;
  /** @deprecated use `CreateFunctionality$Outbound` instead. */
  export type Outbound = CreateFunctionality$Outbound;
}

export function createFunctionalityToJSON(
  createFunctionality: CreateFunctionality,
): string {
  return JSON.stringify(
    CreateFunctionality$outboundSchema.parse(createFunctionality),
  );
}

export function createFunctionalityFromJSON(
  jsonString: string,
): SafeParseResult<CreateFunctionality, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFunctionality$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFunctionality' from JSON`,
  );
}
