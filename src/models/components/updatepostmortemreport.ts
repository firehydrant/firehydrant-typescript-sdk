/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePostMortemReportQuestion = {
  /**
   * ID of a question
   */
  id?: string | null | undefined;
  /**
   * Answer to question
   */
  body?: string | null | undefined;
};

/**
 * Update a report
 */
export type UpdatePostMortemReport = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  additionalDetails?: string | null | undefined;
  questions?: Array<UpdatePostMortemReportQuestion> | null | undefined;
};

/** @internal */
export const UpdatePostMortemReportQuestion$inboundSchema: z.ZodType<
  UpdatePostMortemReportQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdatePostMortemReportQuestion$Outbound = {
  id?: string | null | undefined;
  body?: string | null | undefined;
};

/** @internal */
export const UpdatePostMortemReportQuestion$outboundSchema: z.ZodType<
  UpdatePostMortemReportQuestion$Outbound,
  z.ZodTypeDef,
  UpdatePostMortemReportQuestion
> = z.object({
  id: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostMortemReportQuestion$ {
  /** @deprecated use `UpdatePostMortemReportQuestion$inboundSchema` instead. */
  export const inboundSchema = UpdatePostMortemReportQuestion$inboundSchema;
  /** @deprecated use `UpdatePostMortemReportQuestion$outboundSchema` instead. */
  export const outboundSchema = UpdatePostMortemReportQuestion$outboundSchema;
  /** @deprecated use `UpdatePostMortemReportQuestion$Outbound` instead. */
  export type Outbound = UpdatePostMortemReportQuestion$Outbound;
}

export function updatePostMortemReportQuestionToJSON(
  updatePostMortemReportQuestion: UpdatePostMortemReportQuestion,
): string {
  return JSON.stringify(
    UpdatePostMortemReportQuestion$outboundSchema.parse(
      updatePostMortemReportQuestion,
    ),
  );
}

export function updatePostMortemReportQuestionFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostMortemReportQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostMortemReportQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostMortemReportQuestion' from JSON`,
  );
}

/** @internal */
export const UpdatePostMortemReport$inboundSchema: z.ZodType<
  UpdatePostMortemReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  additional_details: z.nullable(z.string()).optional(),
  questions: z.nullable(
    z.array(z.lazy(() => UpdatePostMortemReportQuestion$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_details": "additionalDetails",
  });
});

/** @internal */
export type UpdatePostMortemReport$Outbound = {
  name?: string | null | undefined;
  summary?: string | null | undefined;
  additional_details?: string | null | undefined;
  questions?: Array<UpdatePostMortemReportQuestion$Outbound> | null | undefined;
};

/** @internal */
export const UpdatePostMortemReport$outboundSchema: z.ZodType<
  UpdatePostMortemReport$Outbound,
  z.ZodTypeDef,
  UpdatePostMortemReport
> = z.object({
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  additionalDetails: z.nullable(z.string()).optional(),
  questions: z.nullable(
    z.array(z.lazy(() => UpdatePostMortemReportQuestion$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalDetails: "additional_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostMortemReport$ {
  /** @deprecated use `UpdatePostMortemReport$inboundSchema` instead. */
  export const inboundSchema = UpdatePostMortemReport$inboundSchema;
  /** @deprecated use `UpdatePostMortemReport$outboundSchema` instead. */
  export const outboundSchema = UpdatePostMortemReport$outboundSchema;
  /** @deprecated use `UpdatePostMortemReport$Outbound` instead. */
  export type Outbound = UpdatePostMortemReport$Outbound;
}

export function updatePostMortemReportToJSON(
  updatePostMortemReport: UpdatePostMortemReport,
): string {
  return JSON.stringify(
    UpdatePostMortemReport$outboundSchema.parse(updatePostMortemReport),
  );
}

export function updatePostMortemReportFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostMortemReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostMortemReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostMortemReport' from JSON`,
  );
}
