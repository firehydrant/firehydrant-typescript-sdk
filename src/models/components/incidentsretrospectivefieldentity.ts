/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const IncidentsRetrospectiveFieldEntityType = {
  Text: "text",
  SingleSelect: "single_select",
  MultiSelect: "multi_select",
  Numeric: "numeric",
  Datetime: "datetime",
  DynamicInputGroup: "dynamic_input_group",
  Markdown: "markdown",
  MarkdownText: "markdown_text",
} as const;
export type IncidentsRetrospectiveFieldEntityType = ClosedEnum<
  typeof IncidentsRetrospectiveFieldEntityType
>;

export type Schema = {};

/**
 * Incidents_RetrospectiveFieldEntity model
 */
export type IncidentsRetrospectiveFieldEntity = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  type?: IncidentsRetrospectiveFieldEntityType | null | undefined;
  helpText?: string | null | undefined;
  permissibleValues?: Array<string> | null | undefined;
  isRequired?: boolean | null | undefined;
  value?: string | null | undefined;
  schema?: Array<Schema> | null | undefined;
  requiredAtMilestoneId?: string | null | undefined;
};

/** @internal */
export const IncidentsRetrospectiveFieldEntityType$inboundSchema:
  z.ZodNativeEnum<typeof IncidentsRetrospectiveFieldEntityType> = z.nativeEnum(
    IncidentsRetrospectiveFieldEntityType,
  );

/** @internal */
export const IncidentsRetrospectiveFieldEntityType$outboundSchema:
  z.ZodNativeEnum<typeof IncidentsRetrospectiveFieldEntityType> =
    IncidentsRetrospectiveFieldEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRetrospectiveFieldEntityType$ {
  /** @deprecated use `IncidentsRetrospectiveFieldEntityType$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsRetrospectiveFieldEntityType$inboundSchema;
  /** @deprecated use `IncidentsRetrospectiveFieldEntityType$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsRetrospectiveFieldEntityType$outboundSchema;
}

/** @internal */
export const Schema$inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Schema$Outbound = {};

/** @internal */
export const Schema$outboundSchema: z.ZodType<
  Schema$Outbound,
  z.ZodTypeDef,
  Schema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schema$ {
  /** @deprecated use `Schema$inboundSchema` instead. */
  export const inboundSchema = Schema$inboundSchema;
  /** @deprecated use `Schema$outboundSchema` instead. */
  export const outboundSchema = Schema$outboundSchema;
  /** @deprecated use `Schema$Outbound` instead. */
  export type Outbound = Schema$Outbound;
}

export function schemaToJSON(schema: Schema): string {
  return JSON.stringify(Schema$outboundSchema.parse(schema));
}

export function schemaFromJSON(
  jsonString: string,
): SafeParseResult<Schema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schema' from JSON`,
  );
}

/** @internal */
export const IncidentsRetrospectiveFieldEntity$inboundSchema: z.ZodType<
  IncidentsRetrospectiveFieldEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.nullable(IncidentsRetrospectiveFieldEntityType$inboundSchema)
    .optional(),
  help_text: z.nullable(z.string()).optional(),
  permissible_values: z.nullable(z.array(z.string())).optional(),
  is_required: z.nullable(z.boolean()).optional(),
  value: z.nullable(z.string()).optional(),
  schema: z.nullable(z.array(z.lazy(() => Schema$inboundSchema))).optional(),
  required_at_milestone_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "help_text": "helpText",
    "permissible_values": "permissibleValues",
    "is_required": "isRequired",
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type IncidentsRetrospectiveFieldEntity$Outbound = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  type?: string | null | undefined;
  help_text?: string | null | undefined;
  permissible_values?: Array<string> | null | undefined;
  is_required?: boolean | null | undefined;
  value?: string | null | undefined;
  schema?: Array<Schema$Outbound> | null | undefined;
  required_at_milestone_id?: string | null | undefined;
};

/** @internal */
export const IncidentsRetrospectiveFieldEntity$outboundSchema: z.ZodType<
  IncidentsRetrospectiveFieldEntity$Outbound,
  z.ZodTypeDef,
  IncidentsRetrospectiveFieldEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.nullable(IncidentsRetrospectiveFieldEntityType$outboundSchema)
    .optional(),
  helpText: z.nullable(z.string()).optional(),
  permissibleValues: z.nullable(z.array(z.string())).optional(),
  isRequired: z.nullable(z.boolean()).optional(),
  value: z.nullable(z.string()).optional(),
  schema: z.nullable(z.array(z.lazy(() => Schema$outboundSchema))).optional(),
  requiredAtMilestoneId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    helpText: "help_text",
    permissibleValues: "permissible_values",
    isRequired: "is_required",
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRetrospectiveFieldEntity$ {
  /** @deprecated use `IncidentsRetrospectiveFieldEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsRetrospectiveFieldEntity$inboundSchema;
  /** @deprecated use `IncidentsRetrospectiveFieldEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsRetrospectiveFieldEntity$outboundSchema;
  /** @deprecated use `IncidentsRetrospectiveFieldEntity$Outbound` instead. */
  export type Outbound = IncidentsRetrospectiveFieldEntity$Outbound;
}

export function incidentsRetrospectiveFieldEntityToJSON(
  incidentsRetrospectiveFieldEntity: IncidentsRetrospectiveFieldEntity,
): string {
  return JSON.stringify(
    IncidentsRetrospectiveFieldEntity$outboundSchema.parse(
      incidentsRetrospectiveFieldEntity,
    ),
  );
}

export function incidentsRetrospectiveFieldEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsRetrospectiveFieldEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsRetrospectiveFieldEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsRetrospectiveFieldEntity' from JSON`,
  );
}
