/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchV1SeveritiesSeveritySlugColor = {
  Red: "red",
  Orange: "orange",
  Yellow: "yellow",
  Blue: "blue",
  Teal: "teal",
  Grey: "grey",
} as const;
export type PatchV1SeveritiesSeveritySlugColor = ClosedEnum<
  typeof PatchV1SeveritiesSeveritySlugColor
>;

/**
 * Update a specific severity
 */
export type PatchV1SeveritiesSeveritySlug = {
  slug?: string | undefined;
  description?: string | undefined;
  position?: number | undefined;
  color?: PatchV1SeveritiesSeveritySlugColor | undefined;
};

/** @internal */
export const PatchV1SeveritiesSeveritySlugColor$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1SeveritiesSeveritySlugColor
> = z.nativeEnum(PatchV1SeveritiesSeveritySlugColor);

/** @internal */
export const PatchV1SeveritiesSeveritySlugColor$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1SeveritiesSeveritySlugColor
> = PatchV1SeveritiesSeveritySlugColor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1SeveritiesSeveritySlugColor$ {
  /** @deprecated use `PatchV1SeveritiesSeveritySlugColor$inboundSchema` instead. */
  export const inboundSchema = PatchV1SeveritiesSeveritySlugColor$inboundSchema;
  /** @deprecated use `PatchV1SeveritiesSeveritySlugColor$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1SeveritiesSeveritySlugColor$outboundSchema;
}

/** @internal */
export const PatchV1SeveritiesSeveritySlug$inboundSchema: z.ZodType<
  PatchV1SeveritiesSeveritySlug,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string().optional(),
  description: z.string().optional(),
  position: z.number().int().optional(),
  color: PatchV1SeveritiesSeveritySlugColor$inboundSchema.optional(),
});

/** @internal */
export type PatchV1SeveritiesSeveritySlug$Outbound = {
  slug?: string | undefined;
  description?: string | undefined;
  position?: number | undefined;
  color?: string | undefined;
};

/** @internal */
export const PatchV1SeveritiesSeveritySlug$outboundSchema: z.ZodType<
  PatchV1SeveritiesSeveritySlug$Outbound,
  z.ZodTypeDef,
  PatchV1SeveritiesSeveritySlug
> = z.object({
  slug: z.string().optional(),
  description: z.string().optional(),
  position: z.number().int().optional(),
  color: PatchV1SeveritiesSeveritySlugColor$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1SeveritiesSeveritySlug$ {
  /** @deprecated use `PatchV1SeveritiesSeveritySlug$inboundSchema` instead. */
  export const inboundSchema = PatchV1SeveritiesSeveritySlug$inboundSchema;
  /** @deprecated use `PatchV1SeveritiesSeveritySlug$outboundSchema` instead. */
  export const outboundSchema = PatchV1SeveritiesSeveritySlug$outboundSchema;
  /** @deprecated use `PatchV1SeveritiesSeveritySlug$Outbound` instead. */
  export type Outbound = PatchV1SeveritiesSeveritySlug$Outbound;
}

export function patchV1SeveritiesSeveritySlugToJSON(
  patchV1SeveritiesSeveritySlug: PatchV1SeveritiesSeveritySlug,
): string {
  return JSON.stringify(
    PatchV1SeveritiesSeveritySlug$outboundSchema.parse(
      patchV1SeveritiesSeveritySlug,
    ),
  );
}

export function patchV1SeveritiesSeveritySlugFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1SeveritiesSeveritySlug, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1SeveritiesSeveritySlug$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1SeveritiesSeveritySlug' from JSON`,
  );
}
