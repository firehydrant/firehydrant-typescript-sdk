/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * TagEntity model
 */
export type TagEntity = {
  name?: string | undefined;
};

/** @internal */
export const TagEntity$inboundSchema: z.ZodType<
  TagEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type TagEntity$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const TagEntity$outboundSchema: z.ZodType<
  TagEntity$Outbound,
  z.ZodTypeDef,
  TagEntity
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagEntity$ {
  /** @deprecated use `TagEntity$inboundSchema` instead. */
  export const inboundSchema = TagEntity$inboundSchema;
  /** @deprecated use `TagEntity$outboundSchema` instead. */
  export const outboundSchema = TagEntity$outboundSchema;
  /** @deprecated use `TagEntity$Outbound` instead. */
  export type Outbound = TagEntity$Outbound;
}

export function tagEntityToJSON(tagEntity: TagEntity): string {
  return JSON.stringify(TagEntity$outboundSchema.parse(tagEntity));
}

export function tagEntityFromJSON(
  jsonString: string,
): SafeParseResult<TagEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagEntity' from JSON`,
  );
}
