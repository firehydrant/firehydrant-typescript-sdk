/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SignalsAPINotificationPolicyItemComplianceEntity,
  SignalsAPINotificationPolicyItemComplianceEntity$inboundSchema,
  SignalsAPINotificationPolicyItemComplianceEntity$Outbound,
  SignalsAPINotificationPolicyItemComplianceEntity$outboundSchema,
} from "./signalsapinotificationpolicyitemcomplianceentity.js";

/**
 * UserEntity model
 */
export type NullableUserEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  slackUserId?: string | null | undefined;
  slackLinked?: boolean | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  signalsEnabledNotificationTypes?: Array<string> | null | undefined;
  signalsNotificationPolicyCompliance?:
    | Array<SignalsAPINotificationPolicyItemComplianceEntity>
    | null
    | undefined;
};

/** @internal */
export const NullableUserEntity$inboundSchema: z.ZodType<
  NullableUserEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  slack_user_id: z.nullable(z.string()).optional(),
  "slack_linked?": z.nullable(z.boolean()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  signals_enabled_notification_types: z.nullable(z.array(z.string()))
    .optional(),
  signals_notification_policy_compliance: z.nullable(
    z.array(SignalsAPINotificationPolicyItemComplianceEntity$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "slack_user_id": "slackUserId",
    "slack_linked?": "slackLinked",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "signals_enabled_notification_types": "signalsEnabledNotificationTypes",
    "signals_notification_policy_compliance":
      "signalsNotificationPolicyCompliance",
  });
});

/** @internal */
export type NullableUserEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  slack_user_id?: string | null | undefined;
  "slack_linked?"?: boolean | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  signals_enabled_notification_types?: Array<string> | null | undefined;
  signals_notification_policy_compliance?:
    | Array<SignalsAPINotificationPolicyItemComplianceEntity$Outbound>
    | null
    | undefined;
};

/** @internal */
export const NullableUserEntity$outboundSchema: z.ZodType<
  NullableUserEntity$Outbound,
  z.ZodTypeDef,
  NullableUserEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  slackUserId: z.nullable(z.string()).optional(),
  slackLinked: z.nullable(z.boolean()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  signalsEnabledNotificationTypes: z.nullable(z.array(z.string())).optional(),
  signalsNotificationPolicyCompliance: z.nullable(
    z.array(SignalsAPINotificationPolicyItemComplianceEntity$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    slackUserId: "slack_user_id",
    slackLinked: "slack_linked?",
    createdAt: "created_at",
    updatedAt: "updated_at",
    signalsEnabledNotificationTypes: "signals_enabled_notification_types",
    signalsNotificationPolicyCompliance:
      "signals_notification_policy_compliance",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableUserEntity$ {
  /** @deprecated use `NullableUserEntity$inboundSchema` instead. */
  export const inboundSchema = NullableUserEntity$inboundSchema;
  /** @deprecated use `NullableUserEntity$outboundSchema` instead. */
  export const outboundSchema = NullableUserEntity$outboundSchema;
  /** @deprecated use `NullableUserEntity$Outbound` instead. */
  export type Outbound = NullableUserEntity$Outbound;
}

export function nullableUserEntityToJSON(
  nullableUserEntity: NullableUserEntity,
): string {
  return JSON.stringify(
    NullableUserEntity$outboundSchema.parse(nullableUserEntity),
  );
}

export function nullableUserEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableUserEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableUserEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableUserEntity' from JSON`,
  );
}
