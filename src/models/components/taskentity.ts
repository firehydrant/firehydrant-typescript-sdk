/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";

/**
 * TaskEntity model
 */
export type TaskEntity = {
  id?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  state?: string | undefined;
  assignee?: AuthorEntity | undefined;
  createdBy?: AuthorEntity | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  dueAt?: Date | undefined;
};

/** @internal */
export const TaskEntity$inboundSchema: z.ZodType<
  TaskEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  state: z.string().optional(),
  assignee: AuthorEntity$inboundSchema.optional(),
  created_by: AuthorEntity$inboundSchema.optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  due_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_by": "createdBy",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "due_at": "dueAt",
  });
});

/** @internal */
export type TaskEntity$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  state?: string | undefined;
  assignee?: AuthorEntity$Outbound | undefined;
  created_by?: AuthorEntity$Outbound | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  due_at?: string | undefined;
};

/** @internal */
export const TaskEntity$outboundSchema: z.ZodType<
  TaskEntity$Outbound,
  z.ZodTypeDef,
  TaskEntity
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  state: z.string().optional(),
  assignee: AuthorEntity$outboundSchema.optional(),
  createdBy: AuthorEntity$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  dueAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdBy: "created_by",
    createdAt: "created_at",
    updatedAt: "updated_at",
    dueAt: "due_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskEntity$ {
  /** @deprecated use `TaskEntity$inboundSchema` instead. */
  export const inboundSchema = TaskEntity$inboundSchema;
  /** @deprecated use `TaskEntity$outboundSchema` instead. */
  export const outboundSchema = TaskEntity$outboundSchema;
  /** @deprecated use `TaskEntity$Outbound` instead. */
  export type Outbound = TaskEntity$Outbound;
}

export function taskEntityToJSON(taskEntity: TaskEntity): string {
  return JSON.stringify(TaskEntity$outboundSchema.parse(taskEntity));
}

export function taskEntityFromJSON(
  jsonString: string,
): SafeParseResult<TaskEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskEntity' from JSON`,
  );
}
