/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableConversationsAPIEntitiesChannel,
  NullableConversationsAPIEntitiesChannel$inboundSchema,
  NullableConversationsAPIEntitiesChannel$Outbound,
  NullableConversationsAPIEntitiesChannel$outboundSchema,
} from "./nullableconversationsapientitieschannel.js";

export type ConversationsAPIEntitiesReference = {
  id?: string | null | undefined;
  resourceClass?: string | null | undefined;
  resourceId?: string | null | undefined;
  field?: string | null | undefined;
  commentsUrl?: string | null | undefined;
  channel?: NullableConversationsAPIEntitiesChannel | null | undefined;
};

/** @internal */
export const ConversationsAPIEntitiesReference$inboundSchema: z.ZodType<
  ConversationsAPIEntitiesReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  resource_class: z.nullable(z.string()).optional(),
  resource_id: z.nullable(z.string()).optional(),
  field: z.nullable(z.string()).optional(),
  comments_url: z.nullable(z.string()).optional(),
  channel: z.nullable(NullableConversationsAPIEntitiesChannel$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_class": "resourceClass",
    "resource_id": "resourceId",
    "comments_url": "commentsUrl",
  });
});

/** @internal */
export type ConversationsAPIEntitiesReference$Outbound = {
  id?: string | null | undefined;
  resource_class?: string | null | undefined;
  resource_id?: string | null | undefined;
  field?: string | null | undefined;
  comments_url?: string | null | undefined;
  channel?: NullableConversationsAPIEntitiesChannel$Outbound | null | undefined;
};

/** @internal */
export const ConversationsAPIEntitiesReference$outboundSchema: z.ZodType<
  ConversationsAPIEntitiesReference$Outbound,
  z.ZodTypeDef,
  ConversationsAPIEntitiesReference
> = z.object({
  id: z.nullable(z.string()).optional(),
  resourceClass: z.nullable(z.string()).optional(),
  resourceId: z.nullable(z.string()).optional(),
  field: z.nullable(z.string()).optional(),
  commentsUrl: z.nullable(z.string()).optional(),
  channel: z.nullable(NullableConversationsAPIEntitiesChannel$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    resourceClass: "resource_class",
    resourceId: "resource_id",
    commentsUrl: "comments_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsAPIEntitiesReference$ {
  /** @deprecated use `ConversationsAPIEntitiesReference$inboundSchema` instead. */
  export const inboundSchema = ConversationsAPIEntitiesReference$inboundSchema;
  /** @deprecated use `ConversationsAPIEntitiesReference$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsAPIEntitiesReference$outboundSchema;
  /** @deprecated use `ConversationsAPIEntitiesReference$Outbound` instead. */
  export type Outbound = ConversationsAPIEntitiesReference$Outbound;
}

export function conversationsAPIEntitiesReferenceToJSON(
  conversationsAPIEntitiesReference: ConversationsAPIEntitiesReference,
): string {
  return JSON.stringify(
    ConversationsAPIEntitiesReference$outboundSchema.parse(
      conversationsAPIEntitiesReference,
    ),
  );
}

export function conversationsAPIEntitiesReferenceFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsAPIEntitiesReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsAPIEntitiesReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsAPIEntitiesReference' from JSON`,
  );
}
