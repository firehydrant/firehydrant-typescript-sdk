/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object of label key and values
 */
export type ServiceEntityLiteLabels = {};

/**
 * ServiceEntityLite model
 */
export type ServiceEntityLite = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  serviceTier?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  allowedParams?: Array<string> | undefined;
  /**
   * An object of label key and values
   */
  labels?: ServiceEntityLiteLabels | undefined;
  alertOnAdd?: boolean | undefined;
  autoAddRespondingTeam?: boolean | undefined;
};

/** @internal */
export const ServiceEntityLiteLabels$inboundSchema: z.ZodType<
  ServiceEntityLiteLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ServiceEntityLiteLabels$Outbound = {};

/** @internal */
export const ServiceEntityLiteLabels$outboundSchema: z.ZodType<
  ServiceEntityLiteLabels$Outbound,
  z.ZodTypeDef,
  ServiceEntityLiteLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceEntityLiteLabels$ {
  /** @deprecated use `ServiceEntityLiteLabels$inboundSchema` instead. */
  export const inboundSchema = ServiceEntityLiteLabels$inboundSchema;
  /** @deprecated use `ServiceEntityLiteLabels$outboundSchema` instead. */
  export const outboundSchema = ServiceEntityLiteLabels$outboundSchema;
  /** @deprecated use `ServiceEntityLiteLabels$Outbound` instead. */
  export type Outbound = ServiceEntityLiteLabels$Outbound;
}

export function serviceEntityLiteLabelsToJSON(
  serviceEntityLiteLabels: ServiceEntityLiteLabels,
): string {
  return JSON.stringify(
    ServiceEntityLiteLabels$outboundSchema.parse(serviceEntityLiteLabels),
  );
}

export function serviceEntityLiteLabelsFromJSON(
  jsonString: string,
): SafeParseResult<ServiceEntityLiteLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceEntityLiteLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceEntityLiteLabels' from JSON`,
  );
}

/** @internal */
export const ServiceEntityLite$inboundSchema: z.ZodType<
  ServiceEntityLite,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  service_tier: z.number().int().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  allowed_params: z.array(z.string()).optional(),
  labels: z.lazy(() => ServiceEntityLiteLabels$inboundSchema).optional(),
  alert_on_add: z.boolean().optional(),
  auto_add_responding_team: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "service_tier": "serviceTier",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "allowed_params": "allowedParams",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
  });
});

/** @internal */
export type ServiceEntityLite$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  service_tier?: number | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  allowed_params?: Array<string> | undefined;
  labels?: ServiceEntityLiteLabels$Outbound | undefined;
  alert_on_add?: boolean | undefined;
  auto_add_responding_team?: boolean | undefined;
};

/** @internal */
export const ServiceEntityLite$outboundSchema: z.ZodType<
  ServiceEntityLite$Outbound,
  z.ZodTypeDef,
  ServiceEntityLite
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  serviceTier: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  allowedParams: z.array(z.string()).optional(),
  labels: z.lazy(() => ServiceEntityLiteLabels$outboundSchema).optional(),
  alertOnAdd: z.boolean().optional(),
  autoAddRespondingTeam: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    serviceTier: "service_tier",
    createdAt: "created_at",
    updatedAt: "updated_at",
    allowedParams: "allowed_params",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceEntityLite$ {
  /** @deprecated use `ServiceEntityLite$inboundSchema` instead. */
  export const inboundSchema = ServiceEntityLite$inboundSchema;
  /** @deprecated use `ServiceEntityLite$outboundSchema` instead. */
  export const outboundSchema = ServiceEntityLite$outboundSchema;
  /** @deprecated use `ServiceEntityLite$Outbound` instead. */
  export type Outbound = ServiceEntityLite$Outbound;
}

export function serviceEntityLiteToJSON(
  serviceEntityLite: ServiceEntityLite,
): string {
  return JSON.stringify(
    ServiceEntityLite$outboundSchema.parse(serviceEntityLite),
  );
}

export function serviceEntityLiteFromJSON(
  jsonString: string,
): SafeParseResult<ServiceEntityLite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceEntityLite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceEntityLite' from JSON`,
  );
}
