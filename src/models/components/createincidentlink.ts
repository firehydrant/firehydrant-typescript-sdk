/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Allows adding adhoc links to an incident as an attachment
 */
export type CreateIncidentLink = {
  displayText?: string | null | undefined;
  iconUrl?: string | null | undefined;
  href: string;
};

/** @internal */
export const CreateIncidentLink$inboundSchema: z.ZodType<
  CreateIncidentLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_text: z.nullable(z.string()).optional(),
  icon_url: z.nullable(z.string()).optional(),
  href: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_text": "displayText",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type CreateIncidentLink$Outbound = {
  display_text?: string | null | undefined;
  icon_url?: string | null | undefined;
  href: string;
};

/** @internal */
export const CreateIncidentLink$outboundSchema: z.ZodType<
  CreateIncidentLink$Outbound,
  z.ZodTypeDef,
  CreateIncidentLink
> = z.object({
  displayText: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  href: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayText: "display_text",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentLink$ {
  /** @deprecated use `CreateIncidentLink$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentLink$inboundSchema;
  /** @deprecated use `CreateIncidentLink$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentLink$outboundSchema;
  /** @deprecated use `CreateIncidentLink$Outbound` instead. */
  export type Outbound = CreateIncidentLink$Outbound;
}

export function createIncidentLinkToJSON(
  createIncidentLink: CreateIncidentLink,
): string {
  return JSON.stringify(
    CreateIncidentLink$outboundSchema.parse(createIncidentLink),
  );
}

export function createIncidentLinkFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentLink' from JSON`,
  );
}
