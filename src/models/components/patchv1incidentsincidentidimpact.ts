/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1IncidentsIncidentIdImpactImpact = {
  id: string;
  conditionId: string;
};

export type PatchV1IncidentsIncidentIdImpactStatusPages = {
  id: string;
  integrationSlug: string;
};

/**
 * Allows updating an incident's impacted infrastructure, with the option to
 *
 * @remarks
 * move the incident into a different milestone and provide a note to update
 * the incident timeline and any attached status pages. If this method is
 * requested with the PUT verb, impacts will be completely replaced with the
 * information in the request body, even if not provided (effectively clearing
 * all impacts). If this method is requested with the PATCH verb, the provided
 * impacts will be added or updated, but no impacts will be removed.
 */
export type PatchV1IncidentsIncidentIdImpact = {
  note?: string | undefined;
  milestone?: string | undefined;
  impact?: Array<PatchV1IncidentsIncidentIdImpactImpact> | undefined;
  statusPages?: Array<PatchV1IncidentsIncidentIdImpactStatusPages> | undefined;
};

/** @internal */
export const PatchV1IncidentsIncidentIdImpactImpact$inboundSchema: z.ZodType<
  PatchV1IncidentsIncidentIdImpactImpact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type PatchV1IncidentsIncidentIdImpactImpact$Outbound = {
  id: string;
  condition_id: string;
};

/** @internal */
export const PatchV1IncidentsIncidentIdImpactImpact$outboundSchema: z.ZodType<
  PatchV1IncidentsIncidentIdImpactImpact$Outbound,
  z.ZodTypeDef,
  PatchV1IncidentsIncidentIdImpactImpact
> = z.object({
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentsIncidentIdImpactImpact$ {
  /** @deprecated use `PatchV1IncidentsIncidentIdImpactImpact$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1IncidentsIncidentIdImpactImpact$inboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdImpactImpact$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1IncidentsIncidentIdImpactImpact$outboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdImpactImpact$Outbound` instead. */
  export type Outbound = PatchV1IncidentsIncidentIdImpactImpact$Outbound;
}

export function patchV1IncidentsIncidentIdImpactImpactToJSON(
  patchV1IncidentsIncidentIdImpactImpact:
    PatchV1IncidentsIncidentIdImpactImpact,
): string {
  return JSON.stringify(
    PatchV1IncidentsIncidentIdImpactImpact$outboundSchema.parse(
      patchV1IncidentsIncidentIdImpactImpact,
    ),
  );
}

export function patchV1IncidentsIncidentIdImpactImpactFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1IncidentsIncidentIdImpactImpact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1IncidentsIncidentIdImpactImpact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1IncidentsIncidentIdImpactImpact' from JSON`,
  );
}

/** @internal */
export const PatchV1IncidentsIncidentIdImpactStatusPages$inboundSchema:
  z.ZodType<
    PatchV1IncidentsIncidentIdImpactStatusPages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    integration_slug: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "integration_slug": "integrationSlug",
    });
  });

/** @internal */
export type PatchV1IncidentsIncidentIdImpactStatusPages$Outbound = {
  id: string;
  integration_slug: string;
};

/** @internal */
export const PatchV1IncidentsIncidentIdImpactStatusPages$outboundSchema:
  z.ZodType<
    PatchV1IncidentsIncidentIdImpactStatusPages$Outbound,
    z.ZodTypeDef,
    PatchV1IncidentsIncidentIdImpactStatusPages
  > = z.object({
    id: z.string(),
    integrationSlug: z.string(),
  }).transform((v) => {
    return remap$(v, {
      integrationSlug: "integration_slug",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentsIncidentIdImpactStatusPages$ {
  /** @deprecated use `PatchV1IncidentsIncidentIdImpactStatusPages$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1IncidentsIncidentIdImpactStatusPages$inboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdImpactStatusPages$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1IncidentsIncidentIdImpactStatusPages$outboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdImpactStatusPages$Outbound` instead. */
  export type Outbound = PatchV1IncidentsIncidentIdImpactStatusPages$Outbound;
}

export function patchV1IncidentsIncidentIdImpactStatusPagesToJSON(
  patchV1IncidentsIncidentIdImpactStatusPages:
    PatchV1IncidentsIncidentIdImpactStatusPages,
): string {
  return JSON.stringify(
    PatchV1IncidentsIncidentIdImpactStatusPages$outboundSchema.parse(
      patchV1IncidentsIncidentIdImpactStatusPages,
    ),
  );
}

export function patchV1IncidentsIncidentIdImpactStatusPagesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1IncidentsIncidentIdImpactStatusPages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1IncidentsIncidentIdImpactStatusPages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1IncidentsIncidentIdImpactStatusPages' from JSON`,
  );
}

/** @internal */
export const PatchV1IncidentsIncidentIdImpact$inboundSchema: z.ZodType<
  PatchV1IncidentsIncidentIdImpact,
  z.ZodTypeDef,
  unknown
> = z.object({
  note: z.string().optional(),
  milestone: z.string().optional(),
  impact: z.array(
    z.lazy(() => PatchV1IncidentsIncidentIdImpactImpact$inboundSchema),
  ).optional(),
  status_pages: z.array(
    z.lazy(() => PatchV1IncidentsIncidentIdImpactStatusPages$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_pages": "statusPages",
  });
});

/** @internal */
export type PatchV1IncidentsIncidentIdImpact$Outbound = {
  note?: string | undefined;
  milestone?: string | undefined;
  impact?: Array<PatchV1IncidentsIncidentIdImpactImpact$Outbound> | undefined;
  status_pages?:
    | Array<PatchV1IncidentsIncidentIdImpactStatusPages$Outbound>
    | undefined;
};

/** @internal */
export const PatchV1IncidentsIncidentIdImpact$outboundSchema: z.ZodType<
  PatchV1IncidentsIncidentIdImpact$Outbound,
  z.ZodTypeDef,
  PatchV1IncidentsIncidentIdImpact
> = z.object({
  note: z.string().optional(),
  milestone: z.string().optional(),
  impact: z.array(
    z.lazy(() => PatchV1IncidentsIncidentIdImpactImpact$outboundSchema),
  ).optional(),
  statusPages: z.array(
    z.lazy(() => PatchV1IncidentsIncidentIdImpactStatusPages$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentsIncidentIdImpact$ {
  /** @deprecated use `PatchV1IncidentsIncidentIdImpact$inboundSchema` instead. */
  export const inboundSchema = PatchV1IncidentsIncidentIdImpact$inboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdImpact$outboundSchema` instead. */
  export const outboundSchema = PatchV1IncidentsIncidentIdImpact$outboundSchema;
  /** @deprecated use `PatchV1IncidentsIncidentIdImpact$Outbound` instead. */
  export type Outbound = PatchV1IncidentsIncidentIdImpact$Outbound;
}

export function patchV1IncidentsIncidentIdImpactToJSON(
  patchV1IncidentsIncidentIdImpact: PatchV1IncidentsIncidentIdImpact,
): string {
  return JSON.stringify(
    PatchV1IncidentsIncidentIdImpact$outboundSchema.parse(
      patchV1IncidentsIncidentIdImpact,
    ),
  );
}

export function patchV1IncidentsIncidentIdImpactFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1IncidentsIncidentIdImpact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1IncidentsIncidentIdImpact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1IncidentsIncidentIdImpact' from JSON`,
  );
}
