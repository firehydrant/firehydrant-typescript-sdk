/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateScheduledMaintenanceStatusPage = {
  /**
   * The slug identifying the type of status page
   */
  integrationSlug?: string | null | undefined;
  /**
   * The UUID of the status page to display this maintenance on
   */
  connectionId: string;
};

export type CreateScheduledMaintenanceImpact = {
  /**
   * The type of impact
   */
  type: string;
  /**
   * The id of impact
   */
  id: string;
  /**
   * The id of the condition
   */
  conditionId: string;
};

/**
 * Create a new scheduled maintenance event
 */
export type CreateScheduledMaintenance = {
  name: string;
  /**
   * ISO8601 timestamp for the start time of the scheduled maintenance
   */
  startsAt: Date;
  /**
   * ISO8601 timestamp for the end time of the scheduled maintenance
   */
  endsAt: Date;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * A json object of label keys and values
   */
  labels?: { [k: string]: string } | null | undefined;
  /**
   * An array of status pages to display this maintenance on
   */
  statusPages?: Array<CreateScheduledMaintenanceStatusPage> | null | undefined;
  /**
   * An array of impact/condition combinations
   */
  impacts?: Array<CreateScheduledMaintenanceImpact> | null | undefined;
};

/** @internal */
export const CreateScheduledMaintenanceStatusPage$inboundSchema: z.ZodType<
  CreateScheduledMaintenanceStatusPage,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_slug: z.nullable(z.string()).optional(),
  connection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type CreateScheduledMaintenanceStatusPage$Outbound = {
  integration_slug?: string | null | undefined;
  connection_id: string;
};

/** @internal */
export const CreateScheduledMaintenanceStatusPage$outboundSchema: z.ZodType<
  CreateScheduledMaintenanceStatusPage$Outbound,
  z.ZodTypeDef,
  CreateScheduledMaintenanceStatusPage
> = z.object({
  integrationSlug: z.nullable(z.string()).optional(),
  connectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduledMaintenanceStatusPage$ {
  /** @deprecated use `CreateScheduledMaintenanceStatusPage$inboundSchema` instead. */
  export const inboundSchema =
    CreateScheduledMaintenanceStatusPage$inboundSchema;
  /** @deprecated use `CreateScheduledMaintenanceStatusPage$outboundSchema` instead. */
  export const outboundSchema =
    CreateScheduledMaintenanceStatusPage$outboundSchema;
  /** @deprecated use `CreateScheduledMaintenanceStatusPage$Outbound` instead. */
  export type Outbound = CreateScheduledMaintenanceStatusPage$Outbound;
}

export function createScheduledMaintenanceStatusPageToJSON(
  createScheduledMaintenanceStatusPage: CreateScheduledMaintenanceStatusPage,
): string {
  return JSON.stringify(
    CreateScheduledMaintenanceStatusPage$outboundSchema.parse(
      createScheduledMaintenanceStatusPage,
    ),
  );
}

export function createScheduledMaintenanceStatusPageFromJSON(
  jsonString: string,
): SafeParseResult<CreateScheduledMaintenanceStatusPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateScheduledMaintenanceStatusPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScheduledMaintenanceStatusPage' from JSON`,
  );
}

/** @internal */
export const CreateScheduledMaintenanceImpact$inboundSchema: z.ZodType<
  CreateScheduledMaintenanceImpact,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type CreateScheduledMaintenanceImpact$Outbound = {
  type: string;
  id: string;
  condition_id: string;
};

/** @internal */
export const CreateScheduledMaintenanceImpact$outboundSchema: z.ZodType<
  CreateScheduledMaintenanceImpact$Outbound,
  z.ZodTypeDef,
  CreateScheduledMaintenanceImpact
> = z.object({
  type: z.string(),
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduledMaintenanceImpact$ {
  /** @deprecated use `CreateScheduledMaintenanceImpact$inboundSchema` instead. */
  export const inboundSchema = CreateScheduledMaintenanceImpact$inboundSchema;
  /** @deprecated use `CreateScheduledMaintenanceImpact$outboundSchema` instead. */
  export const outboundSchema = CreateScheduledMaintenanceImpact$outboundSchema;
  /** @deprecated use `CreateScheduledMaintenanceImpact$Outbound` instead. */
  export type Outbound = CreateScheduledMaintenanceImpact$Outbound;
}

export function createScheduledMaintenanceImpactToJSON(
  createScheduledMaintenanceImpact: CreateScheduledMaintenanceImpact,
): string {
  return JSON.stringify(
    CreateScheduledMaintenanceImpact$outboundSchema.parse(
      createScheduledMaintenanceImpact,
    ),
  );
}

export function createScheduledMaintenanceImpactFromJSON(
  jsonString: string,
): SafeParseResult<CreateScheduledMaintenanceImpact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScheduledMaintenanceImpact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScheduledMaintenanceImpact' from JSON`,
  );
}

/** @internal */
export const CreateScheduledMaintenance$inboundSchema: z.ZodType<
  CreateScheduledMaintenance,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  status_pages: z.nullable(
    z.array(z.lazy(() => CreateScheduledMaintenanceStatusPage$inboundSchema)),
  ).optional(),
  impacts: z.nullable(
    z.array(z.lazy(() => CreateScheduledMaintenanceImpact$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "status_pages": "statusPages",
  });
});

/** @internal */
export type CreateScheduledMaintenance$Outbound = {
  name: string;
  starts_at: string;
  ends_at: string;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  status_pages?:
    | Array<CreateScheduledMaintenanceStatusPage$Outbound>
    | null
    | undefined;
  impacts?: Array<CreateScheduledMaintenanceImpact$Outbound> | null | undefined;
};

/** @internal */
export const CreateScheduledMaintenance$outboundSchema: z.ZodType<
  CreateScheduledMaintenance$Outbound,
  z.ZodTypeDef,
  CreateScheduledMaintenance
> = z.object({
  name: z.string(),
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  statusPages: z.nullable(
    z.array(z.lazy(() => CreateScheduledMaintenanceStatusPage$outboundSchema)),
  ).optional(),
  impacts: z.nullable(
    z.array(z.lazy(() => CreateScheduledMaintenanceImpact$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduledMaintenance$ {
  /** @deprecated use `CreateScheduledMaintenance$inboundSchema` instead. */
  export const inboundSchema = CreateScheduledMaintenance$inboundSchema;
  /** @deprecated use `CreateScheduledMaintenance$outboundSchema` instead. */
  export const outboundSchema = CreateScheduledMaintenance$outboundSchema;
  /** @deprecated use `CreateScheduledMaintenance$Outbound` instead. */
  export type Outbound = CreateScheduledMaintenance$Outbound;
}

export function createScheduledMaintenanceToJSON(
  createScheduledMaintenance: CreateScheduledMaintenance,
): string {
  return JSON.stringify(
    CreateScheduledMaintenance$outboundSchema.parse(createScheduledMaintenance),
  );
}

export function createScheduledMaintenanceFromJSON(
  jsonString: string,
): SafeParseResult<CreateScheduledMaintenance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScheduledMaintenance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScheduledMaintenance' from JSON`,
  );
}
