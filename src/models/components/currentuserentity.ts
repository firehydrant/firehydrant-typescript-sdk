/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SuccinctEntity,
  SuccinctEntity$inboundSchema,
  SuccinctEntity$Outbound,
  SuccinctEntity$outboundSchema,
} from "./succinctentity.js";

/**
 * CurrentUserEntity model
 */
export type CurrentUserEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  source?: string | null | undefined;
  email?: string | null | undefined;
  role?: string | null | undefined;
  teams?: Array<SuccinctEntity> | null | undefined;
  organizationId?: string | null | undefined;
  organizationName?: string | null | undefined;
  accountId?: number | null | undefined;
};

/** @internal */
export const CurrentUserEntity$inboundSchema: z.ZodType<
  CurrentUserEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  teams: z.nullable(z.array(SuccinctEntity$inboundSchema)).optional(),
  organization_id: z.nullable(z.string()).optional(),
  organization_name: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "organization_name": "organizationName",
    "account_id": "accountId",
  });
});

/** @internal */
export type CurrentUserEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  source?: string | null | undefined;
  email?: string | null | undefined;
  role?: string | null | undefined;
  teams?: Array<SuccinctEntity$Outbound> | null | undefined;
  organization_id?: string | null | undefined;
  organization_name?: string | null | undefined;
  account_id?: number | null | undefined;
};

/** @internal */
export const CurrentUserEntity$outboundSchema: z.ZodType<
  CurrentUserEntity$Outbound,
  z.ZodTypeDef,
  CurrentUserEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  teams: z.nullable(z.array(SuccinctEntity$outboundSchema)).optional(),
  organizationId: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    organizationName: "organization_name",
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentUserEntity$ {
  /** @deprecated use `CurrentUserEntity$inboundSchema` instead. */
  export const inboundSchema = CurrentUserEntity$inboundSchema;
  /** @deprecated use `CurrentUserEntity$outboundSchema` instead. */
  export const outboundSchema = CurrentUserEntity$outboundSchema;
  /** @deprecated use `CurrentUserEntity$Outbound` instead. */
  export type Outbound = CurrentUserEntity$Outbound;
}

export function currentUserEntityToJSON(
  currentUserEntity: CurrentUserEntity,
): string {
  return JSON.stringify(
    CurrentUserEntity$outboundSchema.parse(currentUserEntity),
  );
}

export function currentUserEntityFromJSON(
  jsonString: string,
): SafeParseResult<CurrentUserEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentUserEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentUserEntity' from JSON`,
  );
}
