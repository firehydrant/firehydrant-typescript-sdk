/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the step will notify.
 */
export const CreateTeamEscalationPolicyType = {
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  SlackChannel: "SlackChannel",
  MicrosoftTeamsChannel: "MicrosoftTeamsChannel",
  EntireTeam: "EntireTeam",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the step will notify.
 */
export type CreateTeamEscalationPolicyType = ClosedEnum<
  typeof CreateTeamEscalationPolicyType
>;

export type CreateTeamEscalationPolicyTarget = {
  /**
   * The type of target that the step will notify.
   */
  type: CreateTeamEscalationPolicyType;
  /**
   * The ID of the target that the step will notify.
   */
  id: string;
};

/**
 * The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
 */
export const CreateTeamEscalationPolicyDistributionType = {
  Unspecified: "unspecified",
  RoundRobinByAlert: "round_robin_by_alert",
  RoundRobinByEscalationPolicy: "round_robin_by_escalation_policy",
} as const;
/**
 * The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
 */
export type CreateTeamEscalationPolicyDistributionType = ClosedEnum<
  typeof CreateTeamEscalationPolicyDistributionType
>;

export type CreateTeamEscalationPolicyStep = {
  /**
   * A list of targets that the step will notify. You can specify up to 15 targets per step.
   */
  targets: Array<CreateTeamEscalationPolicyTarget>;
  /**
   * An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
   */
  timeout: string;
  /**
   * The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
   */
  distributionType?:
    | CreateTeamEscalationPolicyDistributionType
    | null
    | undefined;
  /**
   * A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.
   */
  priorities?: Array<string> | null | undefined;
};

/**
 * The type of target to which the policy will hand off.
 */
export const CreateTeamEscalationPolicyTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
/**
 * The type of target to which the policy will hand off.
 */
export type CreateTeamEscalationPolicyTargetType = ClosedEnum<
  typeof CreateTeamEscalationPolicyTargetType
>;

/**
 * A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
 */
export type CreateTeamEscalationPolicyHandoffStep = {
  /**
   * The type of target to which the policy will hand off.
   */
  targetType: CreateTeamEscalationPolicyTargetType;
  /**
   * The ID of the target to which the policy will hand off.
   */
  targetId: string;
};

export const CreateTeamEscalationPolicyHighTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
export type CreateTeamEscalationPolicyHighTargetType = ClosedEnum<
  typeof CreateTeamEscalationPolicyHighTargetType
>;

/**
 * Handoff step for HIGH priority alerts
 */
export type CreateTeamEscalationPolicyHighHandoffStep = {
  targetType: CreateTeamEscalationPolicyHighTargetType;
  targetId: string;
};

/**
 * Settings for HIGH priority alerts
 */
export type CreateTeamEscalationPolicyHigh = {
  /**
   * Number of repetitions for HIGH priority alerts
   */
  repetitions?: number | null | undefined;
  /**
   * Handoff step for HIGH priority alerts
   */
  handoffStep?: CreateTeamEscalationPolicyHighHandoffStep | null | undefined;
};

export const CreateTeamEscalationPolicyMediumTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
export type CreateTeamEscalationPolicyMediumTargetType = ClosedEnum<
  typeof CreateTeamEscalationPolicyMediumTargetType
>;

/**
 * Handoff step for MEDIUM priority alerts
 */
export type CreateTeamEscalationPolicyMediumHandoffStep = {
  targetType: CreateTeamEscalationPolicyMediumTargetType;
  targetId: string;
};

/**
 * Settings for MEDIUM priority alerts
 */
export type CreateTeamEscalationPolicyMedium = {
  /**
   * Number of repetitions for MEDIUM priority alerts
   */
  repetitions?: number | null | undefined;
  /**
   * Handoff step for MEDIUM priority alerts
   */
  handoffStep?: CreateTeamEscalationPolicyMediumHandoffStep | null | undefined;
};

export const CreateTeamEscalationPolicyLowTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
export type CreateTeamEscalationPolicyLowTargetType = ClosedEnum<
  typeof CreateTeamEscalationPolicyLowTargetType
>;

/**
 * Handoff step for LOW priority alerts
 */
export type CreateTeamEscalationPolicyLowHandoffStep = {
  targetType: CreateTeamEscalationPolicyLowTargetType;
  targetId: string;
};

/**
 * Settings for LOW priority alerts
 */
export type CreateTeamEscalationPolicyLow = {
  /**
   * Number of repetitions for LOW priority alerts
   */
  repetitions?: number | null | undefined;
  /**
   * Handoff step for LOW priority alerts
   */
  handoffStep?: CreateTeamEscalationPolicyLowHandoffStep | null | undefined;
};

/**
 * Priority-specific settings for dynamic escalation policies
 */
export type CreateTeamEscalationPolicyPrioritizedSettings = {
  /**
   * Settings for HIGH priority alerts
   */
  high?: CreateTeamEscalationPolicyHigh | null | undefined;
  /**
   * Settings for MEDIUM priority alerts
   */
  medium?: CreateTeamEscalationPolicyMedium | null | undefined;
  /**
   * Settings for LOW priority alerts
   */
  low?: CreateTeamEscalationPolicyLow | null | undefined;
};

/**
 * Create a Signals escalation policy for a team.
 */
export type CreateTeamEscalationPolicy = {
  /**
   * The escalation policy's name.
   */
  name: string;
  /**
   * A detailed description of the escalation policy.
   */
  description?: string | null | undefined;
  /**
   * The number of times that the escalation policy should repeat before an alert is dropped.
   */
  repetitions?: number | null | undefined;
  /**
   * Whether this escalation policy should be the default for the team.
   */
  default?: boolean | null | undefined;
  /**
   * The strategy for handling steps in the escalation policy. Can be "static" or "dynamic_by_priority".
   */
  stepStrategy?: string | null | undefined;
  /**
   * A list of steps that define how an alert should escalate through the policy.
   */
  steps: Array<CreateTeamEscalationPolicyStep>;
  /**
   * A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
   */
  handoffStep?: CreateTeamEscalationPolicyHandoffStep | null | undefined;
  /**
   * Priority-specific settings for dynamic escalation policies
   */
  prioritizedSettings?:
    | CreateTeamEscalationPolicyPrioritizedSettings
    | null
    | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateTeamEscalationPolicyType
> = z.nativeEnum(CreateTeamEscalationPolicyType);

/** @internal */
export const CreateTeamEscalationPolicyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateTeamEscalationPolicyType
> = CreateTeamEscalationPolicyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyType$ {
  /** @deprecated use `CreateTeamEscalationPolicyType$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicyType$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyType$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicyType$outboundSchema;
}

/** @internal */
export const CreateTeamEscalationPolicyTarget$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateTeamEscalationPolicyType$inboundSchema,
  id: z.string(),
});

/** @internal */
export type CreateTeamEscalationPolicyTarget$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const CreateTeamEscalationPolicyTarget$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyTarget$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyTarget
> = z.object({
  type: CreateTeamEscalationPolicyType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyTarget$ {
  /** @deprecated use `CreateTeamEscalationPolicyTarget$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicyTarget$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyTarget$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicyTarget$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyTarget$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyTarget$Outbound;
}

export function createTeamEscalationPolicyTargetToJSON(
  createTeamEscalationPolicyTarget: CreateTeamEscalationPolicyTarget,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyTarget$outboundSchema.parse(
      createTeamEscalationPolicyTarget,
    ),
  );
}

export function createTeamEscalationPolicyTargetFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicyTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamEscalationPolicyTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicyTarget' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyDistributionType$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyDistributionType> = z
    .nativeEnum(CreateTeamEscalationPolicyDistributionType);

/** @internal */
export const CreateTeamEscalationPolicyDistributionType$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyDistributionType> =
    CreateTeamEscalationPolicyDistributionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyDistributionType$ {
  /** @deprecated use `CreateTeamEscalationPolicyDistributionType$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyDistributionType$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyDistributionType$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyDistributionType$outboundSchema;
}

/** @internal */
export const CreateTeamEscalationPolicyStep$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  targets: z.array(
    z.lazy(() => CreateTeamEscalationPolicyTarget$inboundSchema),
  ),
  timeout: z.string(),
  distribution_type: z.nullable(
    CreateTeamEscalationPolicyDistributionType$inboundSchema,
  ).optional(),
  priorities: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "distribution_type": "distributionType",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyStep$Outbound = {
  targets: Array<CreateTeamEscalationPolicyTarget$Outbound>;
  timeout: string;
  distribution_type?: string | null | undefined;
  priorities?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicyStep$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyStep$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyStep
> = z.object({
  targets: z.array(
    z.lazy(() => CreateTeamEscalationPolicyTarget$outboundSchema),
  ),
  timeout: z.string(),
  distributionType: z.nullable(
    CreateTeamEscalationPolicyDistributionType$outboundSchema,
  ).optional(),
  priorities: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    distributionType: "distribution_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyStep$ {
  /** @deprecated use `CreateTeamEscalationPolicyStep$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicyStep$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyStep$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicyStep$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyStep$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyStep$Outbound;
}

export function createTeamEscalationPolicyStepToJSON(
  createTeamEscalationPolicyStep: CreateTeamEscalationPolicyStep,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyStep$outboundSchema.parse(
      createTeamEscalationPolicyStep,
    ),
  );
}

export function createTeamEscalationPolicyStepFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicyStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamEscalationPolicyStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicyStep' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyTargetType$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyTargetType> = z.nativeEnum(
    CreateTeamEscalationPolicyTargetType,
  );

/** @internal */
export const CreateTeamEscalationPolicyTargetType$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyTargetType> =
    CreateTeamEscalationPolicyTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyTargetType$ {
  /** @deprecated use `CreateTeamEscalationPolicyTargetType$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyTargetType$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyTargetType$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyTargetType$outboundSchema;
}

/** @internal */
export const CreateTeamEscalationPolicyHandoffStep$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyHandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: CreateTeamEscalationPolicyTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const CreateTeamEscalationPolicyHandoffStep$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyHandoffStep$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyHandoffStep
> = z.object({
  targetType: CreateTeamEscalationPolicyTargetType$outboundSchema,
  targetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyHandoffStep$ {
  /** @deprecated use `CreateTeamEscalationPolicyHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyHandoffStep$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyHandoffStep$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHandoffStep$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyHandoffStep$Outbound;
}

export function createTeamEscalationPolicyHandoffStepToJSON(
  createTeamEscalationPolicyHandoffStep: CreateTeamEscalationPolicyHandoffStep,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyHandoffStep$outboundSchema.parse(
      createTeamEscalationPolicyHandoffStep,
    ),
  );
}

export function createTeamEscalationPolicyHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicyHandoffStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTeamEscalationPolicyHandoffStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicyHandoffStep' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyHighTargetType$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyHighTargetType> = z
    .nativeEnum(CreateTeamEscalationPolicyHighTargetType);

/** @internal */
export const CreateTeamEscalationPolicyHighTargetType$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyHighTargetType> =
    CreateTeamEscalationPolicyHighTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyHighTargetType$ {
  /** @deprecated use `CreateTeamEscalationPolicyHighTargetType$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyHighTargetType$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHighTargetType$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyHighTargetType$outboundSchema;
}

/** @internal */
export const CreateTeamEscalationPolicyHighHandoffStep$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyHighHandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: CreateTeamEscalationPolicyHighTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyHighHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const CreateTeamEscalationPolicyHighHandoffStep$outboundSchema:
  z.ZodType<
    CreateTeamEscalationPolicyHighHandoffStep$Outbound,
    z.ZodTypeDef,
    CreateTeamEscalationPolicyHighHandoffStep
  > = z.object({
    targetType: CreateTeamEscalationPolicyHighTargetType$outboundSchema,
    targetId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      targetType: "target_type",
      targetId: "target_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyHighHandoffStep$ {
  /** @deprecated use `CreateTeamEscalationPolicyHighHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyHighHandoffStep$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHighHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyHighHandoffStep$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHighHandoffStep$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyHighHandoffStep$Outbound;
}

export function createTeamEscalationPolicyHighHandoffStepToJSON(
  createTeamEscalationPolicyHighHandoffStep:
    CreateTeamEscalationPolicyHighHandoffStep,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyHighHandoffStep$outboundSchema.parse(
      createTeamEscalationPolicyHighHandoffStep,
    ),
  );
}

export function createTeamEscalationPolicyHighHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTeamEscalationPolicyHighHandoffStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTeamEscalationPolicyHighHandoffStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTeamEscalationPolicyHighHandoffStep' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyHigh$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyHigh,
  z.ZodTypeDef,
  unknown
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoff_step: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyHighHandoffStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyHigh$Outbound = {
  repetitions?: number | null | undefined;
  handoff_step?:
    | CreateTeamEscalationPolicyHighHandoffStep$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicyHigh$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyHigh$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyHigh
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoffStep: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyHighHandoffStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyHigh$ {
  /** @deprecated use `CreateTeamEscalationPolicyHigh$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicyHigh$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHigh$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicyHigh$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyHigh$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyHigh$Outbound;
}

export function createTeamEscalationPolicyHighToJSON(
  createTeamEscalationPolicyHigh: CreateTeamEscalationPolicyHigh,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyHigh$outboundSchema.parse(
      createTeamEscalationPolicyHigh,
    ),
  );
}

export function createTeamEscalationPolicyHighFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicyHigh, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamEscalationPolicyHigh$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicyHigh' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyMediumTargetType$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyMediumTargetType> = z
    .nativeEnum(CreateTeamEscalationPolicyMediumTargetType);

/** @internal */
export const CreateTeamEscalationPolicyMediumTargetType$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyMediumTargetType> =
    CreateTeamEscalationPolicyMediumTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyMediumTargetType$ {
  /** @deprecated use `CreateTeamEscalationPolicyMediumTargetType$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyMediumTargetType$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyMediumTargetType$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyMediumTargetType$outboundSchema;
}

/** @internal */
export const CreateTeamEscalationPolicyMediumHandoffStep$inboundSchema:
  z.ZodType<
    CreateTeamEscalationPolicyMediumHandoffStep,
    z.ZodTypeDef,
    unknown
  > = z.object({
    target_type: CreateTeamEscalationPolicyMediumTargetType$inboundSchema,
    target_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "target_type": "targetType",
      "target_id": "targetId",
    });
  });

/** @internal */
export type CreateTeamEscalationPolicyMediumHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const CreateTeamEscalationPolicyMediumHandoffStep$outboundSchema:
  z.ZodType<
    CreateTeamEscalationPolicyMediumHandoffStep$Outbound,
    z.ZodTypeDef,
    CreateTeamEscalationPolicyMediumHandoffStep
  > = z.object({
    targetType: CreateTeamEscalationPolicyMediumTargetType$outboundSchema,
    targetId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      targetType: "target_type",
      targetId: "target_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyMediumHandoffStep$ {
  /** @deprecated use `CreateTeamEscalationPolicyMediumHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyMediumHandoffStep$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyMediumHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyMediumHandoffStep$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyMediumHandoffStep$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyMediumHandoffStep$Outbound;
}

export function createTeamEscalationPolicyMediumHandoffStepToJSON(
  createTeamEscalationPolicyMediumHandoffStep:
    CreateTeamEscalationPolicyMediumHandoffStep,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyMediumHandoffStep$outboundSchema.parse(
      createTeamEscalationPolicyMediumHandoffStep,
    ),
  );
}

export function createTeamEscalationPolicyMediumHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTeamEscalationPolicyMediumHandoffStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTeamEscalationPolicyMediumHandoffStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTeamEscalationPolicyMediumHandoffStep' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyMedium$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyMedium,
  z.ZodTypeDef,
  unknown
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoff_step: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyMediumHandoffStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyMedium$Outbound = {
  repetitions?: number | null | undefined;
  handoff_step?:
    | CreateTeamEscalationPolicyMediumHandoffStep$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicyMedium$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyMedium$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyMedium
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoffStep: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyMediumHandoffStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyMedium$ {
  /** @deprecated use `CreateTeamEscalationPolicyMedium$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicyMedium$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyMedium$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicyMedium$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyMedium$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyMedium$Outbound;
}

export function createTeamEscalationPolicyMediumToJSON(
  createTeamEscalationPolicyMedium: CreateTeamEscalationPolicyMedium,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyMedium$outboundSchema.parse(
      createTeamEscalationPolicyMedium,
    ),
  );
}

export function createTeamEscalationPolicyMediumFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicyMedium, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamEscalationPolicyMedium$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicyMedium' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyLowTargetType$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyLowTargetType> = z
    .nativeEnum(CreateTeamEscalationPolicyLowTargetType);

/** @internal */
export const CreateTeamEscalationPolicyLowTargetType$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamEscalationPolicyLowTargetType> =
    CreateTeamEscalationPolicyLowTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyLowTargetType$ {
  /** @deprecated use `CreateTeamEscalationPolicyLowTargetType$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyLowTargetType$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyLowTargetType$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyLowTargetType$outboundSchema;
}

/** @internal */
export const CreateTeamEscalationPolicyLowHandoffStep$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyLowHandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: CreateTeamEscalationPolicyLowTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyLowHandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const CreateTeamEscalationPolicyLowHandoffStep$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyLowHandoffStep$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyLowHandoffStep
> = z.object({
  targetType: CreateTeamEscalationPolicyLowTargetType$outboundSchema,
  targetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyLowHandoffStep$ {
  /** @deprecated use `CreateTeamEscalationPolicyLowHandoffStep$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyLowHandoffStep$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyLowHandoffStep$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyLowHandoffStep$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyLowHandoffStep$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyLowHandoffStep$Outbound;
}

export function createTeamEscalationPolicyLowHandoffStepToJSON(
  createTeamEscalationPolicyLowHandoffStep:
    CreateTeamEscalationPolicyLowHandoffStep,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyLowHandoffStep$outboundSchema.parse(
      createTeamEscalationPolicyLowHandoffStep,
    ),
  );
}

export function createTeamEscalationPolicyLowHandoffStepFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTeamEscalationPolicyLowHandoffStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTeamEscalationPolicyLowHandoffStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTeamEscalationPolicyLowHandoffStep' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyLow$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicyLow,
  z.ZodTypeDef,
  unknown
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoff_step: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyLowHandoffStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type CreateTeamEscalationPolicyLow$Outbound = {
  repetitions?: number | null | undefined;
  handoff_step?:
    | CreateTeamEscalationPolicyLowHandoffStep$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicyLow$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicyLow$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicyLow
> = z.object({
  repetitions: z.nullable(z.number().int()).optional(),
  handoffStep: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyLowHandoffStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyLow$ {
  /** @deprecated use `CreateTeamEscalationPolicyLow$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicyLow$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyLow$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicyLow$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyLow$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyLow$Outbound;
}

export function createTeamEscalationPolicyLowToJSON(
  createTeamEscalationPolicyLow: CreateTeamEscalationPolicyLow,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyLow$outboundSchema.parse(
      createTeamEscalationPolicyLow,
    ),
  );
}

export function createTeamEscalationPolicyLowFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicyLow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamEscalationPolicyLow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicyLow' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicyPrioritizedSettings$inboundSchema:
  z.ZodType<
    CreateTeamEscalationPolicyPrioritizedSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    high: z.nullable(z.lazy(() => CreateTeamEscalationPolicyHigh$inboundSchema))
      .optional(),
    medium: z.nullable(
      z.lazy(() => CreateTeamEscalationPolicyMedium$inboundSchema),
    ).optional(),
    low: z.nullable(z.lazy(() => CreateTeamEscalationPolicyLow$inboundSchema))
      .optional(),
  });

/** @internal */
export type CreateTeamEscalationPolicyPrioritizedSettings$Outbound = {
  high?: CreateTeamEscalationPolicyHigh$Outbound | null | undefined;
  medium?: CreateTeamEscalationPolicyMedium$Outbound | null | undefined;
  low?: CreateTeamEscalationPolicyLow$Outbound | null | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicyPrioritizedSettings$outboundSchema:
  z.ZodType<
    CreateTeamEscalationPolicyPrioritizedSettings$Outbound,
    z.ZodTypeDef,
    CreateTeamEscalationPolicyPrioritizedSettings
  > = z.object({
    high: z.nullable(
      z.lazy(() => CreateTeamEscalationPolicyHigh$outboundSchema),
    ).optional(),
    medium: z.nullable(
      z.lazy(() => CreateTeamEscalationPolicyMedium$outboundSchema),
    ).optional(),
    low: z.nullable(z.lazy(() => CreateTeamEscalationPolicyLow$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicyPrioritizedSettings$ {
  /** @deprecated use `CreateTeamEscalationPolicyPrioritizedSettings$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamEscalationPolicyPrioritizedSettings$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyPrioritizedSettings$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamEscalationPolicyPrioritizedSettings$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicyPrioritizedSettings$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicyPrioritizedSettings$Outbound;
}

export function createTeamEscalationPolicyPrioritizedSettingsToJSON(
  createTeamEscalationPolicyPrioritizedSettings:
    CreateTeamEscalationPolicyPrioritizedSettings,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicyPrioritizedSettings$outboundSchema.parse(
      createTeamEscalationPolicyPrioritizedSettings,
    ),
  );
}

export function createTeamEscalationPolicyPrioritizedSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTeamEscalationPolicyPrioritizedSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTeamEscalationPolicyPrioritizedSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTeamEscalationPolicyPrioritizedSettings' from JSON`,
  );
}

/** @internal */
export const CreateTeamEscalationPolicy$inboundSchema: z.ZodType<
  CreateTeamEscalationPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  repetitions: z.nullable(z.number().int().default(0)),
  default: z.nullable(z.boolean().default(false)),
  step_strategy: z.nullable(z.string()).optional(),
  steps: z.array(z.lazy(() => CreateTeamEscalationPolicyStep$inboundSchema)),
  handoff_step: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyHandoffStep$inboundSchema),
  ).optional(),
  prioritized_settings: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyPrioritizedSettings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "step_strategy": "stepStrategy",
    "handoff_step": "handoffStep",
    "prioritized_settings": "prioritizedSettings",
  });
});

/** @internal */
export type CreateTeamEscalationPolicy$Outbound = {
  name: string;
  description?: string | null | undefined;
  repetitions: number | null;
  default: boolean | null;
  step_strategy?: string | null | undefined;
  steps: Array<CreateTeamEscalationPolicyStep$Outbound>;
  handoff_step?:
    | CreateTeamEscalationPolicyHandoffStep$Outbound
    | null
    | undefined;
  prioritized_settings?:
    | CreateTeamEscalationPolicyPrioritizedSettings$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateTeamEscalationPolicy$outboundSchema: z.ZodType<
  CreateTeamEscalationPolicy$Outbound,
  z.ZodTypeDef,
  CreateTeamEscalationPolicy
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  repetitions: z.nullable(z.number().int().default(0)),
  default: z.nullable(z.boolean().default(false)),
  stepStrategy: z.nullable(z.string()).optional(),
  steps: z.array(z.lazy(() => CreateTeamEscalationPolicyStep$outboundSchema)),
  handoffStep: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyHandoffStep$outboundSchema),
  ).optional(),
  prioritizedSettings: z.nullable(
    z.lazy(() => CreateTeamEscalationPolicyPrioritizedSettings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    stepStrategy: "step_strategy",
    handoffStep: "handoff_step",
    prioritizedSettings: "prioritized_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamEscalationPolicy$ {
  /** @deprecated use `CreateTeamEscalationPolicy$inboundSchema` instead. */
  export const inboundSchema = CreateTeamEscalationPolicy$inboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicy$outboundSchema` instead. */
  export const outboundSchema = CreateTeamEscalationPolicy$outboundSchema;
  /** @deprecated use `CreateTeamEscalationPolicy$Outbound` instead. */
  export type Outbound = CreateTeamEscalationPolicy$Outbound;
}

export function createTeamEscalationPolicyToJSON(
  createTeamEscalationPolicy: CreateTeamEscalationPolicy,
): string {
  return JSON.stringify(
    CreateTeamEscalationPolicy$outboundSchema.parse(createTeamEscalationPolicy),
  );
}

export function createTeamEscalationPolicyFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamEscalationPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamEscalationPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamEscalationPolicy' from JSON`,
  );
}
