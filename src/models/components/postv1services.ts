/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.
 */
export const ServiceTier = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
} as const;
/**
 * Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.
 */
export type ServiceTier = ClosedEnum<typeof ServiceTier>;

export type Functionalities = {
  /**
   * If you are trying to create a new functionality and attach it to this service, set the summary key
   */
  summary?: string | undefined;
  /**
   * If you are trying to reuse a functionality, you may set the ID to attach it to the service
   */
  id?: string | undefined;
};

export type PostV1ServicesLinks = {
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | undefined;
};

/**
 * An object representing a Team that owns the service
 */
export type PostV1ServicesOwner = {
  id: string;
};

export type PostV1ServicesTeams = {
  id: string;
};

export type PostV1ServicesExternalResources = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | undefined;
};

/**
 * Creates a service for the organization, you may also create or attach functionalities to the service on create.
 */
export type PostV1Services = {
  name: string;
  description?: string | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | undefined;
  /**
   * Integer representing service tier. Lower values represent higher criticality. If not specified the default value will be 5.
   */
  serviceTier?: ServiceTier | undefined;
  /**
   * An array of functionalities
   */
  functionalities?: Array<Functionalities> | undefined;
  /**
   * An array of links to associate with this service
   */
  links?: Array<PostV1ServicesLinks> | undefined;
  /**
   * An object representing a Team that owns the service
   */
  owner?: PostV1ServicesOwner | undefined;
  /**
   * An array of teams to attach to this service.
   */
  teams?: Array<PostV1ServicesTeams> | undefined;
  alertOnAdd?: boolean | undefined;
  autoAddRespondingTeam?: boolean | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?: Array<PostV1ServicesExternalResources> | undefined;
};

/** @internal */
export const ServiceTier$inboundSchema: z.ZodNativeEnum<typeof ServiceTier> = z
  .nativeEnum(ServiceTier);

/** @internal */
export const ServiceTier$outboundSchema: z.ZodNativeEnum<typeof ServiceTier> =
  ServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceTier$ {
  /** @deprecated use `ServiceTier$inboundSchema` instead. */
  export const inboundSchema = ServiceTier$inboundSchema;
  /** @deprecated use `ServiceTier$outboundSchema` instead. */
  export const outboundSchema = ServiceTier$outboundSchema;
}

/** @internal */
export const Functionalities$inboundSchema: z.ZodType<
  Functionalities,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type Functionalities$Outbound = {
  summary?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const Functionalities$outboundSchema: z.ZodType<
  Functionalities$Outbound,
  z.ZodTypeDef,
  Functionalities
> = z.object({
  summary: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Functionalities$ {
  /** @deprecated use `Functionalities$inboundSchema` instead. */
  export const inboundSchema = Functionalities$inboundSchema;
  /** @deprecated use `Functionalities$outboundSchema` instead. */
  export const outboundSchema = Functionalities$outboundSchema;
  /** @deprecated use `Functionalities$Outbound` instead. */
  export type Outbound = Functionalities$Outbound;
}

export function functionalitiesToJSON(
  functionalities: Functionalities,
): string {
  return JSON.stringify(Functionalities$outboundSchema.parse(functionalities));
}

export function functionalitiesFromJSON(
  jsonString: string,
): SafeParseResult<Functionalities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Functionalities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Functionalities' from JSON`,
  );
}

/** @internal */
export const PostV1ServicesLinks$inboundSchema: z.ZodType<
  PostV1ServicesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  href_url: z.string(),
  icon_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type PostV1ServicesLinks$Outbound = {
  name: string;
  href_url: string;
  icon_url?: string | undefined;
};

/** @internal */
export const PostV1ServicesLinks$outboundSchema: z.ZodType<
  PostV1ServicesLinks$Outbound,
  z.ZodTypeDef,
  PostV1ServicesLinks
> = z.object({
  name: z.string(),
  hrefUrl: z.string(),
  iconUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ServicesLinks$ {
  /** @deprecated use `PostV1ServicesLinks$inboundSchema` instead. */
  export const inboundSchema = PostV1ServicesLinks$inboundSchema;
  /** @deprecated use `PostV1ServicesLinks$outboundSchema` instead. */
  export const outboundSchema = PostV1ServicesLinks$outboundSchema;
  /** @deprecated use `PostV1ServicesLinks$Outbound` instead. */
  export type Outbound = PostV1ServicesLinks$Outbound;
}

export function postV1ServicesLinksToJSON(
  postV1ServicesLinks: PostV1ServicesLinks,
): string {
  return JSON.stringify(
    PostV1ServicesLinks$outboundSchema.parse(postV1ServicesLinks),
  );
}

export function postV1ServicesLinksFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ServicesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ServicesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ServicesLinks' from JSON`,
  );
}

/** @internal */
export const PostV1ServicesOwner$inboundSchema: z.ZodType<
  PostV1ServicesOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PostV1ServicesOwner$Outbound = {
  id: string;
};

/** @internal */
export const PostV1ServicesOwner$outboundSchema: z.ZodType<
  PostV1ServicesOwner$Outbound,
  z.ZodTypeDef,
  PostV1ServicesOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ServicesOwner$ {
  /** @deprecated use `PostV1ServicesOwner$inboundSchema` instead. */
  export const inboundSchema = PostV1ServicesOwner$inboundSchema;
  /** @deprecated use `PostV1ServicesOwner$outboundSchema` instead. */
  export const outboundSchema = PostV1ServicesOwner$outboundSchema;
  /** @deprecated use `PostV1ServicesOwner$Outbound` instead. */
  export type Outbound = PostV1ServicesOwner$Outbound;
}

export function postV1ServicesOwnerToJSON(
  postV1ServicesOwner: PostV1ServicesOwner,
): string {
  return JSON.stringify(
    PostV1ServicesOwner$outboundSchema.parse(postV1ServicesOwner),
  );
}

export function postV1ServicesOwnerFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ServicesOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ServicesOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ServicesOwner' from JSON`,
  );
}

/** @internal */
export const PostV1ServicesTeams$inboundSchema: z.ZodType<
  PostV1ServicesTeams,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PostV1ServicesTeams$Outbound = {
  id: string;
};

/** @internal */
export const PostV1ServicesTeams$outboundSchema: z.ZodType<
  PostV1ServicesTeams$Outbound,
  z.ZodTypeDef,
  PostV1ServicesTeams
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ServicesTeams$ {
  /** @deprecated use `PostV1ServicesTeams$inboundSchema` instead. */
  export const inboundSchema = PostV1ServicesTeams$inboundSchema;
  /** @deprecated use `PostV1ServicesTeams$outboundSchema` instead. */
  export const outboundSchema = PostV1ServicesTeams$outboundSchema;
  /** @deprecated use `PostV1ServicesTeams$Outbound` instead. */
  export type Outbound = PostV1ServicesTeams$Outbound;
}

export function postV1ServicesTeamsToJSON(
  postV1ServicesTeams: PostV1ServicesTeams,
): string {
  return JSON.stringify(
    PostV1ServicesTeams$outboundSchema.parse(postV1ServicesTeams),
  );
}

export function postV1ServicesTeamsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ServicesTeams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ServicesTeams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ServicesTeams' from JSON`,
  );
}

/** @internal */
export const PostV1ServicesExternalResources$inboundSchema: z.ZodType<
  PostV1ServicesExternalResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.string(),
  connection_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type PostV1ServicesExternalResources$Outbound = {
  remote_id: string;
  connection_type?: string | undefined;
};

/** @internal */
export const PostV1ServicesExternalResources$outboundSchema: z.ZodType<
  PostV1ServicesExternalResources$Outbound,
  z.ZodTypeDef,
  PostV1ServicesExternalResources
> = z.object({
  remoteId: z.string(),
  connectionType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    connectionType: "connection_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ServicesExternalResources$ {
  /** @deprecated use `PostV1ServicesExternalResources$inboundSchema` instead. */
  export const inboundSchema = PostV1ServicesExternalResources$inboundSchema;
  /** @deprecated use `PostV1ServicesExternalResources$outboundSchema` instead. */
  export const outboundSchema = PostV1ServicesExternalResources$outboundSchema;
  /** @deprecated use `PostV1ServicesExternalResources$Outbound` instead. */
  export type Outbound = PostV1ServicesExternalResources$Outbound;
}

export function postV1ServicesExternalResourcesToJSON(
  postV1ServicesExternalResources: PostV1ServicesExternalResources,
): string {
  return JSON.stringify(
    PostV1ServicesExternalResources$outboundSchema.parse(
      postV1ServicesExternalResources,
    ),
  );
}

export function postV1ServicesExternalResourcesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ServicesExternalResources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ServicesExternalResources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ServicesExternalResources' from JSON`,
  );
}

/** @internal */
export const PostV1Services$inboundSchema: z.ZodType<
  PostV1Services,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
  service_tier: ServiceTier$inboundSchema.optional(),
  functionalities: z.array(z.lazy(() => Functionalities$inboundSchema))
    .optional(),
  links: z.array(z.lazy(() => PostV1ServicesLinks$inboundSchema)).optional(),
  owner: z.lazy(() => PostV1ServicesOwner$inboundSchema).optional(),
  teams: z.array(z.lazy(() => PostV1ServicesTeams$inboundSchema)).optional(),
  alert_on_add: z.boolean().optional(),
  auto_add_responding_team: z.boolean().optional(),
  external_resources: z.array(
    z.lazy(() => PostV1ServicesExternalResources$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_tier": "serviceTier",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "external_resources": "externalResources",
  });
});

/** @internal */
export type PostV1Services$Outbound = {
  name: string;
  description?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  service_tier?: number | undefined;
  functionalities?: Array<Functionalities$Outbound> | undefined;
  links?: Array<PostV1ServicesLinks$Outbound> | undefined;
  owner?: PostV1ServicesOwner$Outbound | undefined;
  teams?: Array<PostV1ServicesTeams$Outbound> | undefined;
  alert_on_add?: boolean | undefined;
  auto_add_responding_team?: boolean | undefined;
  external_resources?:
    | Array<PostV1ServicesExternalResources$Outbound>
    | undefined;
};

/** @internal */
export const PostV1Services$outboundSchema: z.ZodType<
  PostV1Services$Outbound,
  z.ZodTypeDef,
  PostV1Services
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  labels: z.record(z.string()).optional(),
  serviceTier: ServiceTier$outboundSchema.optional(),
  functionalities: z.array(z.lazy(() => Functionalities$outboundSchema))
    .optional(),
  links: z.array(z.lazy(() => PostV1ServicesLinks$outboundSchema)).optional(),
  owner: z.lazy(() => PostV1ServicesOwner$outboundSchema).optional(),
  teams: z.array(z.lazy(() => PostV1ServicesTeams$outboundSchema)).optional(),
  alertOnAdd: z.boolean().optional(),
  autoAddRespondingTeam: z.boolean().optional(),
  externalResources: z.array(
    z.lazy(() => PostV1ServicesExternalResources$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceTier: "service_tier",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    externalResources: "external_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Services$ {
  /** @deprecated use `PostV1Services$inboundSchema` instead. */
  export const inboundSchema = PostV1Services$inboundSchema;
  /** @deprecated use `PostV1Services$outboundSchema` instead. */
  export const outboundSchema = PostV1Services$outboundSchema;
  /** @deprecated use `PostV1Services$Outbound` instead. */
  export type Outbound = PostV1Services$Outbound;
}

export function postV1ServicesToJSON(postV1Services: PostV1Services): string {
  return JSON.stringify(PostV1Services$outboundSchema.parse(postV1Services));
}

export function postV1ServicesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Services, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Services$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Services' from JSON`,
  );
}
