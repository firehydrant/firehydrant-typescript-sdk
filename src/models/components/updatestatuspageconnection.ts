/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateStatuspageConnectionSeverity = {
  /**
   * FireHydrant severity slug
   */
  severitySlug: string;
  /**
   * Statuspage.io severity name
   */
  remoteStatus: string;
};

export type Condition = {
  /**
   * FireHydrant condition id
   */
  conditionId: string;
  /**
   * Statuspage.io condition name
   */
  statuspageioCondition: string;
};

/**
 * Statuspage.io status
 */
export const UpdateStatuspageConnectionStatus = {
  Investigating: "investigating",
  Identified: "identified",
  Monitoring: "monitoring",
  Resolved: "resolved",
} as const;
/**
 * Statuspage.io status
 */
export type UpdateStatuspageConnectionStatus = ClosedEnum<
  typeof UpdateStatuspageConnectionStatus
>;

export type MilestoneMapping = {
  /**
   * FireHydrant milestone id
   */
  milestoneId: string;
  /**
   * Statuspage.io status
   */
  status: UpdateStatuspageConnectionStatus;
};

/**
 * Update the given Statuspage integration connection.
 */
export type UpdateStatuspageConnection = {
  pageId?: string | null | undefined;
  severities?: Array<UpdateStatuspageConnectionSeverity> | null | undefined;
  conditions?: Array<Condition> | null | undefined;
  milestoneMappings?: Array<MilestoneMapping> | null | undefined;
};

/** @internal */
export const UpdateStatuspageConnectionSeverity$inboundSchema: z.ZodType<
  UpdateStatuspageConnectionSeverity,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity_slug: z.string(),
  remote_status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "severity_slug": "severitySlug",
    "remote_status": "remoteStatus",
  });
});

/** @internal */
export type UpdateStatuspageConnectionSeverity$Outbound = {
  severity_slug: string;
  remote_status: string;
};

/** @internal */
export const UpdateStatuspageConnectionSeverity$outboundSchema: z.ZodType<
  UpdateStatuspageConnectionSeverity$Outbound,
  z.ZodTypeDef,
  UpdateStatuspageConnectionSeverity
> = z.object({
  severitySlug: z.string(),
  remoteStatus: z.string(),
}).transform((v) => {
  return remap$(v, {
    severitySlug: "severity_slug",
    remoteStatus: "remote_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStatuspageConnectionSeverity$ {
  /** @deprecated use `UpdateStatuspageConnectionSeverity$inboundSchema` instead. */
  export const inboundSchema = UpdateStatuspageConnectionSeverity$inboundSchema;
  /** @deprecated use `UpdateStatuspageConnectionSeverity$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStatuspageConnectionSeverity$outboundSchema;
  /** @deprecated use `UpdateStatuspageConnectionSeverity$Outbound` instead. */
  export type Outbound = UpdateStatuspageConnectionSeverity$Outbound;
}

export function updateStatuspageConnectionSeverityToJSON(
  updateStatuspageConnectionSeverity: UpdateStatuspageConnectionSeverity,
): string {
  return JSON.stringify(
    UpdateStatuspageConnectionSeverity$outboundSchema.parse(
      updateStatuspageConnectionSeverity,
    ),
  );
}

export function updateStatuspageConnectionSeverityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStatuspageConnectionSeverity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStatuspageConnectionSeverity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStatuspageConnectionSeverity' from JSON`,
  );
}

/** @internal */
export const Condition$inboundSchema: z.ZodType<
  Condition,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition_id: z.string(),
  statuspageio_condition: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
    "statuspageio_condition": "statuspageioCondition",
  });
});

/** @internal */
export type Condition$Outbound = {
  condition_id: string;
  statuspageio_condition: string;
};

/** @internal */
export const Condition$outboundSchema: z.ZodType<
  Condition$Outbound,
  z.ZodTypeDef,
  Condition
> = z.object({
  conditionId: z.string(),
  statuspageioCondition: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
    statuspageioCondition: "statuspageio_condition",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Condition$ {
  /** @deprecated use `Condition$inboundSchema` instead. */
  export const inboundSchema = Condition$inboundSchema;
  /** @deprecated use `Condition$outboundSchema` instead. */
  export const outboundSchema = Condition$outboundSchema;
  /** @deprecated use `Condition$Outbound` instead. */
  export type Outbound = Condition$Outbound;
}

export function conditionToJSON(condition: Condition): string {
  return JSON.stringify(Condition$outboundSchema.parse(condition));
}

export function conditionFromJSON(
  jsonString: string,
): SafeParseResult<Condition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Condition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Condition' from JSON`,
  );
}

/** @internal */
export const UpdateStatuspageConnectionStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateStatuspageConnectionStatus
> = z.nativeEnum(UpdateStatuspageConnectionStatus);

/** @internal */
export const UpdateStatuspageConnectionStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateStatuspageConnectionStatus
> = UpdateStatuspageConnectionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStatuspageConnectionStatus$ {
  /** @deprecated use `UpdateStatuspageConnectionStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateStatuspageConnectionStatus$inboundSchema;
  /** @deprecated use `UpdateStatuspageConnectionStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateStatuspageConnectionStatus$outboundSchema;
}

/** @internal */
export const MilestoneMapping$inboundSchema: z.ZodType<
  MilestoneMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  milestone_id: z.string(),
  status: UpdateStatuspageConnectionStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "milestone_id": "milestoneId",
  });
});

/** @internal */
export type MilestoneMapping$Outbound = {
  milestone_id: string;
  status: string;
};

/** @internal */
export const MilestoneMapping$outboundSchema: z.ZodType<
  MilestoneMapping$Outbound,
  z.ZodTypeDef,
  MilestoneMapping
> = z.object({
  milestoneId: z.string(),
  status: UpdateStatuspageConnectionStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    milestoneId: "milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MilestoneMapping$ {
  /** @deprecated use `MilestoneMapping$inboundSchema` instead. */
  export const inboundSchema = MilestoneMapping$inboundSchema;
  /** @deprecated use `MilestoneMapping$outboundSchema` instead. */
  export const outboundSchema = MilestoneMapping$outboundSchema;
  /** @deprecated use `MilestoneMapping$Outbound` instead. */
  export type Outbound = MilestoneMapping$Outbound;
}

export function milestoneMappingToJSON(
  milestoneMapping: MilestoneMapping,
): string {
  return JSON.stringify(
    MilestoneMapping$outboundSchema.parse(milestoneMapping),
  );
}

export function milestoneMappingFromJSON(
  jsonString: string,
): SafeParseResult<MilestoneMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MilestoneMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MilestoneMapping' from JSON`,
  );
}

/** @internal */
export const UpdateStatuspageConnection$inboundSchema: z.ZodType<
  UpdateStatuspageConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  page_id: z.nullable(z.string()).optional(),
  severities: z.nullable(
    z.array(z.lazy(() => UpdateStatuspageConnectionSeverity$inboundSchema)),
  ).optional(),
  conditions: z.nullable(z.array(z.lazy(() => Condition$inboundSchema)))
    .optional(),
  milestone_mappings: z.nullable(
    z.array(z.lazy(() => MilestoneMapping$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_id": "pageId",
    "milestone_mappings": "milestoneMappings",
  });
});

/** @internal */
export type UpdateStatuspageConnection$Outbound = {
  page_id?: string | null | undefined;
  severities?:
    | Array<UpdateStatuspageConnectionSeverity$Outbound>
    | null
    | undefined;
  conditions?: Array<Condition$Outbound> | null | undefined;
  milestone_mappings?: Array<MilestoneMapping$Outbound> | null | undefined;
};

/** @internal */
export const UpdateStatuspageConnection$outboundSchema: z.ZodType<
  UpdateStatuspageConnection$Outbound,
  z.ZodTypeDef,
  UpdateStatuspageConnection
> = z.object({
  pageId: z.nullable(z.string()).optional(),
  severities: z.nullable(
    z.array(z.lazy(() => UpdateStatuspageConnectionSeverity$outboundSchema)),
  ).optional(),
  conditions: z.nullable(z.array(z.lazy(() => Condition$outboundSchema)))
    .optional(),
  milestoneMappings: z.nullable(
    z.array(z.lazy(() => MilestoneMapping$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    pageId: "page_id",
    milestoneMappings: "milestone_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStatuspageConnection$ {
  /** @deprecated use `UpdateStatuspageConnection$inboundSchema` instead. */
  export const inboundSchema = UpdateStatuspageConnection$inboundSchema;
  /** @deprecated use `UpdateStatuspageConnection$outboundSchema` instead. */
  export const outboundSchema = UpdateStatuspageConnection$outboundSchema;
  /** @deprecated use `UpdateStatuspageConnection$Outbound` instead. */
  export type Outbound = UpdateStatuspageConnection$Outbound;
}

export function updateStatuspageConnectionToJSON(
  updateStatuspageConnection: UpdateStatuspageConnection,
): string {
  return JSON.stringify(
    UpdateStatuspageConnection$outboundSchema.parse(updateStatuspageConnection),
  );
}

export function updateStatuspageConnectionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStatuspageConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStatuspageConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStatuspageConnection' from JSON`,
  );
}
