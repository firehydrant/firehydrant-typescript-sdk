/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableTeamEntityLite,
  NullableTeamEntityLite$inboundSchema,
  NullableTeamEntityLite$Outbound,
  NullableTeamEntityLite$outboundSchema,
} from "./nullableteamentitylite.js";

/**
 * An object of label key and values
 */
export type ServiceEntityChecklistLabels = {};

export type ServiceEntityChecklist = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  serviceTier?: number | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  allowedParams?: Array<string> | null | undefined;
  /**
   * An object of label key and values
   */
  labels?: ServiceEntityChecklistLabels | null | undefined;
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  completedChecks?: number | null | undefined;
  owner?: NullableTeamEntityLite | null | undefined;
  serviceChecklistUpdatedAt?: Date | null | undefined;
};

/** @internal */
export const ServiceEntityChecklistLabels$inboundSchema: z.ZodType<
  ServiceEntityChecklistLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ServiceEntityChecklistLabels$Outbound = {};

/** @internal */
export const ServiceEntityChecklistLabels$outboundSchema: z.ZodType<
  ServiceEntityChecklistLabels$Outbound,
  z.ZodTypeDef,
  ServiceEntityChecklistLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceEntityChecklistLabels$ {
  /** @deprecated use `ServiceEntityChecklistLabels$inboundSchema` instead. */
  export const inboundSchema = ServiceEntityChecklistLabels$inboundSchema;
  /** @deprecated use `ServiceEntityChecklistLabels$outboundSchema` instead. */
  export const outboundSchema = ServiceEntityChecklistLabels$outboundSchema;
  /** @deprecated use `ServiceEntityChecklistLabels$Outbound` instead. */
  export type Outbound = ServiceEntityChecklistLabels$Outbound;
}

export function serviceEntityChecklistLabelsToJSON(
  serviceEntityChecklistLabels: ServiceEntityChecklistLabels,
): string {
  return JSON.stringify(
    ServiceEntityChecklistLabels$outboundSchema.parse(
      serviceEntityChecklistLabels,
    ),
  );
}

export function serviceEntityChecklistLabelsFromJSON(
  jsonString: string,
): SafeParseResult<ServiceEntityChecklistLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceEntityChecklistLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceEntityChecklistLabels' from JSON`,
  );
}

/** @internal */
export const ServiceEntityChecklist$inboundSchema: z.ZodType<
  ServiceEntityChecklist,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  service_tier: z.nullable(z.number().int()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  allowed_params: z.nullable(z.array(z.string())).optional(),
  labels: z.nullable(z.lazy(() => ServiceEntityChecklistLabels$inboundSchema))
    .optional(),
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  completed_checks: z.nullable(z.number().int()).optional(),
  owner: z.nullable(NullableTeamEntityLite$inboundSchema).optional(),
  service_checklist_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_tier": "serviceTier",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "allowed_params": "allowedParams",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "completed_checks": "completedChecks",
    "service_checklist_updated_at": "serviceChecklistUpdatedAt",
  });
});

/** @internal */
export type ServiceEntityChecklist$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  service_tier?: number | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  allowed_params?: Array<string> | null | undefined;
  labels?: ServiceEntityChecklistLabels$Outbound | null | undefined;
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  completed_checks?: number | null | undefined;
  owner?: NullableTeamEntityLite$Outbound | null | undefined;
  service_checklist_updated_at?: string | null | undefined;
};

/** @internal */
export const ServiceEntityChecklist$outboundSchema: z.ZodType<
  ServiceEntityChecklist$Outbound,
  z.ZodTypeDef,
  ServiceEntityChecklist
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  serviceTier: z.nullable(z.number().int()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  allowedParams: z.nullable(z.array(z.string())).optional(),
  labels: z.nullable(z.lazy(() => ServiceEntityChecklistLabels$outboundSchema))
    .optional(),
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  completedChecks: z.nullable(z.number().int()).optional(),
  owner: z.nullable(NullableTeamEntityLite$outboundSchema).optional(),
  serviceChecklistUpdatedAt: z.nullable(
    z.date().transform(v => v.toISOString()),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceTier: "service_tier",
    createdAt: "created_at",
    updatedAt: "updated_at",
    allowedParams: "allowed_params",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    completedChecks: "completed_checks",
    serviceChecklistUpdatedAt: "service_checklist_updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceEntityChecklist$ {
  /** @deprecated use `ServiceEntityChecklist$inboundSchema` instead. */
  export const inboundSchema = ServiceEntityChecklist$inboundSchema;
  /** @deprecated use `ServiceEntityChecklist$outboundSchema` instead. */
  export const outboundSchema = ServiceEntityChecklist$outboundSchema;
  /** @deprecated use `ServiceEntityChecklist$Outbound` instead. */
  export type Outbound = ServiceEntityChecklist$Outbound;
}

export function serviceEntityChecklistToJSON(
  serviceEntityChecklist: ServiceEntityChecklist,
): string {
  return JSON.stringify(
    ServiceEntityChecklist$outboundSchema.parse(serviceEntityChecklist),
  );
}

export function serviceEntityChecklistFromJSON(
  jsonString: string,
): SafeParseResult<ServiceEntityChecklist, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceEntityChecklist$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceEntityChecklist' from JSON`,
  );
}
