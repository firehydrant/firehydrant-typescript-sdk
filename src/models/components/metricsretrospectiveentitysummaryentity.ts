/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetricsRetrospectiveEntitySummaryEntity = {
  completed?: number | undefined;
  total?: number | undefined;
  incomplete?: number | undefined;
  mean?: number | undefined;
  shortest?: number | undefined;
  longest?: number | undefined;
  completionPercentage?: number | undefined;
};

/** @internal */
export const MetricsRetrospectiveEntitySummaryEntity$inboundSchema: z.ZodType<
  MetricsRetrospectiveEntitySummaryEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  completed: z.number().int().optional(),
  total: z.number().int().optional(),
  incomplete: z.number().int().optional(),
  mean: z.number().optional(),
  shortest: z.number().optional(),
  longest: z.number().optional(),
  completion_percentage: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_percentage": "completionPercentage",
  });
});

/** @internal */
export type MetricsRetrospectiveEntitySummaryEntity$Outbound = {
  completed?: number | undefined;
  total?: number | undefined;
  incomplete?: number | undefined;
  mean?: number | undefined;
  shortest?: number | undefined;
  longest?: number | undefined;
  completion_percentage?: number | undefined;
};

/** @internal */
export const MetricsRetrospectiveEntitySummaryEntity$outboundSchema: z.ZodType<
  MetricsRetrospectiveEntitySummaryEntity$Outbound,
  z.ZodTypeDef,
  MetricsRetrospectiveEntitySummaryEntity
> = z.object({
  completed: z.number().int().optional(),
  total: z.number().int().optional(),
  incomplete: z.number().int().optional(),
  mean: z.number().optional(),
  shortest: z.number().optional(),
  longest: z.number().optional(),
  completionPercentage: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    completionPercentage: "completion_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsRetrospectiveEntitySummaryEntity$ {
  /** @deprecated use `MetricsRetrospectiveEntitySummaryEntity$inboundSchema` instead. */
  export const inboundSchema =
    MetricsRetrospectiveEntitySummaryEntity$inboundSchema;
  /** @deprecated use `MetricsRetrospectiveEntitySummaryEntity$outboundSchema` instead. */
  export const outboundSchema =
    MetricsRetrospectiveEntitySummaryEntity$outboundSchema;
  /** @deprecated use `MetricsRetrospectiveEntitySummaryEntity$Outbound` instead. */
  export type Outbound = MetricsRetrospectiveEntitySummaryEntity$Outbound;
}

export function metricsRetrospectiveEntitySummaryEntityToJSON(
  metricsRetrospectiveEntitySummaryEntity:
    MetricsRetrospectiveEntitySummaryEntity,
): string {
  return JSON.stringify(
    MetricsRetrospectiveEntitySummaryEntity$outboundSchema.parse(
      metricsRetrospectiveEntitySummaryEntity,
    ),
  );
}

export function metricsRetrospectiveEntitySummaryEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsRetrospectiveEntitySummaryEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsRetrospectiveEntitySummaryEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsRetrospectiveEntitySummaryEntity' from JSON`,
  );
}
