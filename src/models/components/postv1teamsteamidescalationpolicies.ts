/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the step will notify.
 */
export const PostV1TeamsTeamIdEscalationPoliciesType = {
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  SlackChannel: "SlackChannel",
  EntireTeam: "EntireTeam",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the step will notify.
 */
export type PostV1TeamsTeamIdEscalationPoliciesType = ClosedEnum<
  typeof PostV1TeamsTeamIdEscalationPoliciesType
>;

export type Targets = {
  /**
   * The type of target that the step will notify.
   */
  type: PostV1TeamsTeamIdEscalationPoliciesType;
  /**
   * The ID of the target that the step will notify.
   */
  id: string;
};

export type PostV1TeamsTeamIdEscalationPoliciesSteps = {
  /**
   * A list of targets that the step will notify. You can specify up to 15 targets per step.
   */
  targets: Array<Targets>;
  /**
   * An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
   */
  timeout: string;
};

/**
 * The type of target to which the policy will hand off.
 */
export const PostV1TeamsTeamIdEscalationPoliciesTargetType = {
  EscalationPolicy: "EscalationPolicy",
  Team: "Team",
} as const;
/**
 * The type of target to which the policy will hand off.
 */
export type PostV1TeamsTeamIdEscalationPoliciesTargetType = ClosedEnum<
  typeof PostV1TeamsTeamIdEscalationPoliciesTargetType
>;

/**
 * A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
 */
export type HandoffStep = {
  /**
   * The type of target to which the policy will hand off.
   */
  targetType: PostV1TeamsTeamIdEscalationPoliciesTargetType;
  /**
   * The ID of the target to which the policy will hand off.
   */
  targetId: string;
};

/**
 * Create a Signals escalation policy for a team.
 */
export type PostV1TeamsTeamIdEscalationPolicies = {
  /**
   * The escalation policy's name.
   */
  name: string;
  /**
   * A detailed description of the escalation policy.
   */
  description?: string | undefined;
  /**
   * The number of times that the escalation policy should repeat before an alert is dropped.
   */
  repetitions?: number | undefined;
  /**
   * Whether this escalation policy should be the default for the team.
   */
  default?: boolean | undefined;
  /**
   * A list of steps that define how an alert should escalate through the policy.
   */
  steps: Array<PostV1TeamsTeamIdEscalationPoliciesSteps>;
  /**
   * A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
   */
  handoffStep?: HandoffStep | undefined;
};

/** @internal */
export const PostV1TeamsTeamIdEscalationPoliciesType$inboundSchema:
  z.ZodNativeEnum<typeof PostV1TeamsTeamIdEscalationPoliciesType> = z
    .nativeEnum(PostV1TeamsTeamIdEscalationPoliciesType);

/** @internal */
export const PostV1TeamsTeamIdEscalationPoliciesType$outboundSchema:
  z.ZodNativeEnum<typeof PostV1TeamsTeamIdEscalationPoliciesType> =
    PostV1TeamsTeamIdEscalationPoliciesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TeamsTeamIdEscalationPoliciesType$ {
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesType$inboundSchema` instead. */
  export const inboundSchema =
    PostV1TeamsTeamIdEscalationPoliciesType$inboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesType$outboundSchema` instead. */
  export const outboundSchema =
    PostV1TeamsTeamIdEscalationPoliciesType$outboundSchema;
}

/** @internal */
export const Targets$inboundSchema: z.ZodType<Targets, z.ZodTypeDef, unknown> =
  z.object({
    type: PostV1TeamsTeamIdEscalationPoliciesType$inboundSchema,
    id: z.string(),
  });

/** @internal */
export type Targets$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const Targets$outboundSchema: z.ZodType<
  Targets$Outbound,
  z.ZodTypeDef,
  Targets
> = z.object({
  type: PostV1TeamsTeamIdEscalationPoliciesType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Targets$ {
  /** @deprecated use `Targets$inboundSchema` instead. */
  export const inboundSchema = Targets$inboundSchema;
  /** @deprecated use `Targets$outboundSchema` instead. */
  export const outboundSchema = Targets$outboundSchema;
  /** @deprecated use `Targets$Outbound` instead. */
  export type Outbound = Targets$Outbound;
}

export function targetsToJSON(targets: Targets): string {
  return JSON.stringify(Targets$outboundSchema.parse(targets));
}

export function targetsFromJSON(
  jsonString: string,
): SafeParseResult<Targets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Targets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Targets' from JSON`,
  );
}

/** @internal */
export const PostV1TeamsTeamIdEscalationPoliciesSteps$inboundSchema: z.ZodType<
  PostV1TeamsTeamIdEscalationPoliciesSteps,
  z.ZodTypeDef,
  unknown
> = z.object({
  targets: z.array(z.lazy(() => Targets$inboundSchema)),
  timeout: z.string(),
});

/** @internal */
export type PostV1TeamsTeamIdEscalationPoliciesSteps$Outbound = {
  targets: Array<Targets$Outbound>;
  timeout: string;
};

/** @internal */
export const PostV1TeamsTeamIdEscalationPoliciesSteps$outboundSchema: z.ZodType<
  PostV1TeamsTeamIdEscalationPoliciesSteps$Outbound,
  z.ZodTypeDef,
  PostV1TeamsTeamIdEscalationPoliciesSteps
> = z.object({
  targets: z.array(z.lazy(() => Targets$outboundSchema)),
  timeout: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TeamsTeamIdEscalationPoliciesSteps$ {
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesSteps$inboundSchema` instead. */
  export const inboundSchema =
    PostV1TeamsTeamIdEscalationPoliciesSteps$inboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesSteps$outboundSchema` instead. */
  export const outboundSchema =
    PostV1TeamsTeamIdEscalationPoliciesSteps$outboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesSteps$Outbound` instead. */
  export type Outbound = PostV1TeamsTeamIdEscalationPoliciesSteps$Outbound;
}

export function postV1TeamsTeamIdEscalationPoliciesStepsToJSON(
  postV1TeamsTeamIdEscalationPoliciesSteps:
    PostV1TeamsTeamIdEscalationPoliciesSteps,
): string {
  return JSON.stringify(
    PostV1TeamsTeamIdEscalationPoliciesSteps$outboundSchema.parse(
      postV1TeamsTeamIdEscalationPoliciesSteps,
    ),
  );
}

export function postV1TeamsTeamIdEscalationPoliciesStepsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1TeamsTeamIdEscalationPoliciesSteps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1TeamsTeamIdEscalationPoliciesSteps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1TeamsTeamIdEscalationPoliciesSteps' from JSON`,
  );
}

/** @internal */
export const PostV1TeamsTeamIdEscalationPoliciesTargetType$inboundSchema:
  z.ZodNativeEnum<typeof PostV1TeamsTeamIdEscalationPoliciesTargetType> = z
    .nativeEnum(PostV1TeamsTeamIdEscalationPoliciesTargetType);

/** @internal */
export const PostV1TeamsTeamIdEscalationPoliciesTargetType$outboundSchema:
  z.ZodNativeEnum<typeof PostV1TeamsTeamIdEscalationPoliciesTargetType> =
    PostV1TeamsTeamIdEscalationPoliciesTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TeamsTeamIdEscalationPoliciesTargetType$ {
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesTargetType$inboundSchema` instead. */
  export const inboundSchema =
    PostV1TeamsTeamIdEscalationPoliciesTargetType$inboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdEscalationPoliciesTargetType$outboundSchema` instead. */
  export const outboundSchema =
    PostV1TeamsTeamIdEscalationPoliciesTargetType$outboundSchema;
}

/** @internal */
export const HandoffStep$inboundSchema: z.ZodType<
  HandoffStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_type: PostV1TeamsTeamIdEscalationPoliciesTargetType$inboundSchema,
  target_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type HandoffStep$Outbound = {
  target_type: string;
  target_id: string;
};

/** @internal */
export const HandoffStep$outboundSchema: z.ZodType<
  HandoffStep$Outbound,
  z.ZodTypeDef,
  HandoffStep
> = z.object({
  targetType: PostV1TeamsTeamIdEscalationPoliciesTargetType$outboundSchema,
  targetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HandoffStep$ {
  /** @deprecated use `HandoffStep$inboundSchema` instead. */
  export const inboundSchema = HandoffStep$inboundSchema;
  /** @deprecated use `HandoffStep$outboundSchema` instead. */
  export const outboundSchema = HandoffStep$outboundSchema;
  /** @deprecated use `HandoffStep$Outbound` instead. */
  export type Outbound = HandoffStep$Outbound;
}

export function handoffStepToJSON(handoffStep: HandoffStep): string {
  return JSON.stringify(HandoffStep$outboundSchema.parse(handoffStep));
}

export function handoffStepFromJSON(
  jsonString: string,
): SafeParseResult<HandoffStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HandoffStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HandoffStep' from JSON`,
  );
}

/** @internal */
export const PostV1TeamsTeamIdEscalationPolicies$inboundSchema: z.ZodType<
  PostV1TeamsTeamIdEscalationPolicies,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  repetitions: z.number().int().default(0),
  default: z.boolean().default(false),
  steps: z.array(
    z.lazy(() => PostV1TeamsTeamIdEscalationPoliciesSteps$inboundSchema),
  ),
  handoff_step: z.lazy(() => HandoffStep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_step": "handoffStep",
  });
});

/** @internal */
export type PostV1TeamsTeamIdEscalationPolicies$Outbound = {
  name: string;
  description?: string | undefined;
  repetitions: number;
  default: boolean;
  steps: Array<PostV1TeamsTeamIdEscalationPoliciesSteps$Outbound>;
  handoff_step?: HandoffStep$Outbound | undefined;
};

/** @internal */
export const PostV1TeamsTeamIdEscalationPolicies$outboundSchema: z.ZodType<
  PostV1TeamsTeamIdEscalationPolicies$Outbound,
  z.ZodTypeDef,
  PostV1TeamsTeamIdEscalationPolicies
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  repetitions: z.number().int().default(0),
  default: z.boolean().default(false),
  steps: z.array(
    z.lazy(() => PostV1TeamsTeamIdEscalationPoliciesSteps$outboundSchema),
  ),
  handoffStep: z.lazy(() => HandoffStep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffStep: "handoff_step",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TeamsTeamIdEscalationPolicies$ {
  /** @deprecated use `PostV1TeamsTeamIdEscalationPolicies$inboundSchema` instead. */
  export const inboundSchema =
    PostV1TeamsTeamIdEscalationPolicies$inboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdEscalationPolicies$outboundSchema` instead. */
  export const outboundSchema =
    PostV1TeamsTeamIdEscalationPolicies$outboundSchema;
  /** @deprecated use `PostV1TeamsTeamIdEscalationPolicies$Outbound` instead. */
  export type Outbound = PostV1TeamsTeamIdEscalationPolicies$Outbound;
}

export function postV1TeamsTeamIdEscalationPoliciesToJSON(
  postV1TeamsTeamIdEscalationPolicies: PostV1TeamsTeamIdEscalationPolicies,
): string {
  return JSON.stringify(
    PostV1TeamsTeamIdEscalationPolicies$outboundSchema.parse(
      postV1TeamsTeamIdEscalationPolicies,
    ),
  );
}

export function postV1TeamsTeamIdEscalationPoliciesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TeamsTeamIdEscalationPolicies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1TeamsTeamIdEscalationPolicies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TeamsTeamIdEscalationPolicies' from JSON`,
  );
}
