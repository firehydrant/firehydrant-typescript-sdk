/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChangeIdentity = {
  type: string;
  value: string;
};

export const CreateChangeEventType = {
  Link: "link",
} as const;
export type CreateChangeEventType = ClosedEnum<typeof CreateChangeEventType>;

export type CreateChangeEventAttachment = {
  type: CreateChangeEventType;
};

export type Author = {
  source: string;
  sourceId: string;
  name: string;
};

/**
 * Create a change event
 */
export type CreateChangeEvent = {
  summary: string;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  startsAt?: Date | null | undefined;
  endsAt?: Date | null | undefined;
  /**
   * An array of environment IDs
   */
  environments?: Array<string> | null | undefined;
  /**
   * An array of service IDs
   */
  services?: Array<string> | null | undefined;
  /**
   * An array of change IDs
   */
  changes?: Array<string> | null | undefined;
  /**
   * The ID of a change event as assigned by an external provider
   */
  externalId?: string | null | undefined;
  /**
   * If provided and valid, the event will be linked to all changes that have the same identities. Identity *values* must be unique.
   */
  changeIdentities?: Array<ChangeIdentity> | null | undefined;
  /**
   * JSON objects representing attachments, see attachments documentation for the schema
   */
  attachments?: Array<CreateChangeEventAttachment> | null | undefined;
  /**
   * Array of additional authors to add to the change event, the creating actor will automatically be added as an author
   */
  authors?: Array<Author> | null | undefined;
};

/** @internal */
export const ChangeIdentity$inboundSchema: z.ZodType<
  ChangeIdentity,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  value: z.string(),
});

/** @internal */
export type ChangeIdentity$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const ChangeIdentity$outboundSchema: z.ZodType<
  ChangeIdentity$Outbound,
  z.ZodTypeDef,
  ChangeIdentity
> = z.object({
  type: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeIdentity$ {
  /** @deprecated use `ChangeIdentity$inboundSchema` instead. */
  export const inboundSchema = ChangeIdentity$inboundSchema;
  /** @deprecated use `ChangeIdentity$outboundSchema` instead. */
  export const outboundSchema = ChangeIdentity$outboundSchema;
  /** @deprecated use `ChangeIdentity$Outbound` instead. */
  export type Outbound = ChangeIdentity$Outbound;
}

export function changeIdentityToJSON(changeIdentity: ChangeIdentity): string {
  return JSON.stringify(ChangeIdentity$outboundSchema.parse(changeIdentity));
}

export function changeIdentityFromJSON(
  jsonString: string,
): SafeParseResult<ChangeIdentity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangeIdentity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangeIdentity' from JSON`,
  );
}

/** @internal */
export const CreateChangeEventType$inboundSchema: z.ZodNativeEnum<
  typeof CreateChangeEventType
> = z.nativeEnum(CreateChangeEventType);

/** @internal */
export const CreateChangeEventType$outboundSchema: z.ZodNativeEnum<
  typeof CreateChangeEventType
> = CreateChangeEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChangeEventType$ {
  /** @deprecated use `CreateChangeEventType$inboundSchema` instead. */
  export const inboundSchema = CreateChangeEventType$inboundSchema;
  /** @deprecated use `CreateChangeEventType$outboundSchema` instead. */
  export const outboundSchema = CreateChangeEventType$outboundSchema;
}

/** @internal */
export const CreateChangeEventAttachment$inboundSchema: z.ZodType<
  CreateChangeEventAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateChangeEventType$inboundSchema,
});

/** @internal */
export type CreateChangeEventAttachment$Outbound = {
  type: string;
};

/** @internal */
export const CreateChangeEventAttachment$outboundSchema: z.ZodType<
  CreateChangeEventAttachment$Outbound,
  z.ZodTypeDef,
  CreateChangeEventAttachment
> = z.object({
  type: CreateChangeEventType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChangeEventAttachment$ {
  /** @deprecated use `CreateChangeEventAttachment$inboundSchema` instead. */
  export const inboundSchema = CreateChangeEventAttachment$inboundSchema;
  /** @deprecated use `CreateChangeEventAttachment$outboundSchema` instead. */
  export const outboundSchema = CreateChangeEventAttachment$outboundSchema;
  /** @deprecated use `CreateChangeEventAttachment$Outbound` instead. */
  export type Outbound = CreateChangeEventAttachment$Outbound;
}

export function createChangeEventAttachmentToJSON(
  createChangeEventAttachment: CreateChangeEventAttachment,
): string {
  return JSON.stringify(
    CreateChangeEventAttachment$outboundSchema.parse(
      createChangeEventAttachment,
    ),
  );
}

export function createChangeEventAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<CreateChangeEventAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateChangeEventAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateChangeEventAttachment' from JSON`,
  );
}

/** @internal */
export const Author$inboundSchema: z.ZodType<Author, z.ZodTypeDef, unknown> = z
  .object({
    source: z.string(),
    source_id: z.string(),
    name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "source_id": "sourceId",
    });
  });

/** @internal */
export type Author$Outbound = {
  source: string;
  source_id: string;
  name: string;
};

/** @internal */
export const Author$outboundSchema: z.ZodType<
  Author$Outbound,
  z.ZodTypeDef,
  Author
> = z.object({
  source: z.string(),
  sourceId: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    sourceId: "source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Author$ {
  /** @deprecated use `Author$inboundSchema` instead. */
  export const inboundSchema = Author$inboundSchema;
  /** @deprecated use `Author$outboundSchema` instead. */
  export const outboundSchema = Author$outboundSchema;
  /** @deprecated use `Author$Outbound` instead. */
  export type Outbound = Author$Outbound;
}

export function authorToJSON(author: Author): string {
  return JSON.stringify(Author$outboundSchema.parse(author));
}

export function authorFromJSON(
  jsonString: string,
): SafeParseResult<Author, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Author$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Author' from JSON`,
  );
}

/** @internal */
export const CreateChangeEvent$inboundSchema: z.ZodType<
  CreateChangeEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  starts_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  environments: z.nullable(z.array(z.string())).optional(),
  services: z.nullable(z.array(z.string())).optional(),
  changes: z.nullable(z.array(z.string())).optional(),
  external_id: z.nullable(z.string()).optional(),
  change_identities: z.nullable(
    z.array(z.lazy(() => ChangeIdentity$inboundSchema)),
  ).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => CreateChangeEventAttachment$inboundSchema)),
  ).optional(),
  authors: z.nullable(z.array(z.lazy(() => Author$inboundSchema))).optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "external_id": "externalId",
    "change_identities": "changeIdentities",
  });
});

/** @internal */
export type CreateChangeEvent$Outbound = {
  summary: string;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  starts_at?: string | null | undefined;
  ends_at?: string | null | undefined;
  environments?: Array<string> | null | undefined;
  services?: Array<string> | null | undefined;
  changes?: Array<string> | null | undefined;
  external_id?: string | null | undefined;
  change_identities?: Array<ChangeIdentity$Outbound> | null | undefined;
  attachments?: Array<CreateChangeEventAttachment$Outbound> | null | undefined;
  authors?: Array<Author$Outbound> | null | undefined;
};

/** @internal */
export const CreateChangeEvent$outboundSchema: z.ZodType<
  CreateChangeEvent$Outbound,
  z.ZodTypeDef,
  CreateChangeEvent
> = z.object({
  summary: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  environments: z.nullable(z.array(z.string())).optional(),
  services: z.nullable(z.array(z.string())).optional(),
  changes: z.nullable(z.array(z.string())).optional(),
  externalId: z.nullable(z.string()).optional(),
  changeIdentities: z.nullable(
    z.array(z.lazy(() => ChangeIdentity$outboundSchema)),
  ).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => CreateChangeEventAttachment$outboundSchema)),
  ).optional(),
  authors: z.nullable(z.array(z.lazy(() => Author$outboundSchema))).optional(),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
    externalId: "external_id",
    changeIdentities: "change_identities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChangeEvent$ {
  /** @deprecated use `CreateChangeEvent$inboundSchema` instead. */
  export const inboundSchema = CreateChangeEvent$inboundSchema;
  /** @deprecated use `CreateChangeEvent$outboundSchema` instead. */
  export const outboundSchema = CreateChangeEvent$outboundSchema;
  /** @deprecated use `CreateChangeEvent$Outbound` instead. */
  export type Outbound = CreateChangeEvent$Outbound;
}

export function createChangeEventToJSON(
  createChangeEvent: CreateChangeEvent,
): string {
  return JSON.stringify(
    CreateChangeEvent$outboundSchema.parse(createChangeEvent),
  );
}

export function createChangeEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateChangeEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateChangeEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateChangeEvent' from JSON`,
  );
}
