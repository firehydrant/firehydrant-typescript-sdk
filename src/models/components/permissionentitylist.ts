/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PublicApiv1PermissionEntity,
  PublicApiv1PermissionEntity$inboundSchema,
  PublicApiv1PermissionEntity$Outbound,
  PublicApiv1PermissionEntity$outboundSchema,
} from "./publicapiv1permissionentity.js";

/**
 * PermissionEntityList model
 */
export type PermissionEntityList = {
  data?: Array<PublicApiv1PermissionEntity> | null | undefined;
};

/** @internal */
export const PermissionEntityList$inboundSchema: z.ZodType<
  PermissionEntityList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.array(PublicApiv1PermissionEntity$inboundSchema))
    .optional(),
});

/** @internal */
export type PermissionEntityList$Outbound = {
  data?: Array<PublicApiv1PermissionEntity$Outbound> | null | undefined;
};

/** @internal */
export const PermissionEntityList$outboundSchema: z.ZodType<
  PermissionEntityList$Outbound,
  z.ZodTypeDef,
  PermissionEntityList
> = z.object({
  data: z.nullable(z.array(PublicApiv1PermissionEntity$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionEntityList$ {
  /** @deprecated use `PermissionEntityList$inboundSchema` instead. */
  export const inboundSchema = PermissionEntityList$inboundSchema;
  /** @deprecated use `PermissionEntityList$outboundSchema` instead. */
  export const outboundSchema = PermissionEntityList$outboundSchema;
  /** @deprecated use `PermissionEntityList$Outbound` instead. */
  export type Outbound = PermissionEntityList$Outbound;
}

export function permissionEntityListToJSON(
  permissionEntityList: PermissionEntityList,
): string {
  return JSON.stringify(
    PermissionEntityList$outboundSchema.parse(permissionEntityList),
  );
}

export function permissionEntityListFromJSON(
  jsonString: string,
): SafeParseResult<PermissionEntityList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PermissionEntityList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PermissionEntityList' from JSON`,
  );
}
