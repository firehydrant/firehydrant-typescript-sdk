/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AudiencesEntitiesDetailEntity = {
  /**
   * Unique identifier for the detail item
   */
  id?: string | null | undefined;
  /**
   * The need-to-know question (maximum 255 characters)
   */
  question?: string | null | undefined;
  /**
   * AI prompt used to gather this information
   */
  prompt?: string | null | undefined;
  /**
   * Order position of this item in the list
   */
  position?: number | null | undefined;
  /**
   * Slug of the detail, unique and autogenerated
   */
  slug?: string | null | undefined;
};

/** @internal */
export const AudiencesEntitiesDetailEntity$inboundSchema: z.ZodType<
  AudiencesEntitiesDetailEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  question: z.nullable(z.string()).optional(),
  prompt: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  slug: z.nullable(z.string()).optional(),
});

/** @internal */
export type AudiencesEntitiesDetailEntity$Outbound = {
  id?: string | null | undefined;
  question?: string | null | undefined;
  prompt?: string | null | undefined;
  position?: number | null | undefined;
  slug?: string | null | undefined;
};

/** @internal */
export const AudiencesEntitiesDetailEntity$outboundSchema: z.ZodType<
  AudiencesEntitiesDetailEntity$Outbound,
  z.ZodTypeDef,
  AudiencesEntitiesDetailEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  question: z.nullable(z.string()).optional(),
  prompt: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  slug: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AudiencesEntitiesDetailEntity$ {
  /** @deprecated use `AudiencesEntitiesDetailEntity$inboundSchema` instead. */
  export const inboundSchema = AudiencesEntitiesDetailEntity$inboundSchema;
  /** @deprecated use `AudiencesEntitiesDetailEntity$outboundSchema` instead. */
  export const outboundSchema = AudiencesEntitiesDetailEntity$outboundSchema;
  /** @deprecated use `AudiencesEntitiesDetailEntity$Outbound` instead. */
  export type Outbound = AudiencesEntitiesDetailEntity$Outbound;
}

export function audiencesEntitiesDetailEntityToJSON(
  audiencesEntitiesDetailEntity: AudiencesEntitiesDetailEntity,
): string {
  return JSON.stringify(
    AudiencesEntitiesDetailEntity$outboundSchema.parse(
      audiencesEntitiesDetailEntity,
    ),
  );
}

export function audiencesEntitiesDetailEntityFromJSON(
  jsonString: string,
): SafeParseResult<AudiencesEntitiesDetailEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AudiencesEntitiesDetailEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AudiencesEntitiesDetailEntity' from JSON`,
  );
}
