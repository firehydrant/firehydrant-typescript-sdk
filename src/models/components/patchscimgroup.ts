/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchScimGroupOperation = {
  /**
   * The operation to perform. Options are add, remove, replace
   */
  op: string;
  /**
   * The path to the attribute to be modified
   */
  path: string;
};

/**
 * SCIM endpoint to partially update a Team (Colloquial for Group in the SCIM protocol). Supports adding, removing, or replacing members using SCIM PATCH operations.
 */
export type PatchScimGroup = {
  /**
   * An optional trail to log the request
   */
  trail?: string | null | undefined;
  /**
   * An array of operations to perform on the group
   */
  operations: Array<PatchScimGroupOperation>;
};

/** @internal */
export const PatchScimGroupOperation$inboundSchema: z.ZodType<
  PatchScimGroupOperation,
  z.ZodTypeDef,
  unknown
> = z.object({
  op: z.string(),
  path: z.string(),
});

/** @internal */
export type PatchScimGroupOperation$Outbound = {
  op: string;
  path: string;
};

/** @internal */
export const PatchScimGroupOperation$outboundSchema: z.ZodType<
  PatchScimGroupOperation$Outbound,
  z.ZodTypeDef,
  PatchScimGroupOperation
> = z.object({
  op: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchScimGroupOperation$ {
  /** @deprecated use `PatchScimGroupOperation$inboundSchema` instead. */
  export const inboundSchema = PatchScimGroupOperation$inboundSchema;
  /** @deprecated use `PatchScimGroupOperation$outboundSchema` instead. */
  export const outboundSchema = PatchScimGroupOperation$outboundSchema;
  /** @deprecated use `PatchScimGroupOperation$Outbound` instead. */
  export type Outbound = PatchScimGroupOperation$Outbound;
}

export function patchScimGroupOperationToJSON(
  patchScimGroupOperation: PatchScimGroupOperation,
): string {
  return JSON.stringify(
    PatchScimGroupOperation$outboundSchema.parse(patchScimGroupOperation),
  );
}

export function patchScimGroupOperationFromJSON(
  jsonString: string,
): SafeParseResult<PatchScimGroupOperation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchScimGroupOperation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchScimGroupOperation' from JSON`,
  );
}

/** @internal */
export const PatchScimGroup$inboundSchema: z.ZodType<
  PatchScimGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  trail: z.nullable(z.string()).optional(),
  Operations: z.array(z.lazy(() => PatchScimGroupOperation$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "Operations": "operations",
  });
});

/** @internal */
export type PatchScimGroup$Outbound = {
  trail?: string | null | undefined;
  Operations: Array<PatchScimGroupOperation$Outbound>;
};

/** @internal */
export const PatchScimGroup$outboundSchema: z.ZodType<
  PatchScimGroup$Outbound,
  z.ZodTypeDef,
  PatchScimGroup
> = z.object({
  trail: z.nullable(z.string()).optional(),
  operations: z.array(z.lazy(() => PatchScimGroupOperation$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    operations: "Operations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchScimGroup$ {
  /** @deprecated use `PatchScimGroup$inboundSchema` instead. */
  export const inboundSchema = PatchScimGroup$inboundSchema;
  /** @deprecated use `PatchScimGroup$outboundSchema` instead. */
  export const outboundSchema = PatchScimGroup$outboundSchema;
  /** @deprecated use `PatchScimGroup$Outbound` instead. */
  export type Outbound = PatchScimGroup$Outbound;
}

export function patchScimGroupToJSON(patchScimGroup: PatchScimGroup): string {
  return JSON.stringify(PatchScimGroup$outboundSchema.parse(patchScimGroup));
}

export function patchScimGroupFromJSON(
  jsonString: string,
): SafeParseResult<PatchScimGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchScimGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchScimGroup' from JSON`,
  );
}
