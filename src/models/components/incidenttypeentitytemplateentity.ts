/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentTypeEntityTemplateImpactEntity,
  IncidentTypeEntityTemplateImpactEntity$inboundSchema,
  IncidentTypeEntityTemplateImpactEntity$Outbound,
  IncidentTypeEntityTemplateImpactEntity$outboundSchema,
} from "./incidenttypeentitytemplateimpactentity.js";

/**
 * Arbitrary key:value pairs of labels for your incidents.
 */
export type IncidentTypeEntityTemplateEntityLabels = {};

export type IncidentTypeEntityTemplateEntity = {
  incidentName?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  customerImpactSummary?: string | undefined;
  /**
   * Arbitrary key:value pairs of labels for your incidents.
   */
  labels?: IncidentTypeEntityTemplateEntityLabels | undefined;
  severity?: string | undefined;
  priority?: string | undefined;
  tagList?: Array<string> | undefined;
  runbookIds?: Array<string> | undefined;
  teamIds?: Array<string> | undefined;
  privateIncident?: boolean | undefined;
  customFields?: string | undefined;
  impacts?: Array<IncidentTypeEntityTemplateImpactEntity> | undefined;
};

/** @internal */
export const IncidentTypeEntityTemplateEntityLabels$inboundSchema: z.ZodType<
  IncidentTypeEntityTemplateEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IncidentTypeEntityTemplateEntityLabels$Outbound = {};

/** @internal */
export const IncidentTypeEntityTemplateEntityLabels$outboundSchema: z.ZodType<
  IncidentTypeEntityTemplateEntityLabels$Outbound,
  z.ZodTypeDef,
  IncidentTypeEntityTemplateEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentTypeEntityTemplateEntityLabels$ {
  /** @deprecated use `IncidentTypeEntityTemplateEntityLabels$inboundSchema` instead. */
  export const inboundSchema =
    IncidentTypeEntityTemplateEntityLabels$inboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateEntityLabels$outboundSchema` instead. */
  export const outboundSchema =
    IncidentTypeEntityTemplateEntityLabels$outboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateEntityLabels$Outbound` instead. */
  export type Outbound = IncidentTypeEntityTemplateEntityLabels$Outbound;
}

export function incidentTypeEntityTemplateEntityLabelsToJSON(
  incidentTypeEntityTemplateEntityLabels:
    IncidentTypeEntityTemplateEntityLabels,
): string {
  return JSON.stringify(
    IncidentTypeEntityTemplateEntityLabels$outboundSchema.parse(
      incidentTypeEntityTemplateEntityLabels,
    ),
  );
}

export function incidentTypeEntityTemplateEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<IncidentTypeEntityTemplateEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentTypeEntityTemplateEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentTypeEntityTemplateEntityLabels' from JSON`,
  );
}

/** @internal */
export const IncidentTypeEntityTemplateEntity$inboundSchema: z.ZodType<
  IncidentTypeEntityTemplateEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  customer_impact_summary: z.string().optional(),
  labels: z.lazy(() => IncidentTypeEntityTemplateEntityLabels$inboundSchema)
    .optional(),
  severity: z.string().optional(),
  priority: z.string().optional(),
  tag_list: z.array(z.string()).optional(),
  runbook_ids: z.array(z.string()).optional(),
  team_ids: z.array(z.string()).optional(),
  private_incident: z.boolean().optional(),
  custom_fields: z.string().optional(),
  impacts: z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_name": "incidentName",
    "customer_impact_summary": "customerImpactSummary",
    "tag_list": "tagList",
    "runbook_ids": "runbookIds",
    "team_ids": "teamIds",
    "private_incident": "privateIncident",
    "custom_fields": "customFields",
  });
});

/** @internal */
export type IncidentTypeEntityTemplateEntity$Outbound = {
  incident_name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  customer_impact_summary?: string | undefined;
  labels?: IncidentTypeEntityTemplateEntityLabels$Outbound | undefined;
  severity?: string | undefined;
  priority?: string | undefined;
  tag_list?: Array<string> | undefined;
  runbook_ids?: Array<string> | undefined;
  team_ids?: Array<string> | undefined;
  private_incident?: boolean | undefined;
  custom_fields?: string | undefined;
  impacts?: Array<IncidentTypeEntityTemplateImpactEntity$Outbound> | undefined;
};

/** @internal */
export const IncidentTypeEntityTemplateEntity$outboundSchema: z.ZodType<
  IncidentTypeEntityTemplateEntity$Outbound,
  z.ZodTypeDef,
  IncidentTypeEntityTemplateEntity
> = z.object({
  incidentName: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  customerImpactSummary: z.string().optional(),
  labels: z.lazy(() => IncidentTypeEntityTemplateEntityLabels$outboundSchema)
    .optional(),
  severity: z.string().optional(),
  priority: z.string().optional(),
  tagList: z.array(z.string()).optional(),
  runbookIds: z.array(z.string()).optional(),
  teamIds: z.array(z.string()).optional(),
  privateIncident: z.boolean().optional(),
  customFields: z.string().optional(),
  impacts: z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    incidentName: "incident_name",
    customerImpactSummary: "customer_impact_summary",
    tagList: "tag_list",
    runbookIds: "runbook_ids",
    teamIds: "team_ids",
    privateIncident: "private_incident",
    customFields: "custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentTypeEntityTemplateEntity$ {
  /** @deprecated use `IncidentTypeEntityTemplateEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentTypeEntityTemplateEntity$inboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentTypeEntityTemplateEntity$outboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateEntity$Outbound` instead. */
  export type Outbound = IncidentTypeEntityTemplateEntity$Outbound;
}

export function incidentTypeEntityTemplateEntityToJSON(
  incidentTypeEntityTemplateEntity: IncidentTypeEntityTemplateEntity,
): string {
  return JSON.stringify(
    IncidentTypeEntityTemplateEntity$outboundSchema.parse(
      incidentTypeEntityTemplateEntity,
    ),
  );
}

export function incidentTypeEntityTemplateEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentTypeEntityTemplateEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentTypeEntityTemplateEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentTypeEntityTemplateEntity' from JSON`,
  );
}
