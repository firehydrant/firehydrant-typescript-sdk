/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The direction you would like to vote, or if you dig it
 */
export const Direction = {
  Up: "up",
  Down: "down",
  Dig: "dig",
} as const;
/**
 * The direction you would like to vote, or if you dig it
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * Upvote or downvote an object
 */
export type UpdateVote = {
  /**
   * The direction you would like to vote, or if you dig it
   */
  direction: Direction;
};

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const UpdateVote$inboundSchema: z.ZodType<
  UpdateVote,
  z.ZodTypeDef,
  unknown
> = z.object({
  direction: Direction$inboundSchema,
});

/** @internal */
export type UpdateVote$Outbound = {
  direction: string;
};

/** @internal */
export const UpdateVote$outboundSchema: z.ZodType<
  UpdateVote$Outbound,
  z.ZodTypeDef,
  UpdateVote
> = z.object({
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateVote$ {
  /** @deprecated use `UpdateVote$inboundSchema` instead. */
  export const inboundSchema = UpdateVote$inboundSchema;
  /** @deprecated use `UpdateVote$outboundSchema` instead. */
  export const outboundSchema = UpdateVote$outboundSchema;
  /** @deprecated use `UpdateVote$Outbound` instead. */
  export type Outbound = UpdateVote$Outbound;
}

export function updateVoteToJSON(updateVote: UpdateVote): string {
  return JSON.stringify(UpdateVote$outboundSchema.parse(updateVote));
}

export function updateVoteFromJSON(
  jsonString: string,
): SafeParseResult<UpdateVote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateVote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateVote' from JSON`,
  );
}
