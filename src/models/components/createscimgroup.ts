/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateScimGroupMember = {
  /**
   * String that represents the user's UUID to assign to the team
   */
  value: string;
};

/**
 * SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.
 */
export type CreateScimGroup = {
  /**
   * The name of the team being created
   */
  displayName: string;
  members: Array<CreateScimGroupMember>;
};

/** @internal */
export const CreateScimGroupMember$inboundSchema: z.ZodType<
  CreateScimGroupMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type CreateScimGroupMember$Outbound = {
  value: string;
};

/** @internal */
export const CreateScimGroupMember$outboundSchema: z.ZodType<
  CreateScimGroupMember$Outbound,
  z.ZodTypeDef,
  CreateScimGroupMember
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScimGroupMember$ {
  /** @deprecated use `CreateScimGroupMember$inboundSchema` instead. */
  export const inboundSchema = CreateScimGroupMember$inboundSchema;
  /** @deprecated use `CreateScimGroupMember$outboundSchema` instead. */
  export const outboundSchema = CreateScimGroupMember$outboundSchema;
  /** @deprecated use `CreateScimGroupMember$Outbound` instead. */
  export type Outbound = CreateScimGroupMember$Outbound;
}

export function createScimGroupMemberToJSON(
  createScimGroupMember: CreateScimGroupMember,
): string {
  return JSON.stringify(
    CreateScimGroupMember$outboundSchema.parse(createScimGroupMember),
  );
}

export function createScimGroupMemberFromJSON(
  jsonString: string,
): SafeParseResult<CreateScimGroupMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScimGroupMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScimGroupMember' from JSON`,
  );
}

/** @internal */
export const CreateScimGroup$inboundSchema: z.ZodType<
  CreateScimGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => CreateScimGroupMember$inboundSchema)),
});

/** @internal */
export type CreateScimGroup$Outbound = {
  displayName: string;
  members: Array<CreateScimGroupMember$Outbound>;
};

/** @internal */
export const CreateScimGroup$outboundSchema: z.ZodType<
  CreateScimGroup$Outbound,
  z.ZodTypeDef,
  CreateScimGroup
> = z.object({
  displayName: z.string(),
  members: z.array(z.lazy(() => CreateScimGroupMember$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScimGroup$ {
  /** @deprecated use `CreateScimGroup$inboundSchema` instead. */
  export const inboundSchema = CreateScimGroup$inboundSchema;
  /** @deprecated use `CreateScimGroup$outboundSchema` instead. */
  export const outboundSchema = CreateScimGroup$outboundSchema;
  /** @deprecated use `CreateScimGroup$Outbound` instead. */
  export type Outbound = CreateScimGroup$Outbound;
}

export function createScimGroupToJSON(
  createScimGroup: CreateScimGroup,
): string {
  return JSON.stringify(CreateScimGroup$outboundSchema.parse(createScimGroup));
}

export function createScimGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateScimGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScimGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScimGroup' from JSON`,
  );
}
