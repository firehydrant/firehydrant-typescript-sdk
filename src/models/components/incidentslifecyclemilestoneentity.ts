/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";

export type IncidentsLifecycleMilestoneEntity = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  position?: number | undefined;
  occurredAt?: Date | undefined;
  duration?: string | undefined;
  updatedBy?: AuthorEntity | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const IncidentsLifecycleMilestoneEntity$inboundSchema: z.ZodType<
  IncidentsLifecycleMilestoneEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  position: z.number().int().optional(),
  occurred_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  duration: z.string().optional(),
  updated_by: AuthorEntity$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
    "updated_by": "updatedBy",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type IncidentsLifecycleMilestoneEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  position?: number | undefined;
  occurred_at?: string | undefined;
  duration?: string | undefined;
  updated_by?: AuthorEntity$Outbound | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const IncidentsLifecycleMilestoneEntity$outboundSchema: z.ZodType<
  IncidentsLifecycleMilestoneEntity$Outbound,
  z.ZodTypeDef,
  IncidentsLifecycleMilestoneEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  position: z.number().int().optional(),
  occurredAt: z.date().transform(v => v.toISOString()).optional(),
  duration: z.string().optional(),
  updatedBy: AuthorEntity$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
    updatedBy: "updated_by",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsLifecycleMilestoneEntity$ {
  /** @deprecated use `IncidentsLifecycleMilestoneEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsLifecycleMilestoneEntity$inboundSchema;
  /** @deprecated use `IncidentsLifecycleMilestoneEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsLifecycleMilestoneEntity$outboundSchema;
  /** @deprecated use `IncidentsLifecycleMilestoneEntity$Outbound` instead. */
  export type Outbound = IncidentsLifecycleMilestoneEntity$Outbound;
}

export function incidentsLifecycleMilestoneEntityToJSON(
  incidentsLifecycleMilestoneEntity: IncidentsLifecycleMilestoneEntity,
): string {
  return JSON.stringify(
    IncidentsLifecycleMilestoneEntity$outboundSchema.parse(
      incidentsLifecycleMilestoneEntity,
    ),
  );
}

export function incidentsLifecycleMilestoneEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsLifecycleMilestoneEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsLifecycleMilestoneEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsLifecycleMilestoneEntity' from JSON`,
  );
}
