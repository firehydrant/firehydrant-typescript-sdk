/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentEntity,
  IncidentEntity$inboundSchema,
  IncidentEntity$Outbound,
  IncidentEntity$outboundSchema,
} from "./incidententity.js";
import {
  ScheduledMaintenancesImpactEntity,
  ScheduledMaintenancesImpactEntity$inboundSchema,
  ScheduledMaintenancesImpactEntity$Outbound,
  ScheduledMaintenancesImpactEntity$outboundSchema,
} from "./scheduledmaintenancesimpactentity.js";
import {
  ScheduledMaintenancesStatusPageEntity,
  ScheduledMaintenancesStatusPageEntity$inboundSchema,
  ScheduledMaintenancesStatusPageEntity$Outbound,
  ScheduledMaintenancesStatusPageEntity$outboundSchema,
} from "./scheduledmaintenancesstatuspageentity.js";

/**
 * An object of label key and values
 */
export type ScheduledMaintenanceEntityLabels = {};

/**
 * ScheduledMaintenanceEntity model
 */
export type ScheduledMaintenanceEntity = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  startsAt?: Date | undefined;
  endsAt?: Date | undefined;
  /**
   * IncidentEntity model
   */
  incident?: IncidentEntity | undefined;
  statusPages?: Array<ScheduledMaintenancesStatusPageEntity> | undefined;
  impacts?: Array<ScheduledMaintenancesImpactEntity> | undefined;
  /**
   * An object of label key and values
   */
  labels?: ScheduledMaintenanceEntityLabels | undefined;
};

/** @internal */
export const ScheduledMaintenanceEntityLabels$inboundSchema: z.ZodType<
  ScheduledMaintenanceEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ScheduledMaintenanceEntityLabels$Outbound = {};

/** @internal */
export const ScheduledMaintenanceEntityLabels$outboundSchema: z.ZodType<
  ScheduledMaintenanceEntityLabels$Outbound,
  z.ZodTypeDef,
  ScheduledMaintenanceEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledMaintenanceEntityLabels$ {
  /** @deprecated use `ScheduledMaintenanceEntityLabels$inboundSchema` instead. */
  export const inboundSchema = ScheduledMaintenanceEntityLabels$inboundSchema;
  /** @deprecated use `ScheduledMaintenanceEntityLabels$outboundSchema` instead. */
  export const outboundSchema = ScheduledMaintenanceEntityLabels$outboundSchema;
  /** @deprecated use `ScheduledMaintenanceEntityLabels$Outbound` instead. */
  export type Outbound = ScheduledMaintenanceEntityLabels$Outbound;
}

export function scheduledMaintenanceEntityLabelsToJSON(
  scheduledMaintenanceEntityLabels: ScheduledMaintenanceEntityLabels,
): string {
  return JSON.stringify(
    ScheduledMaintenanceEntityLabels$outboundSchema.parse(
      scheduledMaintenanceEntityLabels,
    ),
  );
}

export function scheduledMaintenanceEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledMaintenanceEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledMaintenanceEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledMaintenanceEntityLabels' from JSON`,
  );
}

/** @internal */
export const ScheduledMaintenanceEntity$inboundSchema: z.ZodType<
  ScheduledMaintenanceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  incident: IncidentEntity$inboundSchema.optional(),
  status_pages: z.array(ScheduledMaintenancesStatusPageEntity$inboundSchema)
    .optional(),
  impacts: z.array(ScheduledMaintenancesImpactEntity$inboundSchema).optional(),
  labels: z.lazy(() => ScheduledMaintenanceEntityLabels$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "starts_at": "startsAt",
    "ends_at": "endsAt",
    "status_pages": "statusPages",
  });
});

/** @internal */
export type ScheduledMaintenanceEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  starts_at?: string | undefined;
  ends_at?: string | undefined;
  incident?: IncidentEntity$Outbound | undefined;
  status_pages?:
    | Array<ScheduledMaintenancesStatusPageEntity$Outbound>
    | undefined;
  impacts?: Array<ScheduledMaintenancesImpactEntity$Outbound> | undefined;
  labels?: ScheduledMaintenanceEntityLabels$Outbound | undefined;
};

/** @internal */
export const ScheduledMaintenanceEntity$outboundSchema: z.ZodType<
  ScheduledMaintenanceEntity$Outbound,
  z.ZodTypeDef,
  ScheduledMaintenanceEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  startsAt: z.date().transform(v => v.toISOString()).optional(),
  endsAt: z.date().transform(v => v.toISOString()).optional(),
  incident: IncidentEntity$outboundSchema.optional(),
  statusPages: z.array(ScheduledMaintenancesStatusPageEntity$outboundSchema)
    .optional(),
  impacts: z.array(ScheduledMaintenancesImpactEntity$outboundSchema).optional(),
  labels: z.lazy(() => ScheduledMaintenanceEntityLabels$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    startsAt: "starts_at",
    endsAt: "ends_at",
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledMaintenanceEntity$ {
  /** @deprecated use `ScheduledMaintenanceEntity$inboundSchema` instead. */
  export const inboundSchema = ScheduledMaintenanceEntity$inboundSchema;
  /** @deprecated use `ScheduledMaintenanceEntity$outboundSchema` instead. */
  export const outboundSchema = ScheduledMaintenanceEntity$outboundSchema;
  /** @deprecated use `ScheduledMaintenanceEntity$Outbound` instead. */
  export type Outbound = ScheduledMaintenanceEntity$Outbound;
}

export function scheduledMaintenanceEntityToJSON(
  scheduledMaintenanceEntity: ScheduledMaintenanceEntity,
): string {
  return JSON.stringify(
    ScheduledMaintenanceEntity$outboundSchema.parse(scheduledMaintenanceEntity),
  );
}

export function scheduledMaintenanceEntityFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledMaintenanceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledMaintenanceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledMaintenanceEntity' from JSON`,
  );
}
