/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";
import {
  ChangeEventEntity,
  ChangeEventEntity$inboundSchema,
  ChangeEventEntity$Outbound,
  ChangeEventEntity$outboundSchema,
} from "./changeevententity.js";

export const IncidentsRelatedChangeEventEntityType = {
  Caused: "caused",
  Fixed: "fixed",
  Suspect: "suspect",
  Dismissed: "dismissed",
} as const;
export type IncidentsRelatedChangeEventEntityType = ClosedEnum<
  typeof IncidentsRelatedChangeEventEntityType
>;

/**
 * Incidents_RelatedChangeEventEntity model
 */
export type IncidentsRelatedChangeEventEntity = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * The reason why this change event is related to this incident
   */
  why?: string | undefined;
  type?: IncidentsRelatedChangeEventEntityType | undefined;
  /**
   * ChangeEventEntity model
   */
  changeEvent?: ChangeEventEntity | undefined;
  incidentId?: string | undefined;
  createdBy?: AuthorEntity | undefined;
};

/** @internal */
export const IncidentsRelatedChangeEventEntityType$inboundSchema:
  z.ZodNativeEnum<typeof IncidentsRelatedChangeEventEntityType> = z.nativeEnum(
    IncidentsRelatedChangeEventEntityType,
  );

/** @internal */
export const IncidentsRelatedChangeEventEntityType$outboundSchema:
  z.ZodNativeEnum<typeof IncidentsRelatedChangeEventEntityType> =
    IncidentsRelatedChangeEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRelatedChangeEventEntityType$ {
  /** @deprecated use `IncidentsRelatedChangeEventEntityType$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsRelatedChangeEventEntityType$inboundSchema;
  /** @deprecated use `IncidentsRelatedChangeEventEntityType$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsRelatedChangeEventEntityType$outboundSchema;
}

/** @internal */
export const IncidentsRelatedChangeEventEntity$inboundSchema: z.ZodType<
  IncidentsRelatedChangeEventEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  why: z.string().optional(),
  type: IncidentsRelatedChangeEventEntityType$inboundSchema.optional(),
  change_event: ChangeEventEntity$inboundSchema.optional(),
  incident_id: z.string().optional(),
  created_by: AuthorEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "change_event": "changeEvent",
    "incident_id": "incidentId",
    "created_by": "createdBy",
  });
});

/** @internal */
export type IncidentsRelatedChangeEventEntity$Outbound = {
  id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  why?: string | undefined;
  type?: string | undefined;
  change_event?: ChangeEventEntity$Outbound | undefined;
  incident_id?: string | undefined;
  created_by?: AuthorEntity$Outbound | undefined;
};

/** @internal */
export const IncidentsRelatedChangeEventEntity$outboundSchema: z.ZodType<
  IncidentsRelatedChangeEventEntity$Outbound,
  z.ZodTypeDef,
  IncidentsRelatedChangeEventEntity
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  why: z.string().optional(),
  type: IncidentsRelatedChangeEventEntityType$outboundSchema.optional(),
  changeEvent: ChangeEventEntity$outboundSchema.optional(),
  incidentId: z.string().optional(),
  createdBy: AuthorEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    changeEvent: "change_event",
    incidentId: "incident_id",
    createdBy: "created_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRelatedChangeEventEntity$ {
  /** @deprecated use `IncidentsRelatedChangeEventEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsRelatedChangeEventEntity$inboundSchema;
  /** @deprecated use `IncidentsRelatedChangeEventEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsRelatedChangeEventEntity$outboundSchema;
  /** @deprecated use `IncidentsRelatedChangeEventEntity$Outbound` instead. */
  export type Outbound = IncidentsRelatedChangeEventEntity$Outbound;
}

export function incidentsRelatedChangeEventEntityToJSON(
  incidentsRelatedChangeEventEntity: IncidentsRelatedChangeEventEntity,
): string {
  return JSON.stringify(
    IncidentsRelatedChangeEventEntity$outboundSchema.parse(
      incidentsRelatedChangeEventEntity,
    ),
  );
}

export function incidentsRelatedChangeEventEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsRelatedChangeEventEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsRelatedChangeEventEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsRelatedChangeEventEntity' from JSON`,
  );
}
