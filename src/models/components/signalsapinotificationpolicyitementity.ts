/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const NotificationGroupMethod = {
  Any: "any",
  Push: "push",
  Email: "email",
  Voice: "voice",
  MobileText: "mobile_text",
  Chat: "chat",
} as const;
export type NotificationGroupMethod = ClosedEnum<
  typeof NotificationGroupMethod
>;

export const Priority = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
} as const;
export type Priority = ClosedEnum<typeof Priority>;

/**
 * Signals_API_NotificationPolicyItemEntity model
 */
export type SignalsAPINotificationPolicyItemEntity = {
  id?: string | null | undefined;
  notificationGroupMethod?: NotificationGroupMethod | null | undefined;
  /**
   * The maximum delay for notifications
   */
  maxDelay?: string | null | undefined;
  priority?: Priority | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const NotificationGroupMethod$inboundSchema: z.ZodNativeEnum<
  typeof NotificationGroupMethod
> = z.nativeEnum(NotificationGroupMethod);

/** @internal */
export const NotificationGroupMethod$outboundSchema: z.ZodNativeEnum<
  typeof NotificationGroupMethod
> = NotificationGroupMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupMethod$ {
  /** @deprecated use `NotificationGroupMethod$inboundSchema` instead. */
  export const inboundSchema = NotificationGroupMethod$inboundSchema;
  /** @deprecated use `NotificationGroupMethod$outboundSchema` instead. */
  export const outboundSchema = NotificationGroupMethod$outboundSchema;
}

/** @internal */
export const Priority$inboundSchema: z.ZodNativeEnum<typeof Priority> = z
  .nativeEnum(Priority);

/** @internal */
export const Priority$outboundSchema: z.ZodNativeEnum<typeof Priority> =
  Priority$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Priority$ {
  /** @deprecated use `Priority$inboundSchema` instead. */
  export const inboundSchema = Priority$inboundSchema;
  /** @deprecated use `Priority$outboundSchema` instead. */
  export const outboundSchema = Priority$outboundSchema;
}

/** @internal */
export const SignalsAPINotificationPolicyItemEntity$inboundSchema: z.ZodType<
  SignalsAPINotificationPolicyItemEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  notification_group_method: z.nullable(NotificationGroupMethod$inboundSchema)
    .optional(),
  max_delay: z.nullable(z.string()).optional(),
  priority: z.nullable(Priority$inboundSchema).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "notification_group_method": "notificationGroupMethod",
    "max_delay": "maxDelay",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SignalsAPINotificationPolicyItemEntity$Outbound = {
  id?: string | null | undefined;
  notification_group_method?: string | null | undefined;
  max_delay?: string | null | undefined;
  priority?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const SignalsAPINotificationPolicyItemEntity$outboundSchema: z.ZodType<
  SignalsAPINotificationPolicyItemEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPINotificationPolicyItemEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  notificationGroupMethod: z.nullable(NotificationGroupMethod$outboundSchema)
    .optional(),
  maxDelay: z.nullable(z.string()).optional(),
  priority: z.nullable(Priority$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    notificationGroupMethod: "notification_group_method",
    maxDelay: "max_delay",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPINotificationPolicyItemEntity$ {
  /** @deprecated use `SignalsAPINotificationPolicyItemEntity$inboundSchema` instead. */
  export const inboundSchema =
    SignalsAPINotificationPolicyItemEntity$inboundSchema;
  /** @deprecated use `SignalsAPINotificationPolicyItemEntity$outboundSchema` instead. */
  export const outboundSchema =
    SignalsAPINotificationPolicyItemEntity$outboundSchema;
  /** @deprecated use `SignalsAPINotificationPolicyItemEntity$Outbound` instead. */
  export type Outbound = SignalsAPINotificationPolicyItemEntity$Outbound;
}

export function signalsAPINotificationPolicyItemEntityToJSON(
  signalsAPINotificationPolicyItemEntity:
    SignalsAPINotificationPolicyItemEntity,
): string {
  return JSON.stringify(
    SignalsAPINotificationPolicyItemEntity$outboundSchema.parse(
      signalsAPINotificationPolicyItemEntity,
    ),
  );
}

export function signalsAPINotificationPolicyItemEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPINotificationPolicyItemEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SignalsAPINotificationPolicyItemEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPINotificationPolicyItemEntity' from JSON`,
  );
}
