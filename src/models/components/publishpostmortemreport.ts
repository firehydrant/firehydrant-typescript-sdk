/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Publish = {
  True: "true",
} as const;
export type Publish = ClosedEnum<typeof Publish>;

/**
 * Marks an incident retrospective as published and emails all of the participants in the report the summary
 */
export type PublishPostMortemReport = {
  publish?: Publish | null | undefined;
  /**
   * An array of user IDs with whom to share the report
   */
  userIds?: Array<string> | null | undefined;
  /**
   * An array of team IDs with whom to share the report
   */
  teamIds?: Array<string> | null | undefined;
};

/** @internal */
export const Publish$inboundSchema: z.ZodNativeEnum<typeof Publish> = z
  .nativeEnum(Publish);

/** @internal */
export const Publish$outboundSchema: z.ZodNativeEnum<typeof Publish> =
  Publish$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Publish$ {
  /** @deprecated use `Publish$inboundSchema` instead. */
  export const inboundSchema = Publish$inboundSchema;
  /** @deprecated use `Publish$outboundSchema` instead. */
  export const outboundSchema = Publish$outboundSchema;
}

/** @internal */
export const PublishPostMortemReport$inboundSchema: z.ZodType<
  PublishPostMortemReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  publish: z.nullable(Publish$inboundSchema).optional(),
  user_ids: z.nullable(z.array(z.string())).optional(),
  team_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_ids": "userIds",
    "team_ids": "teamIds",
  });
});

/** @internal */
export type PublishPostMortemReport$Outbound = {
  publish?: string | null | undefined;
  user_ids?: Array<string> | null | undefined;
  team_ids?: Array<string> | null | undefined;
};

/** @internal */
export const PublishPostMortemReport$outboundSchema: z.ZodType<
  PublishPostMortemReport$Outbound,
  z.ZodTypeDef,
  PublishPostMortemReport
> = z.object({
  publish: z.nullable(Publish$outboundSchema).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
  teamIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    userIds: "user_ids",
    teamIds: "team_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishPostMortemReport$ {
  /** @deprecated use `PublishPostMortemReport$inboundSchema` instead. */
  export const inboundSchema = PublishPostMortemReport$inboundSchema;
  /** @deprecated use `PublishPostMortemReport$outboundSchema` instead. */
  export const outboundSchema = PublishPostMortemReport$outboundSchema;
  /** @deprecated use `PublishPostMortemReport$Outbound` instead. */
  export type Outbound = PublishPostMortemReport$Outbound;
}

export function publishPostMortemReportToJSON(
  publishPostMortemReport: PublishPostMortemReport,
): string {
  return JSON.stringify(
    PublishPostMortemReport$outboundSchema.parse(publishPostMortemReport),
  );
}

export function publishPostMortemReportFromJSON(
  jsonString: string,
): SafeParseResult<PublishPostMortemReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishPostMortemReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishPostMortemReport' from JSON`,
  );
}
