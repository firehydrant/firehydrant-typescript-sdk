/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Creates an environment for the organization
 */
export type PostV1Environments = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const PostV1Environments$inboundSchema: z.ZodType<
  PostV1Environments,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type PostV1Environments$Outbound = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const PostV1Environments$outboundSchema: z.ZodType<
  PostV1Environments$Outbound,
  z.ZodTypeDef,
  PostV1Environments
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Environments$ {
  /** @deprecated use `PostV1Environments$inboundSchema` instead. */
  export const inboundSchema = PostV1Environments$inboundSchema;
  /** @deprecated use `PostV1Environments$outboundSchema` instead. */
  export const outboundSchema = PostV1Environments$outboundSchema;
  /** @deprecated use `PostV1Environments$Outbound` instead. */
  export type Outbound = PostV1Environments$Outbound;
}

export function postV1EnvironmentsToJSON(
  postV1Environments: PostV1Environments,
): string {
  return JSON.stringify(
    PostV1Environments$outboundSchema.parse(postV1Environments),
  );
}

export function postV1EnvironmentsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Environments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Environments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Environments' from JSON`,
  );
}
