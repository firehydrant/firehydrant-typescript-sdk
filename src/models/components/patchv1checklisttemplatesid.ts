/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1ChecklistTemplatesIdChecks = {
  /**
   * Specify the check ID when updating an already existing check
   */
  id?: string | undefined;
  /**
   * The description of the check
   */
  description?: string | undefined;
  /**
   * The name of the check
   */
  name: string;
};

export type PatchV1ChecklistTemplatesIdConnectedServices = {
  id: string;
  /**
   * Set to `true` to remove checklist from service
   */
  remove?: boolean | undefined;
};

/**
 * Update a checklist templates attributes
 */
export type PatchV1ChecklistTemplatesId = {
  name?: string | undefined;
  description?: string | undefined;
  /**
   * An array of checks for the checklist template
   */
  checks?: Array<PatchV1ChecklistTemplatesIdChecks> | undefined;
  /**
   * The ID of the Team that owns the checklist template
   */
  teamId?: string | undefined;
  /**
   * Array of service IDs to attach checklist template to
   */
  connectedServices?:
    | Array<PatchV1ChecklistTemplatesIdConnectedServices>
    | undefined;
  /**
   * If set to true, any services tagged on the checklist that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the services
   */
  removeRemainingConnectedServices?: boolean | undefined;
};

/** @internal */
export const PatchV1ChecklistTemplatesIdChecks$inboundSchema: z.ZodType<
  PatchV1ChecklistTemplatesIdChecks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  name: z.string(),
});

/** @internal */
export type PatchV1ChecklistTemplatesIdChecks$Outbound = {
  id?: string | undefined;
  description?: string | undefined;
  name: string;
};

/** @internal */
export const PatchV1ChecklistTemplatesIdChecks$outboundSchema: z.ZodType<
  PatchV1ChecklistTemplatesIdChecks$Outbound,
  z.ZodTypeDef,
  PatchV1ChecklistTemplatesIdChecks
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChecklistTemplatesIdChecks$ {
  /** @deprecated use `PatchV1ChecklistTemplatesIdChecks$inboundSchema` instead. */
  export const inboundSchema = PatchV1ChecklistTemplatesIdChecks$inboundSchema;
  /** @deprecated use `PatchV1ChecklistTemplatesIdChecks$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ChecklistTemplatesIdChecks$outboundSchema;
  /** @deprecated use `PatchV1ChecklistTemplatesIdChecks$Outbound` instead. */
  export type Outbound = PatchV1ChecklistTemplatesIdChecks$Outbound;
}

export function patchV1ChecklistTemplatesIdChecksToJSON(
  patchV1ChecklistTemplatesIdChecks: PatchV1ChecklistTemplatesIdChecks,
): string {
  return JSON.stringify(
    PatchV1ChecklistTemplatesIdChecks$outboundSchema.parse(
      patchV1ChecklistTemplatesIdChecks,
    ),
  );
}

export function patchV1ChecklistTemplatesIdChecksFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ChecklistTemplatesIdChecks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ChecklistTemplatesIdChecks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ChecklistTemplatesIdChecks' from JSON`,
  );
}

/** @internal */
export const PatchV1ChecklistTemplatesIdConnectedServices$inboundSchema:
  z.ZodType<
    PatchV1ChecklistTemplatesIdConnectedServices,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    remove: z.boolean().optional(),
  });

/** @internal */
export type PatchV1ChecklistTemplatesIdConnectedServices$Outbound = {
  id: string;
  remove?: boolean | undefined;
};

/** @internal */
export const PatchV1ChecklistTemplatesIdConnectedServices$outboundSchema:
  z.ZodType<
    PatchV1ChecklistTemplatesIdConnectedServices$Outbound,
    z.ZodTypeDef,
    PatchV1ChecklistTemplatesIdConnectedServices
  > = z.object({
    id: z.string(),
    remove: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChecklistTemplatesIdConnectedServices$ {
  /** @deprecated use `PatchV1ChecklistTemplatesIdConnectedServices$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ChecklistTemplatesIdConnectedServices$inboundSchema;
  /** @deprecated use `PatchV1ChecklistTemplatesIdConnectedServices$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ChecklistTemplatesIdConnectedServices$outboundSchema;
  /** @deprecated use `PatchV1ChecklistTemplatesIdConnectedServices$Outbound` instead. */
  export type Outbound = PatchV1ChecklistTemplatesIdConnectedServices$Outbound;
}

export function patchV1ChecklistTemplatesIdConnectedServicesToJSON(
  patchV1ChecklistTemplatesIdConnectedServices:
    PatchV1ChecklistTemplatesIdConnectedServices,
): string {
  return JSON.stringify(
    PatchV1ChecklistTemplatesIdConnectedServices$outboundSchema.parse(
      patchV1ChecklistTemplatesIdConnectedServices,
    ),
  );
}

export function patchV1ChecklistTemplatesIdConnectedServicesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ChecklistTemplatesIdConnectedServices,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ChecklistTemplatesIdConnectedServices$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1ChecklistTemplatesIdConnectedServices' from JSON`,
  );
}

/** @internal */
export const PatchV1ChecklistTemplatesId$inboundSchema: z.ZodType<
  PatchV1ChecklistTemplatesId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  checks: z.array(z.lazy(() => PatchV1ChecklistTemplatesIdChecks$inboundSchema))
    .optional(),
  team_id: z.string().optional(),
  connected_services: z.array(
    z.lazy(() => PatchV1ChecklistTemplatesIdConnectedServices$inboundSchema),
  ).optional(),
  remove_remaining_connected_services: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "connected_services": "connectedServices",
    "remove_remaining_connected_services": "removeRemainingConnectedServices",
  });
});

/** @internal */
export type PatchV1ChecklistTemplatesId$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  checks?: Array<PatchV1ChecklistTemplatesIdChecks$Outbound> | undefined;
  team_id?: string | undefined;
  connected_services?:
    | Array<PatchV1ChecklistTemplatesIdConnectedServices$Outbound>
    | undefined;
  remove_remaining_connected_services?: boolean | undefined;
};

/** @internal */
export const PatchV1ChecklistTemplatesId$outboundSchema: z.ZodType<
  PatchV1ChecklistTemplatesId$Outbound,
  z.ZodTypeDef,
  PatchV1ChecklistTemplatesId
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  checks: z.array(
    z.lazy(() => PatchV1ChecklistTemplatesIdChecks$outboundSchema),
  ).optional(),
  teamId: z.string().optional(),
  connectedServices: z.array(
    z.lazy(() => PatchV1ChecklistTemplatesIdConnectedServices$outboundSchema),
  ).optional(),
  removeRemainingConnectedServices: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    connectedServices: "connected_services",
    removeRemainingConnectedServices: "remove_remaining_connected_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ChecklistTemplatesId$ {
  /** @deprecated use `PatchV1ChecklistTemplatesId$inboundSchema` instead. */
  export const inboundSchema = PatchV1ChecklistTemplatesId$inboundSchema;
  /** @deprecated use `PatchV1ChecklistTemplatesId$outboundSchema` instead. */
  export const outboundSchema = PatchV1ChecklistTemplatesId$outboundSchema;
  /** @deprecated use `PatchV1ChecklistTemplatesId$Outbound` instead. */
  export type Outbound = PatchV1ChecklistTemplatesId$Outbound;
}

export function patchV1ChecklistTemplatesIdToJSON(
  patchV1ChecklistTemplatesId: PatchV1ChecklistTemplatesId,
): string {
  return JSON.stringify(
    PatchV1ChecklistTemplatesId$outboundSchema.parse(
      patchV1ChecklistTemplatesId,
    ),
  );
}

export function patchV1ChecklistTemplatesIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ChecklistTemplatesId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ChecklistTemplatesId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ChecklistTemplatesId' from JSON`,
  );
}
