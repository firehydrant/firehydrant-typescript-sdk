/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Severities = {
  /**
   * FireHydrant severity slug
   */
  severitySlug: string;
  /**
   * Statuspage.io severity name
   */
  remoteStatus: string;
};

export type Conditions = {
  /**
   * FireHydrant condition id
   */
  conditionId: string;
  /**
   * Statuspage.io condition name
   */
  statuspageioCondition: string;
};

/**
 * Statuspage.io status
 */
export const PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus = {
  Investigating: "investigating",
  Identified: "identified",
  Monitoring: "monitoring",
  Resolved: "resolved",
} as const;
/**
 * Statuspage.io status
 */
export type PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus =
  ClosedEnum<typeof PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus>;

export type MilestoneMappings = {
  /**
   * FireHydrant milestone id
   */
  milestoneId: string;
  /**
   * Statuspage.io status
   */
  status: PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus;
};

/**
 * Update the given Statuspage integration connection.
 */
export type PatchV1IntegrationsStatuspageConnectionsConnectionId = {
  pageId?: string | undefined;
  severities?: Array<Severities> | undefined;
  conditions?: Array<Conditions> | undefined;
  milestoneMappings?: Array<MilestoneMappings> | undefined;
};

/** @internal */
export const Severities$inboundSchema: z.ZodType<
  Severities,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity_slug: z.string(),
  remote_status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "severity_slug": "severitySlug",
    "remote_status": "remoteStatus",
  });
});

/** @internal */
export type Severities$Outbound = {
  severity_slug: string;
  remote_status: string;
};

/** @internal */
export const Severities$outboundSchema: z.ZodType<
  Severities$Outbound,
  z.ZodTypeDef,
  Severities
> = z.object({
  severitySlug: z.string(),
  remoteStatus: z.string(),
}).transform((v) => {
  return remap$(v, {
    severitySlug: "severity_slug",
    remoteStatus: "remote_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Severities$ {
  /** @deprecated use `Severities$inboundSchema` instead. */
  export const inboundSchema = Severities$inboundSchema;
  /** @deprecated use `Severities$outboundSchema` instead. */
  export const outboundSchema = Severities$outboundSchema;
  /** @deprecated use `Severities$Outbound` instead. */
  export type Outbound = Severities$Outbound;
}

export function severitiesToJSON(severities: Severities): string {
  return JSON.stringify(Severities$outboundSchema.parse(severities));
}

export function severitiesFromJSON(
  jsonString: string,
): SafeParseResult<Severities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Severities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Severities' from JSON`,
  );
}

/** @internal */
export const Conditions$inboundSchema: z.ZodType<
  Conditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition_id: z.string(),
  statuspageio_condition: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
    "statuspageio_condition": "statuspageioCondition",
  });
});

/** @internal */
export type Conditions$Outbound = {
  condition_id: string;
  statuspageio_condition: string;
};

/** @internal */
export const Conditions$outboundSchema: z.ZodType<
  Conditions$Outbound,
  z.ZodTypeDef,
  Conditions
> = z.object({
  conditionId: z.string(),
  statuspageioCondition: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
    statuspageioCondition: "statuspageio_condition",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conditions$ {
  /** @deprecated use `Conditions$inboundSchema` instead. */
  export const inboundSchema = Conditions$inboundSchema;
  /** @deprecated use `Conditions$outboundSchema` instead. */
  export const outboundSchema = Conditions$outboundSchema;
  /** @deprecated use `Conditions$Outbound` instead. */
  export type Outbound = Conditions$Outbound;
}

export function conditionsToJSON(conditions: Conditions): string {
  return JSON.stringify(Conditions$outboundSchema.parse(conditions));
}

export function conditionsFromJSON(
  jsonString: string,
): SafeParseResult<Conditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conditions' from JSON`,
  );
}

/** @internal */
export const PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus
  > = z.nativeEnum(PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus);

/** @internal */
export const PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus
  > = PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$ {
  /** @deprecated use `PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$inboundSchema;
  /** @deprecated use `PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$outboundSchema;
}

/** @internal */
export const MilestoneMappings$inboundSchema: z.ZodType<
  MilestoneMappings,
  z.ZodTypeDef,
  unknown
> = z.object({
  milestone_id: z.string(),
  status:
    PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "milestone_id": "milestoneId",
  });
});

/** @internal */
export type MilestoneMappings$Outbound = {
  milestone_id: string;
  status: string;
};

/** @internal */
export const MilestoneMappings$outboundSchema: z.ZodType<
  MilestoneMappings$Outbound,
  z.ZodTypeDef,
  MilestoneMappings
> = z.object({
  milestoneId: z.string(),
  status:
    PatchV1IntegrationsStatuspageConnectionsConnectionIdStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    milestoneId: "milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MilestoneMappings$ {
  /** @deprecated use `MilestoneMappings$inboundSchema` instead. */
  export const inboundSchema = MilestoneMappings$inboundSchema;
  /** @deprecated use `MilestoneMappings$outboundSchema` instead. */
  export const outboundSchema = MilestoneMappings$outboundSchema;
  /** @deprecated use `MilestoneMappings$Outbound` instead. */
  export type Outbound = MilestoneMappings$Outbound;
}

export function milestoneMappingsToJSON(
  milestoneMappings: MilestoneMappings,
): string {
  return JSON.stringify(
    MilestoneMappings$outboundSchema.parse(milestoneMappings),
  );
}

export function milestoneMappingsFromJSON(
  jsonString: string,
): SafeParseResult<MilestoneMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MilestoneMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MilestoneMappings' from JSON`,
  );
}

/** @internal */
export const PatchV1IntegrationsStatuspageConnectionsConnectionId$inboundSchema:
  z.ZodType<
    PatchV1IntegrationsStatuspageConnectionsConnectionId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    page_id: z.string().optional(),
    severities: z.array(z.lazy(() => Severities$inboundSchema)).optional(),
    conditions: z.array(z.lazy(() => Conditions$inboundSchema)).optional(),
    milestone_mappings: z.array(z.lazy(() => MilestoneMappings$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "page_id": "pageId",
      "milestone_mappings": "milestoneMappings",
    });
  });

/** @internal */
export type PatchV1IntegrationsStatuspageConnectionsConnectionId$Outbound = {
  page_id?: string | undefined;
  severities?: Array<Severities$Outbound> | undefined;
  conditions?: Array<Conditions$Outbound> | undefined;
  milestone_mappings?: Array<MilestoneMappings$Outbound> | undefined;
};

/** @internal */
export const PatchV1IntegrationsStatuspageConnectionsConnectionId$outboundSchema:
  z.ZodType<
    PatchV1IntegrationsStatuspageConnectionsConnectionId$Outbound,
    z.ZodTypeDef,
    PatchV1IntegrationsStatuspageConnectionsConnectionId
  > = z.object({
    pageId: z.string().optional(),
    severities: z.array(z.lazy(() => Severities$outboundSchema)).optional(),
    conditions: z.array(z.lazy(() => Conditions$outboundSchema)).optional(),
    milestoneMappings: z.array(z.lazy(() => MilestoneMappings$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      pageId: "page_id",
      milestoneMappings: "milestone_mappings",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IntegrationsStatuspageConnectionsConnectionId$ {
  /** @deprecated use `PatchV1IntegrationsStatuspageConnectionsConnectionId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1IntegrationsStatuspageConnectionsConnectionId$inboundSchema;
  /** @deprecated use `PatchV1IntegrationsStatuspageConnectionsConnectionId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1IntegrationsStatuspageConnectionsConnectionId$outboundSchema;
  /** @deprecated use `PatchV1IntegrationsStatuspageConnectionsConnectionId$Outbound` instead. */
  export type Outbound =
    PatchV1IntegrationsStatuspageConnectionsConnectionId$Outbound;
}

export function patchV1IntegrationsStatuspageConnectionsConnectionIdToJSON(
  patchV1IntegrationsStatuspageConnectionsConnectionId:
    PatchV1IntegrationsStatuspageConnectionsConnectionId,
): string {
  return JSON.stringify(
    PatchV1IntegrationsStatuspageConnectionsConnectionId$outboundSchema.parse(
      patchV1IntegrationsStatuspageConnectionsConnectionId,
    ),
  );
}

export function patchV1IntegrationsStatuspageConnectionsConnectionIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1IntegrationsStatuspageConnectionsConnectionId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1IntegrationsStatuspageConnectionsConnectionId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1IntegrationsStatuspageConnectionsConnectionId' from JSON`,
  );
}
