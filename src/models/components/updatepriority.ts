/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a specific priority
 */
export type UpdatePriority = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  default?: boolean | null | undefined;
};

/** @internal */
export const UpdatePriority$inboundSchema: z.ZodType<
  UpdatePriority,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  default: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdatePriority$Outbound = {
  slug?: string | null | undefined;
  description?: string | null | undefined;
  default?: boolean | null | undefined;
};

/** @internal */
export const UpdatePriority$outboundSchema: z.ZodType<
  UpdatePriority$Outbound,
  z.ZodTypeDef,
  UpdatePriority
> = z.object({
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  default: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePriority$ {
  /** @deprecated use `UpdatePriority$inboundSchema` instead. */
  export const inboundSchema = UpdatePriority$inboundSchema;
  /** @deprecated use `UpdatePriority$outboundSchema` instead. */
  export const outboundSchema = UpdatePriority$outboundSchema;
  /** @deprecated use `UpdatePriority$Outbound` instead. */
  export type Outbound = UpdatePriority$Outbound;
}

export function updatePriorityToJSON(updatePriority: UpdatePriority): string {
  return JSON.stringify(UpdatePriority$outboundSchema.parse(updatePriority));
}

export function updatePriorityFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePriority, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePriority$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePriority' from JSON`,
  );
}
