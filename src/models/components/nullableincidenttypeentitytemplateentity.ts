/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentTypeEntityTemplateImpactEntity,
  IncidentTypeEntityTemplateImpactEntity$inboundSchema,
  IncidentTypeEntityTemplateImpactEntity$Outbound,
  IncidentTypeEntityTemplateImpactEntity$outboundSchema,
} from "./incidenttypeentitytemplateimpactentity.js";

/**
 * Arbitrary key:value pairs of labels for your incidents.
 */
export type NullableIncidentTypeEntityTemplateEntityLabels = {};

export type NullableIncidentTypeEntityTemplateEntity = {
  incidentName?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  customerImpactSummary?: string | null | undefined;
  /**
   * Arbitrary key:value pairs of labels for your incidents.
   */
  labels?: NullableIncidentTypeEntityTemplateEntityLabels | null | undefined;
  severity?: string | null | undefined;
  priority?: string | null | undefined;
  tagList?: Array<string> | null | undefined;
  runbookIds?: Array<string> | null | undefined;
  teamIds?: Array<string> | null | undefined;
  privateIncident?: boolean | null | undefined;
  customFields?: string | null | undefined;
  impacts?: Array<IncidentTypeEntityTemplateImpactEntity> | null | undefined;
};

/** @internal */
export const NullableIncidentTypeEntityTemplateEntityLabels$inboundSchema:
  z.ZodType<
    NullableIncidentTypeEntityTemplateEntityLabels,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type NullableIncidentTypeEntityTemplateEntityLabels$Outbound = {};

/** @internal */
export const NullableIncidentTypeEntityTemplateEntityLabels$outboundSchema:
  z.ZodType<
    NullableIncidentTypeEntityTemplateEntityLabels$Outbound,
    z.ZodTypeDef,
    NullableIncidentTypeEntityTemplateEntityLabels
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIncidentTypeEntityTemplateEntityLabels$ {
  /** @deprecated use `NullableIncidentTypeEntityTemplateEntityLabels$inboundSchema` instead. */
  export const inboundSchema =
    NullableIncidentTypeEntityTemplateEntityLabels$inboundSchema;
  /** @deprecated use `NullableIncidentTypeEntityTemplateEntityLabels$outboundSchema` instead. */
  export const outboundSchema =
    NullableIncidentTypeEntityTemplateEntityLabels$outboundSchema;
  /** @deprecated use `NullableIncidentTypeEntityTemplateEntityLabels$Outbound` instead. */
  export type Outbound =
    NullableIncidentTypeEntityTemplateEntityLabels$Outbound;
}

export function nullableIncidentTypeEntityTemplateEntityLabelsToJSON(
  nullableIncidentTypeEntityTemplateEntityLabels:
    NullableIncidentTypeEntityTemplateEntityLabels,
): string {
  return JSON.stringify(
    NullableIncidentTypeEntityTemplateEntityLabels$outboundSchema.parse(
      nullableIncidentTypeEntityTemplateEntityLabels,
    ),
  );
}

export function nullableIncidentTypeEntityTemplateEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableIncidentTypeEntityTemplateEntityLabels,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIncidentTypeEntityTemplateEntityLabels$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableIncidentTypeEntityTemplateEntityLabels' from JSON`,
  );
}

/** @internal */
export const NullableIncidentTypeEntityTemplateEntity$inboundSchema: z.ZodType<
  NullableIncidentTypeEntityTemplateEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  customer_impact_summary: z.nullable(z.string()).optional(),
  labels: z.nullable(
    z.lazy(() => NullableIncidentTypeEntityTemplateEntityLabels$inboundSchema),
  ).optional(),
  severity: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  tag_list: z.nullable(z.array(z.string())).optional(),
  runbook_ids: z.nullable(z.array(z.string())).optional(),
  team_ids: z.nullable(z.array(z.string())).optional(),
  private_incident: z.nullable(z.boolean()).optional(),
  custom_fields: z.nullable(z.string()).optional(),
  impacts: z.nullable(
    z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_name": "incidentName",
    "customer_impact_summary": "customerImpactSummary",
    "tag_list": "tagList",
    "runbook_ids": "runbookIds",
    "team_ids": "teamIds",
    "private_incident": "privateIncident",
    "custom_fields": "customFields",
  });
});

/** @internal */
export type NullableIncidentTypeEntityTemplateEntity$Outbound = {
  incident_name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  customer_impact_summary?: string | null | undefined;
  labels?:
    | NullableIncidentTypeEntityTemplateEntityLabels$Outbound
    | null
    | undefined;
  severity?: string | null | undefined;
  priority?: string | null | undefined;
  tag_list?: Array<string> | null | undefined;
  runbook_ids?: Array<string> | null | undefined;
  team_ids?: Array<string> | null | undefined;
  private_incident?: boolean | null | undefined;
  custom_fields?: string | null | undefined;
  impacts?:
    | Array<IncidentTypeEntityTemplateImpactEntity$Outbound>
    | null
    | undefined;
};

/** @internal */
export const NullableIncidentTypeEntityTemplateEntity$outboundSchema: z.ZodType<
  NullableIncidentTypeEntityTemplateEntity$Outbound,
  z.ZodTypeDef,
  NullableIncidentTypeEntityTemplateEntity
> = z.object({
  incidentName: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  customerImpactSummary: z.nullable(z.string()).optional(),
  labels: z.nullable(
    z.lazy(() => NullableIncidentTypeEntityTemplateEntityLabels$outboundSchema),
  ).optional(),
  severity: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  tagList: z.nullable(z.array(z.string())).optional(),
  runbookIds: z.nullable(z.array(z.string())).optional(),
  teamIds: z.nullable(z.array(z.string())).optional(),
  privateIncident: z.nullable(z.boolean()).optional(),
  customFields: z.nullable(z.string()).optional(),
  impacts: z.nullable(
    z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    incidentName: "incident_name",
    customerImpactSummary: "customer_impact_summary",
    tagList: "tag_list",
    runbookIds: "runbook_ids",
    teamIds: "team_ids",
    privateIncident: "private_incident",
    customFields: "custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIncidentTypeEntityTemplateEntity$ {
  /** @deprecated use `NullableIncidentTypeEntityTemplateEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableIncidentTypeEntityTemplateEntity$inboundSchema;
  /** @deprecated use `NullableIncidentTypeEntityTemplateEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableIncidentTypeEntityTemplateEntity$outboundSchema;
  /** @deprecated use `NullableIncidentTypeEntityTemplateEntity$Outbound` instead. */
  export type Outbound = NullableIncidentTypeEntityTemplateEntity$Outbound;
}

export function nullableIncidentTypeEntityTemplateEntityToJSON(
  nullableIncidentTypeEntityTemplateEntity:
    NullableIncidentTypeEntityTemplateEntity,
): string {
  return JSON.stringify(
    NullableIncidentTypeEntityTemplateEntity$outboundSchema.parse(
      nullableIncidentTypeEntityTemplateEntity,
    ),
  );
}

export function nullableIncidentTypeEntityTemplateEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableIncidentTypeEntityTemplateEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIncidentTypeEntityTemplateEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableIncidentTypeEntityTemplateEntity' from JSON`,
  );
}
