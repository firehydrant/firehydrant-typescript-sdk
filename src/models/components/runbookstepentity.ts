/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RulesRuleEntity,
  RulesRuleEntity$inboundSchema,
  RulesRuleEntity$Outbound,
  RulesRuleEntity$outboundSchema,
} from "./rulesruleentity.js";
import {
  RunbooksActionsEntity,
  RunbooksActionsEntity$inboundSchema,
  RunbooksActionsEntity$Outbound,
  RunbooksActionsEntity$outboundSchema,
} from "./runbooksactionsentity.js";
import {
  VotesEntity,
  VotesEntity$inboundSchema,
  VotesEntity$Outbound,
  VotesEntity$outboundSchema,
} from "./votesentity.js";

/**
 * An unstructured object of key/value pairs describing the config settings for the step.
 */
export type Config = {};

export type ActionElements = {};

export type StepElements = {};

export type RunbookStepEntity = {
  name?: string | undefined;
  actionId?: string | undefined;
  stepId?: string | undefined;
  /**
   * An unstructured object of key/value pairs describing the config settings for the step.
   */
  config?: Config | undefined;
  /**
   * A list of action elements
   */
  actionElements?: Array<ActionElements> | undefined;
  /**
   * A list of step elements
   */
  stepElements?: Array<StepElements> | undefined;
  automatic?: boolean | undefined;
  delayDuration?: Date | undefined;
  action?: RunbooksActionsEntity | undefined;
  reruns?: boolean | undefined;
  repeats?: boolean | undefined;
  repeatsDuration?: Date | undefined;
  /**
   * VotesEntity model
   */
  votes?: VotesEntity | undefined;
  rule?: RulesRuleEntity | undefined;
};

/** @internal */
export const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Config$Outbound = {};

/** @internal */
export const Config$outboundSchema: z.ZodType<
  Config$Outbound,
  z.ZodTypeDef,
  Config
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Config$ {
  /** @deprecated use `Config$inboundSchema` instead. */
  export const inboundSchema = Config$inboundSchema;
  /** @deprecated use `Config$outboundSchema` instead. */
  export const outboundSchema = Config$outboundSchema;
  /** @deprecated use `Config$Outbound` instead. */
  export type Outbound = Config$Outbound;
}

export function configToJSON(config: Config): string {
  return JSON.stringify(Config$outboundSchema.parse(config));
}

export function configFromJSON(
  jsonString: string,
): SafeParseResult<Config, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Config$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Config' from JSON`,
  );
}

/** @internal */
export const ActionElements$inboundSchema: z.ZodType<
  ActionElements,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActionElements$Outbound = {};

/** @internal */
export const ActionElements$outboundSchema: z.ZodType<
  ActionElements$Outbound,
  z.ZodTypeDef,
  ActionElements
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionElements$ {
  /** @deprecated use `ActionElements$inboundSchema` instead. */
  export const inboundSchema = ActionElements$inboundSchema;
  /** @deprecated use `ActionElements$outboundSchema` instead. */
  export const outboundSchema = ActionElements$outboundSchema;
  /** @deprecated use `ActionElements$Outbound` instead. */
  export type Outbound = ActionElements$Outbound;
}

export function actionElementsToJSON(actionElements: ActionElements): string {
  return JSON.stringify(ActionElements$outboundSchema.parse(actionElements));
}

export function actionElementsFromJSON(
  jsonString: string,
): SafeParseResult<ActionElements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionElements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionElements' from JSON`,
  );
}

/** @internal */
export const StepElements$inboundSchema: z.ZodType<
  StepElements,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type StepElements$Outbound = {};

/** @internal */
export const StepElements$outboundSchema: z.ZodType<
  StepElements$Outbound,
  z.ZodTypeDef,
  StepElements
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepElements$ {
  /** @deprecated use `StepElements$inboundSchema` instead. */
  export const inboundSchema = StepElements$inboundSchema;
  /** @deprecated use `StepElements$outboundSchema` instead. */
  export const outboundSchema = StepElements$outboundSchema;
  /** @deprecated use `StepElements$Outbound` instead. */
  export type Outbound = StepElements$Outbound;
}

export function stepElementsToJSON(stepElements: StepElements): string {
  return JSON.stringify(StepElements$outboundSchema.parse(stepElements));
}

export function stepElementsFromJSON(
  jsonString: string,
): SafeParseResult<StepElements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepElements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepElements' from JSON`,
  );
}

/** @internal */
export const RunbookStepEntity$inboundSchema: z.ZodType<
  RunbookStepEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  action_id: z.string().optional(),
  step_id: z.string().optional(),
  config: z.lazy(() => Config$inboundSchema).optional(),
  action_elements: z.array(z.lazy(() => ActionElements$inboundSchema))
    .optional(),
  step_elements: z.array(z.lazy(() => StepElements$inboundSchema)).optional(),
  automatic: z.boolean().optional(),
  delay_duration: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  action: RunbooksActionsEntity$inboundSchema.optional(),
  reruns: z.boolean().optional(),
  repeats: z.boolean().optional(),
  repeats_duration: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  votes: VotesEntity$inboundSchema.optional(),
  rule: RulesRuleEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "action_id": "actionId",
    "step_id": "stepId",
    "action_elements": "actionElements",
    "step_elements": "stepElements",
    "delay_duration": "delayDuration",
    "repeats_duration": "repeatsDuration",
  });
});

/** @internal */
export type RunbookStepEntity$Outbound = {
  name?: string | undefined;
  action_id?: string | undefined;
  step_id?: string | undefined;
  config?: Config$Outbound | undefined;
  action_elements?: Array<ActionElements$Outbound> | undefined;
  step_elements?: Array<StepElements$Outbound> | undefined;
  automatic?: boolean | undefined;
  delay_duration?: string | undefined;
  action?: RunbooksActionsEntity$Outbound | undefined;
  reruns?: boolean | undefined;
  repeats?: boolean | undefined;
  repeats_duration?: string | undefined;
  votes?: VotesEntity$Outbound | undefined;
  rule?: RulesRuleEntity$Outbound | undefined;
};

/** @internal */
export const RunbookStepEntity$outboundSchema: z.ZodType<
  RunbookStepEntity$Outbound,
  z.ZodTypeDef,
  RunbookStepEntity
> = z.object({
  name: z.string().optional(),
  actionId: z.string().optional(),
  stepId: z.string().optional(),
  config: z.lazy(() => Config$outboundSchema).optional(),
  actionElements: z.array(z.lazy(() => ActionElements$outboundSchema))
    .optional(),
  stepElements: z.array(z.lazy(() => StepElements$outboundSchema)).optional(),
  automatic: z.boolean().optional(),
  delayDuration: z.date().transform(v => v.toISOString()).optional(),
  action: RunbooksActionsEntity$outboundSchema.optional(),
  reruns: z.boolean().optional(),
  repeats: z.boolean().optional(),
  repeatsDuration: z.date().transform(v => v.toISOString()).optional(),
  votes: VotesEntity$outboundSchema.optional(),
  rule: RulesRuleEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    actionId: "action_id",
    stepId: "step_id",
    actionElements: "action_elements",
    stepElements: "step_elements",
    delayDuration: "delay_duration",
    repeatsDuration: "repeats_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbookStepEntity$ {
  /** @deprecated use `RunbookStepEntity$inboundSchema` instead. */
  export const inboundSchema = RunbookStepEntity$inboundSchema;
  /** @deprecated use `RunbookStepEntity$outboundSchema` instead. */
  export const outboundSchema = RunbookStepEntity$outboundSchema;
  /** @deprecated use `RunbookStepEntity$Outbound` instead. */
  export type Outbound = RunbookStepEntity$Outbound;
}

export function runbookStepEntityToJSON(
  runbookStepEntity: RunbookStepEntity,
): string {
  return JSON.stringify(
    RunbookStepEntity$outboundSchema.parse(runbookStepEntity),
  );
}

export function runbookStepEntityFromJSON(
  jsonString: string,
): SafeParseResult<RunbookStepEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunbookStepEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbookStepEntity' from JSON`,
  );
}
