/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RetrospectivesFieldEntity,
  RetrospectivesFieldEntity$inboundSchema,
  RetrospectivesFieldEntity$Outbound,
  RetrospectivesFieldEntity$outboundSchema,
} from "./retrospectivesfieldentity.js";
import {
  RetrospectivesTemplateEntityIncidentSectionEntity,
  RetrospectivesTemplateEntityIncidentSectionEntity$inboundSchema,
  RetrospectivesTemplateEntityIncidentSectionEntity$Outbound,
  RetrospectivesTemplateEntityIncidentSectionEntity$outboundSchema,
} from "./retrospectivestemplateentityincidentsectionentity.js";

/**
 * Retrospectives_TemplateEntity model
 */
export type RetrospectivesTemplateEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  isDefault?: boolean | null | undefined;
  sections?:
    | Array<RetrospectivesTemplateEntityIncidentSectionEntity>
    | null
    | undefined;
  fields?: Array<RetrospectivesFieldEntity> | null | undefined;
};

/** @internal */
export const RetrospectivesTemplateEntity$inboundSchema: z.ZodType<
  RetrospectivesTemplateEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  is_default: z.nullable(z.boolean()).optional(),
  sections: z.nullable(
    z.array(RetrospectivesTemplateEntityIncidentSectionEntity$inboundSchema),
  ).optional(),
  fields: z.nullable(z.array(RetrospectivesFieldEntity$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "is_default": "isDefault",
  });
});

/** @internal */
export type RetrospectivesTemplateEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  is_default?: boolean | null | undefined;
  sections?:
    | Array<RetrospectivesTemplateEntityIncidentSectionEntity$Outbound>
    | null
    | undefined;
  fields?: Array<RetrospectivesFieldEntity$Outbound> | null | undefined;
};

/** @internal */
export const RetrospectivesTemplateEntity$outboundSchema: z.ZodType<
  RetrospectivesTemplateEntity$Outbound,
  z.ZodTypeDef,
  RetrospectivesTemplateEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  isDefault: z.nullable(z.boolean()).optional(),
  sections: z.nullable(
    z.array(RetrospectivesTemplateEntityIncidentSectionEntity$outboundSchema),
  ).optional(),
  fields: z.nullable(z.array(RetrospectivesFieldEntity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    isDefault: "is_default",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrospectivesTemplateEntity$ {
  /** @deprecated use `RetrospectivesTemplateEntity$inboundSchema` instead. */
  export const inboundSchema = RetrospectivesTemplateEntity$inboundSchema;
  /** @deprecated use `RetrospectivesTemplateEntity$outboundSchema` instead. */
  export const outboundSchema = RetrospectivesTemplateEntity$outboundSchema;
  /** @deprecated use `RetrospectivesTemplateEntity$Outbound` instead. */
  export type Outbound = RetrospectivesTemplateEntity$Outbound;
}

export function retrospectivesTemplateEntityToJSON(
  retrospectivesTemplateEntity: RetrospectivesTemplateEntity,
): string {
  return JSON.stringify(
    RetrospectivesTemplateEntity$outboundSchema.parse(
      retrospectivesTemplateEntity,
    ),
  );
}

export function retrospectivesTemplateEntityFromJSON(
  jsonString: string,
): SafeParseResult<RetrospectivesTemplateEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrospectivesTemplateEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrospectivesTemplateEntity' from JSON`,
  );
}
