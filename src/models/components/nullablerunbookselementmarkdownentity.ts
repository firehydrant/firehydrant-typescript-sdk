/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableRunbooksElementMarkdownEntity = {
  text?: string | null | undefined;
};

/** @internal */
export const NullableRunbooksElementMarkdownEntity$inboundSchema: z.ZodType<
  NullableRunbooksElementMarkdownEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.nullable(z.string()).optional(),
});

/** @internal */
export type NullableRunbooksElementMarkdownEntity$Outbound = {
  text?: string | null | undefined;
};

/** @internal */
export const NullableRunbooksElementMarkdownEntity$outboundSchema: z.ZodType<
  NullableRunbooksElementMarkdownEntity$Outbound,
  z.ZodTypeDef,
  NullableRunbooksElementMarkdownEntity
> = z.object({
  text: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRunbooksElementMarkdownEntity$ {
  /** @deprecated use `NullableRunbooksElementMarkdownEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableRunbooksElementMarkdownEntity$inboundSchema;
  /** @deprecated use `NullableRunbooksElementMarkdownEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableRunbooksElementMarkdownEntity$outboundSchema;
  /** @deprecated use `NullableRunbooksElementMarkdownEntity$Outbound` instead. */
  export type Outbound = NullableRunbooksElementMarkdownEntity$Outbound;
}

export function nullableRunbooksElementMarkdownEntityToJSON(
  nullableRunbooksElementMarkdownEntity: NullableRunbooksElementMarkdownEntity,
): string {
  return JSON.stringify(
    NullableRunbooksElementMarkdownEntity$outboundSchema.parse(
      nullableRunbooksElementMarkdownEntity,
    ),
  );
}

export function nullableRunbooksElementMarkdownEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableRunbooksElementMarkdownEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRunbooksElementMarkdownEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableRunbooksElementMarkdownEntity' from JSON`,
  );
}
