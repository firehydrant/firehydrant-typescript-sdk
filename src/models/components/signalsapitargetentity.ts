/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SignalsAPITargetEntity = {
  id?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  isPageable?: boolean | undefined;
};

/** @internal */
export const SignalsAPITargetEntity$inboundSchema: z.ZodType<
  SignalsAPITargetEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  is_pageable: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_pageable": "isPageable",
  });
});

/** @internal */
export type SignalsAPITargetEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  is_pageable?: boolean | undefined;
};

/** @internal */
export const SignalsAPITargetEntity$outboundSchema: z.ZodType<
  SignalsAPITargetEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPITargetEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  isPageable: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isPageable: "is_pageable",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPITargetEntity$ {
  /** @deprecated use `SignalsAPITargetEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPITargetEntity$inboundSchema;
  /** @deprecated use `SignalsAPITargetEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPITargetEntity$outboundSchema;
  /** @deprecated use `SignalsAPITargetEntity$Outbound` instead. */
  export type Outbound = SignalsAPITargetEntity$Outbound;
}

export function signalsAPITargetEntityToJSON(
  signalsAPITargetEntity: SignalsAPITargetEntity,
): string {
  return JSON.stringify(
    SignalsAPITargetEntity$outboundSchema.parse(signalsAPITargetEntity),
  );
}

export function signalsAPITargetEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPITargetEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPITargetEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPITargetEntity' from JSON`,
  );
}
