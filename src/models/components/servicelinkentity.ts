/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceEntity,
  ServiceEntity$inboundSchema,
  ServiceEntity$Outbound,
  ServiceEntity$outboundSchema,
} from "./serviceentity.js";

/**
 * ServiceLinkEntity model
 */
export type ServiceLinkEntity = {
  statusCode?: number | undefined;
  /**
   * ServiceEntity model
   */
  service?: ServiceEntity | undefined;
};

/** @internal */
export const ServiceLinkEntity$inboundSchema: z.ZodType<
  ServiceLinkEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int().optional(),
  service: ServiceEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ServiceLinkEntity$Outbound = {
  status_code?: number | undefined;
  service?: ServiceEntity$Outbound | undefined;
};

/** @internal */
export const ServiceLinkEntity$outboundSchema: z.ZodType<
  ServiceLinkEntity$Outbound,
  z.ZodTypeDef,
  ServiceLinkEntity
> = z.object({
  statusCode: z.number().int().optional(),
  service: ServiceEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceLinkEntity$ {
  /** @deprecated use `ServiceLinkEntity$inboundSchema` instead. */
  export const inboundSchema = ServiceLinkEntity$inboundSchema;
  /** @deprecated use `ServiceLinkEntity$outboundSchema` instead. */
  export const outboundSchema = ServiceLinkEntity$outboundSchema;
  /** @deprecated use `ServiceLinkEntity$Outbound` instead. */
  export type Outbound = ServiceLinkEntity$Outbound;
}

export function serviceLinkEntityToJSON(
  serviceLinkEntity: ServiceLinkEntity,
): string {
  return JSON.stringify(
    ServiceLinkEntity$outboundSchema.parse(serviceLinkEntity),
  );
}

export function serviceLinkEntityFromJSON(
  jsonString: string,
): SafeParseResult<ServiceLinkEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceLinkEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceLinkEntity' from JSON`,
  );
}
