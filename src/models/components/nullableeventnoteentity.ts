/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsAPIEntitiesReference,
  ConversationsAPIEntitiesReference$inboundSchema,
  ConversationsAPIEntitiesReference$Outbound,
  ConversationsAPIEntitiesReference$outboundSchema,
} from "./conversationsapientitiesreference.js";
import {
  IncidentsStatusPageEntity,
  IncidentsStatusPageEntity$inboundSchema,
  IncidentsStatusPageEntity$Outbound,
  IncidentsStatusPageEntity$outboundSchema,
} from "./incidentsstatuspageentity.js";

/**
 * Event_NoteEntity model
 */
export type NullableEventNoteEntity = {
  id?: string | null | undefined;
  body?: string | null | undefined;
  createdAt?: Date | null | undefined;
  statusPages?: Array<IncidentsStatusPageEntity> | null | undefined;
  conversations?: Array<ConversationsAPIEntitiesReference> | null | undefined;
};

/** @internal */
export const NullableEventNoteEntity$inboundSchema: z.ZodType<
  NullableEventNoteEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status_pages: z.nullable(z.array(IncidentsStatusPageEntity$inboundSchema))
    .optional(),
  conversations: z.nullable(
    z.array(ConversationsAPIEntitiesReference$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "status_pages": "statusPages",
  });
});

/** @internal */
export type NullableEventNoteEntity$Outbound = {
  id?: string | null | undefined;
  body?: string | null | undefined;
  created_at?: string | null | undefined;
  status_pages?: Array<IncidentsStatusPageEntity$Outbound> | null | undefined;
  conversations?:
    | Array<ConversationsAPIEntitiesReference$Outbound>
    | null
    | undefined;
};

/** @internal */
export const NullableEventNoteEntity$outboundSchema: z.ZodType<
  NullableEventNoteEntity$Outbound,
  z.ZodTypeDef,
  NullableEventNoteEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  statusPages: z.nullable(z.array(IncidentsStatusPageEntity$outboundSchema))
    .optional(),
  conversations: z.nullable(
    z.array(ConversationsAPIEntitiesReference$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableEventNoteEntity$ {
  /** @deprecated use `NullableEventNoteEntity$inboundSchema` instead. */
  export const inboundSchema = NullableEventNoteEntity$inboundSchema;
  /** @deprecated use `NullableEventNoteEntity$outboundSchema` instead. */
  export const outboundSchema = NullableEventNoteEntity$outboundSchema;
  /** @deprecated use `NullableEventNoteEntity$Outbound` instead. */
  export type Outbound = NullableEventNoteEntity$Outbound;
}

export function nullableEventNoteEntityToJSON(
  nullableEventNoteEntity: NullableEventNoteEntity,
): string {
  return JSON.stringify(
    NullableEventNoteEntity$outboundSchema.parse(nullableEventNoteEntity),
  );
}

export function nullableEventNoteEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableEventNoteEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableEventNoteEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableEventNoteEntity' from JSON`,
  );
}
