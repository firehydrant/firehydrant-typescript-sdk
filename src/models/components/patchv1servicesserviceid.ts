/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Checklists = {
  id: string;
  /**
   * Set to `true` to remove checklist from service
   */
  remove?: boolean | undefined;
};

export type PatchV1ServicesServiceIdExternalResources = {
  remoteId: string;
  /**
   * The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
   */
  connectionType?: string | undefined;
  /**
   * If you are trying to remove an external resource from a service, set this to 'true'.
   */
  remove?: boolean | undefined;
};

export type PatchV1ServicesServiceIdFunctionalities = {
  /**
   * If you are trying to reuse a functionality, you may set the ID to attach it to the service
   */
  id?: string | undefined;
  /**
   * If you are trying to remove a functionality from a service, set this to 'true'
   */
  remove?: boolean | undefined;
  /**
   * If you are trying to create a new functionality and attach it to this service, set the summary key
   */
  summary?: string | undefined;
};

export type PatchV1ServicesServiceIdLinks = {
  /**
   * URL
   */
  hrefUrl: string;
  /**
   * Short name used to display and identify this link
   */
  name: string;
  /**
   * An optional URL to an icon representing this link
   */
  iconUrl?: string | undefined;
  /**
   * If you are trying to remove a link, set this to 'true'
   */
  remove?: boolean | undefined;
  /**
   * If updating an existing link, specify it's id.
   */
  id?: string | undefined;
};

/**
 * An object representing a Team that owns the service
 */
export type PatchV1ServicesServiceIdOwner = {
  id: string;
};

/**
 * Integer representing service tier
 */
export const PatchV1ServicesServiceIdServiceTier = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
} as const;
/**
 * Integer representing service tier
 */
export type PatchV1ServicesServiceIdServiceTier = ClosedEnum<
  typeof PatchV1ServicesServiceIdServiceTier
>;

export type PatchV1ServicesServiceIdTeams = {
  id: string;
  /**
   * If you are trying to remove a team from a service, set this to 'true'
   */
  remove?: boolean | undefined;
};

/**
 * Update a services attributes, you may also add or remove functionalities from the service as well.
 *
 * @remarks
 * Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
 */
export type PatchV1ServicesServiceId = {
  alertOnAdd?: boolean | undefined;
  autoAddRespondingTeam?: boolean | undefined;
  /**
   * Array of checklist IDs to attach to the service
   */
  checklists?: Array<Checklists> | undefined;
  description?: string | undefined;
  /**
   * An array of external resources to attach to this service.
   */
  externalResources?:
    | Array<PatchV1ServicesServiceIdExternalResources>
    | undefined;
  /**
   * An array of functionalities
   */
  functionalities?: Array<PatchV1ServicesServiceIdFunctionalities> | undefined;
  /**
   * A hash of label keys and values
   */
  labels?: { [k: string]: string } | undefined;
  /**
   * An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
   */
  links?: Array<PatchV1ServicesServiceIdLinks> | undefined;
  name?: string | undefined;
  /**
   * An object representing a Team that owns the service
   */
  owner?: PatchV1ServicesServiceIdOwner | undefined;
  /**
   * If you are trying to remove a team as an owner from a service, set this to 'true'
   */
  removeOwner?: boolean | undefined;
  /**
   * If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists
   */
  removeRemainingChecklists?: boolean | undefined;
  /**
   * If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
   */
  removeRemainingExternalResources?: boolean | undefined;
  /**
   * If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities
   */
  removeRemainingFunctionalities?: boolean | undefined;
  /**
   * If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
   */
  removeRemainingTeams?: boolean | undefined;
  /**
   * Integer representing service tier
   */
  serviceTier?: PatchV1ServicesServiceIdServiceTier | undefined;
  /**
   * An array of teams to attach to this service.
   */
  teams?: Array<PatchV1ServicesServiceIdTeams> | undefined;
};

/** @internal */
export const Checklists$inboundSchema: z.ZodType<
  Checklists,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.boolean().optional(),
});

/** @internal */
export type Checklists$Outbound = {
  id: string;
  remove?: boolean | undefined;
};

/** @internal */
export const Checklists$outboundSchema: z.ZodType<
  Checklists$Outbound,
  z.ZodTypeDef,
  Checklists
> = z.object({
  id: z.string(),
  remove: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Checklists$ {
  /** @deprecated use `Checklists$inboundSchema` instead. */
  export const inboundSchema = Checklists$inboundSchema;
  /** @deprecated use `Checklists$outboundSchema` instead. */
  export const outboundSchema = Checklists$outboundSchema;
  /** @deprecated use `Checklists$Outbound` instead. */
  export type Outbound = Checklists$Outbound;
}

export function checklistsToJSON(checklists: Checklists): string {
  return JSON.stringify(Checklists$outboundSchema.parse(checklists));
}

export function checklistsFromJSON(
  jsonString: string,
): SafeParseResult<Checklists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Checklists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Checklists' from JSON`,
  );
}

/** @internal */
export const PatchV1ServicesServiceIdExternalResources$inboundSchema: z.ZodType<
  PatchV1ServicesServiceIdExternalResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_id: z.string(),
  connection_type: z.string().optional(),
  remove: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type PatchV1ServicesServiceIdExternalResources$Outbound = {
  remote_id: string;
  connection_type?: string | undefined;
  remove?: boolean | undefined;
};

/** @internal */
export const PatchV1ServicesServiceIdExternalResources$outboundSchema:
  z.ZodType<
    PatchV1ServicesServiceIdExternalResources$Outbound,
    z.ZodTypeDef,
    PatchV1ServicesServiceIdExternalResources
  > = z.object({
    remoteId: z.string(),
    connectionType: z.string().optional(),
    remove: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      remoteId: "remote_id",
      connectionType: "connection_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceIdExternalResources$ {
  /** @deprecated use `PatchV1ServicesServiceIdExternalResources$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ServicesServiceIdExternalResources$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdExternalResources$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ServicesServiceIdExternalResources$outboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdExternalResources$Outbound` instead. */
  export type Outbound = PatchV1ServicesServiceIdExternalResources$Outbound;
}

export function patchV1ServicesServiceIdExternalResourcesToJSON(
  patchV1ServicesServiceIdExternalResources:
    PatchV1ServicesServiceIdExternalResources,
): string {
  return JSON.stringify(
    PatchV1ServicesServiceIdExternalResources$outboundSchema.parse(
      patchV1ServicesServiceIdExternalResources,
    ),
  );
}

export function patchV1ServicesServiceIdExternalResourcesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ServicesServiceIdExternalResources,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ServicesServiceIdExternalResources$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1ServicesServiceIdExternalResources' from JSON`,
  );
}

/** @internal */
export const PatchV1ServicesServiceIdFunctionalities$inboundSchema: z.ZodType<
  PatchV1ServicesServiceIdFunctionalities,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  remove: z.boolean().optional(),
  summary: z.string().optional(),
});

/** @internal */
export type PatchV1ServicesServiceIdFunctionalities$Outbound = {
  id?: string | undefined;
  remove?: boolean | undefined;
  summary?: string | undefined;
};

/** @internal */
export const PatchV1ServicesServiceIdFunctionalities$outboundSchema: z.ZodType<
  PatchV1ServicesServiceIdFunctionalities$Outbound,
  z.ZodTypeDef,
  PatchV1ServicesServiceIdFunctionalities
> = z.object({
  id: z.string().optional(),
  remove: z.boolean().optional(),
  summary: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceIdFunctionalities$ {
  /** @deprecated use `PatchV1ServicesServiceIdFunctionalities$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ServicesServiceIdFunctionalities$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdFunctionalities$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ServicesServiceIdFunctionalities$outboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdFunctionalities$Outbound` instead. */
  export type Outbound = PatchV1ServicesServiceIdFunctionalities$Outbound;
}

export function patchV1ServicesServiceIdFunctionalitiesToJSON(
  patchV1ServicesServiceIdFunctionalities:
    PatchV1ServicesServiceIdFunctionalities,
): string {
  return JSON.stringify(
    PatchV1ServicesServiceIdFunctionalities$outboundSchema.parse(
      patchV1ServicesServiceIdFunctionalities,
    ),
  );
}

export function patchV1ServicesServiceIdFunctionalitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ServicesServiceIdFunctionalities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ServicesServiceIdFunctionalities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1ServicesServiceIdFunctionalities' from JSON`,
  );
}

/** @internal */
export const PatchV1ServicesServiceIdLinks$inboundSchema: z.ZodType<
  PatchV1ServicesServiceIdLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href_url: z.string(),
  name: z.string(),
  icon_url: z.string().optional(),
  remove: z.boolean().optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "href_url": "hrefUrl",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type PatchV1ServicesServiceIdLinks$Outbound = {
  href_url: string;
  name: string;
  icon_url?: string | undefined;
  remove?: boolean | undefined;
  id?: string | undefined;
};

/** @internal */
export const PatchV1ServicesServiceIdLinks$outboundSchema: z.ZodType<
  PatchV1ServicesServiceIdLinks$Outbound,
  z.ZodTypeDef,
  PatchV1ServicesServiceIdLinks
> = z.object({
  hrefUrl: z.string(),
  name: z.string(),
  iconUrl: z.string().optional(),
  remove: z.boolean().optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    hrefUrl: "href_url",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceIdLinks$ {
  /** @deprecated use `PatchV1ServicesServiceIdLinks$inboundSchema` instead. */
  export const inboundSchema = PatchV1ServicesServiceIdLinks$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdLinks$outboundSchema` instead. */
  export const outboundSchema = PatchV1ServicesServiceIdLinks$outboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdLinks$Outbound` instead. */
  export type Outbound = PatchV1ServicesServiceIdLinks$Outbound;
}

export function patchV1ServicesServiceIdLinksToJSON(
  patchV1ServicesServiceIdLinks: PatchV1ServicesServiceIdLinks,
): string {
  return JSON.stringify(
    PatchV1ServicesServiceIdLinks$outboundSchema.parse(
      patchV1ServicesServiceIdLinks,
    ),
  );
}

export function patchV1ServicesServiceIdLinksFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ServicesServiceIdLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ServicesServiceIdLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ServicesServiceIdLinks' from JSON`,
  );
}

/** @internal */
export const PatchV1ServicesServiceIdOwner$inboundSchema: z.ZodType<
  PatchV1ServicesServiceIdOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PatchV1ServicesServiceIdOwner$Outbound = {
  id: string;
};

/** @internal */
export const PatchV1ServicesServiceIdOwner$outboundSchema: z.ZodType<
  PatchV1ServicesServiceIdOwner$Outbound,
  z.ZodTypeDef,
  PatchV1ServicesServiceIdOwner
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceIdOwner$ {
  /** @deprecated use `PatchV1ServicesServiceIdOwner$inboundSchema` instead. */
  export const inboundSchema = PatchV1ServicesServiceIdOwner$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdOwner$outboundSchema` instead. */
  export const outboundSchema = PatchV1ServicesServiceIdOwner$outboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdOwner$Outbound` instead. */
  export type Outbound = PatchV1ServicesServiceIdOwner$Outbound;
}

export function patchV1ServicesServiceIdOwnerToJSON(
  patchV1ServicesServiceIdOwner: PatchV1ServicesServiceIdOwner,
): string {
  return JSON.stringify(
    PatchV1ServicesServiceIdOwner$outboundSchema.parse(
      patchV1ServicesServiceIdOwner,
    ),
  );
}

export function patchV1ServicesServiceIdOwnerFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ServicesServiceIdOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ServicesServiceIdOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ServicesServiceIdOwner' from JSON`,
  );
}

/** @internal */
export const PatchV1ServicesServiceIdServiceTier$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1ServicesServiceIdServiceTier
> = z.nativeEnum(PatchV1ServicesServiceIdServiceTier);

/** @internal */
export const PatchV1ServicesServiceIdServiceTier$outboundSchema:
  z.ZodNativeEnum<typeof PatchV1ServicesServiceIdServiceTier> =
    PatchV1ServicesServiceIdServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceIdServiceTier$ {
  /** @deprecated use `PatchV1ServicesServiceIdServiceTier$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ServicesServiceIdServiceTier$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdServiceTier$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ServicesServiceIdServiceTier$outboundSchema;
}

/** @internal */
export const PatchV1ServicesServiceIdTeams$inboundSchema: z.ZodType<
  PatchV1ServicesServiceIdTeams,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.boolean().optional(),
});

/** @internal */
export type PatchV1ServicesServiceIdTeams$Outbound = {
  id: string;
  remove?: boolean | undefined;
};

/** @internal */
export const PatchV1ServicesServiceIdTeams$outboundSchema: z.ZodType<
  PatchV1ServicesServiceIdTeams$Outbound,
  z.ZodTypeDef,
  PatchV1ServicesServiceIdTeams
> = z.object({
  id: z.string(),
  remove: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceIdTeams$ {
  /** @deprecated use `PatchV1ServicesServiceIdTeams$inboundSchema` instead. */
  export const inboundSchema = PatchV1ServicesServiceIdTeams$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdTeams$outboundSchema` instead. */
  export const outboundSchema = PatchV1ServicesServiceIdTeams$outboundSchema;
  /** @deprecated use `PatchV1ServicesServiceIdTeams$Outbound` instead. */
  export type Outbound = PatchV1ServicesServiceIdTeams$Outbound;
}

export function patchV1ServicesServiceIdTeamsToJSON(
  patchV1ServicesServiceIdTeams: PatchV1ServicesServiceIdTeams,
): string {
  return JSON.stringify(
    PatchV1ServicesServiceIdTeams$outboundSchema.parse(
      patchV1ServicesServiceIdTeams,
    ),
  );
}

export function patchV1ServicesServiceIdTeamsFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ServicesServiceIdTeams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ServicesServiceIdTeams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ServicesServiceIdTeams' from JSON`,
  );
}

/** @internal */
export const PatchV1ServicesServiceId$inboundSchema: z.ZodType<
  PatchV1ServicesServiceId,
  z.ZodTypeDef,
  unknown
> = z.object({
  alert_on_add: z.boolean().optional(),
  auto_add_responding_team: z.boolean().optional(),
  checklists: z.array(z.lazy(() => Checklists$inboundSchema)).optional(),
  description: z.string().optional(),
  external_resources: z.array(
    z.lazy(() => PatchV1ServicesServiceIdExternalResources$inboundSchema),
  ).optional(),
  functionalities: z.array(
    z.lazy(() => PatchV1ServicesServiceIdFunctionalities$inboundSchema),
  ).optional(),
  labels: z.record(z.string()).optional(),
  links: z.array(z.lazy(() => PatchV1ServicesServiceIdLinks$inboundSchema))
    .optional(),
  name: z.string().optional(),
  owner: z.lazy(() => PatchV1ServicesServiceIdOwner$inboundSchema).optional(),
  remove_owner: z.boolean().optional(),
  remove_remaining_checklists: z.boolean().optional(),
  remove_remaining_external_resources: z.boolean().optional(),
  remove_remaining_functionalities: z.boolean().optional(),
  remove_remaining_teams: z.boolean().optional(),
  service_tier: PatchV1ServicesServiceIdServiceTier$inboundSchema.optional(),
  teams: z.array(z.lazy(() => PatchV1ServicesServiceIdTeams$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "external_resources": "externalResources",
    "remove_owner": "removeOwner",
    "remove_remaining_checklists": "removeRemainingChecklists",
    "remove_remaining_external_resources": "removeRemainingExternalResources",
    "remove_remaining_functionalities": "removeRemainingFunctionalities",
    "remove_remaining_teams": "removeRemainingTeams",
    "service_tier": "serviceTier",
  });
});

/** @internal */
export type PatchV1ServicesServiceId$Outbound = {
  alert_on_add?: boolean | undefined;
  auto_add_responding_team?: boolean | undefined;
  checklists?: Array<Checklists$Outbound> | undefined;
  description?: string | undefined;
  external_resources?:
    | Array<PatchV1ServicesServiceIdExternalResources$Outbound>
    | undefined;
  functionalities?:
    | Array<PatchV1ServicesServiceIdFunctionalities$Outbound>
    | undefined;
  labels?: { [k: string]: string } | undefined;
  links?: Array<PatchV1ServicesServiceIdLinks$Outbound> | undefined;
  name?: string | undefined;
  owner?: PatchV1ServicesServiceIdOwner$Outbound | undefined;
  remove_owner?: boolean | undefined;
  remove_remaining_checklists?: boolean | undefined;
  remove_remaining_external_resources?: boolean | undefined;
  remove_remaining_functionalities?: boolean | undefined;
  remove_remaining_teams?: boolean | undefined;
  service_tier?: number | undefined;
  teams?: Array<PatchV1ServicesServiceIdTeams$Outbound> | undefined;
};

/** @internal */
export const PatchV1ServicesServiceId$outboundSchema: z.ZodType<
  PatchV1ServicesServiceId$Outbound,
  z.ZodTypeDef,
  PatchV1ServicesServiceId
> = z.object({
  alertOnAdd: z.boolean().optional(),
  autoAddRespondingTeam: z.boolean().optional(),
  checklists: z.array(z.lazy(() => Checklists$outboundSchema)).optional(),
  description: z.string().optional(),
  externalResources: z.array(
    z.lazy(() => PatchV1ServicesServiceIdExternalResources$outboundSchema),
  ).optional(),
  functionalities: z.array(
    z.lazy(() => PatchV1ServicesServiceIdFunctionalities$outboundSchema),
  ).optional(),
  labels: z.record(z.string()).optional(),
  links: z.array(z.lazy(() => PatchV1ServicesServiceIdLinks$outboundSchema))
    .optional(),
  name: z.string().optional(),
  owner: z.lazy(() => PatchV1ServicesServiceIdOwner$outboundSchema).optional(),
  removeOwner: z.boolean().optional(),
  removeRemainingChecklists: z.boolean().optional(),
  removeRemainingExternalResources: z.boolean().optional(),
  removeRemainingFunctionalities: z.boolean().optional(),
  removeRemainingTeams: z.boolean().optional(),
  serviceTier: PatchV1ServicesServiceIdServiceTier$outboundSchema.optional(),
  teams: z.array(z.lazy(() => PatchV1ServicesServiceIdTeams$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    externalResources: "external_resources",
    removeOwner: "remove_owner",
    removeRemainingChecklists: "remove_remaining_checklists",
    removeRemainingExternalResources: "remove_remaining_external_resources",
    removeRemainingFunctionalities: "remove_remaining_functionalities",
    removeRemainingTeams: "remove_remaining_teams",
    serviceTier: "service_tier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ServicesServiceId$ {
  /** @deprecated use `PatchV1ServicesServiceId$inboundSchema` instead. */
  export const inboundSchema = PatchV1ServicesServiceId$inboundSchema;
  /** @deprecated use `PatchV1ServicesServiceId$outboundSchema` instead. */
  export const outboundSchema = PatchV1ServicesServiceId$outboundSchema;
  /** @deprecated use `PatchV1ServicesServiceId$Outbound` instead. */
  export type Outbound = PatchV1ServicesServiceId$Outbound;
}

export function patchV1ServicesServiceIdToJSON(
  patchV1ServicesServiceId: PatchV1ServicesServiceId,
): string {
  return JSON.stringify(
    PatchV1ServicesServiceId$outboundSchema.parse(patchV1ServicesServiceId),
  );
}

export function patchV1ServicesServiceIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1ServicesServiceId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1ServicesServiceId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ServicesServiceId' from JSON`,
  );
}
