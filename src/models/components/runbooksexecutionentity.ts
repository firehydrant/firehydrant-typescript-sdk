/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RunbooksExecutionEntityExecutedForEntity,
  RunbooksExecutionEntityExecutedForEntity$inboundSchema,
  RunbooksExecutionEntityExecutedForEntity$Outbound,
  RunbooksExecutionEntityExecutedForEntity$outboundSchema,
} from "./runbooksexecutionentityexecutedforentity.js";
import {
  RunbooksExecutionStepEntity,
  RunbooksExecutionStepEntity$inboundSchema,
  RunbooksExecutionStepEntity$Outbound,
  RunbooksExecutionStepEntity$outboundSchema,
} from "./runbooksexecutionstepentity.js";
import {
  SlimRunbookEntity,
  SlimRunbookEntity$inboundSchema,
  SlimRunbookEntity$Outbound,
  SlimRunbookEntity$outboundSchema,
} from "./slimrunbookentity.js";

/**
 * Runbooks_ExecutionEntity model
 */
export type RunbooksExecutionEntity = {
  id?: string | undefined;
  status?: string | undefined;
  statusReason?: string | undefined;
  statusReasonMessage?: string | undefined;
  hasBeenRerun?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  createdBy?: string | undefined;
  runbook?: SlimRunbookEntity | undefined;
  steps?: RunbooksExecutionStepEntity | undefined;
  executedFor?: RunbooksExecutionEntityExecutedForEntity | undefined;
};

/** @internal */
export const RunbooksExecutionEntity$inboundSchema: z.ZodType<
  RunbooksExecutionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  status_reason: z.string().optional(),
  status_reason_message: z.string().optional(),
  has_been_rerun: z.boolean().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  created_by: z.string().optional(),
  runbook: SlimRunbookEntity$inboundSchema.optional(),
  steps: RunbooksExecutionStepEntity$inboundSchema.optional(),
  executed_for: RunbooksExecutionEntityExecutedForEntity$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "status_reason": "statusReason",
    "status_reason_message": "statusReasonMessage",
    "has_been_rerun": "hasBeenRerun",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "created_by": "createdBy",
    "executed_for": "executedFor",
  });
});

/** @internal */
export type RunbooksExecutionEntity$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  status_reason?: string | undefined;
  status_reason_message?: string | undefined;
  has_been_rerun?: boolean | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  created_by?: string | undefined;
  runbook?: SlimRunbookEntity$Outbound | undefined;
  steps?: RunbooksExecutionStepEntity$Outbound | undefined;
  executed_for?: RunbooksExecutionEntityExecutedForEntity$Outbound | undefined;
};

/** @internal */
export const RunbooksExecutionEntity$outboundSchema: z.ZodType<
  RunbooksExecutionEntity$Outbound,
  z.ZodTypeDef,
  RunbooksExecutionEntity
> = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  statusReason: z.string().optional(),
  statusReasonMessage: z.string().optional(),
  hasBeenRerun: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  createdBy: z.string().optional(),
  runbook: SlimRunbookEntity$outboundSchema.optional(),
  steps: RunbooksExecutionStepEntity$outboundSchema.optional(),
  executedFor: RunbooksExecutionEntityExecutedForEntity$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    statusReason: "status_reason",
    statusReasonMessage: "status_reason_message",
    hasBeenRerun: "has_been_rerun",
    createdAt: "created_at",
    updatedAt: "updated_at",
    createdBy: "created_by",
    executedFor: "executed_for",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksExecutionEntity$ {
  /** @deprecated use `RunbooksExecutionEntity$inboundSchema` instead. */
  export const inboundSchema = RunbooksExecutionEntity$inboundSchema;
  /** @deprecated use `RunbooksExecutionEntity$outboundSchema` instead. */
  export const outboundSchema = RunbooksExecutionEntity$outboundSchema;
  /** @deprecated use `RunbooksExecutionEntity$Outbound` instead. */
  export type Outbound = RunbooksExecutionEntity$Outbound;
}

export function runbooksExecutionEntityToJSON(
  runbooksExecutionEntity: RunbooksExecutionEntity,
): string {
  return JSON.stringify(
    RunbooksExecutionEntity$outboundSchema.parse(runbooksExecutionEntity),
  );
}

export function runbooksExecutionEntityFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksExecutionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunbooksExecutionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksExecutionEntity' from JSON`,
  );
}
