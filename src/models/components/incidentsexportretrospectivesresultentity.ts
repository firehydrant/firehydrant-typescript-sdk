/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableExternalResourceEntity,
  NullableExternalResourceEntity$inboundSchema,
  NullableExternalResourceEntity$Outbound,
  NullableExternalResourceEntity$outboundSchema,
} from "./nullableexternalresourceentity.js";

/**
 * Incidents_ExportRetrospectivesResultEntity model
 */
export type IncidentsExportRetrospectivesResultEntity = {
  externalResource?: NullableExternalResourceEntity | null | undefined;
};

/** @internal */
export const IncidentsExportRetrospectivesResultEntity$inboundSchema: z.ZodType<
  IncidentsExportRetrospectivesResultEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_resource: z.nullable(NullableExternalResourceEntity$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "external_resource": "externalResource",
  });
});

/** @internal */
export type IncidentsExportRetrospectivesResultEntity$Outbound = {
  external_resource?:
    | NullableExternalResourceEntity$Outbound
    | null
    | undefined;
};

/** @internal */
export const IncidentsExportRetrospectivesResultEntity$outboundSchema:
  z.ZodType<
    IncidentsExportRetrospectivesResultEntity$Outbound,
    z.ZodTypeDef,
    IncidentsExportRetrospectivesResultEntity
  > = z.object({
    externalResource: z.nullable(NullableExternalResourceEntity$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      externalResource: "external_resource",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsExportRetrospectivesResultEntity$ {
  /** @deprecated use `IncidentsExportRetrospectivesResultEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsExportRetrospectivesResultEntity$inboundSchema;
  /** @deprecated use `IncidentsExportRetrospectivesResultEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsExportRetrospectivesResultEntity$outboundSchema;
  /** @deprecated use `IncidentsExportRetrospectivesResultEntity$Outbound` instead. */
  export type Outbound = IncidentsExportRetrospectivesResultEntity$Outbound;
}

export function incidentsExportRetrospectivesResultEntityToJSON(
  incidentsExportRetrospectivesResultEntity:
    IncidentsExportRetrospectivesResultEntity,
): string {
  return JSON.stringify(
    IncidentsExportRetrospectivesResultEntity$outboundSchema.parse(
      incidentsExportRetrospectivesResultEntity,
    ),
  );
}

export function incidentsExportRetrospectivesResultEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  IncidentsExportRetrospectivesResultEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentsExportRetrospectivesResultEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncidentsExportRetrospectivesResultEntity' from JSON`,
  );
}
