/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableOrganizationEntity = {
  name?: string | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const NullableOrganizationEntity$inboundSchema: z.ZodType<
  NullableOrganizationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type NullableOrganizationEntity$Outbound = {
  name?: string | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const NullableOrganizationEntity$outboundSchema: z.ZodType<
  NullableOrganizationEntity$Outbound,
  z.ZodTypeDef,
  NullableOrganizationEntity
> = z.object({
  name: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOrganizationEntity$ {
  /** @deprecated use `NullableOrganizationEntity$inboundSchema` instead. */
  export const inboundSchema = NullableOrganizationEntity$inboundSchema;
  /** @deprecated use `NullableOrganizationEntity$outboundSchema` instead. */
  export const outboundSchema = NullableOrganizationEntity$outboundSchema;
  /** @deprecated use `NullableOrganizationEntity$Outbound` instead. */
  export type Outbound = NullableOrganizationEntity$Outbound;
}

export function nullableOrganizationEntityToJSON(
  nullableOrganizationEntity: NullableOrganizationEntity,
): string {
  return JSON.stringify(
    NullableOrganizationEntity$outboundSchema.parse(nullableOrganizationEntity),
  );
}

export function nullableOrganizationEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableOrganizationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableOrganizationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOrganizationEntity' from JSON`,
  );
}
