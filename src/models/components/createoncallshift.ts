/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a Signals on-call shift in a schedule.
 */
export type CreateOnCallShift = {
  /**
   * The start time of the shift in ISO8601 format.
   */
  startTime: Date;
  /**
   * The end time of the shift in ISO8601 format.
   */
  endTime: Date;
  /**
   * The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.
   */
  userId?: string | null | undefined;
  /**
   * The ID of the on-call rotation you want to create the shift in. This parameter is optional for backwards compatibility but must be provided if the schedule has multiple rotations.
   */
  rotationId?: string | null | undefined;
};

/** @internal */
export const CreateOnCallShift$inboundSchema: z.ZodType<
  CreateOnCallShift,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  end_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  user_id: z.nullable(z.string()).optional(),
  rotation_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "end_time": "endTime",
    "user_id": "userId",
    "rotation_id": "rotationId",
  });
});

/** @internal */
export type CreateOnCallShift$Outbound = {
  start_time: string;
  end_time: string;
  user_id?: string | null | undefined;
  rotation_id?: string | null | undefined;
};

/** @internal */
export const CreateOnCallShift$outboundSchema: z.ZodType<
  CreateOnCallShift$Outbound,
  z.ZodTypeDef,
  CreateOnCallShift
> = z.object({
  startTime: z.date().transform(v => v.toISOString()),
  endTime: z.date().transform(v => v.toISOString()),
  userId: z.nullable(z.string()).optional(),
  rotationId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    endTime: "end_time",
    userId: "user_id",
    rotationId: "rotation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallShift$ {
  /** @deprecated use `CreateOnCallShift$inboundSchema` instead. */
  export const inboundSchema = CreateOnCallShift$inboundSchema;
  /** @deprecated use `CreateOnCallShift$outboundSchema` instead. */
  export const outboundSchema = CreateOnCallShift$outboundSchema;
  /** @deprecated use `CreateOnCallShift$Outbound` instead. */
  export type Outbound = CreateOnCallShift$Outbound;
}

export function createOnCallShiftToJSON(
  createOnCallShift: CreateOnCallShift,
): string {
  return JSON.stringify(
    CreateOnCallShift$outboundSchema.parse(createOnCallShift),
  );
}

export function createOnCallShiftFromJSON(
  jsonString: string,
): SafeParseResult<CreateOnCallShift, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOnCallShift$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOnCallShift' from JSON`,
  );
}
