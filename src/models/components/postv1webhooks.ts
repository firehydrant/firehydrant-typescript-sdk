/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a new webhook
 */
export type PostV1Webhooks = {
  url: string;
};

/** @internal */
export const PostV1Webhooks$inboundSchema: z.ZodType<
  PostV1Webhooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type PostV1Webhooks$Outbound = {
  url: string;
};

/** @internal */
export const PostV1Webhooks$outboundSchema: z.ZodType<
  PostV1Webhooks$Outbound,
  z.ZodTypeDef,
  PostV1Webhooks
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Webhooks$ {
  /** @deprecated use `PostV1Webhooks$inboundSchema` instead. */
  export const inboundSchema = PostV1Webhooks$inboundSchema;
  /** @deprecated use `PostV1Webhooks$outboundSchema` instead. */
  export const outboundSchema = PostV1Webhooks$outboundSchema;
  /** @deprecated use `PostV1Webhooks$Outbound` instead. */
  export type Outbound = PostV1Webhooks$Outbound;
}

export function postV1WebhooksToJSON(postV1Webhooks: PostV1Webhooks): string {
  return JSON.stringify(PostV1Webhooks$outboundSchema.parse(postV1Webhooks));
}

export function postV1WebhooksFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Webhooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Webhooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Webhooks' from JSON`,
  );
}
