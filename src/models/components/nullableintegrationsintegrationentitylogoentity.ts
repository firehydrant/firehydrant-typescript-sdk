/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableIntegrationsIntegrationEntityLogoEntity = {
  logoUrl?: string | null | undefined;
};

/** @internal */
export const NullableIntegrationsIntegrationEntityLogoEntity$inboundSchema:
  z.ZodType<
    NullableIntegrationsIntegrationEntityLogoEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    logo_url: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "logo_url": "logoUrl",
    });
  });

/** @internal */
export type NullableIntegrationsIntegrationEntityLogoEntity$Outbound = {
  logo_url?: string | null | undefined;
};

/** @internal */
export const NullableIntegrationsIntegrationEntityLogoEntity$outboundSchema:
  z.ZodType<
    NullableIntegrationsIntegrationEntityLogoEntity$Outbound,
    z.ZodTypeDef,
    NullableIntegrationsIntegrationEntityLogoEntity
  > = z.object({
    logoUrl: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      logoUrl: "logo_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableIntegrationsIntegrationEntityLogoEntity$ {
  /** @deprecated use `NullableIntegrationsIntegrationEntityLogoEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableIntegrationsIntegrationEntityLogoEntity$inboundSchema;
  /** @deprecated use `NullableIntegrationsIntegrationEntityLogoEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableIntegrationsIntegrationEntityLogoEntity$outboundSchema;
  /** @deprecated use `NullableIntegrationsIntegrationEntityLogoEntity$Outbound` instead. */
  export type Outbound =
    NullableIntegrationsIntegrationEntityLogoEntity$Outbound;
}

export function nullableIntegrationsIntegrationEntityLogoEntityToJSON(
  nullableIntegrationsIntegrationEntityLogoEntity:
    NullableIntegrationsIntegrationEntityLogoEntity,
): string {
  return JSON.stringify(
    NullableIntegrationsIntegrationEntityLogoEntity$outboundSchema.parse(
      nullableIntegrationsIntegrationEntityLogoEntity,
    ),
  );
}

export function nullableIntegrationsIntegrationEntityLogoEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableIntegrationsIntegrationEntityLogoEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableIntegrationsIntegrationEntityLogoEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableIntegrationsIntegrationEntityLogoEntity' from JSON`,
  );
}
