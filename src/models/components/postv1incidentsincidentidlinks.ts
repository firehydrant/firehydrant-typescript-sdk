/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Allows adding adhoc links to an incident as an attachment
 */
export type PostV1IncidentsIncidentIdLinks = {
  displayText?: string | undefined;
  iconUrl?: string | undefined;
  href: string;
};

/** @internal */
export const PostV1IncidentsIncidentIdLinks$inboundSchema: z.ZodType<
  PostV1IncidentsIncidentIdLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_text: z.string().optional(),
  icon_url: z.string().optional(),
  href: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_text": "displayText",
    "icon_url": "iconUrl",
  });
});

/** @internal */
export type PostV1IncidentsIncidentIdLinks$Outbound = {
  display_text?: string | undefined;
  icon_url?: string | undefined;
  href: string;
};

/** @internal */
export const PostV1IncidentsIncidentIdLinks$outboundSchema: z.ZodType<
  PostV1IncidentsIncidentIdLinks$Outbound,
  z.ZodTypeDef,
  PostV1IncidentsIncidentIdLinks
> = z.object({
  displayText: z.string().optional(),
  iconUrl: z.string().optional(),
  href: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayText: "display_text",
    iconUrl: "icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1IncidentsIncidentIdLinks$ {
  /** @deprecated use `PostV1IncidentsIncidentIdLinks$inboundSchema` instead. */
  export const inboundSchema = PostV1IncidentsIncidentIdLinks$inboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdLinks$outboundSchema` instead. */
  export const outboundSchema = PostV1IncidentsIncidentIdLinks$outboundSchema;
  /** @deprecated use `PostV1IncidentsIncidentIdLinks$Outbound` instead. */
  export type Outbound = PostV1IncidentsIncidentIdLinks$Outbound;
}

export function postV1IncidentsIncidentIdLinksToJSON(
  postV1IncidentsIncidentIdLinks: PostV1IncidentsIncidentIdLinks,
): string {
  return JSON.stringify(
    PostV1IncidentsIncidentIdLinks$outboundSchema.parse(
      postV1IncidentsIncidentIdLinks,
    ),
  );
}

export function postV1IncidentsIncidentIdLinksFromJSON(
  jsonString: string,
): SafeParseResult<PostV1IncidentsIncidentIdLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1IncidentsIncidentIdLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1IncidentsIncidentIdLinks' from JSON`,
  );
}
