/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchV1WebhooksWebhookIdState = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type PatchV1WebhooksWebhookIdState = ClosedEnum<
  typeof PatchV1WebhooksWebhookIdState
>;

/**
 * Update a specific webhook
 */
export type PatchV1WebhooksWebhookId = {
  url?: string | undefined;
  state?: PatchV1WebhooksWebhookIdState | undefined;
};

/** @internal */
export const PatchV1WebhooksWebhookIdState$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1WebhooksWebhookIdState
> = z.nativeEnum(PatchV1WebhooksWebhookIdState);

/** @internal */
export const PatchV1WebhooksWebhookIdState$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1WebhooksWebhookIdState
> = PatchV1WebhooksWebhookIdState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1WebhooksWebhookIdState$ {
  /** @deprecated use `PatchV1WebhooksWebhookIdState$inboundSchema` instead. */
  export const inboundSchema = PatchV1WebhooksWebhookIdState$inboundSchema;
  /** @deprecated use `PatchV1WebhooksWebhookIdState$outboundSchema` instead. */
  export const outboundSchema = PatchV1WebhooksWebhookIdState$outboundSchema;
}

/** @internal */
export const PatchV1WebhooksWebhookId$inboundSchema: z.ZodType<
  PatchV1WebhooksWebhookId,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  state: PatchV1WebhooksWebhookIdState$inboundSchema.optional(),
});

/** @internal */
export type PatchV1WebhooksWebhookId$Outbound = {
  url?: string | undefined;
  state?: string | undefined;
};

/** @internal */
export const PatchV1WebhooksWebhookId$outboundSchema: z.ZodType<
  PatchV1WebhooksWebhookId$Outbound,
  z.ZodTypeDef,
  PatchV1WebhooksWebhookId
> = z.object({
  url: z.string().optional(),
  state: PatchV1WebhooksWebhookIdState$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1WebhooksWebhookId$ {
  /** @deprecated use `PatchV1WebhooksWebhookId$inboundSchema` instead. */
  export const inboundSchema = PatchV1WebhooksWebhookId$inboundSchema;
  /** @deprecated use `PatchV1WebhooksWebhookId$outboundSchema` instead. */
  export const outboundSchema = PatchV1WebhooksWebhookId$outboundSchema;
  /** @deprecated use `PatchV1WebhooksWebhookId$Outbound` instead. */
  export type Outbound = PatchV1WebhooksWebhookId$Outbound;
}

export function patchV1WebhooksWebhookIdToJSON(
  patchV1WebhooksWebhookId: PatchV1WebhooksWebhookId,
): string {
  return JSON.stringify(
    PatchV1WebhooksWebhookId$outboundSchema.parse(patchV1WebhooksWebhookId),
  );
}

export function patchV1WebhooksWebhookIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1WebhooksWebhookId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1WebhooksWebhookId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1WebhooksWebhookId' from JSON`,
  );
}
