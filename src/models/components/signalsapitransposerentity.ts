/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";

export type SignalsAPITransposerEntityExamplePayload = {};

/**
 * Signals_API_TransposerEntity model
 */
export type SignalsAPITransposerEntity = {
  name?: string | null | undefined;
  slug?: string | null | undefined;
  examplePayload?: SignalsAPITransposerEntityExamplePayload | null | undefined;
  expression?: string | null | undefined;
  expected?: string | null | undefined;
  website?: string | null | undefined;
  description?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  ingestUrl?: string | null | undefined;
  editable?: boolean | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  updatedBy?: NullableAuthorEntity | null | undefined;
};

/** @internal */
export const SignalsAPITransposerEntityExamplePayload$inboundSchema: z.ZodType<
  SignalsAPITransposerEntityExamplePayload,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SignalsAPITransposerEntityExamplePayload$Outbound = {};

/** @internal */
export const SignalsAPITransposerEntityExamplePayload$outboundSchema: z.ZodType<
  SignalsAPITransposerEntityExamplePayload$Outbound,
  z.ZodTypeDef,
  SignalsAPITransposerEntityExamplePayload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPITransposerEntityExamplePayload$ {
  /** @deprecated use `SignalsAPITransposerEntityExamplePayload$inboundSchema` instead. */
  export const inboundSchema =
    SignalsAPITransposerEntityExamplePayload$inboundSchema;
  /** @deprecated use `SignalsAPITransposerEntityExamplePayload$outboundSchema` instead. */
  export const outboundSchema =
    SignalsAPITransposerEntityExamplePayload$outboundSchema;
  /** @deprecated use `SignalsAPITransposerEntityExamplePayload$Outbound` instead. */
  export type Outbound = SignalsAPITransposerEntityExamplePayload$Outbound;
}

export function signalsAPITransposerEntityExamplePayloadToJSON(
  signalsAPITransposerEntityExamplePayload:
    SignalsAPITransposerEntityExamplePayload,
): string {
  return JSON.stringify(
    SignalsAPITransposerEntityExamplePayload$outboundSchema.parse(
      signalsAPITransposerEntityExamplePayload,
    ),
  );
}

export function signalsAPITransposerEntityExamplePayloadFromJSON(
  jsonString: string,
): SafeParseResult<
  SignalsAPITransposerEntityExamplePayload,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SignalsAPITransposerEntityExamplePayload$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SignalsAPITransposerEntityExamplePayload' from JSON`,
  );
}

/** @internal */
export const SignalsAPITransposerEntity$inboundSchema: z.ZodType<
  SignalsAPITransposerEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  example_payload: z.nullable(
    z.lazy(() => SignalsAPITransposerEntityExamplePayload$inboundSchema),
  ).optional(),
  expression: z.nullable(z.string()).optional(),
  expected: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  ingest_url: z.nullable(z.string()).optional(),
  editable: z.nullable(z.boolean()).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  updated_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "example_payload": "examplePayload",
    "ingest_url": "ingestUrl",
    "created_by": "createdBy",
    "updated_by": "updatedBy",
  });
});

/** @internal */
export type SignalsAPITransposerEntity$Outbound = {
  name?: string | null | undefined;
  slug?: string | null | undefined;
  example_payload?:
    | SignalsAPITransposerEntityExamplePayload$Outbound
    | null
    | undefined;
  expression?: string | null | undefined;
  expected?: string | null | undefined;
  website?: string | null | undefined;
  description?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  ingest_url?: string | null | undefined;
  editable?: boolean | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  updated_by?: NullableAuthorEntity$Outbound | null | undefined;
};

/** @internal */
export const SignalsAPITransposerEntity$outboundSchema: z.ZodType<
  SignalsAPITransposerEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPITransposerEntity
> = z.object({
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  examplePayload: z.nullable(
    z.lazy(() => SignalsAPITransposerEntityExamplePayload$outboundSchema),
  ).optional(),
  expression: z.nullable(z.string()).optional(),
  expected: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  ingestUrl: z.nullable(z.string()).optional(),
  editable: z.nullable(z.boolean()).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  updatedBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    examplePayload: "example_payload",
    ingestUrl: "ingest_url",
    createdBy: "created_by",
    updatedBy: "updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPITransposerEntity$ {
  /** @deprecated use `SignalsAPITransposerEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPITransposerEntity$inboundSchema;
  /** @deprecated use `SignalsAPITransposerEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPITransposerEntity$outboundSchema;
  /** @deprecated use `SignalsAPITransposerEntity$Outbound` instead. */
  export type Outbound = SignalsAPITransposerEntity$Outbound;
}

export function signalsAPITransposerEntityToJSON(
  signalsAPITransposerEntity: SignalsAPITransposerEntity,
): string {
  return JSON.stringify(
    SignalsAPITransposerEntity$outboundSchema.parse(signalsAPITransposerEntity),
  );
}

export function signalsAPITransposerEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPITransposerEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPITransposerEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPITransposerEntity' from JSON`,
  );
}
