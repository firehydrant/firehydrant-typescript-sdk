/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PublicApiv1PermissionEntity = {
  slug?: string | null | undefined;
  displayName?: string | null | undefined;
  description?: string | null | undefined;
  categoryDisplayName?: string | null | undefined;
  categorySlug?: string | null | undefined;
  parentSlug?: string | null | undefined;
  available?: boolean | null | undefined;
  dependencySlugs?: Array<string> | null | undefined;
};

/** @internal */
export const PublicApiv1PermissionEntity$inboundSchema: z.ZodType<
  PublicApiv1PermissionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  category_display_name: z.nullable(z.string()).optional(),
  category_slug: z.nullable(z.string()).optional(),
  parent_slug: z.nullable(z.string()).optional(),
  available: z.nullable(z.boolean()).optional(),
  dependency_slugs: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "category_display_name": "categoryDisplayName",
    "category_slug": "categorySlug",
    "parent_slug": "parentSlug",
    "dependency_slugs": "dependencySlugs",
  });
});

/** @internal */
export type PublicApiv1PermissionEntity$Outbound = {
  slug?: string | null | undefined;
  display_name?: string | null | undefined;
  description?: string | null | undefined;
  category_display_name?: string | null | undefined;
  category_slug?: string | null | undefined;
  parent_slug?: string | null | undefined;
  available?: boolean | null | undefined;
  dependency_slugs?: Array<string> | null | undefined;
};

/** @internal */
export const PublicApiv1PermissionEntity$outboundSchema: z.ZodType<
  PublicApiv1PermissionEntity$Outbound,
  z.ZodTypeDef,
  PublicApiv1PermissionEntity
> = z.object({
  slug: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  categoryDisplayName: z.nullable(z.string()).optional(),
  categorySlug: z.nullable(z.string()).optional(),
  parentSlug: z.nullable(z.string()).optional(),
  available: z.nullable(z.boolean()).optional(),
  dependencySlugs: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    categoryDisplayName: "category_display_name",
    categorySlug: "category_slug",
    parentSlug: "parent_slug",
    dependencySlugs: "dependency_slugs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicApiv1PermissionEntity$ {
  /** @deprecated use `PublicApiv1PermissionEntity$inboundSchema` instead. */
  export const inboundSchema = PublicApiv1PermissionEntity$inboundSchema;
  /** @deprecated use `PublicApiv1PermissionEntity$outboundSchema` instead. */
  export const outboundSchema = PublicApiv1PermissionEntity$outboundSchema;
  /** @deprecated use `PublicApiv1PermissionEntity$Outbound` instead. */
  export type Outbound = PublicApiv1PermissionEntity$Outbound;
}

export function publicAPIV1PermissionEntityToJSON(
  publicApiv1PermissionEntity: PublicApiv1PermissionEntity,
): string {
  return JSON.stringify(
    PublicApiv1PermissionEntity$outboundSchema.parse(
      publicApiv1PermissionEntity,
    ),
  );
}

export function publicAPIV1PermissionEntityFromJSON(
  jsonString: string,
): SafeParseResult<PublicApiv1PermissionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicApiv1PermissionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicApiv1PermissionEntity' from JSON`,
  );
}
