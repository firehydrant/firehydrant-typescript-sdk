/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableActorEntity,
  NullableActorEntity$inboundSchema,
  NullableActorEntity$Outbound,
  NullableActorEntity$outboundSchema,
} from "./nullableactorentity.js";
import {
  NullableOrganizationEntity,
  NullableOrganizationEntity$inboundSchema,
  NullableOrganizationEntity$Outbound,
  NullableOrganizationEntity$outboundSchema,
} from "./nullableorganizationentity.js";

/**
 * PongEntity model
 */
export type PongEntity = {
  response?: string | null | undefined;
  actor?: NullableActorEntity | null | undefined;
  organization?: NullableOrganizationEntity | null | undefined;
};

/** @internal */
export const PongEntity$inboundSchema: z.ZodType<
  PongEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  response: z.nullable(z.string()).optional(),
  actor: z.nullable(NullableActorEntity$inboundSchema).optional(),
  organization: z.nullable(NullableOrganizationEntity$inboundSchema).optional(),
});

/** @internal */
export type PongEntity$Outbound = {
  response?: string | null | undefined;
  actor?: NullableActorEntity$Outbound | null | undefined;
  organization?: NullableOrganizationEntity$Outbound | null | undefined;
};

/** @internal */
export const PongEntity$outboundSchema: z.ZodType<
  PongEntity$Outbound,
  z.ZodTypeDef,
  PongEntity
> = z.object({
  response: z.nullable(z.string()).optional(),
  actor: z.nullable(NullableActorEntity$outboundSchema).optional(),
  organization: z.nullable(NullableOrganizationEntity$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PongEntity$ {
  /** @deprecated use `PongEntity$inboundSchema` instead. */
  export const inboundSchema = PongEntity$inboundSchema;
  /** @deprecated use `PongEntity$outboundSchema` instead. */
  export const outboundSchema = PongEntity$outboundSchema;
  /** @deprecated use `PongEntity$Outbound` instead. */
  export type Outbound = PongEntity$Outbound;
}

export function pongEntityToJSON(pongEntity: PongEntity): string {
  return JSON.stringify(PongEntity$outboundSchema.parse(pongEntity));
}

export function pongEntityFromJSON(
  jsonString: string,
): SafeParseResult<PongEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PongEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PongEntity' from JSON`,
  );
}
