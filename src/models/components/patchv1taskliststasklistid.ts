/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1TaskListsTaskListIdTaskListItems = {
  /**
   * A summary of the task
   */
  summary: string;
  /**
   * A long-form description for the task if additional context is helpful
   */
  description?: string | undefined;
};

/**
 * Updates a task list's attributes and task list items
 */
export type PatchV1TaskListsTaskListId = {
  name?: string | undefined;
  description?: string | undefined;
  taskListItems?: Array<PatchV1TaskListsTaskListIdTaskListItems> | undefined;
};

/** @internal */
export const PatchV1TaskListsTaskListIdTaskListItems$inboundSchema: z.ZodType<
  PatchV1TaskListsTaskListIdTaskListItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type PatchV1TaskListsTaskListIdTaskListItems$Outbound = {
  summary: string;
  description?: string | undefined;
};

/** @internal */
export const PatchV1TaskListsTaskListIdTaskListItems$outboundSchema: z.ZodType<
  PatchV1TaskListsTaskListIdTaskListItems$Outbound,
  z.ZodTypeDef,
  PatchV1TaskListsTaskListIdTaskListItems
> = z.object({
  summary: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TaskListsTaskListIdTaskListItems$ {
  /** @deprecated use `PatchV1TaskListsTaskListIdTaskListItems$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TaskListsTaskListIdTaskListItems$inboundSchema;
  /** @deprecated use `PatchV1TaskListsTaskListIdTaskListItems$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TaskListsTaskListIdTaskListItems$outboundSchema;
  /** @deprecated use `PatchV1TaskListsTaskListIdTaskListItems$Outbound` instead. */
  export type Outbound = PatchV1TaskListsTaskListIdTaskListItems$Outbound;
}

export function patchV1TaskListsTaskListIdTaskListItemsToJSON(
  patchV1TaskListsTaskListIdTaskListItems:
    PatchV1TaskListsTaskListIdTaskListItems,
): string {
  return JSON.stringify(
    PatchV1TaskListsTaskListIdTaskListItems$outboundSchema.parse(
      patchV1TaskListsTaskListIdTaskListItems,
    ),
  );
}

export function patchV1TaskListsTaskListIdTaskListItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1TaskListsTaskListIdTaskListItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TaskListsTaskListIdTaskListItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1TaskListsTaskListIdTaskListItems' from JSON`,
  );
}

/** @internal */
export const PatchV1TaskListsTaskListId$inboundSchema: z.ZodType<
  PatchV1TaskListsTaskListId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  task_list_items: z.array(
    z.lazy(() => PatchV1TaskListsTaskListIdTaskListItems$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "task_list_items": "taskListItems",
  });
});

/** @internal */
export type PatchV1TaskListsTaskListId$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  task_list_items?:
    | Array<PatchV1TaskListsTaskListIdTaskListItems$Outbound>
    | undefined;
};

/** @internal */
export const PatchV1TaskListsTaskListId$outboundSchema: z.ZodType<
  PatchV1TaskListsTaskListId$Outbound,
  z.ZodTypeDef,
  PatchV1TaskListsTaskListId
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  taskListItems: z.array(
    z.lazy(() => PatchV1TaskListsTaskListIdTaskListItems$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    taskListItems: "task_list_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TaskListsTaskListId$ {
  /** @deprecated use `PatchV1TaskListsTaskListId$inboundSchema` instead. */
  export const inboundSchema = PatchV1TaskListsTaskListId$inboundSchema;
  /** @deprecated use `PatchV1TaskListsTaskListId$outboundSchema` instead. */
  export const outboundSchema = PatchV1TaskListsTaskListId$outboundSchema;
  /** @deprecated use `PatchV1TaskListsTaskListId$Outbound` instead. */
  export type Outbound = PatchV1TaskListsTaskListId$Outbound;
}

export function patchV1TaskListsTaskListIdToJSON(
  patchV1TaskListsTaskListId: PatchV1TaskListsTaskListId,
): string {
  return JSON.stringify(
    PatchV1TaskListsTaskListId$outboundSchema.parse(patchV1TaskListsTaskListId),
  );
}

export function patchV1TaskListsTaskListIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TaskListsTaskListId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TaskListsTaskListId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TaskListsTaskListId' from JSON`,
  );
}
