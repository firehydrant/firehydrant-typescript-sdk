/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateOnCallScheduleRotationMember = {
  /**
   * The ID of a user who should be added to the rotation. You can add a user to the rotation
   *
   * @remarks
   * multiple times to construct more complex rotations, and you can specify a `null` user ID to create
   * unassigned slots in the rotation.
   */
  userId?: string | null | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const CreateOnCallScheduleRotationType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type CreateOnCallScheduleRotationType = ClosedEnum<
  typeof CreateOnCallScheduleRotationType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const CreateOnCallScheduleRotationHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type CreateOnCallScheduleRotationHandoffDay = ClosedEnum<
  typeof CreateOnCallScheduleRotationHandoffDay
>;

/**
 * An object that specifies how the rotation's on-call shifts should be generated.
 */
export type CreateOnCallScheduleRotationStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: CreateOnCallScheduleRotationType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | null | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?: CreateOnCallScheduleRotationHandoffDay | null | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | null | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const CreateOnCallScheduleRotationStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type CreateOnCallScheduleRotationStartDay = ClosedEnum<
  typeof CreateOnCallScheduleRotationStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const CreateOnCallScheduleRotationEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type CreateOnCallScheduleRotationEndDay = ClosedEnum<
  typeof CreateOnCallScheduleRotationEndDay
>;

export type CreateOnCallScheduleRotationRestriction = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: CreateOnCallScheduleRotationStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: CreateOnCallScheduleRotationEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

/**
 * Add a new rotation to an existing on-call schedule
 */
export type CreateOnCallScheduleRotation = {
  /**
   * The name of the on-call rotation
   */
  name: string;
  /**
   * The timezone of the on-call rotation as a string
   */
  timeZone: string;
  /**
   * The description of the on-call rotation
   */
  description?: string | null | undefined;
  /**
   * The Slack Usergroup ID for the on-call rotation
   */
  slackUserGroupId?: string | null | undefined;
  /**
   * Notify the team's Slack channel when handoffs occur
   */
  enableSlackChannelNotifications?: boolean | null | undefined;
  /**
   * Prevent shifts from being deleted by users and leading to gaps in coverage.
   */
  preventShiftDeletion?: boolean | null | undefined;
  /**
   * An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
   */
  coverageGapNotificationInterval?: string | null | undefined;
  /**
   * A hex color code that will be used to represent the rotation in FireHydrant's UI.
   */
  color?: string | null | undefined;
  /**
   * An ordered list of objects that specify members of the schedule's rotation.
   */
  members?: Array<CreateOnCallScheduleRotationMember> | null | undefined;
  /**
   * An object that specifies how the rotation's on-call shifts should be generated.
   */
  strategy: CreateOnCallScheduleRotationStrategy;
  /**
   * A list of objects that restrict the rotation to specific on-call periods.
   */
  restrictions?:
    | Array<CreateOnCallScheduleRotationRestriction>
    | null
    | undefined;
  /**
   * An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
   */
  startTime?: string | null | undefined;
};

/** @internal */
export const CreateOnCallScheduleRotationMember$inboundSchema: z.ZodType<
  CreateOnCallScheduleRotationMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type CreateOnCallScheduleRotationMember$Outbound = {
  user_id?: string | null | undefined;
};

/** @internal */
export const CreateOnCallScheduleRotationMember$outboundSchema: z.ZodType<
  CreateOnCallScheduleRotationMember$Outbound,
  z.ZodTypeDef,
  CreateOnCallScheduleRotationMember
> = z.object({
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationMember$ {
  /** @deprecated use `CreateOnCallScheduleRotationMember$inboundSchema` instead. */
  export const inboundSchema = CreateOnCallScheduleRotationMember$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationMember$outboundSchema` instead. */
  export const outboundSchema =
    CreateOnCallScheduleRotationMember$outboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationMember$Outbound` instead. */
  export type Outbound = CreateOnCallScheduleRotationMember$Outbound;
}

export function createOnCallScheduleRotationMemberToJSON(
  createOnCallScheduleRotationMember: CreateOnCallScheduleRotationMember,
): string {
  return JSON.stringify(
    CreateOnCallScheduleRotationMember$outboundSchema.parse(
      createOnCallScheduleRotationMember,
    ),
  );
}

export function createOnCallScheduleRotationMemberFromJSON(
  jsonString: string,
): SafeParseResult<CreateOnCallScheduleRotationMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOnCallScheduleRotationMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOnCallScheduleRotationMember' from JSON`,
  );
}

/** @internal */
export const CreateOnCallScheduleRotationType$inboundSchema: z.ZodNativeEnum<
  typeof CreateOnCallScheduleRotationType
> = z.nativeEnum(CreateOnCallScheduleRotationType);

/** @internal */
export const CreateOnCallScheduleRotationType$outboundSchema: z.ZodNativeEnum<
  typeof CreateOnCallScheduleRotationType
> = CreateOnCallScheduleRotationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationType$ {
  /** @deprecated use `CreateOnCallScheduleRotationType$inboundSchema` instead. */
  export const inboundSchema = CreateOnCallScheduleRotationType$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationType$outboundSchema` instead. */
  export const outboundSchema = CreateOnCallScheduleRotationType$outboundSchema;
}

/** @internal */
export const CreateOnCallScheduleRotationHandoffDay$inboundSchema:
  z.ZodNativeEnum<typeof CreateOnCallScheduleRotationHandoffDay> = z.nativeEnum(
    CreateOnCallScheduleRotationHandoffDay,
  );

/** @internal */
export const CreateOnCallScheduleRotationHandoffDay$outboundSchema:
  z.ZodNativeEnum<typeof CreateOnCallScheduleRotationHandoffDay> =
    CreateOnCallScheduleRotationHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationHandoffDay$ {
  /** @deprecated use `CreateOnCallScheduleRotationHandoffDay$inboundSchema` instead. */
  export const inboundSchema =
    CreateOnCallScheduleRotationHandoffDay$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    CreateOnCallScheduleRotationHandoffDay$outboundSchema;
}

/** @internal */
export const CreateOnCallScheduleRotationStrategy$inboundSchema: z.ZodType<
  CreateOnCallScheduleRotationStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateOnCallScheduleRotationType$inboundSchema,
  handoff_time: z.nullable(z.string()).optional(),
  handoff_day: z.nullable(CreateOnCallScheduleRotationHandoffDay$inboundSchema)
    .optional(),
  shift_duration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_time": "handoffTime",
    "handoff_day": "handoffDay",
    "shift_duration": "shiftDuration",
  });
});

/** @internal */
export type CreateOnCallScheduleRotationStrategy$Outbound = {
  type: string;
  handoff_time?: string | null | undefined;
  handoff_day?: string | null | undefined;
  shift_duration?: string | null | undefined;
};

/** @internal */
export const CreateOnCallScheduleRotationStrategy$outboundSchema: z.ZodType<
  CreateOnCallScheduleRotationStrategy$Outbound,
  z.ZodTypeDef,
  CreateOnCallScheduleRotationStrategy
> = z.object({
  type: CreateOnCallScheduleRotationType$outboundSchema,
  handoffTime: z.nullable(z.string()).optional(),
  handoffDay: z.nullable(CreateOnCallScheduleRotationHandoffDay$outboundSchema)
    .optional(),
  shiftDuration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffTime: "handoff_time",
    handoffDay: "handoff_day",
    shiftDuration: "shift_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationStrategy$ {
  /** @deprecated use `CreateOnCallScheduleRotationStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateOnCallScheduleRotationStrategy$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateOnCallScheduleRotationStrategy$outboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationStrategy$Outbound` instead. */
  export type Outbound = CreateOnCallScheduleRotationStrategy$Outbound;
}

export function createOnCallScheduleRotationStrategyToJSON(
  createOnCallScheduleRotationStrategy: CreateOnCallScheduleRotationStrategy,
): string {
  return JSON.stringify(
    CreateOnCallScheduleRotationStrategy$outboundSchema.parse(
      createOnCallScheduleRotationStrategy,
    ),
  );
}

export function createOnCallScheduleRotationStrategyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOnCallScheduleRotationStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOnCallScheduleRotationStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOnCallScheduleRotationStrategy' from JSON`,
  );
}

/** @internal */
export const CreateOnCallScheduleRotationStartDay$inboundSchema:
  z.ZodNativeEnum<typeof CreateOnCallScheduleRotationStartDay> = z.nativeEnum(
    CreateOnCallScheduleRotationStartDay,
  );

/** @internal */
export const CreateOnCallScheduleRotationStartDay$outboundSchema:
  z.ZodNativeEnum<typeof CreateOnCallScheduleRotationStartDay> =
    CreateOnCallScheduleRotationStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationStartDay$ {
  /** @deprecated use `CreateOnCallScheduleRotationStartDay$inboundSchema` instead. */
  export const inboundSchema =
    CreateOnCallScheduleRotationStartDay$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationStartDay$outboundSchema` instead. */
  export const outboundSchema =
    CreateOnCallScheduleRotationStartDay$outboundSchema;
}

/** @internal */
export const CreateOnCallScheduleRotationEndDay$inboundSchema: z.ZodNativeEnum<
  typeof CreateOnCallScheduleRotationEndDay
> = z.nativeEnum(CreateOnCallScheduleRotationEndDay);

/** @internal */
export const CreateOnCallScheduleRotationEndDay$outboundSchema: z.ZodNativeEnum<
  typeof CreateOnCallScheduleRotationEndDay
> = CreateOnCallScheduleRotationEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationEndDay$ {
  /** @deprecated use `CreateOnCallScheduleRotationEndDay$inboundSchema` instead. */
  export const inboundSchema = CreateOnCallScheduleRotationEndDay$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationEndDay$outboundSchema` instead. */
  export const outboundSchema =
    CreateOnCallScheduleRotationEndDay$outboundSchema;
}

/** @internal */
export const CreateOnCallScheduleRotationRestriction$inboundSchema: z.ZodType<
  CreateOnCallScheduleRotationRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_day: CreateOnCallScheduleRotationStartDay$inboundSchema,
  start_time: z.string(),
  end_day: CreateOnCallScheduleRotationEndDay$inboundSchema,
  end_time: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_day": "startDay",
    "start_time": "startTime",
    "end_day": "endDay",
    "end_time": "endTime",
  });
});

/** @internal */
export type CreateOnCallScheduleRotationRestriction$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const CreateOnCallScheduleRotationRestriction$outboundSchema: z.ZodType<
  CreateOnCallScheduleRotationRestriction$Outbound,
  z.ZodTypeDef,
  CreateOnCallScheduleRotationRestriction
> = z.object({
  startDay: CreateOnCallScheduleRotationStartDay$outboundSchema,
  startTime: z.string(),
  endDay: CreateOnCallScheduleRotationEndDay$outboundSchema,
  endTime: z.string(),
}).transform((v) => {
  return remap$(v, {
    startDay: "start_day",
    startTime: "start_time",
    endDay: "end_day",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotationRestriction$ {
  /** @deprecated use `CreateOnCallScheduleRotationRestriction$inboundSchema` instead. */
  export const inboundSchema =
    CreateOnCallScheduleRotationRestriction$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationRestriction$outboundSchema` instead. */
  export const outboundSchema =
    CreateOnCallScheduleRotationRestriction$outboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotationRestriction$Outbound` instead. */
  export type Outbound = CreateOnCallScheduleRotationRestriction$Outbound;
}

export function createOnCallScheduleRotationRestrictionToJSON(
  createOnCallScheduleRotationRestriction:
    CreateOnCallScheduleRotationRestriction,
): string {
  return JSON.stringify(
    CreateOnCallScheduleRotationRestriction$outboundSchema.parse(
      createOnCallScheduleRotationRestriction,
    ),
  );
}

export function createOnCallScheduleRotationRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOnCallScheduleRotationRestriction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOnCallScheduleRotationRestriction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOnCallScheduleRotationRestriction' from JSON`,
  );
}

/** @internal */
export const CreateOnCallScheduleRotation$inboundSchema: z.ZodType<
  CreateOnCallScheduleRotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  time_zone: z.string(),
  description: z.nullable(z.string()).optional(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  enable_slack_channel_notifications: z.nullable(z.boolean()).optional(),
  prevent_shift_deletion: z.nullable(z.boolean()).optional(),
  coverage_gap_notification_interval: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => CreateOnCallScheduleRotationMember$inboundSchema)),
  ).optional(),
  strategy: z.lazy(() => CreateOnCallScheduleRotationStrategy$inboundSchema),
  restrictions: z.nullable(
    z.array(
      z.lazy(() => CreateOnCallScheduleRotationRestriction$inboundSchema),
    ),
  ).optional(),
  start_time: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "enable_slack_channel_notifications": "enableSlackChannelNotifications",
    "prevent_shift_deletion": "preventShiftDeletion",
    "coverage_gap_notification_interval": "coverageGapNotificationInterval",
    "start_time": "startTime",
  });
});

/** @internal */
export type CreateOnCallScheduleRotation$Outbound = {
  name: string;
  time_zone: string;
  description?: string | null | undefined;
  slack_user_group_id?: string | null | undefined;
  enable_slack_channel_notifications?: boolean | null | undefined;
  prevent_shift_deletion?: boolean | null | undefined;
  coverage_gap_notification_interval?: string | null | undefined;
  color?: string | null | undefined;
  members?:
    | Array<CreateOnCallScheduleRotationMember$Outbound>
    | null
    | undefined;
  strategy: CreateOnCallScheduleRotationStrategy$Outbound;
  restrictions?:
    | Array<CreateOnCallScheduleRotationRestriction$Outbound>
    | null
    | undefined;
  start_time?: string | null | undefined;
};

/** @internal */
export const CreateOnCallScheduleRotation$outboundSchema: z.ZodType<
  CreateOnCallScheduleRotation$Outbound,
  z.ZodTypeDef,
  CreateOnCallScheduleRotation
> = z.object({
  name: z.string(),
  timeZone: z.string(),
  description: z.nullable(z.string()).optional(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  enableSlackChannelNotifications: z.nullable(z.boolean()).optional(),
  preventShiftDeletion: z.nullable(z.boolean()).optional(),
  coverageGapNotificationInterval: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => CreateOnCallScheduleRotationMember$outboundSchema)),
  ).optional(),
  strategy: z.lazy(() => CreateOnCallScheduleRotationStrategy$outboundSchema),
  restrictions: z.nullable(
    z.array(
      z.lazy(() => CreateOnCallScheduleRotationRestriction$outboundSchema),
    ),
  ).optional(),
  startTime: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    enableSlackChannelNotifications: "enable_slack_channel_notifications",
    preventShiftDeletion: "prevent_shift_deletion",
    coverageGapNotificationInterval: "coverage_gap_notification_interval",
    startTime: "start_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOnCallScheduleRotation$ {
  /** @deprecated use `CreateOnCallScheduleRotation$inboundSchema` instead. */
  export const inboundSchema = CreateOnCallScheduleRotation$inboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotation$outboundSchema` instead. */
  export const outboundSchema = CreateOnCallScheduleRotation$outboundSchema;
  /** @deprecated use `CreateOnCallScheduleRotation$Outbound` instead. */
  export type Outbound = CreateOnCallScheduleRotation$Outbound;
}

export function createOnCallScheduleRotationToJSON(
  createOnCallScheduleRotation: CreateOnCallScheduleRotation,
): string {
  return JSON.stringify(
    CreateOnCallScheduleRotation$outboundSchema.parse(
      createOnCallScheduleRotation,
    ),
  );
}

export function createOnCallScheduleRotationFromJSON(
  jsonString: string,
): SafeParseResult<CreateOnCallScheduleRotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOnCallScheduleRotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOnCallScheduleRotation' from JSON`,
  );
}
