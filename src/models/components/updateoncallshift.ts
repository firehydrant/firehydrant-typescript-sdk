/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a Signals on-call shift by ID
 */
export type UpdateOnCallShift = {
  /**
   * The start time of the shift in ISO8601 format.
   */
  startTime?: string | null | undefined;
  /**
   * The end time of the shift in ISO8601 format.
   */
  endTime?: string | null | undefined;
  /**
   * The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.
   */
  userId?: string | null | undefined;
  /**
   * A description of why coverage is needed for this shift. If the shift is re-assigned, this will automatically be cleared unless provided again.
   */
  coverageRequest?: string | null | undefined;
};

/** @internal */
export const UpdateOnCallShift$inboundSchema: z.ZodType<
  UpdateOnCallShift,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_time: z.nullable(z.string()).optional(),
  end_time: z.nullable(z.string()).optional(),
  user_id: z.nullable(z.string()).optional(),
  coverage_request: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "end_time": "endTime",
    "user_id": "userId",
    "coverage_request": "coverageRequest",
  });
});

/** @internal */
export type UpdateOnCallShift$Outbound = {
  start_time?: string | null | undefined;
  end_time?: string | null | undefined;
  user_id?: string | null | undefined;
  coverage_request?: string | null | undefined;
};

/** @internal */
export const UpdateOnCallShift$outboundSchema: z.ZodType<
  UpdateOnCallShift$Outbound,
  z.ZodTypeDef,
  UpdateOnCallShift
> = z.object({
  startTime: z.nullable(z.string()).optional(),
  endTime: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
  coverageRequest: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    endTime: "end_time",
    userId: "user_id",
    coverageRequest: "coverage_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOnCallShift$ {
  /** @deprecated use `UpdateOnCallShift$inboundSchema` instead. */
  export const inboundSchema = UpdateOnCallShift$inboundSchema;
  /** @deprecated use `UpdateOnCallShift$outboundSchema` instead. */
  export const outboundSchema = UpdateOnCallShift$outboundSchema;
  /** @deprecated use `UpdateOnCallShift$Outbound` instead. */
  export type Outbound = UpdateOnCallShift$Outbound;
}

export function updateOnCallShiftToJSON(
  updateOnCallShift: UpdateOnCallShift,
): string {
  return JSON.stringify(
    UpdateOnCallShift$outboundSchema.parse(updateOnCallShift),
  );
}

export function updateOnCallShiftFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOnCallShift, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOnCallShift$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOnCallShift' from JSON`,
  );
}
