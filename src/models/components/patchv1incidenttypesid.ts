/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1IncidentTypesIdImpacts = {
  /**
   * The id of impact
   */
  id: string;
  /**
   * The id of the condition
   */
  conditionId: string;
};

export type PatchV1IncidentTypesIdTemplate = {
  description?: string | undefined;
  customerImpactSummary?: string | undefined;
  /**
   * A labels hash of keys and values
   */
  labels?: { [k: string]: string } | undefined;
  severity?: string | undefined;
  priority?: string | undefined;
  /**
   * List of tags for the incident
   */
  tagList?: Array<string> | undefined;
  /**
   * List of ids of Runbooks to attach to incidents created from this type
   */
  runbookIds?: Array<string> | undefined;
  privateIncident?: boolean | undefined;
  /**
   * List of ids of teams to be assigned to incidents
   */
  teamIds?: Array<string> | undefined;
  /**
   * An array of impact/condition combinations
   */
  impacts?: Array<PatchV1IncidentTypesIdImpacts> | undefined;
};

/**
 * Update a single incident type from its ID
 */
export type PatchV1IncidentTypesId = {
  name: string;
  template: PatchV1IncidentTypesIdTemplate;
};

/** @internal */
export const PatchV1IncidentTypesIdImpacts$inboundSchema: z.ZodType<
  PatchV1IncidentTypesIdImpacts,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type PatchV1IncidentTypesIdImpacts$Outbound = {
  id: string;
  condition_id: string;
};

/** @internal */
export const PatchV1IncidentTypesIdImpacts$outboundSchema: z.ZodType<
  PatchV1IncidentTypesIdImpacts$Outbound,
  z.ZodTypeDef,
  PatchV1IncidentTypesIdImpacts
> = z.object({
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentTypesIdImpacts$ {
  /** @deprecated use `PatchV1IncidentTypesIdImpacts$inboundSchema` instead. */
  export const inboundSchema = PatchV1IncidentTypesIdImpacts$inboundSchema;
  /** @deprecated use `PatchV1IncidentTypesIdImpacts$outboundSchema` instead. */
  export const outboundSchema = PatchV1IncidentTypesIdImpacts$outboundSchema;
  /** @deprecated use `PatchV1IncidentTypesIdImpacts$Outbound` instead. */
  export type Outbound = PatchV1IncidentTypesIdImpacts$Outbound;
}

export function patchV1IncidentTypesIdImpactsToJSON(
  patchV1IncidentTypesIdImpacts: PatchV1IncidentTypesIdImpacts,
): string {
  return JSON.stringify(
    PatchV1IncidentTypesIdImpacts$outboundSchema.parse(
      patchV1IncidentTypesIdImpacts,
    ),
  );
}

export function patchV1IncidentTypesIdImpactsFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1IncidentTypesIdImpacts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1IncidentTypesIdImpacts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1IncidentTypesIdImpacts' from JSON`,
  );
}

/** @internal */
export const PatchV1IncidentTypesIdTemplate$inboundSchema: z.ZodType<
  PatchV1IncidentTypesIdTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  customer_impact_summary: z.string().optional(),
  labels: z.record(z.string()).optional(),
  severity: z.string().optional(),
  priority: z.string().optional(),
  tag_list: z.array(z.string()).optional(),
  runbook_ids: z.array(z.string()).optional(),
  private_incident: z.boolean().optional(),
  team_ids: z.array(z.string()).optional(),
  impacts: z.array(z.lazy(() => PatchV1IncidentTypesIdImpacts$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_impact_summary": "customerImpactSummary",
    "tag_list": "tagList",
    "runbook_ids": "runbookIds",
    "private_incident": "privateIncident",
    "team_ids": "teamIds",
  });
});

/** @internal */
export type PatchV1IncidentTypesIdTemplate$Outbound = {
  description?: string | undefined;
  customer_impact_summary?: string | undefined;
  labels?: { [k: string]: string } | undefined;
  severity?: string | undefined;
  priority?: string | undefined;
  tag_list?: Array<string> | undefined;
  runbook_ids?: Array<string> | undefined;
  private_incident?: boolean | undefined;
  team_ids?: Array<string> | undefined;
  impacts?: Array<PatchV1IncidentTypesIdImpacts$Outbound> | undefined;
};

/** @internal */
export const PatchV1IncidentTypesIdTemplate$outboundSchema: z.ZodType<
  PatchV1IncidentTypesIdTemplate$Outbound,
  z.ZodTypeDef,
  PatchV1IncidentTypesIdTemplate
> = z.object({
  description: z.string().optional(),
  customerImpactSummary: z.string().optional(),
  labels: z.record(z.string()).optional(),
  severity: z.string().optional(),
  priority: z.string().optional(),
  tagList: z.array(z.string()).optional(),
  runbookIds: z.array(z.string()).optional(),
  privateIncident: z.boolean().optional(),
  teamIds: z.array(z.string()).optional(),
  impacts: z.array(z.lazy(() => PatchV1IncidentTypesIdImpacts$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    customerImpactSummary: "customer_impact_summary",
    tagList: "tag_list",
    runbookIds: "runbook_ids",
    privateIncident: "private_incident",
    teamIds: "team_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentTypesIdTemplate$ {
  /** @deprecated use `PatchV1IncidentTypesIdTemplate$inboundSchema` instead. */
  export const inboundSchema = PatchV1IncidentTypesIdTemplate$inboundSchema;
  /** @deprecated use `PatchV1IncidentTypesIdTemplate$outboundSchema` instead. */
  export const outboundSchema = PatchV1IncidentTypesIdTemplate$outboundSchema;
  /** @deprecated use `PatchV1IncidentTypesIdTemplate$Outbound` instead. */
  export type Outbound = PatchV1IncidentTypesIdTemplate$Outbound;
}

export function patchV1IncidentTypesIdTemplateToJSON(
  patchV1IncidentTypesIdTemplate: PatchV1IncidentTypesIdTemplate,
): string {
  return JSON.stringify(
    PatchV1IncidentTypesIdTemplate$outboundSchema.parse(
      patchV1IncidentTypesIdTemplate,
    ),
  );
}

export function patchV1IncidentTypesIdTemplateFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1IncidentTypesIdTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1IncidentTypesIdTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1IncidentTypesIdTemplate' from JSON`,
  );
}

/** @internal */
export const PatchV1IncidentTypesId$inboundSchema: z.ZodType<
  PatchV1IncidentTypesId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  template: z.lazy(() => PatchV1IncidentTypesIdTemplate$inboundSchema),
});

/** @internal */
export type PatchV1IncidentTypesId$Outbound = {
  name: string;
  template: PatchV1IncidentTypesIdTemplate$Outbound;
};

/** @internal */
export const PatchV1IncidentTypesId$outboundSchema: z.ZodType<
  PatchV1IncidentTypesId$Outbound,
  z.ZodTypeDef,
  PatchV1IncidentTypesId
> = z.object({
  name: z.string(),
  template: z.lazy(() => PatchV1IncidentTypesIdTemplate$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1IncidentTypesId$ {
  /** @deprecated use `PatchV1IncidentTypesId$inboundSchema` instead. */
  export const inboundSchema = PatchV1IncidentTypesId$inboundSchema;
  /** @deprecated use `PatchV1IncidentTypesId$outboundSchema` instead. */
  export const outboundSchema = PatchV1IncidentTypesId$outboundSchema;
  /** @deprecated use `PatchV1IncidentTypesId$Outbound` instead. */
  export type Outbound = PatchV1IncidentTypesId$Outbound;
}

export function patchV1IncidentTypesIdToJSON(
  patchV1IncidentTypesId: PatchV1IncidentTypesId,
): string {
  return JSON.stringify(
    PatchV1IncidentTypesId$outboundSchema.parse(patchV1IncidentTypesId),
  );
}

export function patchV1IncidentTypesIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1IncidentTypesId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1IncidentTypesId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1IncidentTypesId' from JSON`,
  );
}
