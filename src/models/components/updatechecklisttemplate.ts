/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateChecklistTemplateCheck = {
  /**
   * Specify the check ID when updating an already existing check
   */
  id?: string | null | undefined;
  /**
   * The description of the check
   */
  description?: string | null | undefined;
  /**
   * The name of the check
   */
  name: string;
};

export type UpdateChecklistTemplateConnectedService = {
  id: string;
  /**
   * Set to `true` to remove checklist from service
   */
  remove?: boolean | null | undefined;
};

/**
 * Update a checklist templates attributes
 */
export type UpdateChecklistTemplate = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * An array of checks for the checklist template
   */
  checks?: Array<UpdateChecklistTemplateCheck> | null | undefined;
  /**
   * The ID of the Team that owns the checklist template
   */
  teamId?: string | null | undefined;
  /**
   * Array of service IDs to attach checklist template to
   */
  connectedServices?:
    | Array<UpdateChecklistTemplateConnectedService>
    | null
    | undefined;
  /**
   * If set to true, any services tagged on the checklist that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the services
   */
  removeRemainingConnectedServices?: boolean | null | undefined;
};

/** @internal */
export const UpdateChecklistTemplateCheck$inboundSchema: z.ZodType<
  UpdateChecklistTemplateCheck,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  name: z.string(),
});

/** @internal */
export type UpdateChecklistTemplateCheck$Outbound = {
  id?: string | null | undefined;
  description?: string | null | undefined;
  name: string;
};

/** @internal */
export const UpdateChecklistTemplateCheck$outboundSchema: z.ZodType<
  UpdateChecklistTemplateCheck$Outbound,
  z.ZodTypeDef,
  UpdateChecklistTemplateCheck
> = z.object({
  id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChecklistTemplateCheck$ {
  /** @deprecated use `UpdateChecklistTemplateCheck$inboundSchema` instead. */
  export const inboundSchema = UpdateChecklistTemplateCheck$inboundSchema;
  /** @deprecated use `UpdateChecklistTemplateCheck$outboundSchema` instead. */
  export const outboundSchema = UpdateChecklistTemplateCheck$outboundSchema;
  /** @deprecated use `UpdateChecklistTemplateCheck$Outbound` instead. */
  export type Outbound = UpdateChecklistTemplateCheck$Outbound;
}

export function updateChecklistTemplateCheckToJSON(
  updateChecklistTemplateCheck: UpdateChecklistTemplateCheck,
): string {
  return JSON.stringify(
    UpdateChecklistTemplateCheck$outboundSchema.parse(
      updateChecklistTemplateCheck,
    ),
  );
}

export function updateChecklistTemplateCheckFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChecklistTemplateCheck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChecklistTemplateCheck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChecklistTemplateCheck' from JSON`,
  );
}

/** @internal */
export const UpdateChecklistTemplateConnectedService$inboundSchema: z.ZodType<
  UpdateChecklistTemplateConnectedService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateChecklistTemplateConnectedService$Outbound = {
  id: string;
  remove?: boolean | null | undefined;
};

/** @internal */
export const UpdateChecklistTemplateConnectedService$outboundSchema: z.ZodType<
  UpdateChecklistTemplateConnectedService$Outbound,
  z.ZodTypeDef,
  UpdateChecklistTemplateConnectedService
> = z.object({
  id: z.string(),
  remove: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChecklistTemplateConnectedService$ {
  /** @deprecated use `UpdateChecklistTemplateConnectedService$inboundSchema` instead. */
  export const inboundSchema =
    UpdateChecklistTemplateConnectedService$inboundSchema;
  /** @deprecated use `UpdateChecklistTemplateConnectedService$outboundSchema` instead. */
  export const outboundSchema =
    UpdateChecklistTemplateConnectedService$outboundSchema;
  /** @deprecated use `UpdateChecklistTemplateConnectedService$Outbound` instead. */
  export type Outbound = UpdateChecklistTemplateConnectedService$Outbound;
}

export function updateChecklistTemplateConnectedServiceToJSON(
  updateChecklistTemplateConnectedService:
    UpdateChecklistTemplateConnectedService,
): string {
  return JSON.stringify(
    UpdateChecklistTemplateConnectedService$outboundSchema.parse(
      updateChecklistTemplateConnectedService,
    ),
  );
}

export function updateChecklistTemplateConnectedServiceFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateChecklistTemplateConnectedService,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateChecklistTemplateConnectedService$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateChecklistTemplateConnectedService' from JSON`,
  );
}

/** @internal */
export const UpdateChecklistTemplate$inboundSchema: z.ZodType<
  UpdateChecklistTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  checks: z.nullable(
    z.array(z.lazy(() => UpdateChecklistTemplateCheck$inboundSchema)),
  ).optional(),
  team_id: z.nullable(z.string()).optional(),
  connected_services: z.nullable(
    z.array(
      z.lazy(() => UpdateChecklistTemplateConnectedService$inboundSchema),
    ),
  ).optional(),
  remove_remaining_connected_services: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "connected_services": "connectedServices",
    "remove_remaining_connected_services": "removeRemainingConnectedServices",
  });
});

/** @internal */
export type UpdateChecklistTemplate$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  checks?: Array<UpdateChecklistTemplateCheck$Outbound> | null | undefined;
  team_id?: string | null | undefined;
  connected_services?:
    | Array<UpdateChecklistTemplateConnectedService$Outbound>
    | null
    | undefined;
  remove_remaining_connected_services?: boolean | null | undefined;
};

/** @internal */
export const UpdateChecklistTemplate$outboundSchema: z.ZodType<
  UpdateChecklistTemplate$Outbound,
  z.ZodTypeDef,
  UpdateChecklistTemplate
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  checks: z.nullable(
    z.array(z.lazy(() => UpdateChecklistTemplateCheck$outboundSchema)),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  connectedServices: z.nullable(
    z.array(
      z.lazy(() => UpdateChecklistTemplateConnectedService$outboundSchema),
    ),
  ).optional(),
  removeRemainingConnectedServices: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    connectedServices: "connected_services",
    removeRemainingConnectedServices: "remove_remaining_connected_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChecklistTemplate$ {
  /** @deprecated use `UpdateChecklistTemplate$inboundSchema` instead. */
  export const inboundSchema = UpdateChecklistTemplate$inboundSchema;
  /** @deprecated use `UpdateChecklistTemplate$outboundSchema` instead. */
  export const outboundSchema = UpdateChecklistTemplate$outboundSchema;
  /** @deprecated use `UpdateChecklistTemplate$Outbound` instead. */
  export type Outbound = UpdateChecklistTemplate$Outbound;
}

export function updateChecklistTemplateToJSON(
  updateChecklistTemplate: UpdateChecklistTemplate,
): string {
  return JSON.stringify(
    UpdateChecklistTemplate$outboundSchema.parse(updateChecklistTemplate),
  );
}

export function updateChecklistTemplateFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChecklistTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChecklistTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChecklistTemplate' from JSON`,
  );
}
