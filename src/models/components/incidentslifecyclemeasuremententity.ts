/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentsLifecycleMeasurementEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  startsAtMilestone?: string | null | undefined;
  endsAtMilestone?: string | null | undefined;
  value?: string | null | undefined;
  calculatedAt?: Date | null | undefined;
};

/** @internal */
export const IncidentsLifecycleMeasurementEntity$inboundSchema: z.ZodType<
  IncidentsLifecycleMeasurementEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  starts_at_milestone: z.nullable(z.string()).optional(),
  ends_at_milestone: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  calculated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at_milestone": "startsAtMilestone",
    "ends_at_milestone": "endsAtMilestone",
    "calculated_at": "calculatedAt",
  });
});

/** @internal */
export type IncidentsLifecycleMeasurementEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  starts_at_milestone?: string | null | undefined;
  ends_at_milestone?: string | null | undefined;
  value?: string | null | undefined;
  calculated_at?: string | null | undefined;
};

/** @internal */
export const IncidentsLifecycleMeasurementEntity$outboundSchema: z.ZodType<
  IncidentsLifecycleMeasurementEntity$Outbound,
  z.ZodTypeDef,
  IncidentsLifecycleMeasurementEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  startsAtMilestone: z.nullable(z.string()).optional(),
  endsAtMilestone: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  calculatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    startsAtMilestone: "starts_at_milestone",
    endsAtMilestone: "ends_at_milestone",
    calculatedAt: "calculated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsLifecycleMeasurementEntity$ {
  /** @deprecated use `IncidentsLifecycleMeasurementEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentsLifecycleMeasurementEntity$inboundSchema;
  /** @deprecated use `IncidentsLifecycleMeasurementEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentsLifecycleMeasurementEntity$outboundSchema;
  /** @deprecated use `IncidentsLifecycleMeasurementEntity$Outbound` instead. */
  export type Outbound = IncidentsLifecycleMeasurementEntity$Outbound;
}

export function incidentsLifecycleMeasurementEntityToJSON(
  incidentsLifecycleMeasurementEntity: IncidentsLifecycleMeasurementEntity,
): string {
  return JSON.stringify(
    IncidentsLifecycleMeasurementEntity$outboundSchema.parse(
      incidentsLifecycleMeasurementEntity,
    ),
  );
}

export function incidentsLifecycleMeasurementEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsLifecycleMeasurementEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentsLifecycleMeasurementEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsLifecycleMeasurementEntity' from JSON`,
  );
}
