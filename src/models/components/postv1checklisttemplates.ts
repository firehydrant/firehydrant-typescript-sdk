/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Checks = {
  /**
   * The name of the check
   */
  name: string;
  /**
   * The description of the check
   */
  description?: string | undefined;
};

export type ConnectedServices = {
  id: string;
};

/**
 * Creates a checklist template for the organization
 */
export type PostV1ChecklistTemplates = {
  name: string;
  /**
   * An array of checks for the checklist template
   */
  checks: Array<Checks>;
  description?: string | undefined;
  /**
   * The ID of the Team that owns the checklist template
   */
  teamId?: string | undefined;
  /**
   * Array of service IDs to attach checklist template to
   */
  connectedServices?: Array<ConnectedServices> | undefined;
};

/** @internal */
export const Checks$inboundSchema: z.ZodType<Checks, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    description: z.string().optional(),
  });

/** @internal */
export type Checks$Outbound = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const Checks$outboundSchema: z.ZodType<
  Checks$Outbound,
  z.ZodTypeDef,
  Checks
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Checks$ {
  /** @deprecated use `Checks$inboundSchema` instead. */
  export const inboundSchema = Checks$inboundSchema;
  /** @deprecated use `Checks$outboundSchema` instead. */
  export const outboundSchema = Checks$outboundSchema;
  /** @deprecated use `Checks$Outbound` instead. */
  export type Outbound = Checks$Outbound;
}

export function checksToJSON(checks: Checks): string {
  return JSON.stringify(Checks$outboundSchema.parse(checks));
}

export function checksFromJSON(
  jsonString: string,
): SafeParseResult<Checks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Checks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Checks' from JSON`,
  );
}

/** @internal */
export const ConnectedServices$inboundSchema: z.ZodType<
  ConnectedServices,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ConnectedServices$Outbound = {
  id: string;
};

/** @internal */
export const ConnectedServices$outboundSchema: z.ZodType<
  ConnectedServices$Outbound,
  z.ZodTypeDef,
  ConnectedServices
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectedServices$ {
  /** @deprecated use `ConnectedServices$inboundSchema` instead. */
  export const inboundSchema = ConnectedServices$inboundSchema;
  /** @deprecated use `ConnectedServices$outboundSchema` instead. */
  export const outboundSchema = ConnectedServices$outboundSchema;
  /** @deprecated use `ConnectedServices$Outbound` instead. */
  export type Outbound = ConnectedServices$Outbound;
}

export function connectedServicesToJSON(
  connectedServices: ConnectedServices,
): string {
  return JSON.stringify(
    ConnectedServices$outboundSchema.parse(connectedServices),
  );
}

export function connectedServicesFromJSON(
  jsonString: string,
): SafeParseResult<ConnectedServices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectedServices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectedServices' from JSON`,
  );
}

/** @internal */
export const PostV1ChecklistTemplates$inboundSchema: z.ZodType<
  PostV1ChecklistTemplates,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  checks: z.array(z.lazy(() => Checks$inboundSchema)),
  description: z.string().optional(),
  team_id: z.string().optional(),
  connected_services: z.array(z.lazy(() => ConnectedServices$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "connected_services": "connectedServices",
  });
});

/** @internal */
export type PostV1ChecklistTemplates$Outbound = {
  name: string;
  checks: Array<Checks$Outbound>;
  description?: string | undefined;
  team_id?: string | undefined;
  connected_services?: Array<ConnectedServices$Outbound> | undefined;
};

/** @internal */
export const PostV1ChecklistTemplates$outboundSchema: z.ZodType<
  PostV1ChecklistTemplates$Outbound,
  z.ZodTypeDef,
  PostV1ChecklistTemplates
> = z.object({
  name: z.string(),
  checks: z.array(z.lazy(() => Checks$outboundSchema)),
  description: z.string().optional(),
  teamId: z.string().optional(),
  connectedServices: z.array(z.lazy(() => ConnectedServices$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    connectedServices: "connected_services",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ChecklistTemplates$ {
  /** @deprecated use `PostV1ChecklistTemplates$inboundSchema` instead. */
  export const inboundSchema = PostV1ChecklistTemplates$inboundSchema;
  /** @deprecated use `PostV1ChecklistTemplates$outboundSchema` instead. */
  export const outboundSchema = PostV1ChecklistTemplates$outboundSchema;
  /** @deprecated use `PostV1ChecklistTemplates$Outbound` instead. */
  export type Outbound = PostV1ChecklistTemplates$Outbound;
}

export function postV1ChecklistTemplatesToJSON(
  postV1ChecklistTemplates: PostV1ChecklistTemplates,
): string {
  return JSON.stringify(
    PostV1ChecklistTemplates$outboundSchema.parse(postV1ChecklistTemplates),
  );
}

export function postV1ChecklistTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ChecklistTemplates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ChecklistTemplates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ChecklistTemplates' from JSON`,
  );
}
