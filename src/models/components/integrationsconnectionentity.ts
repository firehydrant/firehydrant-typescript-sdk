/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthorEntity,
  AuthorEntity$inboundSchema,
  AuthorEntity$Outbound,
  AuthorEntity$outboundSchema,
} from "./authorentity.js";

/**
 * Integration-specific details of this connection. As identified by the integration_slug, this object will be represented by that integration's ConnectionEntity.
 */
export type Details = {};

export type IntegrationsConnectionEntity = {
  id?: string | undefined;
  integrationSlug?: string | undefined;
  integrationId?: string | undefined;
  displayName?: string | undefined;
  configurationUrl?: string | undefined;
  authorizedBy?: string | undefined;
  authorizedById?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * Integration-specific details of this connection. As identified by the integration_slug, this object will be represented by that integration's ConnectionEntity.
   */
  details?: Details | undefined;
  defaultAuthorizedActor?: AuthorEntity | undefined;
};

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Details$Outbound = {};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const IntegrationsConnectionEntity$inboundSchema: z.ZodType<
  IntegrationsConnectionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  integration_slug: z.string().optional(),
  integration_id: z.string().optional(),
  display_name: z.string().optional(),
  configuration_url: z.string().optional(),
  authorized_by: z.string().optional(),
  authorized_by_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  details: z.lazy(() => Details$inboundSchema).optional(),
  default_authorized_actor: AuthorEntity$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
    "integration_id": "integrationId",
    "display_name": "displayName",
    "configuration_url": "configurationUrl",
    "authorized_by": "authorizedBy",
    "authorized_by_id": "authorizedById",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "default_authorized_actor": "defaultAuthorizedActor",
  });
});

/** @internal */
export type IntegrationsConnectionEntity$Outbound = {
  id?: string | undefined;
  integration_slug?: string | undefined;
  integration_id?: string | undefined;
  display_name?: string | undefined;
  configuration_url?: string | undefined;
  authorized_by?: string | undefined;
  authorized_by_id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  details?: Details$Outbound | undefined;
  default_authorized_actor?: AuthorEntity$Outbound | undefined;
};

/** @internal */
export const IntegrationsConnectionEntity$outboundSchema: z.ZodType<
  IntegrationsConnectionEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsConnectionEntity
> = z.object({
  id: z.string().optional(),
  integrationSlug: z.string().optional(),
  integrationId: z.string().optional(),
  displayName: z.string().optional(),
  configurationUrl: z.string().optional(),
  authorizedBy: z.string().optional(),
  authorizedById: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  details: z.lazy(() => Details$outboundSchema).optional(),
  defaultAuthorizedActor: AuthorEntity$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
    integrationId: "integration_id",
    displayName: "display_name",
    configurationUrl: "configuration_url",
    authorizedBy: "authorized_by",
    authorizedById: "authorized_by_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    defaultAuthorizedActor: "default_authorized_actor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsConnectionEntity$ {
  /** @deprecated use `IntegrationsConnectionEntity$inboundSchema` instead. */
  export const inboundSchema = IntegrationsConnectionEntity$inboundSchema;
  /** @deprecated use `IntegrationsConnectionEntity$outboundSchema` instead. */
  export const outboundSchema = IntegrationsConnectionEntity$outboundSchema;
  /** @deprecated use `IntegrationsConnectionEntity$Outbound` instead. */
  export type Outbound = IntegrationsConnectionEntity$Outbound;
}

export function integrationsConnectionEntityToJSON(
  integrationsConnectionEntity: IntegrationsConnectionEntity,
): string {
  return JSON.stringify(
    IntegrationsConnectionEntity$outboundSchema.parse(
      integrationsConnectionEntity,
    ),
  );
}

export function integrationsConnectionEntityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsConnectionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationsConnectionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsConnectionEntity' from JSON`,
  );
}
