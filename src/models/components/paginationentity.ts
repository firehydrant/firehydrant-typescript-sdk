/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaginationEntity = {
  count?: number | undefined;
  page?: number | undefined;
  items?: number | undefined;
  pages?: number | undefined;
  last?: number | undefined;
  prev?: number | null | undefined;
  next?: number | null | undefined;
};

/** @internal */
export const PaginationEntity$inboundSchema: z.ZodType<
  PaginationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  page: z.number().int().optional(),
  items: z.number().int().optional(),
  pages: z.number().int().optional(),
  last: z.number().int().optional(),
  prev: z.nullable(z.number().int()).optional(),
  next: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type PaginationEntity$Outbound = {
  count?: number | undefined;
  page?: number | undefined;
  items?: number | undefined;
  pages?: number | undefined;
  last?: number | undefined;
  prev?: number | null | undefined;
  next?: number | null | undefined;
};

/** @internal */
export const PaginationEntity$outboundSchema: z.ZodType<
  PaginationEntity$Outbound,
  z.ZodTypeDef,
  PaginationEntity
> = z.object({
  count: z.number().int().optional(),
  page: z.number().int().optional(),
  items: z.number().int().optional(),
  pages: z.number().int().optional(),
  last: z.number().int().optional(),
  prev: z.nullable(z.number().int()).optional(),
  next: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationEntity$ {
  /** @deprecated use `PaginationEntity$inboundSchema` instead. */
  export const inboundSchema = PaginationEntity$inboundSchema;
  /** @deprecated use `PaginationEntity$outboundSchema` instead. */
  export const outboundSchema = PaginationEntity$outboundSchema;
  /** @deprecated use `PaginationEntity$Outbound` instead. */
  export type Outbound = PaginationEntity$Outbound;
}

export function paginationEntityToJSON(
  paginationEntity: PaginationEntity,
): string {
  return JSON.stringify(
    PaginationEntity$outboundSchema.parse(paginationEntity),
  );
}

export function paginationEntityFromJSON(
  jsonString: string,
): SafeParseResult<PaginationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationEntity' from JSON`,
  );
}
