/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers = {
  /**
   * The ID of a user who should be added to the schedule's rotation. You can add a user to the schedule
   *
   * @remarks
   * multiple times to construct more complex rotations, and you can specify a `null` user ID to create
   * unassigned slots in the rotation.
   */
  userId?: string | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType = ClosedEnum<
  typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay = ClosedEnum<
  typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay
>;

/**
 * An object that specifies how the schedule's on-call shifts should be generated.
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?:
    | PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay
    | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay = ClosedEnum<
  typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay = ClosedEnum<
  typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay
>;

export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

/**
 * Update a Signals on-call schedule by ID
 */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleId = {
  /**
   * The on-call schedule's name.
   */
  name?: string | undefined;
  /**
   * A detailed description of the on-call schedule.
   */
  description?: string | undefined;
  /**
   * The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.
   */
  timeZone?: string | undefined;
  /**
   * The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.
   */
  slackUserGroupId?: string | undefined;
  /**
   * An ordered list of objects that specify members of the on-call schedule's rotation.
   */
  members?:
    | Array<PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers>
    | undefined;
  /**
   * An object that specifies how the schedule's on-call shifts should be generated.
   */
  strategy?: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy | undefined;
  /**
   * A list of objects that restrict the schedule to speccific on-call periods.
   */
  restrictions?:
    | Array<PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions>
    | undefined;
  /**
   * An ISO8601 time string specifying when the updated schedule should take effect. This
   *
   * @remarks
   * value must be provided if editing an attribute that would affect how the schedule's
   * shifts are generated, such as the time zone, members, strategy, or restrictions.
   */
  effectiveAt?: string | undefined;
  /**
   * A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.
   */
  color?: string | undefined;
  /**
   * This parameter is deprecated; use `members` instead.
   */
  memberIds?: Array<string> | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$inboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers,
    z.ZodTypeDef,
    unknown
  > = z.object({
    user_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
    });
  });

/** @internal */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$Outbound = {
  user_id?: string | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$outboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$Outbound,
    z.ZodTypeDef,
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers
  > = z.object({
    userId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      userId: "user_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$outboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$Outbound` instead. */
  export type Outbound =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$Outbound;
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdMembersToJSON(
  patchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers:
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers,
): string {
  return JSON.stringify(
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$outboundSchema.parse(
      patchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers,
    ),
  );
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdMembersFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers' from JSON`,
  );
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$inboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType> = z
    .nativeEnum(PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType);

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$outboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType> =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$outboundSchema;
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay
  > = z.nativeEnum(PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay);

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay
  > = PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$outboundSchema;
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$inboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$inboundSchema,
    handoff_time: z.string().optional(),
    handoff_day:
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$inboundSchema
        .optional(),
    shift_duration: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "handoff_time": "handoffTime",
      "handoff_day": "handoffDay",
      "shift_duration": "shiftDuration",
    });
  });

/** @internal */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$Outbound = {
  type: string;
  handoff_time?: string | undefined;
  handoff_day?: string | undefined;
  shift_duration?: string | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$outboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$Outbound,
    z.ZodTypeDef,
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy
  > = z.object({
    type: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdType$outboundSchema,
    handoffTime: z.string().optional(),
    handoffDay:
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdHandoffDay$outboundSchema
        .optional(),
    shiftDuration: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      handoffTime: "handoff_time",
      handoffDay: "handoff_day",
      shiftDuration: "shift_duration",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$outboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$Outbound` instead. */
  export type Outbound =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$Outbound;
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyToJSON(
  patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy:
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy,
): string {
  return JSON.stringify(
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$outboundSchema.parse(
      patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy,
    ),
  );
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy' from JSON`,
  );
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$inboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay> =
    z.nativeEnum(PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay);

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$outboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay> =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$outboundSchema;
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$inboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay> = z
    .nativeEnum(PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay);

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$outboundSchema:
  z.ZodNativeEnum<typeof PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay> =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$outboundSchema;
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$inboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    start_day:
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$inboundSchema,
    start_time: z.string(),
    end_day: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$inboundSchema,
    end_time: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "start_day": "startDay",
      "start_time": "startTime",
      "end_day": "endDay",
      "end_time": "endTime",
    });
  });

/** @internal */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$outboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$Outbound,
    z.ZodTypeDef,
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions
  > = z.object({
    startDay:
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStartDay$outboundSchema,
    startTime: z.string(),
    endDay: PatchV1TeamsTeamIdOnCallSchedulesScheduleIdEndDay$outboundSchema,
    endTime: z.string(),
  }).transform((v) => {
    return remap$(v, {
      startDay: "start_day",
      startTime: "start_time",
      endDay: "end_day",
      endTime: "end_time",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$outboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$Outbound` instead. */
  export type Outbound =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$Outbound;
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsToJSON(
  patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions:
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions,
): string {
  return JSON.stringify(
    PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$outboundSchema
      .parse(patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions),
  );
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions' from JSON`,
  );
}

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleId$inboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    time_zone: z.string().optional(),
    slack_user_group_id: z.string().optional(),
    members: z.array(
      z.lazy(() =>
        PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$inboundSchema
      ),
    ).optional(),
    strategy: z.lazy(() =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$inboundSchema
    ).optional(),
    restrictions: z.array(
      z.lazy(() =>
        PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$inboundSchema
      ),
    ).optional(),
    effective_at: z.string().optional(),
    color: z.string().optional(),
    member_ids: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "time_zone": "timeZone",
      "slack_user_group_id": "slackUserGroupId",
      "effective_at": "effectiveAt",
      "member_ids": "memberIds",
    });
  });

/** @internal */
export type PatchV1TeamsTeamIdOnCallSchedulesScheduleId$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  time_zone?: string | undefined;
  slack_user_group_id?: string | undefined;
  members?:
    | Array<PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$Outbound>
    | undefined;
  strategy?:
    | PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$Outbound
    | undefined;
  restrictions?:
    | Array<PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$Outbound>
    | undefined;
  effective_at?: string | undefined;
  color?: string | undefined;
  member_ids?: Array<string> | undefined;
};

/** @internal */
export const PatchV1TeamsTeamIdOnCallSchedulesScheduleId$outboundSchema:
  z.ZodType<
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId$Outbound,
    z.ZodTypeDef,
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId
  > = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    timeZone: z.string().optional(),
    slackUserGroupId: z.string().optional(),
    members: z.array(
      z.lazy(() =>
        PatchV1TeamsTeamIdOnCallSchedulesScheduleIdMembers$outboundSchema
      ),
    ).optional(),
    strategy: z.lazy(() =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategy$outboundSchema
    ).optional(),
    restrictions: z.array(
      z.lazy(() =>
        PatchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictions$outboundSchema
      ),
    ).optional(),
    effectiveAt: z.string().optional(),
    color: z.string().optional(),
    memberIds: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      timeZone: "time_zone",
      slackUserGroupId: "slack_user_group_id",
      effectiveAt: "effective_at",
      memberIds: "member_ids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsTeamIdOnCallSchedulesScheduleId$ {
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId$inboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId$outboundSchema;
  /** @deprecated use `PatchV1TeamsTeamIdOnCallSchedulesScheduleId$Outbound` instead. */
  export type Outbound = PatchV1TeamsTeamIdOnCallSchedulesScheduleId$Outbound;
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdToJSON(
  patchV1TeamsTeamIdOnCallSchedulesScheduleId:
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId,
): string {
  return JSON.stringify(
    PatchV1TeamsTeamIdOnCallSchedulesScheduleId$outboundSchema.parse(
      patchV1TeamsTeamIdOnCallSchedulesScheduleId,
    ),
  );
}

export function patchV1TeamsTeamIdOnCallSchedulesScheduleIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1TeamsTeamIdOnCallSchedulesScheduleId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TeamsTeamIdOnCallSchedulesScheduleId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1TeamsTeamIdOnCallSchedulesScheduleId' from JSON`,
  );
}
