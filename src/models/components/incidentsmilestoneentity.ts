/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentsMilestoneEntity = {
  id?: string | undefined;
  /**
   * The milestone's type. This will be one of the currently configured milestones for the given incident.
   */
  type?: string | undefined;
  /**
   * How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.
   */
  duration?: string | undefined;
  occurredAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const IncidentsMilestoneEntity$inboundSchema: z.ZodType<
  IncidentsMilestoneEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  duration: z.string().optional(),
  occurred_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type IncidentsMilestoneEntity$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  duration?: string | undefined;
  occurred_at?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const IncidentsMilestoneEntity$outboundSchema: z.ZodType<
  IncidentsMilestoneEntity$Outbound,
  z.ZodTypeDef,
  IncidentsMilestoneEntity
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  duration: z.string().optional(),
  occurredAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsMilestoneEntity$ {
  /** @deprecated use `IncidentsMilestoneEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsMilestoneEntity$inboundSchema;
  /** @deprecated use `IncidentsMilestoneEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsMilestoneEntity$outboundSchema;
  /** @deprecated use `IncidentsMilestoneEntity$Outbound` instead. */
  export type Outbound = IncidentsMilestoneEntity$Outbound;
}

export function incidentsMilestoneEntityToJSON(
  incidentsMilestoneEntity: IncidentsMilestoneEntity,
): string {
  return JSON.stringify(
    IncidentsMilestoneEntity$outboundSchema.parse(incidentsMilestoneEntity),
  );
}

export function incidentsMilestoneEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsMilestoneEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsMilestoneEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsMilestoneEntity' from JSON`,
  );
}
