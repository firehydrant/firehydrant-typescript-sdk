/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableFHTypesGenericEntity,
  NullableFHTypesGenericEntity$inboundSchema,
  NullableFHTypesGenericEntity$Outbound,
  NullableFHTypesGenericEntity$outboundSchema,
} from "./nullablefhtypesgenericentity.js";

export type NullableRulesRuleEntity = {
  /**
   * JSON stringified object of key/value pairs describing the logic for applying the rule.
   */
  logic?: string | null | undefined;
  userData?: NullableFHTypesGenericEntity | null | undefined;
};

/** @internal */
export const NullableRulesRuleEntity$inboundSchema: z.ZodType<
  NullableRulesRuleEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.nullable(z.string()).optional(),
  user_data: z.nullable(NullableFHTypesGenericEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_data": "userData",
  });
});

/** @internal */
export type NullableRulesRuleEntity$Outbound = {
  logic?: string | null | undefined;
  user_data?: NullableFHTypesGenericEntity$Outbound | null | undefined;
};

/** @internal */
export const NullableRulesRuleEntity$outboundSchema: z.ZodType<
  NullableRulesRuleEntity$Outbound,
  z.ZodTypeDef,
  NullableRulesRuleEntity
> = z.object({
  logic: z.nullable(z.string()).optional(),
  userData: z.nullable(NullableFHTypesGenericEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    userData: "user_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRulesRuleEntity$ {
  /** @deprecated use `NullableRulesRuleEntity$inboundSchema` instead. */
  export const inboundSchema = NullableRulesRuleEntity$inboundSchema;
  /** @deprecated use `NullableRulesRuleEntity$outboundSchema` instead. */
  export const outboundSchema = NullableRulesRuleEntity$outboundSchema;
  /** @deprecated use `NullableRulesRuleEntity$Outbound` instead. */
  export type Outbound = NullableRulesRuleEntity$Outbound;
}

export function nullableRulesRuleEntityToJSON(
  nullableRulesRuleEntity: NullableRulesRuleEntity,
): string {
  return JSON.stringify(
    NullableRulesRuleEntity$outboundSchema.parse(nullableRulesRuleEntity),
  );
}

export function nullableRulesRuleEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableRulesRuleEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableRulesRuleEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableRulesRuleEntity' from JSON`,
  );
}
