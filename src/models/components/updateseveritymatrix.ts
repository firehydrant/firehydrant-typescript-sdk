/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSeverityMatrixData = {
  /**
   * Slug of a severity
   */
  severity: string;
  /**
   * Impact id
   */
  impactId: string;
  /**
   * Condition id
   */
  conditionId: string;
};

/**
 * Update available severities and impacts in your organization's severity matrix.
 */
export type UpdateSeverityMatrix = {
  summary?: string | null | undefined;
  data: Array<UpdateSeverityMatrixData>;
};

/** @internal */
export const UpdateSeverityMatrixData$inboundSchema: z.ZodType<
  UpdateSeverityMatrixData,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity: z.string(),
  impact_id: z.string(),
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "impact_id": "impactId",
    "condition_id": "conditionId",
  });
});

/** @internal */
export type UpdateSeverityMatrixData$Outbound = {
  severity: string;
  impact_id: string;
  condition_id: string;
};

/** @internal */
export const UpdateSeverityMatrixData$outboundSchema: z.ZodType<
  UpdateSeverityMatrixData$Outbound,
  z.ZodTypeDef,
  UpdateSeverityMatrixData
> = z.object({
  severity: z.string(),
  impactId: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    impactId: "impact_id",
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeverityMatrixData$ {
  /** @deprecated use `UpdateSeverityMatrixData$inboundSchema` instead. */
  export const inboundSchema = UpdateSeverityMatrixData$inboundSchema;
  /** @deprecated use `UpdateSeverityMatrixData$outboundSchema` instead. */
  export const outboundSchema = UpdateSeverityMatrixData$outboundSchema;
  /** @deprecated use `UpdateSeverityMatrixData$Outbound` instead. */
  export type Outbound = UpdateSeverityMatrixData$Outbound;
}

export function updateSeverityMatrixDataToJSON(
  updateSeverityMatrixData: UpdateSeverityMatrixData,
): string {
  return JSON.stringify(
    UpdateSeverityMatrixData$outboundSchema.parse(updateSeverityMatrixData),
  );
}

export function updateSeverityMatrixDataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSeverityMatrixData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSeverityMatrixData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSeverityMatrixData' from JSON`,
  );
}

/** @internal */
export const UpdateSeverityMatrix$inboundSchema: z.ZodType<
  UpdateSeverityMatrix,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  data: z.array(z.lazy(() => UpdateSeverityMatrixData$inboundSchema)),
});

/** @internal */
export type UpdateSeverityMatrix$Outbound = {
  summary?: string | null | undefined;
  data: Array<UpdateSeverityMatrixData$Outbound>;
};

/** @internal */
export const UpdateSeverityMatrix$outboundSchema: z.ZodType<
  UpdateSeverityMatrix$Outbound,
  z.ZodTypeDef,
  UpdateSeverityMatrix
> = z.object({
  summary: z.nullable(z.string()).optional(),
  data: z.array(z.lazy(() => UpdateSeverityMatrixData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeverityMatrix$ {
  /** @deprecated use `UpdateSeverityMatrix$inboundSchema` instead. */
  export const inboundSchema = UpdateSeverityMatrix$inboundSchema;
  /** @deprecated use `UpdateSeverityMatrix$outboundSchema` instead. */
  export const outboundSchema = UpdateSeverityMatrix$outboundSchema;
  /** @deprecated use `UpdateSeverityMatrix$Outbound` instead. */
  export type Outbound = UpdateSeverityMatrix$Outbound;
}

export function updateSeverityMatrixToJSON(
  updateSeverityMatrix: UpdateSeverityMatrix,
): string {
  return JSON.stringify(
    UpdateSeverityMatrix$outboundSchema.parse(updateSeverityMatrix),
  );
}

export function updateSeverityMatrixFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSeverityMatrix, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSeverityMatrix$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSeverityMatrix' from JSON`,
  );
}
