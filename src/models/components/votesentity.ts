/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * VotesEntity model
 */
export type VotesEntity = {
  /**
   * Whether or not the current actor has voted
   */
  voted?: boolean | undefined;
  /**
   * Whether or not the current actor has voted positively
   */
  liked?: boolean | undefined;
  /**
   * Whether or not the current actor has voted negatively
   */
  disliked?: boolean | undefined;
  likes?: number | undefined;
  dislikes?: number | undefined;
};

/** @internal */
export const VotesEntity$inboundSchema: z.ZodType<
  VotesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  voted: z.boolean().optional(),
  liked: z.boolean().optional(),
  disliked: z.boolean().optional(),
  likes: z.number().int().optional(),
  dislikes: z.number().int().optional(),
});

/** @internal */
export type VotesEntity$Outbound = {
  voted?: boolean | undefined;
  liked?: boolean | undefined;
  disliked?: boolean | undefined;
  likes?: number | undefined;
  dislikes?: number | undefined;
};

/** @internal */
export const VotesEntity$outboundSchema: z.ZodType<
  VotesEntity$Outbound,
  z.ZodTypeDef,
  VotesEntity
> = z.object({
  voted: z.boolean().optional(),
  liked: z.boolean().optional(),
  disliked: z.boolean().optional(),
  likes: z.number().int().optional(),
  dislikes: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VotesEntity$ {
  /** @deprecated use `VotesEntity$inboundSchema` instead. */
  export const inboundSchema = VotesEntity$inboundSchema;
  /** @deprecated use `VotesEntity$outboundSchema` instead. */
  export const outboundSchema = VotesEntity$outboundSchema;
  /** @deprecated use `VotesEntity$Outbound` instead. */
  export type Outbound = VotesEntity$Outbound;
}

export function votesEntityToJSON(votesEntity: VotesEntity): string {
  return JSON.stringify(VotesEntity$outboundSchema.parse(votesEntity));
}

export function votesEntityFromJSON(
  jsonString: string,
): SafeParseResult<VotesEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VotesEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VotesEntity' from JSON`,
  );
}
