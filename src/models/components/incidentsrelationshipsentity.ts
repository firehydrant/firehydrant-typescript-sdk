/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullablePublicApiv1IncidentsSuccinctEntity,
  NullablePublicApiv1IncidentsSuccinctEntity$inboundSchema,
  NullablePublicApiv1IncidentsSuccinctEntity$Outbound,
  NullablePublicApiv1IncidentsSuccinctEntity$outboundSchema,
} from "./nullablepublicapiv1incidentssuccinctentity.js";
import {
  PublicApiv1IncidentsSuccinctEntity,
  PublicApiv1IncidentsSuccinctEntity$inboundSchema,
  PublicApiv1IncidentsSuccinctEntity$Outbound,
  PublicApiv1IncidentsSuccinctEntity$outboundSchema,
} from "./publicapiv1incidentssuccinctentity.js";

/**
 * Incidents_RelationshipsEntity model
 */
export type IncidentsRelationshipsEntity = {
  parent?: NullablePublicApiv1IncidentsSuccinctEntity | null | undefined;
  /**
   * The root incident's child incidents.
   */
  children?: Array<PublicApiv1IncidentsSuccinctEntity> | null | undefined;
  /**
   * A list of incidents that share the root incident's parent.
   */
  siblings?: Array<PublicApiv1IncidentsSuccinctEntity> | null | undefined;
};

/** @internal */
export const IncidentsRelationshipsEntity$inboundSchema: z.ZodType<
  IncidentsRelationshipsEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  parent: z.nullable(NullablePublicApiv1IncidentsSuccinctEntity$inboundSchema)
    .optional(),
  children: z.nullable(
    z.array(PublicApiv1IncidentsSuccinctEntity$inboundSchema),
  ).optional(),
  siblings: z.nullable(
    z.array(PublicApiv1IncidentsSuccinctEntity$inboundSchema),
  ).optional(),
});

/** @internal */
export type IncidentsRelationshipsEntity$Outbound = {
  parent?:
    | NullablePublicApiv1IncidentsSuccinctEntity$Outbound
    | null
    | undefined;
  children?:
    | Array<PublicApiv1IncidentsSuccinctEntity$Outbound>
    | null
    | undefined;
  siblings?:
    | Array<PublicApiv1IncidentsSuccinctEntity$Outbound>
    | null
    | undefined;
};

/** @internal */
export const IncidentsRelationshipsEntity$outboundSchema: z.ZodType<
  IncidentsRelationshipsEntity$Outbound,
  z.ZodTypeDef,
  IncidentsRelationshipsEntity
> = z.object({
  parent: z.nullable(NullablePublicApiv1IncidentsSuccinctEntity$outboundSchema)
    .optional(),
  children: z.nullable(
    z.array(PublicApiv1IncidentsSuccinctEntity$outboundSchema),
  ).optional(),
  siblings: z.nullable(
    z.array(PublicApiv1IncidentsSuccinctEntity$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentsRelationshipsEntity$ {
  /** @deprecated use `IncidentsRelationshipsEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentsRelationshipsEntity$inboundSchema;
  /** @deprecated use `IncidentsRelationshipsEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentsRelationshipsEntity$outboundSchema;
  /** @deprecated use `IncidentsRelationshipsEntity$Outbound` instead. */
  export type Outbound = IncidentsRelationshipsEntity$Outbound;
}

export function incidentsRelationshipsEntityToJSON(
  incidentsRelationshipsEntity: IncidentsRelationshipsEntity,
): string {
  return JSON.stringify(
    IncidentsRelationshipsEntity$outboundSchema.parse(
      incidentsRelationshipsEntity,
    ),
  );
}

export function incidentsRelationshipsEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentsRelationshipsEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentsRelationshipsEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentsRelationshipsEntity' from JSON`,
  );
}
