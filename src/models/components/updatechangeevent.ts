/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateChangeEventType = {
  Link: "link",
} as const;
export type UpdateChangeEventType = ClosedEnum<typeof UpdateChangeEventType>;

export type UpdateChangeEventAttachment = {
  type: UpdateChangeEventType;
};

/**
 * Update a change event
 */
export type UpdateChangeEvent = {
  summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  startsAt?: Date | null | undefined;
  endsAt?: Date | null | undefined;
  /**
   * An array of environment IDs (setting this will overwrite the current environments)
   */
  environments?: Array<string> | null | undefined;
  /**
   * An array of service IDs (setting this will overwrite the current services)
   */
  services?: Array<string> | null | undefined;
  /**
   * JSON objects representing attachments, see attachments documentation for the schema
   */
  attachments?: Array<UpdateChangeEventAttachment> | null | undefined;
};

/** @internal */
export const UpdateChangeEventType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateChangeEventType
> = z.nativeEnum(UpdateChangeEventType);

/** @internal */
export const UpdateChangeEventType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateChangeEventType
> = UpdateChangeEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChangeEventType$ {
  /** @deprecated use `UpdateChangeEventType$inboundSchema` instead. */
  export const inboundSchema = UpdateChangeEventType$inboundSchema;
  /** @deprecated use `UpdateChangeEventType$outboundSchema` instead. */
  export const outboundSchema = UpdateChangeEventType$outboundSchema;
}

/** @internal */
export const UpdateChangeEventAttachment$inboundSchema: z.ZodType<
  UpdateChangeEventAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateChangeEventType$inboundSchema,
});

/** @internal */
export type UpdateChangeEventAttachment$Outbound = {
  type: string;
};

/** @internal */
export const UpdateChangeEventAttachment$outboundSchema: z.ZodType<
  UpdateChangeEventAttachment$Outbound,
  z.ZodTypeDef,
  UpdateChangeEventAttachment
> = z.object({
  type: UpdateChangeEventType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChangeEventAttachment$ {
  /** @deprecated use `UpdateChangeEventAttachment$inboundSchema` instead. */
  export const inboundSchema = UpdateChangeEventAttachment$inboundSchema;
  /** @deprecated use `UpdateChangeEventAttachment$outboundSchema` instead. */
  export const outboundSchema = UpdateChangeEventAttachment$outboundSchema;
  /** @deprecated use `UpdateChangeEventAttachment$Outbound` instead. */
  export type Outbound = UpdateChangeEventAttachment$Outbound;
}

export function updateChangeEventAttachmentToJSON(
  updateChangeEventAttachment: UpdateChangeEventAttachment,
): string {
  return JSON.stringify(
    UpdateChangeEventAttachment$outboundSchema.parse(
      updateChangeEventAttachment,
    ),
  );
}

export function updateChangeEventAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChangeEventAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChangeEventAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChangeEventAttachment' from JSON`,
  );
}

/** @internal */
export const UpdateChangeEvent$inboundSchema: z.ZodType<
  UpdateChangeEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  starts_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  environments: z.nullable(z.array(z.string())).optional(),
  services: z.nullable(z.array(z.string())).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => UpdateChangeEventAttachment$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type UpdateChangeEvent$Outbound = {
  summary?: string | null | undefined;
  description?: string | null | undefined;
  labels?: { [k: string]: string } | null | undefined;
  starts_at?: string | null | undefined;
  ends_at?: string | null | undefined;
  environments?: Array<string> | null | undefined;
  services?: Array<string> | null | undefined;
  attachments?: Array<UpdateChangeEventAttachment$Outbound> | null | undefined;
};

/** @internal */
export const UpdateChangeEvent$outboundSchema: z.ZodType<
  UpdateChangeEvent$Outbound,
  z.ZodTypeDef,
  UpdateChangeEvent
> = z.object({
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  labels: z.nullable(z.record(z.string())).optional(),
  startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  environments: z.nullable(z.array(z.string())).optional(),
  services: z.nullable(z.array(z.string())).optional(),
  attachments: z.nullable(
    z.array(z.lazy(() => UpdateChangeEventAttachment$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChangeEvent$ {
  /** @deprecated use `UpdateChangeEvent$inboundSchema` instead. */
  export const inboundSchema = UpdateChangeEvent$inboundSchema;
  /** @deprecated use `UpdateChangeEvent$outboundSchema` instead. */
  export const outboundSchema = UpdateChangeEvent$outboundSchema;
  /** @deprecated use `UpdateChangeEvent$Outbound` instead. */
  export type Outbound = UpdateChangeEvent$Outbound;
}

export function updateChangeEventToJSON(
  updateChangeEvent: UpdateChangeEvent,
): string {
  return JSON.stringify(
    UpdateChangeEvent$outboundSchema.parse(updateChangeEvent),
  );
}

export function updateChangeEventFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChangeEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChangeEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChangeEvent' from JSON`,
  );
}
