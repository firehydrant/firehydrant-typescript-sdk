/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableSuccinctEntity,
  NullableSuccinctEntity$inboundSchema,
  NullableSuccinctEntity$Outbound,
  NullableSuccinctEntity$outboundSchema,
} from "./nullablesuccinctentity.js";

/**
 * PublicAPI_V1_Integrations_AuthedProviderEntity model
 */
export type PublicApiv1IntegrationsAuthedProviderEntity = {
  id?: string | null | undefined;
  user?: NullableSuccinctEntity | null | undefined;
  integrationDefault?: boolean | null | undefined;
  /**
   * The email of the user who authorized the integration
   */
  authorizedEmail?: string | null | undefined;
  isExpired?: boolean | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const PublicApiv1IntegrationsAuthedProviderEntity$inboundSchema:
  z.ZodType<
    PublicApiv1IntegrationsAuthedProviderEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()).optional(),
    user: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
    integration_default: z.nullable(z.boolean()).optional(),
    authorized_email: z.nullable(z.string()).optional(),
    is_expired: z.nullable(z.boolean()).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "integration_default": "integrationDefault",
      "authorized_email": "authorizedEmail",
      "is_expired": "isExpired",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type PublicApiv1IntegrationsAuthedProviderEntity$Outbound = {
  id?: string | null | undefined;
  user?: NullableSuccinctEntity$Outbound | null | undefined;
  integration_default?: boolean | null | undefined;
  authorized_email?: string | null | undefined;
  is_expired?: boolean | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const PublicApiv1IntegrationsAuthedProviderEntity$outboundSchema:
  z.ZodType<
    PublicApiv1IntegrationsAuthedProviderEntity$Outbound,
    z.ZodTypeDef,
    PublicApiv1IntegrationsAuthedProviderEntity
  > = z.object({
    id: z.nullable(z.string()).optional(),
    user: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
    integrationDefault: z.nullable(z.boolean()).optional(),
    authorizedEmail: z.nullable(z.string()).optional(),
    isExpired: z.nullable(z.boolean()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  }).transform((v) => {
    return remap$(v, {
      integrationDefault: "integration_default",
      authorizedEmail: "authorized_email",
      isExpired: "is_expired",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicApiv1IntegrationsAuthedProviderEntity$ {
  /** @deprecated use `PublicApiv1IntegrationsAuthedProviderEntity$inboundSchema` instead. */
  export const inboundSchema =
    PublicApiv1IntegrationsAuthedProviderEntity$inboundSchema;
  /** @deprecated use `PublicApiv1IntegrationsAuthedProviderEntity$outboundSchema` instead. */
  export const outboundSchema =
    PublicApiv1IntegrationsAuthedProviderEntity$outboundSchema;
  /** @deprecated use `PublicApiv1IntegrationsAuthedProviderEntity$Outbound` instead. */
  export type Outbound = PublicApiv1IntegrationsAuthedProviderEntity$Outbound;
}

export function publicAPIV1IntegrationsAuthedProviderEntityToJSON(
  publicApiv1IntegrationsAuthedProviderEntity:
    PublicApiv1IntegrationsAuthedProviderEntity,
): string {
  return JSON.stringify(
    PublicApiv1IntegrationsAuthedProviderEntity$outboundSchema.parse(
      publicApiv1IntegrationsAuthedProviderEntity,
    ),
  );
}

export function publicAPIV1IntegrationsAuthedProviderEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  PublicApiv1IntegrationsAuthedProviderEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PublicApiv1IntegrationsAuthedProviderEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PublicApiv1IntegrationsAuthedProviderEntity' from JSON`,
  );
}
