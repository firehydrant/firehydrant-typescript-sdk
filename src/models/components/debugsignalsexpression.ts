/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Annotations = {};

export type Image = {
  src?: string | null | undefined;
  alt?: string | null | undefined;
};

export type DebugSignalsExpressionLink = {
  href?: string | null | undefined;
  text?: string | null | undefined;
};

export type Signal = {
  id?: string | null | undefined;
  organizationId?: string | null | undefined;
  summary?: string | null | undefined;
  body?: string | null | undefined;
  level?: string | null | undefined;
  annotations?: Annotations | null | undefined;
  tags?: Array<string> | null | undefined;
  images?: Array<Image> | null | undefined;
  links?: Array<DebugSignalsExpressionLink> | null | undefined;
};

/**
 * Debug Signals expressions
 */
export type DebugSignalsExpression = {
  /**
   * CEL expression
   */
  expression: string;
  /**
   * List of signals to evaluate rule expression against
   */
  signals: Array<Signal>;
};

/** @internal */
export const Annotations$inboundSchema: z.ZodType<
  Annotations,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Annotations$Outbound = {};

/** @internal */
export const Annotations$outboundSchema: z.ZodType<
  Annotations$Outbound,
  z.ZodTypeDef,
  Annotations
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Annotations$ {
  /** @deprecated use `Annotations$inboundSchema` instead. */
  export const inboundSchema = Annotations$inboundSchema;
  /** @deprecated use `Annotations$outboundSchema` instead. */
  export const outboundSchema = Annotations$outboundSchema;
  /** @deprecated use `Annotations$Outbound` instead. */
  export type Outbound = Annotations$Outbound;
}

export function annotationsToJSON(annotations: Annotations): string {
  return JSON.stringify(Annotations$outboundSchema.parse(annotations));
}

export function annotationsFromJSON(
  jsonString: string,
): SafeParseResult<Annotations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Annotations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Annotations' from JSON`,
  );
}

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .object({
    src: z.nullable(z.string()).optional(),
    alt: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Image$Outbound = {
  src?: string | null | undefined;
  alt?: string | null | undefined;
};

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.object({
  src: z.nullable(z.string()).optional(),
  alt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

export function imageToJSON(image: Image): string {
  return JSON.stringify(Image$outboundSchema.parse(image));
}

export function imageFromJSON(
  jsonString: string,
): SafeParseResult<Image, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Image$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Image' from JSON`,
  );
}

/** @internal */
export const DebugSignalsExpressionLink$inboundSchema: z.ZodType<
  DebugSignalsExpressionLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.nullable(z.string()).optional(),
  text: z.nullable(z.string()).optional(),
});

/** @internal */
export type DebugSignalsExpressionLink$Outbound = {
  href?: string | null | undefined;
  text?: string | null | undefined;
};

/** @internal */
export const DebugSignalsExpressionLink$outboundSchema: z.ZodType<
  DebugSignalsExpressionLink$Outbound,
  z.ZodTypeDef,
  DebugSignalsExpressionLink
> = z.object({
  href: z.nullable(z.string()).optional(),
  text: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugSignalsExpressionLink$ {
  /** @deprecated use `DebugSignalsExpressionLink$inboundSchema` instead. */
  export const inboundSchema = DebugSignalsExpressionLink$inboundSchema;
  /** @deprecated use `DebugSignalsExpressionLink$outboundSchema` instead. */
  export const outboundSchema = DebugSignalsExpressionLink$outboundSchema;
  /** @deprecated use `DebugSignalsExpressionLink$Outbound` instead. */
  export type Outbound = DebugSignalsExpressionLink$Outbound;
}

export function debugSignalsExpressionLinkToJSON(
  debugSignalsExpressionLink: DebugSignalsExpressionLink,
): string {
  return JSON.stringify(
    DebugSignalsExpressionLink$outboundSchema.parse(debugSignalsExpressionLink),
  );
}

export function debugSignalsExpressionLinkFromJSON(
  jsonString: string,
): SafeParseResult<DebugSignalsExpressionLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugSignalsExpressionLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugSignalsExpressionLink' from JSON`,
  );
}

/** @internal */
export const Signal$inboundSchema: z.ZodType<Signal, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    organization_id: z.nullable(z.string()).optional(),
    summary: z.nullable(z.string()).optional(),
    body: z.nullable(z.string()).optional(),
    level: z.nullable(z.string()).optional(),
    annotations: z.nullable(z.lazy(() => Annotations$inboundSchema)).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    images: z.nullable(z.array(z.lazy(() => Image$inboundSchema))).optional(),
    links: z.nullable(
      z.array(z.lazy(() => DebugSignalsExpressionLink$inboundSchema)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "organization_id": "organizationId",
    });
  });

/** @internal */
export type Signal$Outbound = {
  id?: string | null | undefined;
  organization_id?: string | null | undefined;
  summary?: string | null | undefined;
  body?: string | null | undefined;
  level?: string | null | undefined;
  annotations?: Annotations$Outbound | null | undefined;
  tags?: Array<string> | null | undefined;
  images?: Array<Image$Outbound> | null | undefined;
  links?: Array<DebugSignalsExpressionLink$Outbound> | null | undefined;
};

/** @internal */
export const Signal$outboundSchema: z.ZodType<
  Signal$Outbound,
  z.ZodTypeDef,
  Signal
> = z.object({
  id: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  level: z.nullable(z.string()).optional(),
  annotations: z.nullable(z.lazy(() => Annotations$outboundSchema)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  images: z.nullable(z.array(z.lazy(() => Image$outboundSchema))).optional(),
  links: z.nullable(
    z.array(z.lazy(() => DebugSignalsExpressionLink$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Signal$ {
  /** @deprecated use `Signal$inboundSchema` instead. */
  export const inboundSchema = Signal$inboundSchema;
  /** @deprecated use `Signal$outboundSchema` instead. */
  export const outboundSchema = Signal$outboundSchema;
  /** @deprecated use `Signal$Outbound` instead. */
  export type Outbound = Signal$Outbound;
}

export function signalToJSON(signal: Signal): string {
  return JSON.stringify(Signal$outboundSchema.parse(signal));
}

export function signalFromJSON(
  jsonString: string,
): SafeParseResult<Signal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Signal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Signal' from JSON`,
  );
}

/** @internal */
export const DebugSignalsExpression$inboundSchema: z.ZodType<
  DebugSignalsExpression,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.string(),
  signals: z.array(z.lazy(() => Signal$inboundSchema)),
});

/** @internal */
export type DebugSignalsExpression$Outbound = {
  expression: string;
  signals: Array<Signal$Outbound>;
};

/** @internal */
export const DebugSignalsExpression$outboundSchema: z.ZodType<
  DebugSignalsExpression$Outbound,
  z.ZodTypeDef,
  DebugSignalsExpression
> = z.object({
  expression: z.string(),
  signals: z.array(z.lazy(() => Signal$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugSignalsExpression$ {
  /** @deprecated use `DebugSignalsExpression$inboundSchema` instead. */
  export const inboundSchema = DebugSignalsExpression$inboundSchema;
  /** @deprecated use `DebugSignalsExpression$outboundSchema` instead. */
  export const outboundSchema = DebugSignalsExpression$outboundSchema;
  /** @deprecated use `DebugSignalsExpression$Outbound` instead. */
  export type Outbound = DebugSignalsExpression$Outbound;
}

export function debugSignalsExpressionToJSON(
  debugSignalsExpression: DebugSignalsExpression,
): string {
  return JSON.stringify(
    DebugSignalsExpression$outboundSchema.parse(debugSignalsExpression),
  );
}

export function debugSignalsExpressionFromJSON(
  jsonString: string,
): SafeParseResult<DebugSignalsExpression, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugSignalsExpression$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugSignalsExpression' from JSON`,
  );
}
