/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePostMortemQuestionsQuestion = {
  /**
   * ID of a question
   */
  id?: string | null | undefined;
  /**
   * title of a question
   */
  title?: string | null | undefined;
  /**
   * tooltip of a question
   */
  tooltip?: string | null | undefined;
};

/**
 * Update the questions configured to be provided and filled out on future retrospective reports.
 */
export type UpdatePostMortemQuestions = {
  makeSwaggerWork?: string | null | undefined;
  questions?: Array<UpdatePostMortemQuestionsQuestion> | null | undefined;
};

/** @internal */
export const UpdatePostMortemQuestionsQuestion$inboundSchema: z.ZodType<
  UpdatePostMortemQuestionsQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  tooltip: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdatePostMortemQuestionsQuestion$Outbound = {
  id?: string | null | undefined;
  title?: string | null | undefined;
  tooltip?: string | null | undefined;
};

/** @internal */
export const UpdatePostMortemQuestionsQuestion$outboundSchema: z.ZodType<
  UpdatePostMortemQuestionsQuestion$Outbound,
  z.ZodTypeDef,
  UpdatePostMortemQuestionsQuestion
> = z.object({
  id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  tooltip: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostMortemQuestionsQuestion$ {
  /** @deprecated use `UpdatePostMortemQuestionsQuestion$inboundSchema` instead. */
  export const inboundSchema = UpdatePostMortemQuestionsQuestion$inboundSchema;
  /** @deprecated use `UpdatePostMortemQuestionsQuestion$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePostMortemQuestionsQuestion$outboundSchema;
  /** @deprecated use `UpdatePostMortemQuestionsQuestion$Outbound` instead. */
  export type Outbound = UpdatePostMortemQuestionsQuestion$Outbound;
}

export function updatePostMortemQuestionsQuestionToJSON(
  updatePostMortemQuestionsQuestion: UpdatePostMortemQuestionsQuestion,
): string {
  return JSON.stringify(
    UpdatePostMortemQuestionsQuestion$outboundSchema.parse(
      updatePostMortemQuestionsQuestion,
    ),
  );
}

export function updatePostMortemQuestionsQuestionFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostMortemQuestionsQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostMortemQuestionsQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostMortemQuestionsQuestion' from JSON`,
  );
}

/** @internal */
export const UpdatePostMortemQuestions$inboundSchema: z.ZodType<
  UpdatePostMortemQuestions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _make_swagger_work_: z.nullable(z.string()).optional(),
  questions: z.nullable(
    z.array(z.lazy(() => UpdatePostMortemQuestionsQuestion$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_make_swagger_work_": "makeSwaggerWork",
  });
});

/** @internal */
export type UpdatePostMortemQuestions$Outbound = {
  _make_swagger_work_?: string | null | undefined;
  questions?:
    | Array<UpdatePostMortemQuestionsQuestion$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdatePostMortemQuestions$outboundSchema: z.ZodType<
  UpdatePostMortemQuestions$Outbound,
  z.ZodTypeDef,
  UpdatePostMortemQuestions
> = z.object({
  makeSwaggerWork: z.nullable(z.string()).optional(),
  questions: z.nullable(
    z.array(z.lazy(() => UpdatePostMortemQuestionsQuestion$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    makeSwaggerWork: "_make_swagger_work_",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostMortemQuestions$ {
  /** @deprecated use `UpdatePostMortemQuestions$inboundSchema` instead. */
  export const inboundSchema = UpdatePostMortemQuestions$inboundSchema;
  /** @deprecated use `UpdatePostMortemQuestions$outboundSchema` instead. */
  export const outboundSchema = UpdatePostMortemQuestions$outboundSchema;
  /** @deprecated use `UpdatePostMortemQuestions$Outbound` instead. */
  export type Outbound = UpdatePostMortemQuestions$Outbound;
}

export function updatePostMortemQuestionsToJSON(
  updatePostMortemQuestions: UpdatePostMortemQuestions,
): string {
  return JSON.stringify(
    UpdatePostMortemQuestions$outboundSchema.parse(updatePostMortemQuestions),
  );
}

export function updatePostMortemQuestionsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostMortemQuestions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostMortemQuestions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostMortemQuestions' from JSON`,
  );
}
