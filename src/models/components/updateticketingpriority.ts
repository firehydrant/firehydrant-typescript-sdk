/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a single ticketing priority's attributes
 */
export type UpdateTicketingPriority = {
  name?: string | null | undefined;
  /**
   * The position that this priority should take in your list of priorities. Priorities should be ordered from highest to lowest, with the highest priority at 0. If a position isn't specified, the new priority will be added to the end of the list; if another priority already exists at the specified position, this priority will shift that priority and all priorities down the list.
   */
  position?: number | null | undefined;
};

/** @internal */
export const UpdateTicketingPriority$inboundSchema: z.ZodType<
  UpdateTicketingPriority,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type UpdateTicketingPriority$Outbound = {
  name?: string | null | undefined;
  position?: number | null | undefined;
};

/** @internal */
export const UpdateTicketingPriority$outboundSchema: z.ZodType<
  UpdateTicketingPriority$Outbound,
  z.ZodTypeDef,
  UpdateTicketingPriority
> = z.object({
  name: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTicketingPriority$ {
  /** @deprecated use `UpdateTicketingPriority$inboundSchema` instead. */
  export const inboundSchema = UpdateTicketingPriority$inboundSchema;
  /** @deprecated use `UpdateTicketingPriority$outboundSchema` instead. */
  export const outboundSchema = UpdateTicketingPriority$outboundSchema;
  /** @deprecated use `UpdateTicketingPriority$Outbound` instead. */
  export type Outbound = UpdateTicketingPriority$Outbound;
}

export function updateTicketingPriorityToJSON(
  updateTicketingPriority: UpdateTicketingPriority,
): string {
  return JSON.stringify(
    UpdateTicketingPriority$outboundSchema.parse(updateTicketingPriority),
  );
}

export function updateTicketingPriorityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTicketingPriority, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTicketingPriority$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTicketingPriority' from JSON`,
  );
}
