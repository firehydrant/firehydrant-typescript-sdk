/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An unstructured representation of this log entry's context.
 */
export type Context = {};

export const Level = {
  Unknown: "unknown",
  Debug: "debug",
  Info: "info",
  Warn: "warn",
  Error: "error",
  Fatal: "fatal",
} as const;
export type Level = ClosedEnum<typeof Level>;

export const MessageType = {
  I18nKey: "i18n_key",
  Custom: "custom",
} as const;
export type MessageType = ClosedEnum<typeof MessageType>;

export type AlertsProcessingLogEntryEntity = {
  id?: string | undefined;
  /**
   * An unstructured representation of this log entry's context.
   */
  context?: Context | undefined;
  createdAt?: Date | undefined;
  level?: Level | undefined;
  message?: string | undefined;
  messageType?: MessageType | undefined;
};

/** @internal */
export const Context$inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Context$Outbound = {};

/** @internal */
export const Context$outboundSchema: z.ZodType<
  Context$Outbound,
  z.ZodTypeDef,
  Context
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Context$ {
  /** @deprecated use `Context$inboundSchema` instead. */
  export const inboundSchema = Context$inboundSchema;
  /** @deprecated use `Context$outboundSchema` instead. */
  export const outboundSchema = Context$outboundSchema;
  /** @deprecated use `Context$Outbound` instead. */
  export type Outbound = Context$Outbound;
}

export function contextToJSON(context: Context): string {
  return JSON.stringify(Context$outboundSchema.parse(context));
}

export function contextFromJSON(
  jsonString: string,
): SafeParseResult<Context, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Context$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Context' from JSON`,
  );
}

/** @internal */
export const Level$inboundSchema: z.ZodNativeEnum<typeof Level> = z.nativeEnum(
  Level,
);

/** @internal */
export const Level$outboundSchema: z.ZodNativeEnum<typeof Level> =
  Level$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Level$ {
  /** @deprecated use `Level$inboundSchema` instead. */
  export const inboundSchema = Level$inboundSchema;
  /** @deprecated use `Level$outboundSchema` instead. */
  export const outboundSchema = Level$outboundSchema;
}

/** @internal */
export const MessageType$inboundSchema: z.ZodNativeEnum<typeof MessageType> = z
  .nativeEnum(MessageType);

/** @internal */
export const MessageType$outboundSchema: z.ZodNativeEnum<typeof MessageType> =
  MessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageType$ {
  /** @deprecated use `MessageType$inboundSchema` instead. */
  export const inboundSchema = MessageType$inboundSchema;
  /** @deprecated use `MessageType$outboundSchema` instead. */
  export const outboundSchema = MessageType$outboundSchema;
}

/** @internal */
export const AlertsProcessingLogEntryEntity$inboundSchema: z.ZodType<
  AlertsProcessingLogEntryEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  context: z.lazy(() => Context$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  level: Level$inboundSchema.optional(),
  message: z.string().optional(),
  message_type: MessageType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "message_type": "messageType",
  });
});

/** @internal */
export type AlertsProcessingLogEntryEntity$Outbound = {
  id?: string | undefined;
  context?: Context$Outbound | undefined;
  created_at?: string | undefined;
  level?: string | undefined;
  message?: string | undefined;
  message_type?: string | undefined;
};

/** @internal */
export const AlertsProcessingLogEntryEntity$outboundSchema: z.ZodType<
  AlertsProcessingLogEntryEntity$Outbound,
  z.ZodTypeDef,
  AlertsProcessingLogEntryEntity
> = z.object({
  id: z.string().optional(),
  context: z.lazy(() => Context$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  level: Level$outboundSchema.optional(),
  message: z.string().optional(),
  messageType: MessageType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    messageType: "message_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertsProcessingLogEntryEntity$ {
  /** @deprecated use `AlertsProcessingLogEntryEntity$inboundSchema` instead. */
  export const inboundSchema = AlertsProcessingLogEntryEntity$inboundSchema;
  /** @deprecated use `AlertsProcessingLogEntryEntity$outboundSchema` instead. */
  export const outboundSchema = AlertsProcessingLogEntryEntity$outboundSchema;
  /** @deprecated use `AlertsProcessingLogEntryEntity$Outbound` instead. */
  export type Outbound = AlertsProcessingLogEntryEntity$Outbound;
}

export function alertsProcessingLogEntryEntityToJSON(
  alertsProcessingLogEntryEntity: AlertsProcessingLogEntryEntity,
): string {
  return JSON.stringify(
    AlertsProcessingLogEntryEntity$outboundSchema.parse(
      alertsProcessingLogEntryEntity,
    ),
  );
}

export function alertsProcessingLogEntryEntityFromJSON(
  jsonString: string,
): SafeParseResult<AlertsProcessingLogEntryEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertsProcessingLogEntryEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertsProcessingLogEntryEntity' from JSON`,
  );
}
