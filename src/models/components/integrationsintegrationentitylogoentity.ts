/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IntegrationsIntegrationEntityLogoEntity = {
  logoUrl?: string | undefined;
};

/** @internal */
export const IntegrationsIntegrationEntityLogoEntity$inboundSchema: z.ZodType<
  IntegrationsIntegrationEntityLogoEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  logo_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "logo_url": "logoUrl",
  });
});

/** @internal */
export type IntegrationsIntegrationEntityLogoEntity$Outbound = {
  logo_url?: string | undefined;
};

/** @internal */
export const IntegrationsIntegrationEntityLogoEntity$outboundSchema: z.ZodType<
  IntegrationsIntegrationEntityLogoEntity$Outbound,
  z.ZodTypeDef,
  IntegrationsIntegrationEntityLogoEntity
> = z.object({
  logoUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsIntegrationEntityLogoEntity$ {
  /** @deprecated use `IntegrationsIntegrationEntityLogoEntity$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsIntegrationEntityLogoEntity$inboundSchema;
  /** @deprecated use `IntegrationsIntegrationEntityLogoEntity$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsIntegrationEntityLogoEntity$outboundSchema;
  /** @deprecated use `IntegrationsIntegrationEntityLogoEntity$Outbound` instead. */
  export type Outbound = IntegrationsIntegrationEntityLogoEntity$Outbound;
}

export function integrationsIntegrationEntityLogoEntityToJSON(
  integrationsIntegrationEntityLogoEntity:
    IntegrationsIntegrationEntityLogoEntity,
): string {
  return JSON.stringify(
    IntegrationsIntegrationEntityLogoEntity$outboundSchema.parse(
      integrationsIntegrationEntityLogoEntity,
    ),
  );
}

export function integrationsIntegrationEntityLogoEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  IntegrationsIntegrationEntityLogoEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsIntegrationEntityLogoEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IntegrationsIntegrationEntityLogoEntity' from JSON`,
  );
}
