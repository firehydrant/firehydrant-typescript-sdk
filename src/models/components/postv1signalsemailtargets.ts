/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the inbound email will notify when matched.
 */
export const PostV1SignalsEmailTargetsType = {
  Team: "Team",
  EntireTeam: "EntireTeam",
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  SlackChannel: "SlackChannel",
  Webhook: "Webhook",
} as const;
/**
 * The type of target that the inbound email will notify when matched.
 */
export type PostV1SignalsEmailTargetsType = ClosedEnum<
  typeof PostV1SignalsEmailTargetsType
>;

/**
 * The target that the email target will notify. This object must contain a `type`
 *
 * @remarks
 * field that specifies the type of target and an `id` field that specifies the ID of
 * the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
 * "team", "user", or "slack_channel".
 */
export type Target = {
  /**
   * The type of target that the inbound email will notify when matched.
   */
  type: PostV1SignalsEmailTargetsType;
  /**
   * The ID of the target that the inbound email will notify when matched.
   */
  id: string;
};

/**
 * Whether or not all rules must match, or if only one rule must match.
 */
export const RuleMatchingStrategy = {
  All: "all",
  Any: "any",
} as const;
/**
 * Whether or not all rules must match, or if only one rule must match.
 */
export type RuleMatchingStrategy = ClosedEnum<typeof RuleMatchingStrategy>;

/**
 * Create a Signals email target for a team.
 */
export type PostV1SignalsEmailTargets = {
  /**
   * The email target's name.
   */
  name: string;
  /**
   * The email address that will be listening to events.
   */
  slug?: string | undefined;
  /**
   * A detailed description of the email target.
   */
  description?: string | undefined;
  /**
   * The target that the email target will notify. This object must contain a `type`
   *
   * @remarks
   * field that specifies the type of target and an `id` field that specifies the ID of
   * the target. The `type` field must be one of "escalation_policy", "on_call_schedule",
   * "team", "user", or "slack_channel".
   */
  target?: Target | undefined;
  /**
   * A list of email addresses that are allowed to send events to the target. Must be exact match.
   */
  allowedSenders?: Array<string> | undefined;
  /**
   * A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.
   */
  rules?: Array<string> | undefined;
  /**
   * Whether or not all rules must match, or if only one rule must match.
   */
  ruleMatchingStrategy?: RuleMatchingStrategy | undefined;
  /**
   * The CEL expression that defines the status of an incoming email that is sent to the target.
   */
  statusCel?: string | undefined;
  /**
   * The CEL expression that defines the level of an incoming email that is sent to the target.
   */
  levelCel?: string | undefined;
};

/** @internal */
export const PostV1SignalsEmailTargetsType$inboundSchema: z.ZodNativeEnum<
  typeof PostV1SignalsEmailTargetsType
> = z.nativeEnum(PostV1SignalsEmailTargetsType);

/** @internal */
export const PostV1SignalsEmailTargetsType$outboundSchema: z.ZodNativeEnum<
  typeof PostV1SignalsEmailTargetsType
> = PostV1SignalsEmailTargetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1SignalsEmailTargetsType$ {
  /** @deprecated use `PostV1SignalsEmailTargetsType$inboundSchema` instead. */
  export const inboundSchema = PostV1SignalsEmailTargetsType$inboundSchema;
  /** @deprecated use `PostV1SignalsEmailTargetsType$outboundSchema` instead. */
  export const outboundSchema = PostV1SignalsEmailTargetsType$outboundSchema;
}

/** @internal */
export const Target$inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown> = z
  .object({
    type: PostV1SignalsEmailTargetsType$inboundSchema,
    id: z.string(),
  });

/** @internal */
export type Target$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const Target$outboundSchema: z.ZodType<
  Target$Outbound,
  z.ZodTypeDef,
  Target
> = z.object({
  type: PostV1SignalsEmailTargetsType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Target$ {
  /** @deprecated use `Target$inboundSchema` instead. */
  export const inboundSchema = Target$inboundSchema;
  /** @deprecated use `Target$outboundSchema` instead. */
  export const outboundSchema = Target$outboundSchema;
  /** @deprecated use `Target$Outbound` instead. */
  export type Outbound = Target$Outbound;
}

export function targetToJSON(target: Target): string {
  return JSON.stringify(Target$outboundSchema.parse(target));
}

export function targetFromJSON(
  jsonString: string,
): SafeParseResult<Target, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Target$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Target' from JSON`,
  );
}

/** @internal */
export const RuleMatchingStrategy$inboundSchema: z.ZodNativeEnum<
  typeof RuleMatchingStrategy
> = z.nativeEnum(RuleMatchingStrategy);

/** @internal */
export const RuleMatchingStrategy$outboundSchema: z.ZodNativeEnum<
  typeof RuleMatchingStrategy
> = RuleMatchingStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RuleMatchingStrategy$ {
  /** @deprecated use `RuleMatchingStrategy$inboundSchema` instead. */
  export const inboundSchema = RuleMatchingStrategy$inboundSchema;
  /** @deprecated use `RuleMatchingStrategy$outboundSchema` instead. */
  export const outboundSchema = RuleMatchingStrategy$outboundSchema;
}

/** @internal */
export const PostV1SignalsEmailTargets$inboundSchema: z.ZodType<
  PostV1SignalsEmailTargets,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  slug: z.string().optional(),
  description: z.string().optional(),
  target: z.lazy(() => Target$inboundSchema).optional(),
  allowed_senders: z.array(z.string()).optional(),
  rules: z.array(z.string()).optional(),
  rule_matching_strategy: RuleMatchingStrategy$inboundSchema.optional(),
  status_cel: z.string().optional(),
  level_cel: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_senders": "allowedSenders",
    "rule_matching_strategy": "ruleMatchingStrategy",
    "status_cel": "statusCel",
    "level_cel": "levelCel",
  });
});

/** @internal */
export type PostV1SignalsEmailTargets$Outbound = {
  name: string;
  slug?: string | undefined;
  description?: string | undefined;
  target?: Target$Outbound | undefined;
  allowed_senders?: Array<string> | undefined;
  rules?: Array<string> | undefined;
  rule_matching_strategy?: string | undefined;
  status_cel?: string | undefined;
  level_cel?: string | undefined;
};

/** @internal */
export const PostV1SignalsEmailTargets$outboundSchema: z.ZodType<
  PostV1SignalsEmailTargets$Outbound,
  z.ZodTypeDef,
  PostV1SignalsEmailTargets
> = z.object({
  name: z.string(),
  slug: z.string().optional(),
  description: z.string().optional(),
  target: z.lazy(() => Target$outboundSchema).optional(),
  allowedSenders: z.array(z.string()).optional(),
  rules: z.array(z.string()).optional(),
  ruleMatchingStrategy: RuleMatchingStrategy$outboundSchema.optional(),
  statusCel: z.string().optional(),
  levelCel: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allowedSenders: "allowed_senders",
    ruleMatchingStrategy: "rule_matching_strategy",
    statusCel: "status_cel",
    levelCel: "level_cel",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1SignalsEmailTargets$ {
  /** @deprecated use `PostV1SignalsEmailTargets$inboundSchema` instead. */
  export const inboundSchema = PostV1SignalsEmailTargets$inboundSchema;
  /** @deprecated use `PostV1SignalsEmailTargets$outboundSchema` instead. */
  export const outboundSchema = PostV1SignalsEmailTargets$outboundSchema;
  /** @deprecated use `PostV1SignalsEmailTargets$Outbound` instead. */
  export type Outbound = PostV1SignalsEmailTargets$Outbound;
}

export function postV1SignalsEmailTargetsToJSON(
  postV1SignalsEmailTargets: PostV1SignalsEmailTargets,
): string {
  return JSON.stringify(
    PostV1SignalsEmailTargets$outboundSchema.parse(postV1SignalsEmailTargets),
  );
}

export function postV1SignalsEmailTargetsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1SignalsEmailTargets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1SignalsEmailTargets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1SignalsEmailTargets' from JSON`,
  );
}
