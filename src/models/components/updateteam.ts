/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * MS Teams channel identity for channel associated with this team
 */
export type UpdateTeamMsTeamsChannel = {
  channelId: string;
  msTeamId: string;
};

export type UpdateTeamMembership = {
  /**
   * The ID of a user to add to the team. This parameter is mutually exclusive with schedule_id and signals_on_call_schedule_id.
   */
  userId?: string | null | undefined;
  /**
   * The ID of a third-party on-call schedule to add to the team, allowing you to specify that whoever is on call for this schedule when the team is assigned to an incident gets added to the incident and optionally assigned to the configured incident role. This parameter is mutually exclusive with user_id and signals_on_call_schedule_id.
   */
  scheduleId?: string | null | undefined;
  /**
   * The ID of a Signals on-call schedule to add to the team, allowing you to specify that whoever is on call for this schedule when the team is assigned to an incident gets added to the incident and optionally assigned to the configured incident role.. This parameter is mutually exclusive with user_id and schedule_id.
   */
  signalsOnCallScheduleId?: string | null | undefined;
  /**
   * An incident role ID that this user will automatically assigned if this team is assigned to an incident
   */
  incidentRoleId?: string | null | undefined;
};

/**
 * Update a single team from its ID
 */
export type UpdateTeam = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  /**
   * The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).
   *
   * @remarks
   */
  slackChannelId?: string | null | undefined;
  /**
   * MS Teams channel identity for channel associated with this team
   */
  msTeamsChannel?: UpdateTeamMsTeamsChannel | null | undefined;
  memberships?: Array<UpdateTeamMembership> | null | undefined;
  /**
   * A list of email addresses to invite to join the organization and automatically add to this team. If an email already has a pending invitation, the team will be added to their existing invitation.
   */
  inviteEmails?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateTeamMsTeamsChannel$inboundSchema: z.ZodType<
  UpdateTeamMsTeamsChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  ms_team_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "ms_team_id": "msTeamId",
  });
});

/** @internal */
export type UpdateTeamMsTeamsChannel$Outbound = {
  channel_id: string;
  ms_team_id: string;
};

/** @internal */
export const UpdateTeamMsTeamsChannel$outboundSchema: z.ZodType<
  UpdateTeamMsTeamsChannel$Outbound,
  z.ZodTypeDef,
  UpdateTeamMsTeamsChannel
> = z.object({
  channelId: z.string(),
  msTeamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    msTeamId: "ms_team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamMsTeamsChannel$ {
  /** @deprecated use `UpdateTeamMsTeamsChannel$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamMsTeamsChannel$inboundSchema;
  /** @deprecated use `UpdateTeamMsTeamsChannel$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamMsTeamsChannel$outboundSchema;
  /** @deprecated use `UpdateTeamMsTeamsChannel$Outbound` instead. */
  export type Outbound = UpdateTeamMsTeamsChannel$Outbound;
}

export function updateTeamMsTeamsChannelToJSON(
  updateTeamMsTeamsChannel: UpdateTeamMsTeamsChannel,
): string {
  return JSON.stringify(
    UpdateTeamMsTeamsChannel$outboundSchema.parse(updateTeamMsTeamsChannel),
  );
}

export function updateTeamMsTeamsChannelFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamMsTeamsChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamMsTeamsChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamMsTeamsChannel' from JSON`,
  );
}

/** @internal */
export const UpdateTeamMembership$inboundSchema: z.ZodType<
  UpdateTeamMembership,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
  schedule_id: z.nullable(z.string()).optional(),
  signals_on_call_schedule_id: z.nullable(z.string()).optional(),
  incident_role_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "schedule_id": "scheduleId",
    "signals_on_call_schedule_id": "signalsOnCallScheduleId",
    "incident_role_id": "incidentRoleId",
  });
});

/** @internal */
export type UpdateTeamMembership$Outbound = {
  user_id?: string | null | undefined;
  schedule_id?: string | null | undefined;
  signals_on_call_schedule_id?: string | null | undefined;
  incident_role_id?: string | null | undefined;
};

/** @internal */
export const UpdateTeamMembership$outboundSchema: z.ZodType<
  UpdateTeamMembership$Outbound,
  z.ZodTypeDef,
  UpdateTeamMembership
> = z.object({
  userId: z.nullable(z.string()).optional(),
  scheduleId: z.nullable(z.string()).optional(),
  signalsOnCallScheduleId: z.nullable(z.string()).optional(),
  incidentRoleId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    scheduleId: "schedule_id",
    signalsOnCallScheduleId: "signals_on_call_schedule_id",
    incidentRoleId: "incident_role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamMembership$ {
  /** @deprecated use `UpdateTeamMembership$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamMembership$inboundSchema;
  /** @deprecated use `UpdateTeamMembership$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamMembership$outboundSchema;
  /** @deprecated use `UpdateTeamMembership$Outbound` instead. */
  export type Outbound = UpdateTeamMembership$Outbound;
}

export function updateTeamMembershipToJSON(
  updateTeamMembership: UpdateTeamMembership,
): string {
  return JSON.stringify(
    UpdateTeamMembership$outboundSchema.parse(updateTeamMembership),
  );
}

export function updateTeamMembershipFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamMembership, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamMembership$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamMembership' from JSON`,
  );
}

/** @internal */
export const UpdateTeam$inboundSchema: z.ZodType<
  UpdateTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  slack_channel_id: z.nullable(z.string()).optional(),
  ms_teams_channel: z.nullable(
    z.lazy(() => UpdateTeamMsTeamsChannel$inboundSchema),
  ).optional(),
  memberships: z.nullable(
    z.array(z.lazy(() => UpdateTeamMembership$inboundSchema)),
  ).optional(),
  invite_emails: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "slack_channel_id": "slackChannelId",
    "ms_teams_channel": "msTeamsChannel",
    "invite_emails": "inviteEmails",
  });
});

/** @internal */
export type UpdateTeam$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  slack_channel_id?: string | null | undefined;
  ms_teams_channel?: UpdateTeamMsTeamsChannel$Outbound | null | undefined;
  memberships?: Array<UpdateTeamMembership$Outbound> | null | undefined;
  invite_emails?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateTeam$outboundSchema: z.ZodType<
  UpdateTeam$Outbound,
  z.ZodTypeDef,
  UpdateTeam
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  slackChannelId: z.nullable(z.string()).optional(),
  msTeamsChannel: z.nullable(
    z.lazy(() => UpdateTeamMsTeamsChannel$outboundSchema),
  ).optional(),
  memberships: z.nullable(
    z.array(z.lazy(() => UpdateTeamMembership$outboundSchema)),
  ).optional(),
  inviteEmails: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    slackChannelId: "slack_channel_id",
    msTeamsChannel: "ms_teams_channel",
    inviteEmails: "invite_emails",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeam$ {
  /** @deprecated use `UpdateTeam$inboundSchema` instead. */
  export const inboundSchema = UpdateTeam$inboundSchema;
  /** @deprecated use `UpdateTeam$outboundSchema` instead. */
  export const outboundSchema = UpdateTeam$outboundSchema;
  /** @deprecated use `UpdateTeam$Outbound` instead. */
  export type Outbound = UpdateTeam$Outbound;
}

export function updateTeamToJSON(updateTeam: UpdateTeam): string {
  return JSON.stringify(UpdateTeam$outboundSchema.parse(updateTeam));
}

export function updateTeamFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeam' from JSON`,
  );
}
