/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RulesRuleEntity,
  RulesRuleEntity$inboundSchema,
  RulesRuleEntity$Outbound,
  RulesRuleEntity$outboundSchema,
} from "./rulesruleentity.js";
import {
  TeamEntityLite,
  TeamEntityLite$inboundSchema,
  TeamEntityLite$Outbound,
  TeamEntityLite$outboundSchema,
} from "./teamentitylite.js";

export type SlimRunbookEntity = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  type?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  attachmentRule?: RulesRuleEntity | undefined;
  owner?: TeamEntityLite | undefined;
  /**
   * categories the runbook applies to
   */
  categories?: string | undefined;
};

/** @internal */
export const SlimRunbookEntity$inboundSchema: z.ZodType<
  SlimRunbookEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  type: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  attachment_rule: RulesRuleEntity$inboundSchema.optional(),
  owner: TeamEntityLite$inboundSchema.optional(),
  categories: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "attachment_rule": "attachmentRule",
  });
});

/** @internal */
export type SlimRunbookEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  type?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  attachment_rule?: RulesRuleEntity$Outbound | undefined;
  owner?: TeamEntityLite$Outbound | undefined;
  categories?: string | undefined;
};

/** @internal */
export const SlimRunbookEntity$outboundSchema: z.ZodType<
  SlimRunbookEntity$Outbound,
  z.ZodTypeDef,
  SlimRunbookEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  type: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  attachmentRule: RulesRuleEntity$outboundSchema.optional(),
  owner: TeamEntityLite$outboundSchema.optional(),
  categories: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    attachmentRule: "attachment_rule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlimRunbookEntity$ {
  /** @deprecated use `SlimRunbookEntity$inboundSchema` instead. */
  export const inboundSchema = SlimRunbookEntity$inboundSchema;
  /** @deprecated use `SlimRunbookEntity$outboundSchema` instead. */
  export const outboundSchema = SlimRunbookEntity$outboundSchema;
  /** @deprecated use `SlimRunbookEntity$Outbound` instead. */
  export type Outbound = SlimRunbookEntity$Outbound;
}

export function slimRunbookEntityToJSON(
  slimRunbookEntity: SlimRunbookEntity,
): string {
  return JSON.stringify(
    SlimRunbookEntity$outboundSchema.parse(slimRunbookEntity),
  );
}

export function slimRunbookEntityFromJSON(
  jsonString: string,
): SafeParseResult<SlimRunbookEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlimRunbookEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlimRunbookEntity' from JSON`,
  );
}
