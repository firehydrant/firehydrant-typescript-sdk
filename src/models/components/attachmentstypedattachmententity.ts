/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Can be one of: Attachments::LinkEntity, Integrations::CustomerSupportIssueEntity, Attachments::GenericAttachmentEntity
 */
export type Attributes = {};

export type AttachmentsTypedAttachmentEntity = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  attachedToId?: string | null | undefined;
  attachedToType?: string | null | undefined;
  secondaryAttachedToId?: string | null | undefined;
  secondaryAttachedToType?: string | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * Can be one of: Attachments::LinkEntity, Integrations::CustomerSupportIssueEntity, Attachments::GenericAttachmentEntity
   */
  attributes?: Attributes | null | undefined;
};

/** @internal */
export const Attributes$inboundSchema: z.ZodType<
  Attributes,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Attributes$Outbound = {};

/** @internal */
export const Attributes$outboundSchema: z.ZodType<
  Attributes$Outbound,
  z.ZodTypeDef,
  Attributes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attributes$ {
  /** @deprecated use `Attributes$inboundSchema` instead. */
  export const inboundSchema = Attributes$inboundSchema;
  /** @deprecated use `Attributes$outboundSchema` instead. */
  export const outboundSchema = Attributes$outboundSchema;
  /** @deprecated use `Attributes$Outbound` instead. */
  export type Outbound = Attributes$Outbound;
}

export function attributesToJSON(attributes: Attributes): string {
  return JSON.stringify(Attributes$outboundSchema.parse(attributes));
}

export function attributesFromJSON(
  jsonString: string,
): SafeParseResult<Attributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attributes' from JSON`,
  );
}

/** @internal */
export const AttachmentsTypedAttachmentEntity$inboundSchema: z.ZodType<
  AttachmentsTypedAttachmentEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  attached_to_id: z.nullable(z.string()).optional(),
  attached_to_type: z.nullable(z.string()).optional(),
  secondary_attached_to_id: z.nullable(z.string()).optional(),
  secondary_attached_to_type: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  attributes: z.nullable(z.lazy(() => Attributes$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "attached_to_id": "attachedToId",
    "attached_to_type": "attachedToType",
    "secondary_attached_to_id": "secondaryAttachedToId",
    "secondary_attached_to_type": "secondaryAttachedToType",
    "created_at": "createdAt",
  });
});

/** @internal */
export type AttachmentsTypedAttachmentEntity$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  attached_to_id?: string | null | undefined;
  attached_to_type?: string | null | undefined;
  secondary_attached_to_id?: string | null | undefined;
  secondary_attached_to_type?: string | null | undefined;
  created_at?: string | null | undefined;
  attributes?: Attributes$Outbound | null | undefined;
};

/** @internal */
export const AttachmentsTypedAttachmentEntity$outboundSchema: z.ZodType<
  AttachmentsTypedAttachmentEntity$Outbound,
  z.ZodTypeDef,
  AttachmentsTypedAttachmentEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  attachedToId: z.nullable(z.string()).optional(),
  attachedToType: z.nullable(z.string()).optional(),
  secondaryAttachedToId: z.nullable(z.string()).optional(),
  secondaryAttachedToType: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  attributes: z.nullable(z.lazy(() => Attributes$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    attachedToId: "attached_to_id",
    attachedToType: "attached_to_type",
    secondaryAttachedToId: "secondary_attached_to_id",
    secondaryAttachedToType: "secondary_attached_to_type",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentsTypedAttachmentEntity$ {
  /** @deprecated use `AttachmentsTypedAttachmentEntity$inboundSchema` instead. */
  export const inboundSchema = AttachmentsTypedAttachmentEntity$inboundSchema;
  /** @deprecated use `AttachmentsTypedAttachmentEntity$outboundSchema` instead. */
  export const outboundSchema = AttachmentsTypedAttachmentEntity$outboundSchema;
  /** @deprecated use `AttachmentsTypedAttachmentEntity$Outbound` instead. */
  export type Outbound = AttachmentsTypedAttachmentEntity$Outbound;
}

export function attachmentsTypedAttachmentEntityToJSON(
  attachmentsTypedAttachmentEntity: AttachmentsTypedAttachmentEntity,
): string {
  return JSON.stringify(
    AttachmentsTypedAttachmentEntity$outboundSchema.parse(
      attachmentsTypedAttachmentEntity,
    ),
  );
}

export function attachmentsTypedAttachmentEntityFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentsTypedAttachmentEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentsTypedAttachmentEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentsTypedAttachmentEntity' from JSON`,
  );
}
