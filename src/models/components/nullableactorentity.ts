/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const NullableActorEntityType = {
  FirehydrantUser: "firehydrant_user",
  FirehydrantBot: "firehydrant_bot",
  Alertmanager: "alertmanager",
  Asana: "asana",
  Aws: "aws",
  Bugsnag: "bugsnag",
  Checkly: "checkly",
  CustomAlerts: "custom_alerts",
  Datadog: "datadog",
  Shortcut: "shortcut",
  NewRelic: "new_relic",
  Nunc: "nunc",
  Github: "github",
  Giphy: "giphy",
  GoogleMeet: "google_meet",
  GoogleCalendar: "google_calendar",
  MicrosoftTeams: "microsoft_teams",
  MicrosoftTeamsV2: "microsoft_teams_v2",
  Webex: "webex",
  JiraCloud: "jira_cloud",
  JiraOnprem: "jira_onprem",
  Opsgenie: "opsgenie",
  PagerDuty: "pager_duty",
  Honeycomb: "honeycomb",
  Patchy: "patchy",
  ServiceNow: "service_now",
  Signals: "signals",
  Slack: "slack",
  Statuspage: "statuspage",
  Victorops: "victorops",
  Zendesk: "zendesk",
  Zoom: "zoom",
  ConfluenceCloud: "confluence_cloud",
  GoogleDocs: "google_docs",
  ZoomV2: "zoom_v2",
  Linear: "linear",
  Cortex: "cortex",
} as const;
export type NullableActorEntityType = ClosedEnum<
  typeof NullableActorEntityType
>;

export type NullableActorEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  type?: NullableActorEntityType | null | undefined;
};

/** @internal */
export const NullableActorEntityType$inboundSchema: z.ZodNativeEnum<
  typeof NullableActorEntityType
> = z.nativeEnum(NullableActorEntityType);

/** @internal */
export const NullableActorEntityType$outboundSchema: z.ZodNativeEnum<
  typeof NullableActorEntityType
> = NullableActorEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableActorEntityType$ {
  /** @deprecated use `NullableActorEntityType$inboundSchema` instead. */
  export const inboundSchema = NullableActorEntityType$inboundSchema;
  /** @deprecated use `NullableActorEntityType$outboundSchema` instead. */
  export const outboundSchema = NullableActorEntityType$outboundSchema;
}

/** @internal */
export const NullableActorEntity$inboundSchema: z.ZodType<
  NullableActorEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  type: z.nullable(NullableActorEntityType$inboundSchema).optional(),
});

/** @internal */
export type NullableActorEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const NullableActorEntity$outboundSchema: z.ZodType<
  NullableActorEntity$Outbound,
  z.ZodTypeDef,
  NullableActorEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  type: z.nullable(NullableActorEntityType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableActorEntity$ {
  /** @deprecated use `NullableActorEntity$inboundSchema` instead. */
  export const inboundSchema = NullableActorEntity$inboundSchema;
  /** @deprecated use `NullableActorEntity$outboundSchema` instead. */
  export const outboundSchema = NullableActorEntity$outboundSchema;
  /** @deprecated use `NullableActorEntity$Outbound` instead. */
  export type Outbound = NullableActorEntity$Outbound;
}

export function nullableActorEntityToJSON(
  nullableActorEntity: NullableActorEntity,
): string {
  return JSON.stringify(
    NullableActorEntity$outboundSchema.parse(nullableActorEntity),
  );
}

export function nullableActorEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableActorEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableActorEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableActorEntity' from JSON`,
  );
}
