/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableAuthorEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  source?: string | null | undefined;
  email?: string | null | undefined;
};

/** @internal */
export const NullableAuthorEntity$inboundSchema: z.ZodType<
  NullableAuthorEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
});

/** @internal */
export type NullableAuthorEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  source?: string | null | undefined;
  email?: string | null | undefined;
};

/** @internal */
export const NullableAuthorEntity$outboundSchema: z.ZodType<
  NullableAuthorEntity$Outbound,
  z.ZodTypeDef,
  NullableAuthorEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableAuthorEntity$ {
  /** @deprecated use `NullableAuthorEntity$inboundSchema` instead. */
  export const inboundSchema = NullableAuthorEntity$inboundSchema;
  /** @deprecated use `NullableAuthorEntity$outboundSchema` instead. */
  export const outboundSchema = NullableAuthorEntity$outboundSchema;
  /** @deprecated use `NullableAuthorEntity$Outbound` instead. */
  export type Outbound = NullableAuthorEntity$Outbound;
}

export function nullableAuthorEntityToJSON(
  nullableAuthorEntity: NullableAuthorEntity,
): string {
  return JSON.stringify(
    NullableAuthorEntity$outboundSchema.parse(nullableAuthorEntity),
  );
}

export function nullableAuthorEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableAuthorEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableAuthorEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableAuthorEntity' from JSON`,
  );
}
