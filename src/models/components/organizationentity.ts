/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationEntity = {
  name?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const OrganizationEntity$inboundSchema: z.ZodType<
  OrganizationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type OrganizationEntity$Outbound = {
  name?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const OrganizationEntity$outboundSchema: z.ZodType<
  OrganizationEntity$Outbound,
  z.ZodTypeDef,
  OrganizationEntity
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationEntity$ {
  /** @deprecated use `OrganizationEntity$inboundSchema` instead. */
  export const inboundSchema = OrganizationEntity$inboundSchema;
  /** @deprecated use `OrganizationEntity$outboundSchema` instead. */
  export const outboundSchema = OrganizationEntity$outboundSchema;
  /** @deprecated use `OrganizationEntity$Outbound` instead. */
  export type Outbound = OrganizationEntity$Outbound;
}

export function organizationEntityToJSON(
  organizationEntity: OrganizationEntity,
): string {
  return JSON.stringify(
    OrganizationEntity$outboundSchema.parse(organizationEntity),
  );
}

export function organizationEntityFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationEntity' from JSON`,
  );
}
