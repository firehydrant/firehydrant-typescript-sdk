/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IncidentTypeEntityTemplateImpactEntity,
  IncidentTypeEntityTemplateImpactEntity$inboundSchema,
  IncidentTypeEntityTemplateImpactEntity$Outbound,
  IncidentTypeEntityTemplateImpactEntity$outboundSchema,
} from "./incidenttypeentitytemplateimpactentity.js";
import {
  TeamEntity,
  TeamEntity$inboundSchema,
  TeamEntity$Outbound,
  TeamEntity$outboundSchema,
} from "./teamentity.js";

/**
 * A hash mapping runbook IDs to runbook names.
 */
export type Runbooks = {};

export type IncidentTypeEntityTemplateValuesEntity = {
  services?: Array<IncidentTypeEntityTemplateImpactEntity> | undefined;
  functionalities?: Array<IncidentTypeEntityTemplateImpactEntity> | undefined;
  environments?: Array<IncidentTypeEntityTemplateImpactEntity> | undefined;
  /**
   * A hash mapping runbook IDs to runbook names.
   */
  runbooks?: Runbooks | undefined;
  teams?: Array<TeamEntity> | undefined;
};

/** @internal */
export const Runbooks$inboundSchema: z.ZodType<
  Runbooks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Runbooks$Outbound = {};

/** @internal */
export const Runbooks$outboundSchema: z.ZodType<
  Runbooks$Outbound,
  z.ZodTypeDef,
  Runbooks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Runbooks$ {
  /** @deprecated use `Runbooks$inboundSchema` instead. */
  export const inboundSchema = Runbooks$inboundSchema;
  /** @deprecated use `Runbooks$outboundSchema` instead. */
  export const outboundSchema = Runbooks$outboundSchema;
  /** @deprecated use `Runbooks$Outbound` instead. */
  export type Outbound = Runbooks$Outbound;
}

export function runbooksToJSON(runbooks: Runbooks): string {
  return JSON.stringify(Runbooks$outboundSchema.parse(runbooks));
}

export function runbooksFromJSON(
  jsonString: string,
): SafeParseResult<Runbooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Runbooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Runbooks' from JSON`,
  );
}

/** @internal */
export const IncidentTypeEntityTemplateValuesEntity$inboundSchema: z.ZodType<
  IncidentTypeEntityTemplateValuesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  services: z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema)
    .optional(),
  functionalities: z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema)
    .optional(),
  environments: z.array(IncidentTypeEntityTemplateImpactEntity$inboundSchema)
    .optional(),
  runbooks: z.lazy(() => Runbooks$inboundSchema).optional(),
  teams: z.array(TeamEntity$inboundSchema).optional(),
});

/** @internal */
export type IncidentTypeEntityTemplateValuesEntity$Outbound = {
  services?: Array<IncidentTypeEntityTemplateImpactEntity$Outbound> | undefined;
  functionalities?:
    | Array<IncidentTypeEntityTemplateImpactEntity$Outbound>
    | undefined;
  environments?:
    | Array<IncidentTypeEntityTemplateImpactEntity$Outbound>
    | undefined;
  runbooks?: Runbooks$Outbound | undefined;
  teams?: Array<TeamEntity$Outbound> | undefined;
};

/** @internal */
export const IncidentTypeEntityTemplateValuesEntity$outboundSchema: z.ZodType<
  IncidentTypeEntityTemplateValuesEntity$Outbound,
  z.ZodTypeDef,
  IncidentTypeEntityTemplateValuesEntity
> = z.object({
  services: z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema)
    .optional(),
  functionalities: z.array(
    IncidentTypeEntityTemplateImpactEntity$outboundSchema,
  ).optional(),
  environments: z.array(IncidentTypeEntityTemplateImpactEntity$outboundSchema)
    .optional(),
  runbooks: z.lazy(() => Runbooks$outboundSchema).optional(),
  teams: z.array(TeamEntity$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentTypeEntityTemplateValuesEntity$ {
  /** @deprecated use `IncidentTypeEntityTemplateValuesEntity$inboundSchema` instead. */
  export const inboundSchema =
    IncidentTypeEntityTemplateValuesEntity$inboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateValuesEntity$outboundSchema` instead. */
  export const outboundSchema =
    IncidentTypeEntityTemplateValuesEntity$outboundSchema;
  /** @deprecated use `IncidentTypeEntityTemplateValuesEntity$Outbound` instead. */
  export type Outbound = IncidentTypeEntityTemplateValuesEntity$Outbound;
}

export function incidentTypeEntityTemplateValuesEntityToJSON(
  incidentTypeEntityTemplateValuesEntity:
    IncidentTypeEntityTemplateValuesEntity,
): string {
  return JSON.stringify(
    IncidentTypeEntityTemplateValuesEntity$outboundSchema.parse(
      incidentTypeEntityTemplateValuesEntity,
    ),
  );
}

export function incidentTypeEntityTemplateValuesEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentTypeEntityTemplateValuesEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncidentTypeEntityTemplateValuesEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentTypeEntityTemplateValuesEntity' from JSON`,
  );
}
