/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableIntegrationsIntegrationEntity,
  NullableIntegrationsIntegrationEntity$inboundSchema,
  NullableIntegrationsIntegrationEntity$Outbound,
  NullableIntegrationsIntegrationEntity$outboundSchema,
} from "./nullableintegrationsintegrationentity.js";
import {
  NullableRunbooksActionConfigEntity,
  NullableRunbooksActionConfigEntity$inboundSchema,
  NullableRunbooksActionConfigEntity$Outbound,
  NullableRunbooksActionConfigEntity$outboundSchema,
} from "./nullablerunbooksactionconfigentity.js";

export type RunbooksActionsEntityPrerequisites = {};

export type RunbooksActionsEntityDefaultLogic = {};

export type RunbooksActionsEntityDefaultRuleData = {};

export type RunbooksActionsEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  config?: NullableRunbooksActionConfigEntity | null | undefined;
  category?: string | null | undefined;
  prerequisites?: RunbooksActionsEntityPrerequisites | null | undefined;
  integration?: NullableIntegrationsIntegrationEntity | null | undefined;
  supportedRunbookTypes?: Array<string> | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  automatable?: boolean | null | undefined;
  rerunnable?: boolean | null | undefined;
  repeatable?: boolean | null | undefined;
  defaultLogic?: RunbooksActionsEntityDefaultLogic | null | undefined;
  defaultRuleData?: RunbooksActionsEntityDefaultRuleData | null | undefined;
};

/** @internal */
export const RunbooksActionsEntityPrerequisites$inboundSchema: z.ZodType<
  RunbooksActionsEntityPrerequisites,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RunbooksActionsEntityPrerequisites$Outbound = {};

/** @internal */
export const RunbooksActionsEntityPrerequisites$outboundSchema: z.ZodType<
  RunbooksActionsEntityPrerequisites$Outbound,
  z.ZodTypeDef,
  RunbooksActionsEntityPrerequisites
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksActionsEntityPrerequisites$ {
  /** @deprecated use `RunbooksActionsEntityPrerequisites$inboundSchema` instead. */
  export const inboundSchema = RunbooksActionsEntityPrerequisites$inboundSchema;
  /** @deprecated use `RunbooksActionsEntityPrerequisites$outboundSchema` instead. */
  export const outboundSchema =
    RunbooksActionsEntityPrerequisites$outboundSchema;
  /** @deprecated use `RunbooksActionsEntityPrerequisites$Outbound` instead. */
  export type Outbound = RunbooksActionsEntityPrerequisites$Outbound;
}

export function runbooksActionsEntityPrerequisitesToJSON(
  runbooksActionsEntityPrerequisites: RunbooksActionsEntityPrerequisites,
): string {
  return JSON.stringify(
    RunbooksActionsEntityPrerequisites$outboundSchema.parse(
      runbooksActionsEntityPrerequisites,
    ),
  );
}

export function runbooksActionsEntityPrerequisitesFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksActionsEntityPrerequisites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunbooksActionsEntityPrerequisites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksActionsEntityPrerequisites' from JSON`,
  );
}

/** @internal */
export const RunbooksActionsEntityDefaultLogic$inboundSchema: z.ZodType<
  RunbooksActionsEntityDefaultLogic,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RunbooksActionsEntityDefaultLogic$Outbound = {};

/** @internal */
export const RunbooksActionsEntityDefaultLogic$outboundSchema: z.ZodType<
  RunbooksActionsEntityDefaultLogic$Outbound,
  z.ZodTypeDef,
  RunbooksActionsEntityDefaultLogic
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksActionsEntityDefaultLogic$ {
  /** @deprecated use `RunbooksActionsEntityDefaultLogic$inboundSchema` instead. */
  export const inboundSchema = RunbooksActionsEntityDefaultLogic$inboundSchema;
  /** @deprecated use `RunbooksActionsEntityDefaultLogic$outboundSchema` instead. */
  export const outboundSchema =
    RunbooksActionsEntityDefaultLogic$outboundSchema;
  /** @deprecated use `RunbooksActionsEntityDefaultLogic$Outbound` instead. */
  export type Outbound = RunbooksActionsEntityDefaultLogic$Outbound;
}

export function runbooksActionsEntityDefaultLogicToJSON(
  runbooksActionsEntityDefaultLogic: RunbooksActionsEntityDefaultLogic,
): string {
  return JSON.stringify(
    RunbooksActionsEntityDefaultLogic$outboundSchema.parse(
      runbooksActionsEntityDefaultLogic,
    ),
  );
}

export function runbooksActionsEntityDefaultLogicFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksActionsEntityDefaultLogic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunbooksActionsEntityDefaultLogic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksActionsEntityDefaultLogic' from JSON`,
  );
}

/** @internal */
export const RunbooksActionsEntityDefaultRuleData$inboundSchema: z.ZodType<
  RunbooksActionsEntityDefaultRuleData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RunbooksActionsEntityDefaultRuleData$Outbound = {};

/** @internal */
export const RunbooksActionsEntityDefaultRuleData$outboundSchema: z.ZodType<
  RunbooksActionsEntityDefaultRuleData$Outbound,
  z.ZodTypeDef,
  RunbooksActionsEntityDefaultRuleData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksActionsEntityDefaultRuleData$ {
  /** @deprecated use `RunbooksActionsEntityDefaultRuleData$inboundSchema` instead. */
  export const inboundSchema =
    RunbooksActionsEntityDefaultRuleData$inboundSchema;
  /** @deprecated use `RunbooksActionsEntityDefaultRuleData$outboundSchema` instead. */
  export const outboundSchema =
    RunbooksActionsEntityDefaultRuleData$outboundSchema;
  /** @deprecated use `RunbooksActionsEntityDefaultRuleData$Outbound` instead. */
  export type Outbound = RunbooksActionsEntityDefaultRuleData$Outbound;
}

export function runbooksActionsEntityDefaultRuleDataToJSON(
  runbooksActionsEntityDefaultRuleData: RunbooksActionsEntityDefaultRuleData,
): string {
  return JSON.stringify(
    RunbooksActionsEntityDefaultRuleData$outboundSchema.parse(
      runbooksActionsEntityDefaultRuleData,
    ),
  );
}

export function runbooksActionsEntityDefaultRuleDataFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksActionsEntityDefaultRuleData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunbooksActionsEntityDefaultRuleData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksActionsEntityDefaultRuleData' from JSON`,
  );
}

/** @internal */
export const RunbooksActionsEntity$inboundSchema: z.ZodType<
  RunbooksActionsEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  config: z.nullable(NullableRunbooksActionConfigEntity$inboundSchema)
    .optional(),
  category: z.nullable(z.string()).optional(),
  prerequisites: z.nullable(
    z.lazy(() => RunbooksActionsEntityPrerequisites$inboundSchema),
  ).optional(),
  integration: z.nullable(NullableIntegrationsIntegrationEntity$inboundSchema)
    .optional(),
  supported_runbook_types: z.nullable(z.array(z.string())).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  automatable: z.nullable(z.boolean()).optional(),
  rerunnable: z.nullable(z.boolean()).optional(),
  repeatable: z.nullable(z.boolean()).optional(),
  default_logic: z.nullable(
    z.lazy(() => RunbooksActionsEntityDefaultLogic$inboundSchema),
  ).optional(),
  default_rule_data: z.nullable(
    z.lazy(() => RunbooksActionsEntityDefaultRuleData$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "supported_runbook_types": "supportedRunbookTypes",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "default_logic": "defaultLogic",
    "default_rule_data": "defaultRuleData",
  });
});

/** @internal */
export type RunbooksActionsEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  config?: NullableRunbooksActionConfigEntity$Outbound | null | undefined;
  category?: string | null | undefined;
  prerequisites?:
    | RunbooksActionsEntityPrerequisites$Outbound
    | null
    | undefined;
  integration?:
    | NullableIntegrationsIntegrationEntity$Outbound
    | null
    | undefined;
  supported_runbook_types?: Array<string> | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  automatable?: boolean | null | undefined;
  rerunnable?: boolean | null | undefined;
  repeatable?: boolean | null | undefined;
  default_logic?: RunbooksActionsEntityDefaultLogic$Outbound | null | undefined;
  default_rule_data?:
    | RunbooksActionsEntityDefaultRuleData$Outbound
    | null
    | undefined;
};

/** @internal */
export const RunbooksActionsEntity$outboundSchema: z.ZodType<
  RunbooksActionsEntity$Outbound,
  z.ZodTypeDef,
  RunbooksActionsEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  config: z.nullable(NullableRunbooksActionConfigEntity$outboundSchema)
    .optional(),
  category: z.nullable(z.string()).optional(),
  prerequisites: z.nullable(
    z.lazy(() => RunbooksActionsEntityPrerequisites$outboundSchema),
  ).optional(),
  integration: z.nullable(NullableIntegrationsIntegrationEntity$outboundSchema)
    .optional(),
  supportedRunbookTypes: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  automatable: z.nullable(z.boolean()).optional(),
  rerunnable: z.nullable(z.boolean()).optional(),
  repeatable: z.nullable(z.boolean()).optional(),
  defaultLogic: z.nullable(
    z.lazy(() => RunbooksActionsEntityDefaultLogic$outboundSchema),
  ).optional(),
  defaultRuleData: z.nullable(
    z.lazy(() => RunbooksActionsEntityDefaultRuleData$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    supportedRunbookTypes: "supported_runbook_types",
    createdAt: "created_at",
    updatedAt: "updated_at",
    defaultLogic: "default_logic",
    defaultRuleData: "default_rule_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbooksActionsEntity$ {
  /** @deprecated use `RunbooksActionsEntity$inboundSchema` instead. */
  export const inboundSchema = RunbooksActionsEntity$inboundSchema;
  /** @deprecated use `RunbooksActionsEntity$outboundSchema` instead. */
  export const outboundSchema = RunbooksActionsEntity$outboundSchema;
  /** @deprecated use `RunbooksActionsEntity$Outbound` instead. */
  export type Outbound = RunbooksActionsEntity$Outbound;
}

export function runbooksActionsEntityToJSON(
  runbooksActionsEntity: RunbooksActionsEntity,
): string {
  return JSON.stringify(
    RunbooksActionsEntity$outboundSchema.parse(runbooksActionsEntity),
  );
}

export function runbooksActionsEntityFromJSON(
  jsonString: string,
): SafeParseResult<RunbooksActionsEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunbooksActionsEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbooksActionsEntity' from JSON`,
  );
}
