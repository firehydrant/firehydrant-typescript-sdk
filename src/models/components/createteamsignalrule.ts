/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of target that the rule will notify when matched.
 */
export const CreateTeamSignalRuleTargetType = {
  EscalationPolicy: "EscalationPolicy",
  OnCallSchedule: "OnCallSchedule",
  User: "User",
  Webhook: "Webhook",
  SlackChannel: "SlackChannel",
} as const;
/**
 * The type of target that the rule will notify when matched.
 */
export type CreateTeamSignalRuleTargetType = ClosedEnum<
  typeof CreateTeamSignalRuleTargetType
>;

/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export const CreateTeamSignalRuleNotificationPriorityOverride = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
  Unknown: "",
} as const;
/**
 * A notification priority that will be set on the resulting alert (default: HIGH)
 */
export type CreateTeamSignalRuleNotificationPriorityOverride = ClosedEnum<
  typeof CreateTeamSignalRuleNotificationPriorityOverride
>;

/**
 * Determines when an incident should be created when this rule is matched
 */
export const CreateTeamSignalRuleCreateIncidentConditionWhen = {
  WhenUnspecified: "WHEN_UNSPECIFIED",
  WhenAlways: "WHEN_ALWAYS",
} as const;
/**
 * Determines when an incident should be created when this rule is matched
 */
export type CreateTeamSignalRuleCreateIncidentConditionWhen = ClosedEnum<
  typeof CreateTeamSignalRuleCreateIncidentConditionWhen
>;

/**
 * Create a Signals rule for a team.
 */
export type CreateTeamSignalRule = {
  /**
   * The rule's name.
   */
  name: string;
  /**
   * The CEL expression that defines the rule.
   */
  expression: string;
  /**
   * The type of target that the rule will notify when matched.
   */
  targetType: CreateTeamSignalRuleTargetType;
  /**
   * The ID of the target that the rule will notify when matched.
   */
  targetId: string;
  /**
   * The ID of an incident type that should be used when an alert is promoted to an incident
   */
  incidentTypeId?: string | null | undefined;
  /**
   * A notification priority that will be set on the resulting alert (default: HIGH)
   */
  notificationPriorityOverride?:
    | CreateTeamSignalRuleNotificationPriorityOverride
    | null
    | undefined;
  /**
   * Determines when an incident should be created when this rule is matched
   */
  createIncidentConditionWhen?:
    | CreateTeamSignalRuleCreateIncidentConditionWhen
    | null
    | undefined;
  /**
   * The amount of time alerts created from this rule will be deduplicated
   */
  deduplicationExpiry?: string | null | undefined;
};

/** @internal */
export const CreateTeamSignalRuleTargetType$inboundSchema: z.ZodNativeEnum<
  typeof CreateTeamSignalRuleTargetType
> = z.nativeEnum(CreateTeamSignalRuleTargetType);

/** @internal */
export const CreateTeamSignalRuleTargetType$outboundSchema: z.ZodNativeEnum<
  typeof CreateTeamSignalRuleTargetType
> = CreateTeamSignalRuleTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamSignalRuleTargetType$ {
  /** @deprecated use `CreateTeamSignalRuleTargetType$inboundSchema` instead. */
  export const inboundSchema = CreateTeamSignalRuleTargetType$inboundSchema;
  /** @deprecated use `CreateTeamSignalRuleTargetType$outboundSchema` instead. */
  export const outboundSchema = CreateTeamSignalRuleTargetType$outboundSchema;
}

/** @internal */
export const CreateTeamSignalRuleNotificationPriorityOverride$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamSignalRuleNotificationPriorityOverride> = z
    .nativeEnum(CreateTeamSignalRuleNotificationPriorityOverride);

/** @internal */
export const CreateTeamSignalRuleNotificationPriorityOverride$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamSignalRuleNotificationPriorityOverride> =
    CreateTeamSignalRuleNotificationPriorityOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamSignalRuleNotificationPriorityOverride$ {
  /** @deprecated use `CreateTeamSignalRuleNotificationPriorityOverride$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamSignalRuleNotificationPriorityOverride$inboundSchema;
  /** @deprecated use `CreateTeamSignalRuleNotificationPriorityOverride$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamSignalRuleNotificationPriorityOverride$outboundSchema;
}

/** @internal */
export const CreateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema:
  z.ZodNativeEnum<typeof CreateTeamSignalRuleCreateIncidentConditionWhen> = z
    .nativeEnum(CreateTeamSignalRuleCreateIncidentConditionWhen);

/** @internal */
export const CreateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema:
  z.ZodNativeEnum<typeof CreateTeamSignalRuleCreateIncidentConditionWhen> =
    CreateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamSignalRuleCreateIncidentConditionWhen$ {
  /** @deprecated use `CreateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema;
  /** @deprecated use `CreateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema;
}

/** @internal */
export const CreateTeamSignalRule$inboundSchema: z.ZodType<
  CreateTeamSignalRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  expression: z.string(),
  target_type: CreateTeamSignalRuleTargetType$inboundSchema,
  target_id: z.string(),
  incident_type_id: z.nullable(z.string()).optional(),
  notification_priority_override: z.nullable(
    CreateTeamSignalRuleNotificationPriorityOverride$inboundSchema,
  ).optional(),
  create_incident_condition_when: z.nullable(
    CreateTeamSignalRuleCreateIncidentConditionWhen$inboundSchema,
  ).optional(),
  deduplication_expiry: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
    "incident_type_id": "incidentTypeId",
    "notification_priority_override": "notificationPriorityOverride",
    "create_incident_condition_when": "createIncidentConditionWhen",
    "deduplication_expiry": "deduplicationExpiry",
  });
});

/** @internal */
export type CreateTeamSignalRule$Outbound = {
  name: string;
  expression: string;
  target_type: string;
  target_id: string;
  incident_type_id?: string | null | undefined;
  notification_priority_override?: string | null | undefined;
  create_incident_condition_when?: string | null | undefined;
  deduplication_expiry?: string | null | undefined;
};

/** @internal */
export const CreateTeamSignalRule$outboundSchema: z.ZodType<
  CreateTeamSignalRule$Outbound,
  z.ZodTypeDef,
  CreateTeamSignalRule
> = z.object({
  name: z.string(),
  expression: z.string(),
  targetType: CreateTeamSignalRuleTargetType$outboundSchema,
  targetId: z.string(),
  incidentTypeId: z.nullable(z.string()).optional(),
  notificationPriorityOverride: z.nullable(
    CreateTeamSignalRuleNotificationPriorityOverride$outboundSchema,
  ).optional(),
  createIncidentConditionWhen: z.nullable(
    CreateTeamSignalRuleCreateIncidentConditionWhen$outboundSchema,
  ).optional(),
  deduplicationExpiry: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
    incidentTypeId: "incident_type_id",
    notificationPriorityOverride: "notification_priority_override",
    createIncidentConditionWhen: "create_incident_condition_when",
    deduplicationExpiry: "deduplication_expiry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamSignalRule$ {
  /** @deprecated use `CreateTeamSignalRule$inboundSchema` instead. */
  export const inboundSchema = CreateTeamSignalRule$inboundSchema;
  /** @deprecated use `CreateTeamSignalRule$outboundSchema` instead. */
  export const outboundSchema = CreateTeamSignalRule$outboundSchema;
  /** @deprecated use `CreateTeamSignalRule$Outbound` instead. */
  export type Outbound = CreateTeamSignalRule$Outbound;
}

export function createTeamSignalRuleToJSON(
  createTeamSignalRule: CreateTeamSignalRule,
): string {
  return JSON.stringify(
    CreateTeamSignalRule$outboundSchema.parse(createTeamSignalRule),
  );
}

export function createTeamSignalRuleFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamSignalRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamSignalRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamSignalRule' from JSON`,
  );
}
