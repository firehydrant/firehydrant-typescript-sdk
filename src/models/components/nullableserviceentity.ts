/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChecklistTemplateEntity,
  ChecklistTemplateEntity$inboundSchema,
  ChecklistTemplateEntity$Outbound,
  ChecklistTemplateEntity$outboundSchema,
} from "./checklisttemplateentity.js";
import {
  ExternalResourceEntity,
  ExternalResourceEntity$inboundSchema,
  ExternalResourceEntity$Outbound,
  ExternalResourceEntity$outboundSchema,
} from "./externalresourceentity.js";
import {
  FunctionalityEntity,
  FunctionalityEntity$inboundSchema,
  FunctionalityEntity$Outbound,
  FunctionalityEntity$outboundSchema,
} from "./functionalityentity.js";
import {
  LinksEntity,
  LinksEntity$inboundSchema,
  LinksEntity$Outbound,
  LinksEntity$outboundSchema,
} from "./linksentity.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableImportsImportableResourceEntity,
  NullableImportsImportableResourceEntity$inboundSchema,
  NullableImportsImportableResourceEntity$Outbound,
  NullableImportsImportableResourceEntity$outboundSchema,
} from "./nullableimportsimportableresourceentity.js";
import {
  NullableTeamEntityLite,
  NullableTeamEntityLite$inboundSchema,
  NullableTeamEntityLite$Outbound,
  NullableTeamEntityLite$outboundSchema,
} from "./nullableteamentitylite.js";
import {
  TeamEntityLite,
  TeamEntityLite$inboundSchema,
  TeamEntityLite$Outbound,
  TeamEntityLite$outboundSchema,
} from "./teamentitylite.js";

/**
 * An object of label key and values
 */
export type NullableServiceEntityLabels = {};

/**
 * Indicates the settings of the catalog that manages this service
 */
export type NullableServiceEntityManagedBySettings = {};

/**
 * ServiceEntity model
 */
export type NullableServiceEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  serviceTier?: number | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  allowedParams?: Array<string> | null | undefined;
  /**
   * An object of label key and values
   */
  labels?: NullableServiceEntityLabels | null | undefined;
  alertOnAdd?: boolean | null | undefined;
  autoAddRespondingTeam?: boolean | null | undefined;
  /**
   * List of active incident guids
   */
  activeIncidents?: Array<string> | null | undefined;
  /**
   * List of checklists associated with a service
   */
  checklists?: Array<ChecklistTemplateEntity> | null | undefined;
  completedChecks?: number | null | undefined;
  /**
   * Information about known linkages to representations of services outside of FireHydrant.
   */
  externalResources?: Array<ExternalResourceEntity> | null | undefined;
  /**
   * List of functionalities attached to the service
   */
  functionalities?: Array<FunctionalityEntity> | null | undefined;
  lastImport?: NullableImportsImportableResourceEntity | null | undefined;
  /**
   * List of links attached to this service.
   */
  links?: Array<LinksEntity> | null | undefined;
  /**
   * If set, this field indicates that the service is managed by an integration and thus cannot be set manually
   */
  managedBy?: string | null | undefined;
  /**
   * Indicates the settings of the catalog that manages this service
   */
  managedBySettings?: NullableServiceEntityManagedBySettings | null | undefined;
  owner?: NullableTeamEntityLite | null | undefined;
  serviceChecklistUpdatedAt?: Date | null | undefined;
  /**
   * List of teams attached to the service
   */
  teams?: Array<TeamEntityLite> | null | undefined;
  updatedBy?: NullableAuthorEntity | null | undefined;
};

/** @internal */
export const NullableServiceEntityLabels$inboundSchema: z.ZodType<
  NullableServiceEntityLabels,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NullableServiceEntityLabels$Outbound = {};

/** @internal */
export const NullableServiceEntityLabels$outboundSchema: z.ZodType<
  NullableServiceEntityLabels$Outbound,
  z.ZodTypeDef,
  NullableServiceEntityLabels
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableServiceEntityLabels$ {
  /** @deprecated use `NullableServiceEntityLabels$inboundSchema` instead. */
  export const inboundSchema = NullableServiceEntityLabels$inboundSchema;
  /** @deprecated use `NullableServiceEntityLabels$outboundSchema` instead. */
  export const outboundSchema = NullableServiceEntityLabels$outboundSchema;
  /** @deprecated use `NullableServiceEntityLabels$Outbound` instead. */
  export type Outbound = NullableServiceEntityLabels$Outbound;
}

export function nullableServiceEntityLabelsToJSON(
  nullableServiceEntityLabels: NullableServiceEntityLabels,
): string {
  return JSON.stringify(
    NullableServiceEntityLabels$outboundSchema.parse(
      nullableServiceEntityLabels,
    ),
  );
}

export function nullableServiceEntityLabelsFromJSON(
  jsonString: string,
): SafeParseResult<NullableServiceEntityLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableServiceEntityLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableServiceEntityLabels' from JSON`,
  );
}

/** @internal */
export const NullableServiceEntityManagedBySettings$inboundSchema: z.ZodType<
  NullableServiceEntityManagedBySettings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NullableServiceEntityManagedBySettings$Outbound = {};

/** @internal */
export const NullableServiceEntityManagedBySettings$outboundSchema: z.ZodType<
  NullableServiceEntityManagedBySettings$Outbound,
  z.ZodTypeDef,
  NullableServiceEntityManagedBySettings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableServiceEntityManagedBySettings$ {
  /** @deprecated use `NullableServiceEntityManagedBySettings$inboundSchema` instead. */
  export const inboundSchema =
    NullableServiceEntityManagedBySettings$inboundSchema;
  /** @deprecated use `NullableServiceEntityManagedBySettings$outboundSchema` instead. */
  export const outboundSchema =
    NullableServiceEntityManagedBySettings$outboundSchema;
  /** @deprecated use `NullableServiceEntityManagedBySettings$Outbound` instead. */
  export type Outbound = NullableServiceEntityManagedBySettings$Outbound;
}

export function nullableServiceEntityManagedBySettingsToJSON(
  nullableServiceEntityManagedBySettings:
    NullableServiceEntityManagedBySettings,
): string {
  return JSON.stringify(
    NullableServiceEntityManagedBySettings$outboundSchema.parse(
      nullableServiceEntityManagedBySettings,
    ),
  );
}

export function nullableServiceEntityManagedBySettingsFromJSON(
  jsonString: string,
): SafeParseResult<NullableServiceEntityManagedBySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableServiceEntityManagedBySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableServiceEntityManagedBySettings' from JSON`,
  );
}

/** @internal */
export const NullableServiceEntity$inboundSchema: z.ZodType<
  NullableServiceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  service_tier: z.nullable(z.number().int()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  allowed_params: z.nullable(z.array(z.string())).optional(),
  labels: z.nullable(z.lazy(() => NullableServiceEntityLabels$inboundSchema))
    .optional(),
  alert_on_add: z.nullable(z.boolean()).optional(),
  auto_add_responding_team: z.nullable(z.boolean()).optional(),
  active_incidents: z.nullable(z.array(z.string())).optional(),
  checklists: z.nullable(z.array(ChecklistTemplateEntity$inboundSchema))
    .optional(),
  completed_checks: z.nullable(z.number().int()).optional(),
  external_resources: z.nullable(z.array(ExternalResourceEntity$inboundSchema))
    .optional(),
  functionalities: z.nullable(z.array(FunctionalityEntity$inboundSchema))
    .optional(),
  last_import: z.nullable(NullableImportsImportableResourceEntity$inboundSchema)
    .optional(),
  links: z.nullable(z.array(LinksEntity$inboundSchema)).optional(),
  managed_by: z.nullable(z.string()).optional(),
  managed_by_settings: z.nullable(
    z.lazy(() => NullableServiceEntityManagedBySettings$inboundSchema),
  ).optional(),
  owner: z.nullable(NullableTeamEntityLite$inboundSchema).optional(),
  service_checklist_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  teams: z.nullable(z.array(TeamEntityLite$inboundSchema)).optional(),
  updated_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_tier": "serviceTier",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "allowed_params": "allowedParams",
    "alert_on_add": "alertOnAdd",
    "auto_add_responding_team": "autoAddRespondingTeam",
    "active_incidents": "activeIncidents",
    "completed_checks": "completedChecks",
    "external_resources": "externalResources",
    "last_import": "lastImport",
    "managed_by": "managedBy",
    "managed_by_settings": "managedBySettings",
    "service_checklist_updated_at": "serviceChecklistUpdatedAt",
    "updated_by": "updatedBy",
  });
});

/** @internal */
export type NullableServiceEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  service_tier?: number | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  allowed_params?: Array<string> | null | undefined;
  labels?: NullableServiceEntityLabels$Outbound | null | undefined;
  alert_on_add?: boolean | null | undefined;
  auto_add_responding_team?: boolean | null | undefined;
  active_incidents?: Array<string> | null | undefined;
  checklists?: Array<ChecklistTemplateEntity$Outbound> | null | undefined;
  completed_checks?: number | null | undefined;
  external_resources?:
    | Array<ExternalResourceEntity$Outbound>
    | null
    | undefined;
  functionalities?: Array<FunctionalityEntity$Outbound> | null | undefined;
  last_import?:
    | NullableImportsImportableResourceEntity$Outbound
    | null
    | undefined;
  links?: Array<LinksEntity$Outbound> | null | undefined;
  managed_by?: string | null | undefined;
  managed_by_settings?:
    | NullableServiceEntityManagedBySettings$Outbound
    | null
    | undefined;
  owner?: NullableTeamEntityLite$Outbound | null | undefined;
  service_checklist_updated_at?: string | null | undefined;
  teams?: Array<TeamEntityLite$Outbound> | null | undefined;
  updated_by?: NullableAuthorEntity$Outbound | null | undefined;
};

/** @internal */
export const NullableServiceEntity$outboundSchema: z.ZodType<
  NullableServiceEntity$Outbound,
  z.ZodTypeDef,
  NullableServiceEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  serviceTier: z.nullable(z.number().int()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  allowedParams: z.nullable(z.array(z.string())).optional(),
  labels: z.nullable(z.lazy(() => NullableServiceEntityLabels$outboundSchema))
    .optional(),
  alertOnAdd: z.nullable(z.boolean()).optional(),
  autoAddRespondingTeam: z.nullable(z.boolean()).optional(),
  activeIncidents: z.nullable(z.array(z.string())).optional(),
  checklists: z.nullable(z.array(ChecklistTemplateEntity$outboundSchema))
    .optional(),
  completedChecks: z.nullable(z.number().int()).optional(),
  externalResources: z.nullable(z.array(ExternalResourceEntity$outboundSchema))
    .optional(),
  functionalities: z.nullable(z.array(FunctionalityEntity$outboundSchema))
    .optional(),
  lastImport: z.nullable(NullableImportsImportableResourceEntity$outboundSchema)
    .optional(),
  links: z.nullable(z.array(LinksEntity$outboundSchema)).optional(),
  managedBy: z.nullable(z.string()).optional(),
  managedBySettings: z.nullable(
    z.lazy(() => NullableServiceEntityManagedBySettings$outboundSchema),
  ).optional(),
  owner: z.nullable(NullableTeamEntityLite$outboundSchema).optional(),
  serviceChecklistUpdatedAt: z.nullable(
    z.date().transform(v => v.toISOString()),
  ).optional(),
  teams: z.nullable(z.array(TeamEntityLite$outboundSchema)).optional(),
  updatedBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceTier: "service_tier",
    createdAt: "created_at",
    updatedAt: "updated_at",
    allowedParams: "allowed_params",
    alertOnAdd: "alert_on_add",
    autoAddRespondingTeam: "auto_add_responding_team",
    activeIncidents: "active_incidents",
    completedChecks: "completed_checks",
    externalResources: "external_resources",
    lastImport: "last_import",
    managedBy: "managed_by",
    managedBySettings: "managed_by_settings",
    serviceChecklistUpdatedAt: "service_checklist_updated_at",
    updatedBy: "updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableServiceEntity$ {
  /** @deprecated use `NullableServiceEntity$inboundSchema` instead. */
  export const inboundSchema = NullableServiceEntity$inboundSchema;
  /** @deprecated use `NullableServiceEntity$outboundSchema` instead. */
  export const outboundSchema = NullableServiceEntity$outboundSchema;
  /** @deprecated use `NullableServiceEntity$Outbound` instead. */
  export type Outbound = NullableServiceEntity$Outbound;
}

export function nullableServiceEntityToJSON(
  nullableServiceEntity: NullableServiceEntity,
): string {
  return JSON.stringify(
    NullableServiceEntity$outboundSchema.parse(nullableServiceEntity),
  );
}

export function nullableServiceEntityFromJSON(
  jsonString: string,
): SafeParseResult<NullableServiceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableServiceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableServiceEntity' from JSON`,
  );
}
