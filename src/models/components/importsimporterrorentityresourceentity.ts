/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ImportsImportErrorEntityResourceEntity = {
  resourceId?: string | undefined;
  resourceType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ImportsImportErrorEntityResourceEntity$inboundSchema: z.ZodType<
  ImportsImportErrorEntityResourceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_id: z.string().optional(),
  resource_type: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "resource_type": "resourceType",
  });
});

/** @internal */
export type ImportsImportErrorEntityResourceEntity$Outbound = {
  resource_id?: string | undefined;
  resource_type?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ImportsImportErrorEntityResourceEntity$outboundSchema: z.ZodType<
  ImportsImportErrorEntityResourceEntity$Outbound,
  z.ZodTypeDef,
  ImportsImportErrorEntityResourceEntity
> = z.object({
  resourceId: z.string().optional(),
  resourceType: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    resourceType: "resource_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportsImportErrorEntityResourceEntity$ {
  /** @deprecated use `ImportsImportErrorEntityResourceEntity$inboundSchema` instead. */
  export const inboundSchema =
    ImportsImportErrorEntityResourceEntity$inboundSchema;
  /** @deprecated use `ImportsImportErrorEntityResourceEntity$outboundSchema` instead. */
  export const outboundSchema =
    ImportsImportErrorEntityResourceEntity$outboundSchema;
  /** @deprecated use `ImportsImportErrorEntityResourceEntity$Outbound` instead. */
  export type Outbound = ImportsImportErrorEntityResourceEntity$Outbound;
}

export function importsImportErrorEntityResourceEntityToJSON(
  importsImportErrorEntityResourceEntity:
    ImportsImportErrorEntityResourceEntity,
): string {
  return JSON.stringify(
    ImportsImportErrorEntityResourceEntity$outboundSchema.parse(
      importsImportErrorEntityResourceEntity,
    ),
  );
}

export function importsImportErrorEntityResourceEntityFromJSON(
  jsonString: string,
): SafeParseResult<ImportsImportErrorEntityResourceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ImportsImportErrorEntityResourceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportsImportErrorEntityResourceEntity' from JSON`,
  );
}
