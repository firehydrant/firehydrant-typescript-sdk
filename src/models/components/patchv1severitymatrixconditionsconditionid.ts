/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a specific condition
 */
export type PatchV1SeverityMatrixConditionsConditionId = {
  name?: string | undefined;
  /**
   * Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition
   */
  position?: number | undefined;
};

/** @internal */
export const PatchV1SeverityMatrixConditionsConditionId$inboundSchema:
  z.ZodType<PatchV1SeverityMatrixConditionsConditionId, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string().optional(),
      position: z.number().int().optional(),
    });

/** @internal */
export type PatchV1SeverityMatrixConditionsConditionId$Outbound = {
  name?: string | undefined;
  position?: number | undefined;
};

/** @internal */
export const PatchV1SeverityMatrixConditionsConditionId$outboundSchema:
  z.ZodType<
    PatchV1SeverityMatrixConditionsConditionId$Outbound,
    z.ZodTypeDef,
    PatchV1SeverityMatrixConditionsConditionId
  > = z.object({
    name: z.string().optional(),
    position: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1SeverityMatrixConditionsConditionId$ {
  /** @deprecated use `PatchV1SeverityMatrixConditionsConditionId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1SeverityMatrixConditionsConditionId$inboundSchema;
  /** @deprecated use `PatchV1SeverityMatrixConditionsConditionId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1SeverityMatrixConditionsConditionId$outboundSchema;
  /** @deprecated use `PatchV1SeverityMatrixConditionsConditionId$Outbound` instead. */
  export type Outbound = PatchV1SeverityMatrixConditionsConditionId$Outbound;
}

export function patchV1SeverityMatrixConditionsConditionIdToJSON(
  patchV1SeverityMatrixConditionsConditionId:
    PatchV1SeverityMatrixConditionsConditionId,
): string {
  return JSON.stringify(
    PatchV1SeverityMatrixConditionsConditionId$outboundSchema.parse(
      patchV1SeverityMatrixConditionsConditionId,
    ),
  );
}

export function patchV1SeverityMatrixConditionsConditionIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1SeverityMatrixConditionsConditionId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1SeverityMatrixConditionsConditionId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1SeverityMatrixConditionsConditionId' from JSON`,
  );
}
