/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * IncidentRoleEntity model
 */
export type IncidentRoleEntity = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  discardedAt?: Date | undefined;
};

/** @internal */
export const IncidentRoleEntity$inboundSchema: z.ZodType<
  IncidentRoleEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  discarded_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "discarded_at": "discardedAt",
  });
});

/** @internal */
export type IncidentRoleEntity$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  summary?: string | undefined;
  description?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  discarded_at?: string | undefined;
};

/** @internal */
export const IncidentRoleEntity$outboundSchema: z.ZodType<
  IncidentRoleEntity$Outbound,
  z.ZodTypeDef,
  IncidentRoleEntity
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  description: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  discardedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    discardedAt: "discarded_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentRoleEntity$ {
  /** @deprecated use `IncidentRoleEntity$inboundSchema` instead. */
  export const inboundSchema = IncidentRoleEntity$inboundSchema;
  /** @deprecated use `IncidentRoleEntity$outboundSchema` instead. */
  export const outboundSchema = IncidentRoleEntity$outboundSchema;
  /** @deprecated use `IncidentRoleEntity$Outbound` instead. */
  export type Outbound = IncidentRoleEntity$Outbound;
}

export function incidentRoleEntityToJSON(
  incidentRoleEntity: IncidentRoleEntity,
): string {
  return JSON.stringify(
    IncidentRoleEntity$outboundSchema.parse(incidentRoleEntity),
  );
}

export function incidentRoleEntityFromJSON(
  jsonString: string,
): SafeParseResult<IncidentRoleEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentRoleEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentRoleEntity' from JSON`,
  );
}
