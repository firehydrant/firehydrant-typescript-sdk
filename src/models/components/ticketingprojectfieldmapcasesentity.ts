/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableTicketingProjectFieldMapExternalValueEntity,
  NullableTicketingProjectFieldMapExternalValueEntity$inboundSchema,
  NullableTicketingProjectFieldMapExternalValueEntity$Outbound,
  NullableTicketingProjectFieldMapExternalValueEntity$outboundSchema,
} from "./nullableticketingprojectfieldmapexternalvalueentity.js";

/**
 * An unstructured object of key/value pairs describing the logic for applying the rule.
 */
export type Logic = {};

export type TicketingProjectFieldMapCasesEntity = {
  /**
   * An unstructured object of key/value pairs describing the logic for applying the rule.
   */
  logic?: Logic | null | undefined;
  externalValue?:
    | NullableTicketingProjectFieldMapExternalValueEntity
    | null
    | undefined;
};

/** @internal */
export const Logic$inboundSchema: z.ZodType<Logic, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Logic$Outbound = {};

/** @internal */
export const Logic$outboundSchema: z.ZodType<
  Logic$Outbound,
  z.ZodTypeDef,
  Logic
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logic$ {
  /** @deprecated use `Logic$inboundSchema` instead. */
  export const inboundSchema = Logic$inboundSchema;
  /** @deprecated use `Logic$outboundSchema` instead. */
  export const outboundSchema = Logic$outboundSchema;
  /** @deprecated use `Logic$Outbound` instead. */
  export type Outbound = Logic$Outbound;
}

export function logicToJSON(logic: Logic): string {
  return JSON.stringify(Logic$outboundSchema.parse(logic));
}

export function logicFromJSON(
  jsonString: string,
): SafeParseResult<Logic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Logic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Logic' from JSON`,
  );
}

/** @internal */
export const TicketingProjectFieldMapCasesEntity$inboundSchema: z.ZodType<
  TicketingProjectFieldMapCasesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  logic: z.nullable(z.lazy(() => Logic$inboundSchema)).optional(),
  external_value: z.nullable(
    NullableTicketingProjectFieldMapExternalValueEntity$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_value": "externalValue",
  });
});

/** @internal */
export type TicketingProjectFieldMapCasesEntity$Outbound = {
  logic?: Logic$Outbound | null | undefined;
  external_value?:
    | NullableTicketingProjectFieldMapExternalValueEntity$Outbound
    | null
    | undefined;
};

/** @internal */
export const TicketingProjectFieldMapCasesEntity$outboundSchema: z.ZodType<
  TicketingProjectFieldMapCasesEntity$Outbound,
  z.ZodTypeDef,
  TicketingProjectFieldMapCasesEntity
> = z.object({
  logic: z.nullable(z.lazy(() => Logic$outboundSchema)).optional(),
  externalValue: z.nullable(
    NullableTicketingProjectFieldMapExternalValueEntity$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    externalValue: "external_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingProjectFieldMapCasesEntity$ {
  /** @deprecated use `TicketingProjectFieldMapCasesEntity$inboundSchema` instead. */
  export const inboundSchema =
    TicketingProjectFieldMapCasesEntity$inboundSchema;
  /** @deprecated use `TicketingProjectFieldMapCasesEntity$outboundSchema` instead. */
  export const outboundSchema =
    TicketingProjectFieldMapCasesEntity$outboundSchema;
  /** @deprecated use `TicketingProjectFieldMapCasesEntity$Outbound` instead. */
  export type Outbound = TicketingProjectFieldMapCasesEntity$Outbound;
}

export function ticketingProjectFieldMapCasesEntityToJSON(
  ticketingProjectFieldMapCasesEntity: TicketingProjectFieldMapCasesEntity,
): string {
  return JSON.stringify(
    TicketingProjectFieldMapCasesEntity$outboundSchema.parse(
      ticketingProjectFieldMapCasesEntity,
    ),
  );
}

export function ticketingProjectFieldMapCasesEntityFromJSON(
  jsonString: string,
): SafeParseResult<TicketingProjectFieldMapCasesEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingProjectFieldMapCasesEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingProjectFieldMapCasesEntity' from JSON`,
  );
}
