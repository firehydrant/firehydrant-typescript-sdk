/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Impact = {
  id: string;
  conditionId: string;
};

export type StatusPages = {
  id: string;
  integrationSlug: string;
};

/**
 * Allows updating an incident's impacted infrastructure, with the option to
 *
 * @remarks
 * move the incident into a different milestone and provide a note to update
 * the incident timeline and any attached status pages. If this method is
 * requested with the PUT verb, impacts will be completely replaced with the
 * information in the request body, even if not provided (effectively clearing
 * all impacts). If this method is requested with the PATCH verb, the provided
 * impacts will be added or updated, but no impacts will be removed.
 */
export type PutV1IncidentsIncidentIdImpact = {
  note?: string | undefined;
  milestone?: string | undefined;
  impact?: Array<Impact> | undefined;
  statusPages?: Array<StatusPages> | undefined;
};

/** @internal */
export const Impact$inboundSchema: z.ZodType<Impact, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    condition_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "condition_id": "conditionId",
    });
  });

/** @internal */
export type Impact$Outbound = {
  id: string;
  condition_id: string;
};

/** @internal */
export const Impact$outboundSchema: z.ZodType<
  Impact$Outbound,
  z.ZodTypeDef,
  Impact
> = z.object({
  id: z.string(),
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Impact$ {
  /** @deprecated use `Impact$inboundSchema` instead. */
  export const inboundSchema = Impact$inboundSchema;
  /** @deprecated use `Impact$outboundSchema` instead. */
  export const outboundSchema = Impact$outboundSchema;
  /** @deprecated use `Impact$Outbound` instead. */
  export type Outbound = Impact$Outbound;
}

export function impactToJSON(impact: Impact): string {
  return JSON.stringify(Impact$outboundSchema.parse(impact));
}

export function impactFromJSON(
  jsonString: string,
): SafeParseResult<Impact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Impact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Impact' from JSON`,
  );
}

/** @internal */
export const StatusPages$inboundSchema: z.ZodType<
  StatusPages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
  });
});

/** @internal */
export type StatusPages$Outbound = {
  id: string;
  integration_slug: string;
};

/** @internal */
export const StatusPages$outboundSchema: z.ZodType<
  StatusPages$Outbound,
  z.ZodTypeDef,
  StatusPages
> = z.object({
  id: z.string(),
  integrationSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusPages$ {
  /** @deprecated use `StatusPages$inboundSchema` instead. */
  export const inboundSchema = StatusPages$inboundSchema;
  /** @deprecated use `StatusPages$outboundSchema` instead. */
  export const outboundSchema = StatusPages$outboundSchema;
  /** @deprecated use `StatusPages$Outbound` instead. */
  export type Outbound = StatusPages$Outbound;
}

export function statusPagesToJSON(statusPages: StatusPages): string {
  return JSON.stringify(StatusPages$outboundSchema.parse(statusPages));
}

export function statusPagesFromJSON(
  jsonString: string,
): SafeParseResult<StatusPages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusPages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusPages' from JSON`,
  );
}

/** @internal */
export const PutV1IncidentsIncidentIdImpact$inboundSchema: z.ZodType<
  PutV1IncidentsIncidentIdImpact,
  z.ZodTypeDef,
  unknown
> = z.object({
  note: z.string().optional(),
  milestone: z.string().optional(),
  impact: z.array(z.lazy(() => Impact$inboundSchema)).optional(),
  status_pages: z.array(z.lazy(() => StatusPages$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_pages": "statusPages",
  });
});

/** @internal */
export type PutV1IncidentsIncidentIdImpact$Outbound = {
  note?: string | undefined;
  milestone?: string | undefined;
  impact?: Array<Impact$Outbound> | undefined;
  status_pages?: Array<StatusPages$Outbound> | undefined;
};

/** @internal */
export const PutV1IncidentsIncidentIdImpact$outboundSchema: z.ZodType<
  PutV1IncidentsIncidentIdImpact$Outbound,
  z.ZodTypeDef,
  PutV1IncidentsIncidentIdImpact
> = z.object({
  note: z.string().optional(),
  milestone: z.string().optional(),
  impact: z.array(z.lazy(() => Impact$outboundSchema)).optional(),
  statusPages: z.array(z.lazy(() => StatusPages$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1IncidentsIncidentIdImpact$ {
  /** @deprecated use `PutV1IncidentsIncidentIdImpact$inboundSchema` instead. */
  export const inboundSchema = PutV1IncidentsIncidentIdImpact$inboundSchema;
  /** @deprecated use `PutV1IncidentsIncidentIdImpact$outboundSchema` instead. */
  export const outboundSchema = PutV1IncidentsIncidentIdImpact$outboundSchema;
  /** @deprecated use `PutV1IncidentsIncidentIdImpact$Outbound` instead. */
  export type Outbound = PutV1IncidentsIncidentIdImpact$Outbound;
}

export function putV1IncidentsIncidentIdImpactToJSON(
  putV1IncidentsIncidentIdImpact: PutV1IncidentsIncidentIdImpact,
): string {
  return JSON.stringify(
    PutV1IncidentsIncidentIdImpact$outboundSchema.parse(
      putV1IncidentsIncidentIdImpact,
    ),
  );
}

export function putV1IncidentsIncidentIdImpactFromJSON(
  jsonString: string,
): SafeParseResult<PutV1IncidentsIncidentIdImpact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1IncidentsIncidentIdImpact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1IncidentsIncidentIdImpact' from JSON`,
  );
}
