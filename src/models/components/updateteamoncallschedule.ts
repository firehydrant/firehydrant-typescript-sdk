/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTeamOnCallScheduleMember = {
  /**
   * The ID of a user who should be added to the schedule's rotation. You can add a user to the schedule
   *
   * @remarks
   * multiple times to construct more complex rotations, and you can specify a `null` user ID to create
   * unassigned slots in the rotation.
   */
  userId?: string | null | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const UpdateTeamOnCallScheduleType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type UpdateTeamOnCallScheduleType = ClosedEnum<
  typeof UpdateTeamOnCallScheduleType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const UpdateTeamOnCallScheduleHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type UpdateTeamOnCallScheduleHandoffDay = ClosedEnum<
  typeof UpdateTeamOnCallScheduleHandoffDay
>;

/**
 * An object that specifies how the schedule's on-call shifts should be generated.
 */
export type UpdateTeamOnCallScheduleStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: UpdateTeamOnCallScheduleType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | null | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?: UpdateTeamOnCallScheduleHandoffDay | null | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | null | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const UpdateTeamOnCallScheduleStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type UpdateTeamOnCallScheduleStartDay = ClosedEnum<
  typeof UpdateTeamOnCallScheduleStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const UpdateTeamOnCallScheduleEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type UpdateTeamOnCallScheduleEndDay = ClosedEnum<
  typeof UpdateTeamOnCallScheduleEndDay
>;

export type UpdateTeamOnCallScheduleRestriction = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: UpdateTeamOnCallScheduleStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: UpdateTeamOnCallScheduleEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

/**
 * Update a Signals on-call schedule by ID
 */
export type UpdateTeamOnCallSchedule = {
  /**
   * The on-call schedule's name.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the on-call schedule.
   */
  description?: string | null | undefined;
  /**
   * The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.
   */
  timeZone?: string | null | undefined;
  /**
   * The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.
   */
  slackUserGroupId?: string | null | undefined;
  /**
   * An ordered list of objects that specify members of the on-call schedule's rotation.
   */
  members?: Array<UpdateTeamOnCallScheduleMember> | null | undefined;
  /**
   * An object that specifies how the schedule's on-call shifts should be generated.
   */
  strategy?: UpdateTeamOnCallScheduleStrategy | null | undefined;
  /**
   * A list of objects that restrict the schedule to speccific on-call periods.
   */
  restrictions?: Array<UpdateTeamOnCallScheduleRestriction> | null | undefined;
  /**
   * An ISO8601 time string specifying when the updated schedule should take effect. This
   *
   * @remarks
   * value must be provided if editing an attribute that would affect how the schedule's
   * shifts are generated, such as the time zone, members, strategy, or restrictions.
   */
  effectiveAt?: string | null | undefined;
  /**
   * A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.
   */
  color?: string | null | undefined;
  /**
   * This parameter is deprecated; use `members` instead.
   */
  memberIds?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateTeamOnCallScheduleMember$inboundSchema: z.ZodType<
  UpdateTeamOnCallScheduleMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type UpdateTeamOnCallScheduleMember$Outbound = {
  user_id?: string | null | undefined;
};

/** @internal */
export const UpdateTeamOnCallScheduleMember$outboundSchema: z.ZodType<
  UpdateTeamOnCallScheduleMember$Outbound,
  z.ZodTypeDef,
  UpdateTeamOnCallScheduleMember
> = z.object({
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleMember$ {
  /** @deprecated use `UpdateTeamOnCallScheduleMember$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallScheduleMember$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleMember$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamOnCallScheduleMember$outboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleMember$Outbound` instead. */
  export type Outbound = UpdateTeamOnCallScheduleMember$Outbound;
}

export function updateTeamOnCallScheduleMemberToJSON(
  updateTeamOnCallScheduleMember: UpdateTeamOnCallScheduleMember,
): string {
  return JSON.stringify(
    UpdateTeamOnCallScheduleMember$outboundSchema.parse(
      updateTeamOnCallScheduleMember,
    ),
  );
}

export function updateTeamOnCallScheduleMemberFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamOnCallScheduleMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamOnCallScheduleMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamOnCallScheduleMember' from JSON`,
  );
}

/** @internal */
export const UpdateTeamOnCallScheduleType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleType
> = z.nativeEnum(UpdateTeamOnCallScheduleType);

/** @internal */
export const UpdateTeamOnCallScheduleType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleType
> = UpdateTeamOnCallScheduleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleType$ {
  /** @deprecated use `UpdateTeamOnCallScheduleType$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallScheduleType$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleType$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamOnCallScheduleType$outboundSchema;
}

/** @internal */
export const UpdateTeamOnCallScheduleHandoffDay$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleHandoffDay
> = z.nativeEnum(UpdateTeamOnCallScheduleHandoffDay);

/** @internal */
export const UpdateTeamOnCallScheduleHandoffDay$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleHandoffDay
> = UpdateTeamOnCallScheduleHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleHandoffDay$ {
  /** @deprecated use `UpdateTeamOnCallScheduleHandoffDay$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallScheduleHandoffDay$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamOnCallScheduleHandoffDay$outboundSchema;
}

/** @internal */
export const UpdateTeamOnCallScheduleStrategy$inboundSchema: z.ZodType<
  UpdateTeamOnCallScheduleStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateTeamOnCallScheduleType$inboundSchema,
  handoff_time: z.nullable(z.string()).optional(),
  handoff_day: z.nullable(UpdateTeamOnCallScheduleHandoffDay$inboundSchema)
    .optional(),
  shift_duration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_time": "handoffTime",
    "handoff_day": "handoffDay",
    "shift_duration": "shiftDuration",
  });
});

/** @internal */
export type UpdateTeamOnCallScheduleStrategy$Outbound = {
  type: string;
  handoff_time?: string | null | undefined;
  handoff_day?: string | null | undefined;
  shift_duration?: string | null | undefined;
};

/** @internal */
export const UpdateTeamOnCallScheduleStrategy$outboundSchema: z.ZodType<
  UpdateTeamOnCallScheduleStrategy$Outbound,
  z.ZodTypeDef,
  UpdateTeamOnCallScheduleStrategy
> = z.object({
  type: UpdateTeamOnCallScheduleType$outboundSchema,
  handoffTime: z.nullable(z.string()).optional(),
  handoffDay: z.nullable(UpdateTeamOnCallScheduleHandoffDay$outboundSchema)
    .optional(),
  shiftDuration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffTime: "handoff_time",
    handoffDay: "handoff_day",
    shiftDuration: "shift_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleStrategy$ {
  /** @deprecated use `UpdateTeamOnCallScheduleStrategy$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallScheduleStrategy$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleStrategy$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamOnCallScheduleStrategy$outboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleStrategy$Outbound` instead. */
  export type Outbound = UpdateTeamOnCallScheduleStrategy$Outbound;
}

export function updateTeamOnCallScheduleStrategyToJSON(
  updateTeamOnCallScheduleStrategy: UpdateTeamOnCallScheduleStrategy,
): string {
  return JSON.stringify(
    UpdateTeamOnCallScheduleStrategy$outboundSchema.parse(
      updateTeamOnCallScheduleStrategy,
    ),
  );
}

export function updateTeamOnCallScheduleStrategyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamOnCallScheduleStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamOnCallScheduleStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamOnCallScheduleStrategy' from JSON`,
  );
}

/** @internal */
export const UpdateTeamOnCallScheduleStartDay$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleStartDay
> = z.nativeEnum(UpdateTeamOnCallScheduleStartDay);

/** @internal */
export const UpdateTeamOnCallScheduleStartDay$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleStartDay
> = UpdateTeamOnCallScheduleStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleStartDay$ {
  /** @deprecated use `UpdateTeamOnCallScheduleStartDay$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallScheduleStartDay$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleStartDay$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamOnCallScheduleStartDay$outboundSchema;
}

/** @internal */
export const UpdateTeamOnCallScheduleEndDay$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleEndDay
> = z.nativeEnum(UpdateTeamOnCallScheduleEndDay);

/** @internal */
export const UpdateTeamOnCallScheduleEndDay$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamOnCallScheduleEndDay
> = UpdateTeamOnCallScheduleEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleEndDay$ {
  /** @deprecated use `UpdateTeamOnCallScheduleEndDay$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallScheduleEndDay$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleEndDay$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamOnCallScheduleEndDay$outboundSchema;
}

/** @internal */
export const UpdateTeamOnCallScheduleRestriction$inboundSchema: z.ZodType<
  UpdateTeamOnCallScheduleRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_day: UpdateTeamOnCallScheduleStartDay$inboundSchema,
  start_time: z.string(),
  end_day: UpdateTeamOnCallScheduleEndDay$inboundSchema,
  end_time: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_day": "startDay",
    "start_time": "startTime",
    "end_day": "endDay",
    "end_time": "endTime",
  });
});

/** @internal */
export type UpdateTeamOnCallScheduleRestriction$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const UpdateTeamOnCallScheduleRestriction$outboundSchema: z.ZodType<
  UpdateTeamOnCallScheduleRestriction$Outbound,
  z.ZodTypeDef,
  UpdateTeamOnCallScheduleRestriction
> = z.object({
  startDay: UpdateTeamOnCallScheduleStartDay$outboundSchema,
  startTime: z.string(),
  endDay: UpdateTeamOnCallScheduleEndDay$outboundSchema,
  endTime: z.string(),
}).transform((v) => {
  return remap$(v, {
    startDay: "start_day",
    startTime: "start_time",
    endDay: "end_day",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallScheduleRestriction$ {
  /** @deprecated use `UpdateTeamOnCallScheduleRestriction$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTeamOnCallScheduleRestriction$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleRestriction$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTeamOnCallScheduleRestriction$outboundSchema;
  /** @deprecated use `UpdateTeamOnCallScheduleRestriction$Outbound` instead. */
  export type Outbound = UpdateTeamOnCallScheduleRestriction$Outbound;
}

export function updateTeamOnCallScheduleRestrictionToJSON(
  updateTeamOnCallScheduleRestriction: UpdateTeamOnCallScheduleRestriction,
): string {
  return JSON.stringify(
    UpdateTeamOnCallScheduleRestriction$outboundSchema.parse(
      updateTeamOnCallScheduleRestriction,
    ),
  );
}

export function updateTeamOnCallScheduleRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamOnCallScheduleRestriction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTeamOnCallScheduleRestriction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamOnCallScheduleRestriction' from JSON`,
  );
}

/** @internal */
export const UpdateTeamOnCallSchedule$inboundSchema: z.ZodType<
  UpdateTeamOnCallSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  time_zone: z.nullable(z.string()).optional(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => UpdateTeamOnCallScheduleMember$inboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => UpdateTeamOnCallScheduleStrategy$inboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(z.lazy(() => UpdateTeamOnCallScheduleRestriction$inboundSchema)),
  ).optional(),
  effective_at: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  member_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "effective_at": "effectiveAt",
    "member_ids": "memberIds",
  });
});

/** @internal */
export type UpdateTeamOnCallSchedule$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  time_zone?: string | null | undefined;
  slack_user_group_id?: string | null | undefined;
  members?: Array<UpdateTeamOnCallScheduleMember$Outbound> | null | undefined;
  strategy?: UpdateTeamOnCallScheduleStrategy$Outbound | null | undefined;
  restrictions?:
    | Array<UpdateTeamOnCallScheduleRestriction$Outbound>
    | null
    | undefined;
  effective_at?: string | null | undefined;
  color?: string | null | undefined;
  member_ids?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateTeamOnCallSchedule$outboundSchema: z.ZodType<
  UpdateTeamOnCallSchedule$Outbound,
  z.ZodTypeDef,
  UpdateTeamOnCallSchedule
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  timeZone: z.nullable(z.string()).optional(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => UpdateTeamOnCallScheduleMember$outboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => UpdateTeamOnCallScheduleStrategy$outboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(z.lazy(() => UpdateTeamOnCallScheduleRestriction$outboundSchema)),
  ).optional(),
  effectiveAt: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  memberIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    effectiveAt: "effective_at",
    memberIds: "member_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamOnCallSchedule$ {
  /** @deprecated use `UpdateTeamOnCallSchedule$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamOnCallSchedule$inboundSchema;
  /** @deprecated use `UpdateTeamOnCallSchedule$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamOnCallSchedule$outboundSchema;
  /** @deprecated use `UpdateTeamOnCallSchedule$Outbound` instead. */
  export type Outbound = UpdateTeamOnCallSchedule$Outbound;
}

export function updateTeamOnCallScheduleToJSON(
  updateTeamOnCallSchedule: UpdateTeamOnCallSchedule,
): string {
  return JSON.stringify(
    UpdateTeamOnCallSchedule$outboundSchema.parse(updateTeamOnCallSchedule),
  );
}

export function updateTeamOnCallScheduleFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamOnCallSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamOnCallSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamOnCallSchedule' from JSON`,
  );
}
