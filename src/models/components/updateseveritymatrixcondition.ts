/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a severity matrix condition
 */
export type UpdateSeverityMatrixCondition = {
  name?: string | null | undefined;
  /**
   * Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition
   */
  position?: number | null | undefined;
};

/** @internal */
export const UpdateSeverityMatrixCondition$inboundSchema: z.ZodType<
  UpdateSeverityMatrixCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type UpdateSeverityMatrixCondition$Outbound = {
  name?: string | null | undefined;
  position?: number | null | undefined;
};

/** @internal */
export const UpdateSeverityMatrixCondition$outboundSchema: z.ZodType<
  UpdateSeverityMatrixCondition$Outbound,
  z.ZodTypeDef,
  UpdateSeverityMatrixCondition
> = z.object({
  name: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeverityMatrixCondition$ {
  /** @deprecated use `UpdateSeverityMatrixCondition$inboundSchema` instead. */
  export const inboundSchema = UpdateSeverityMatrixCondition$inboundSchema;
  /** @deprecated use `UpdateSeverityMatrixCondition$outboundSchema` instead. */
  export const outboundSchema = UpdateSeverityMatrixCondition$outboundSchema;
  /** @deprecated use `UpdateSeverityMatrixCondition$Outbound` instead. */
  export type Outbound = UpdateSeverityMatrixCondition$Outbound;
}

export function updateSeverityMatrixConditionToJSON(
  updateSeverityMatrixCondition: UpdateSeverityMatrixCondition,
): string {
  return JSON.stringify(
    UpdateSeverityMatrixCondition$outboundSchema.parse(
      updateSeverityMatrixCondition,
    ),
  );
}

export function updateSeverityMatrixConditionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSeverityMatrixCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSeverityMatrixCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSeverityMatrixCondition' from JSON`,
  );
}
