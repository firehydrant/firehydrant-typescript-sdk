/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NuncConditionEntity = {
  nuncCondition?: string | undefined;
  conditionName?: string | undefined;
  conditionId?: string | undefined;
};

/** @internal */
export const NuncConditionEntity$inboundSchema: z.ZodType<
  NuncConditionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_condition: z.string().optional(),
  condition_name: z.string().optional(),
  condition_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "nunc_condition": "nuncCondition",
    "condition_name": "conditionName",
    "condition_id": "conditionId",
  });
});

/** @internal */
export type NuncConditionEntity$Outbound = {
  nunc_condition?: string | undefined;
  condition_name?: string | undefined;
  condition_id?: string | undefined;
};

/** @internal */
export const NuncConditionEntity$outboundSchema: z.ZodType<
  NuncConditionEntity$Outbound,
  z.ZodTypeDef,
  NuncConditionEntity
> = z.object({
  nuncCondition: z.string().optional(),
  conditionName: z.string().optional(),
  conditionId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    nuncCondition: "nunc_condition",
    conditionName: "condition_name",
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NuncConditionEntity$ {
  /** @deprecated use `NuncConditionEntity$inboundSchema` instead. */
  export const inboundSchema = NuncConditionEntity$inboundSchema;
  /** @deprecated use `NuncConditionEntity$outboundSchema` instead. */
  export const outboundSchema = NuncConditionEntity$outboundSchema;
  /** @deprecated use `NuncConditionEntity$Outbound` instead. */
  export type Outbound = NuncConditionEntity$Outbound;
}

export function nuncConditionEntityToJSON(
  nuncConditionEntity: NuncConditionEntity,
): string {
  return JSON.stringify(
    NuncConditionEntity$outboundSchema.parse(nuncConditionEntity),
  );
}

export function nuncConditionEntityFromJSON(
  jsonString: string,
): SafeParseResult<NuncConditionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NuncConditionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NuncConditionEntity' from JSON`,
  );
}
