/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchScimUserOperation = {
  /**
   * The operation to perform on the user. Options are add, remove, replace
   */
  op: string;
  /**
   * The path to the attribute to be modified. Optional for Okta OIN format where value contains the full update object
   */
  path?: string | null | undefined;
};

/**
 * PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.
 */
export type PatchScimUser = {
  /**
   * An optional trail to log the request
   */
  trail?: string | null | undefined;
  /**
   * An array of operations to perform on the user
   */
  operations: Array<PatchScimUserOperation>;
};

/** @internal */
export const PatchScimUserOperation$inboundSchema: z.ZodType<
  PatchScimUserOperation,
  z.ZodTypeDef,
  unknown
> = z.object({
  op: z.string(),
  path: z.nullable(z.string()).optional(),
});

/** @internal */
export type PatchScimUserOperation$Outbound = {
  op: string;
  path?: string | null | undefined;
};

/** @internal */
export const PatchScimUserOperation$outboundSchema: z.ZodType<
  PatchScimUserOperation$Outbound,
  z.ZodTypeDef,
  PatchScimUserOperation
> = z.object({
  op: z.string(),
  path: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchScimUserOperation$ {
  /** @deprecated use `PatchScimUserOperation$inboundSchema` instead. */
  export const inboundSchema = PatchScimUserOperation$inboundSchema;
  /** @deprecated use `PatchScimUserOperation$outboundSchema` instead. */
  export const outboundSchema = PatchScimUserOperation$outboundSchema;
  /** @deprecated use `PatchScimUserOperation$Outbound` instead. */
  export type Outbound = PatchScimUserOperation$Outbound;
}

export function patchScimUserOperationToJSON(
  patchScimUserOperation: PatchScimUserOperation,
): string {
  return JSON.stringify(
    PatchScimUserOperation$outboundSchema.parse(patchScimUserOperation),
  );
}

export function patchScimUserOperationFromJSON(
  jsonString: string,
): SafeParseResult<PatchScimUserOperation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchScimUserOperation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchScimUserOperation' from JSON`,
  );
}

/** @internal */
export const PatchScimUser$inboundSchema: z.ZodType<
  PatchScimUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  trail: z.nullable(z.string()).optional(),
  Operations: z.array(z.lazy(() => PatchScimUserOperation$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "Operations": "operations",
  });
});

/** @internal */
export type PatchScimUser$Outbound = {
  trail?: string | null | undefined;
  Operations: Array<PatchScimUserOperation$Outbound>;
};

/** @internal */
export const PatchScimUser$outboundSchema: z.ZodType<
  PatchScimUser$Outbound,
  z.ZodTypeDef,
  PatchScimUser
> = z.object({
  trail: z.nullable(z.string()).optional(),
  operations: z.array(z.lazy(() => PatchScimUserOperation$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    operations: "Operations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchScimUser$ {
  /** @deprecated use `PatchScimUser$inboundSchema` instead. */
  export const inboundSchema = PatchScimUser$inboundSchema;
  /** @deprecated use `PatchScimUser$outboundSchema` instead. */
  export const outboundSchema = PatchScimUser$outboundSchema;
  /** @deprecated use `PatchScimUser$Outbound` instead. */
  export type Outbound = PatchScimUser$Outbound;
}

export function patchScimUserToJSON(patchScimUser: PatchScimUser): string {
  return JSON.stringify(PatchScimUser$outboundSchema.parse(patchScimUser));
}

export function patchScimUserFromJSON(
  jsonString: string,
): SafeParseResult<PatchScimUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchScimUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchScimUser' from JSON`,
  );
}
