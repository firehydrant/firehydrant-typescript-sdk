/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * MS Teams channel identity for channel associated with this team
 */
export type MsTeamsChannel = {
  channelId: string;
  msTeamId: string;
};

export type Memberships = {
  userId?: string | undefined;
  scheduleId?: string | undefined;
  /**
   * An incident role ID that this user will automatically assigned if this team is assigned to an incident
   */
  incidentRoleId?: string | undefined;
};

/**
 * Create a new team
 */
export type PostV1Teams = {
  name: string;
  description?: string | undefined;
  slug?: string | undefined;
  /**
   * The Slack channel ID that this team is associated with
   */
  slackChannelId?: string | undefined;
  /**
   * MS Teams channel identity for channel associated with this team
   */
  msTeamsChannel?: MsTeamsChannel | undefined;
  memberships?: Array<Memberships> | undefined;
};

/** @internal */
export const MsTeamsChannel$inboundSchema: z.ZodType<
  MsTeamsChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  ms_team_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "ms_team_id": "msTeamId",
  });
});

/** @internal */
export type MsTeamsChannel$Outbound = {
  channel_id: string;
  ms_team_id: string;
};

/** @internal */
export const MsTeamsChannel$outboundSchema: z.ZodType<
  MsTeamsChannel$Outbound,
  z.ZodTypeDef,
  MsTeamsChannel
> = z.object({
  channelId: z.string(),
  msTeamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    msTeamId: "ms_team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MsTeamsChannel$ {
  /** @deprecated use `MsTeamsChannel$inboundSchema` instead. */
  export const inboundSchema = MsTeamsChannel$inboundSchema;
  /** @deprecated use `MsTeamsChannel$outboundSchema` instead. */
  export const outboundSchema = MsTeamsChannel$outboundSchema;
  /** @deprecated use `MsTeamsChannel$Outbound` instead. */
  export type Outbound = MsTeamsChannel$Outbound;
}

export function msTeamsChannelToJSON(msTeamsChannel: MsTeamsChannel): string {
  return JSON.stringify(MsTeamsChannel$outboundSchema.parse(msTeamsChannel));
}

export function msTeamsChannelFromJSON(
  jsonString: string,
): SafeParseResult<MsTeamsChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MsTeamsChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MsTeamsChannel' from JSON`,
  );
}

/** @internal */
export const Memberships$inboundSchema: z.ZodType<
  Memberships,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  schedule_id: z.string().optional(),
  incident_role_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "schedule_id": "scheduleId",
    "incident_role_id": "incidentRoleId",
  });
});

/** @internal */
export type Memberships$Outbound = {
  user_id?: string | undefined;
  schedule_id?: string | undefined;
  incident_role_id?: string | undefined;
};

/** @internal */
export const Memberships$outboundSchema: z.ZodType<
  Memberships$Outbound,
  z.ZodTypeDef,
  Memberships
> = z.object({
  userId: z.string().optional(),
  scheduleId: z.string().optional(),
  incidentRoleId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    scheduleId: "schedule_id",
    incidentRoleId: "incident_role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Memberships$ {
  /** @deprecated use `Memberships$inboundSchema` instead. */
  export const inboundSchema = Memberships$inboundSchema;
  /** @deprecated use `Memberships$outboundSchema` instead. */
  export const outboundSchema = Memberships$outboundSchema;
  /** @deprecated use `Memberships$Outbound` instead. */
  export type Outbound = Memberships$Outbound;
}

export function membershipsToJSON(memberships: Memberships): string {
  return JSON.stringify(Memberships$outboundSchema.parse(memberships));
}

export function membershipsFromJSON(
  jsonString: string,
): SafeParseResult<Memberships, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Memberships$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Memberships' from JSON`,
  );
}

/** @internal */
export const PostV1Teams$inboundSchema: z.ZodType<
  PostV1Teams,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  slug: z.string().optional(),
  slack_channel_id: z.string().optional(),
  ms_teams_channel: z.lazy(() => MsTeamsChannel$inboundSchema).optional(),
  memberships: z.array(z.lazy(() => Memberships$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "slack_channel_id": "slackChannelId",
    "ms_teams_channel": "msTeamsChannel",
  });
});

/** @internal */
export type PostV1Teams$Outbound = {
  name: string;
  description?: string | undefined;
  slug?: string | undefined;
  slack_channel_id?: string | undefined;
  ms_teams_channel?: MsTeamsChannel$Outbound | undefined;
  memberships?: Array<Memberships$Outbound> | undefined;
};

/** @internal */
export const PostV1Teams$outboundSchema: z.ZodType<
  PostV1Teams$Outbound,
  z.ZodTypeDef,
  PostV1Teams
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  slug: z.string().optional(),
  slackChannelId: z.string().optional(),
  msTeamsChannel: z.lazy(() => MsTeamsChannel$outboundSchema).optional(),
  memberships: z.array(z.lazy(() => Memberships$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    slackChannelId: "slack_channel_id",
    msTeamsChannel: "ms_teams_channel",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1Teams$ {
  /** @deprecated use `PostV1Teams$inboundSchema` instead. */
  export const inboundSchema = PostV1Teams$inboundSchema;
  /** @deprecated use `PostV1Teams$outboundSchema` instead. */
  export const outboundSchema = PostV1Teams$outboundSchema;
  /** @deprecated use `PostV1Teams$Outbound` instead. */
  export type Outbound = PostV1Teams$Outbound;
}

export function postV1TeamsToJSON(postV1Teams: PostV1Teams): string {
  return JSON.stringify(PostV1Teams$outboundSchema.parse(postV1Teams));
}

export function postV1TeamsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1Teams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1Teams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1Teams' from JSON`,
  );
}
