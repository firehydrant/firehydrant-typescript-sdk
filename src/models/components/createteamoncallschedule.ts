/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTeamOnCallScheduleMember = {
  /**
   * The ID of a user who should be added to the schedule's initial rotation. You can add a user to the
   *
   * @remarks
   * schedule multiple times to construct more complex rotations, and you can specify a `null` user ID
   * to create unassigned slots in the rotation.
   */
  userId?: string | null | undefined;
};

/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export const CreateTeamOnCallScheduleType = {
  Daily: "daily",
  Weekly: "weekly",
  Custom: "custom",
} as const;
/**
 * The type of strategy. Must be one of "daily", "weekly", or "custom".
 */
export type CreateTeamOnCallScheduleType = ClosedEnum<
  typeof CreateTeamOnCallScheduleType
>;

/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export const CreateTeamOnCallScheduleHandoffDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
 */
export type CreateTeamOnCallScheduleHandoffDay = ClosedEnum<
  typeof CreateTeamOnCallScheduleHandoffDay
>;

/**
 * An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
 */
export type CreateTeamOnCallScheduleStrategy = {
  /**
   * The type of strategy. Must be one of "daily", "weekly", or "custom".
   */
  type: CreateTeamOnCallScheduleType;
  /**
   * An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
   */
  handoffTime?: string | null | undefined;
  /**
   * The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
   */
  handoffDay?: CreateTeamOnCallScheduleHandoffDay | null | undefined;
  /**
   * An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
   */
  shiftDuration?: string | null | undefined;
};

/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const CreateTeamOnCallScheduleStartDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type CreateTeamOnCallScheduleStartDay = ClosedEnum<
  typeof CreateTeamOnCallScheduleStartDay
>;

/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export const CreateTeamOnCallScheduleEndDay = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
/**
 * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
 */
export type CreateTeamOnCallScheduleEndDay = ClosedEnum<
  typeof CreateTeamOnCallScheduleEndDay
>;

export type CreateTeamOnCallScheduleRestriction = {
  /**
   * The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  startDay: CreateTeamOnCallScheduleStartDay;
  /**
   * An ISO8601 time string specifying when the restriction should start.
   */
  startTime: string;
  /**
   * The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
   */
  endDay: CreateTeamOnCallScheduleEndDay;
  /**
   * An ISO8601 time string specifying when the restriction should end.
   */
  endTime: string;
};

/**
 * Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.
 */
export type CreateTeamOnCallSchedule = {
  /**
   * The on-call schedule's name.
   */
  name: string;
  /**
   * A detailed description of the on-call schedule.
   */
  description?: string | null | undefined;
  /**
   * An optional name for the initial rotation. If not provided, the schedule's name will be used.
   */
  rotationName?: string | null | undefined;
  /**
   * An optional description for the initial rotation. If not provided, the schedule's description will be used.
   */
  rotationDescription?: string | null | undefined;
  /**
   * A hex color code that will be used to represent the initial rotation in FireHydrant's UI.
   */
  color?: string | null | undefined;
  /**
   * The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if `rotations` is not.
   */
  timeZone?: string | null | undefined;
  /**
   * The ID of a Slack user group to sync the initial rotation's on-call members to.
   */
  slackUserGroupId?: string | null | undefined;
  /**
   * An ordered list of objects that specify members of the initial rotation.
   */
  members?: Array<CreateTeamOnCallScheduleMember> | null | undefined;
  /**
   * An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
   */
  strategy?: CreateTeamOnCallScheduleStrategy | null | undefined;
  /**
   * A list of objects that restrict the initial rotation to specific on-call periods.
   */
  restrictions?: Array<CreateTeamOnCallScheduleRestriction> | null | undefined;
  /**
   * An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
   */
  startTime?: string | null | undefined;
  /**
   * This parameter is deprecated; use `members` instead.
   */
  memberIds?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTeamOnCallScheduleMember$inboundSchema: z.ZodType<
  CreateTeamOnCallScheduleMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type CreateTeamOnCallScheduleMember$Outbound = {
  user_id?: string | null | undefined;
};

/** @internal */
export const CreateTeamOnCallScheduleMember$outboundSchema: z.ZodType<
  CreateTeamOnCallScheduleMember$Outbound,
  z.ZodTypeDef,
  CreateTeamOnCallScheduleMember
> = z.object({
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleMember$ {
  /** @deprecated use `CreateTeamOnCallScheduleMember$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallScheduleMember$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleMember$outboundSchema` instead. */
  export const outboundSchema = CreateTeamOnCallScheduleMember$outboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleMember$Outbound` instead. */
  export type Outbound = CreateTeamOnCallScheduleMember$Outbound;
}

export function createTeamOnCallScheduleMemberToJSON(
  createTeamOnCallScheduleMember: CreateTeamOnCallScheduleMember,
): string {
  return JSON.stringify(
    CreateTeamOnCallScheduleMember$outboundSchema.parse(
      createTeamOnCallScheduleMember,
    ),
  );
}

export function createTeamOnCallScheduleMemberFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamOnCallScheduleMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamOnCallScheduleMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamOnCallScheduleMember' from JSON`,
  );
}

/** @internal */
export const CreateTeamOnCallScheduleType$inboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleType
> = z.nativeEnum(CreateTeamOnCallScheduleType);

/** @internal */
export const CreateTeamOnCallScheduleType$outboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleType
> = CreateTeamOnCallScheduleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleType$ {
  /** @deprecated use `CreateTeamOnCallScheduleType$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallScheduleType$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleType$outboundSchema` instead. */
  export const outboundSchema = CreateTeamOnCallScheduleType$outboundSchema;
}

/** @internal */
export const CreateTeamOnCallScheduleHandoffDay$inboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleHandoffDay
> = z.nativeEnum(CreateTeamOnCallScheduleHandoffDay);

/** @internal */
export const CreateTeamOnCallScheduleHandoffDay$outboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleHandoffDay
> = CreateTeamOnCallScheduleHandoffDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleHandoffDay$ {
  /** @deprecated use `CreateTeamOnCallScheduleHandoffDay$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallScheduleHandoffDay$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleHandoffDay$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamOnCallScheduleHandoffDay$outboundSchema;
}

/** @internal */
export const CreateTeamOnCallScheduleStrategy$inboundSchema: z.ZodType<
  CreateTeamOnCallScheduleStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateTeamOnCallScheduleType$inboundSchema,
  handoff_time: z.nullable(z.string()).optional(),
  handoff_day: z.nullable(CreateTeamOnCallScheduleHandoffDay$inboundSchema)
    .optional(),
  shift_duration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "handoff_time": "handoffTime",
    "handoff_day": "handoffDay",
    "shift_duration": "shiftDuration",
  });
});

/** @internal */
export type CreateTeamOnCallScheduleStrategy$Outbound = {
  type: string;
  handoff_time?: string | null | undefined;
  handoff_day?: string | null | undefined;
  shift_duration?: string | null | undefined;
};

/** @internal */
export const CreateTeamOnCallScheduleStrategy$outboundSchema: z.ZodType<
  CreateTeamOnCallScheduleStrategy$Outbound,
  z.ZodTypeDef,
  CreateTeamOnCallScheduleStrategy
> = z.object({
  type: CreateTeamOnCallScheduleType$outboundSchema,
  handoffTime: z.nullable(z.string()).optional(),
  handoffDay: z.nullable(CreateTeamOnCallScheduleHandoffDay$outboundSchema)
    .optional(),
  shiftDuration: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    handoffTime: "handoff_time",
    handoffDay: "handoff_day",
    shiftDuration: "shift_duration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleStrategy$ {
  /** @deprecated use `CreateTeamOnCallScheduleStrategy$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallScheduleStrategy$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleStrategy$outboundSchema` instead. */
  export const outboundSchema = CreateTeamOnCallScheduleStrategy$outboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleStrategy$Outbound` instead. */
  export type Outbound = CreateTeamOnCallScheduleStrategy$Outbound;
}

export function createTeamOnCallScheduleStrategyToJSON(
  createTeamOnCallScheduleStrategy: CreateTeamOnCallScheduleStrategy,
): string {
  return JSON.stringify(
    CreateTeamOnCallScheduleStrategy$outboundSchema.parse(
      createTeamOnCallScheduleStrategy,
    ),
  );
}

export function createTeamOnCallScheduleStrategyFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamOnCallScheduleStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamOnCallScheduleStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamOnCallScheduleStrategy' from JSON`,
  );
}

/** @internal */
export const CreateTeamOnCallScheduleStartDay$inboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleStartDay
> = z.nativeEnum(CreateTeamOnCallScheduleStartDay);

/** @internal */
export const CreateTeamOnCallScheduleStartDay$outboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleStartDay
> = CreateTeamOnCallScheduleStartDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleStartDay$ {
  /** @deprecated use `CreateTeamOnCallScheduleStartDay$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallScheduleStartDay$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleStartDay$outboundSchema` instead. */
  export const outboundSchema = CreateTeamOnCallScheduleStartDay$outboundSchema;
}

/** @internal */
export const CreateTeamOnCallScheduleEndDay$inboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleEndDay
> = z.nativeEnum(CreateTeamOnCallScheduleEndDay);

/** @internal */
export const CreateTeamOnCallScheduleEndDay$outboundSchema: z.ZodNativeEnum<
  typeof CreateTeamOnCallScheduleEndDay
> = CreateTeamOnCallScheduleEndDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleEndDay$ {
  /** @deprecated use `CreateTeamOnCallScheduleEndDay$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallScheduleEndDay$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleEndDay$outboundSchema` instead. */
  export const outboundSchema = CreateTeamOnCallScheduleEndDay$outboundSchema;
}

/** @internal */
export const CreateTeamOnCallScheduleRestriction$inboundSchema: z.ZodType<
  CreateTeamOnCallScheduleRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_day: CreateTeamOnCallScheduleStartDay$inboundSchema,
  start_time: z.string(),
  end_day: CreateTeamOnCallScheduleEndDay$inboundSchema,
  end_time: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_day": "startDay",
    "start_time": "startTime",
    "end_day": "endDay",
    "end_time": "endTime",
  });
});

/** @internal */
export type CreateTeamOnCallScheduleRestriction$Outbound = {
  start_day: string;
  start_time: string;
  end_day: string;
  end_time: string;
};

/** @internal */
export const CreateTeamOnCallScheduleRestriction$outboundSchema: z.ZodType<
  CreateTeamOnCallScheduleRestriction$Outbound,
  z.ZodTypeDef,
  CreateTeamOnCallScheduleRestriction
> = z.object({
  startDay: CreateTeamOnCallScheduleStartDay$outboundSchema,
  startTime: z.string(),
  endDay: CreateTeamOnCallScheduleEndDay$outboundSchema,
  endTime: z.string(),
}).transform((v) => {
  return remap$(v, {
    startDay: "start_day",
    startTime: "start_time",
    endDay: "end_day",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallScheduleRestriction$ {
  /** @deprecated use `CreateTeamOnCallScheduleRestriction$inboundSchema` instead. */
  export const inboundSchema =
    CreateTeamOnCallScheduleRestriction$inboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleRestriction$outboundSchema` instead. */
  export const outboundSchema =
    CreateTeamOnCallScheduleRestriction$outboundSchema;
  /** @deprecated use `CreateTeamOnCallScheduleRestriction$Outbound` instead. */
  export type Outbound = CreateTeamOnCallScheduleRestriction$Outbound;
}

export function createTeamOnCallScheduleRestrictionToJSON(
  createTeamOnCallScheduleRestriction: CreateTeamOnCallScheduleRestriction,
): string {
  return JSON.stringify(
    CreateTeamOnCallScheduleRestriction$outboundSchema.parse(
      createTeamOnCallScheduleRestriction,
    ),
  );
}

export function createTeamOnCallScheduleRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamOnCallScheduleRestriction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTeamOnCallScheduleRestriction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamOnCallScheduleRestriction' from JSON`,
  );
}

/** @internal */
export const CreateTeamOnCallSchedule$inboundSchema: z.ZodType<
  CreateTeamOnCallSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  rotation_name: z.nullable(z.string()).optional(),
  rotation_description: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  time_zone: z.nullable(z.string()).optional(),
  slack_user_group_id: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => CreateTeamOnCallScheduleMember$inboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => CreateTeamOnCallScheduleStrategy$inboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(z.lazy(() => CreateTeamOnCallScheduleRestriction$inboundSchema)),
  ).optional(),
  start_time: z.nullable(z.string()).optional(),
  member_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "rotation_name": "rotationName",
    "rotation_description": "rotationDescription",
    "time_zone": "timeZone",
    "slack_user_group_id": "slackUserGroupId",
    "start_time": "startTime",
    "member_ids": "memberIds",
  });
});

/** @internal */
export type CreateTeamOnCallSchedule$Outbound = {
  name: string;
  description?: string | null | undefined;
  rotation_name?: string | null | undefined;
  rotation_description?: string | null | undefined;
  color?: string | null | undefined;
  time_zone?: string | null | undefined;
  slack_user_group_id?: string | null | undefined;
  members?: Array<CreateTeamOnCallScheduleMember$Outbound> | null | undefined;
  strategy?: CreateTeamOnCallScheduleStrategy$Outbound | null | undefined;
  restrictions?:
    | Array<CreateTeamOnCallScheduleRestriction$Outbound>
    | null
    | undefined;
  start_time?: string | null | undefined;
  member_ids?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTeamOnCallSchedule$outboundSchema: z.ZodType<
  CreateTeamOnCallSchedule$Outbound,
  z.ZodTypeDef,
  CreateTeamOnCallSchedule
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  rotationName: z.nullable(z.string()).optional(),
  rotationDescription: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  timeZone: z.nullable(z.string()).optional(),
  slackUserGroupId: z.nullable(z.string()).optional(),
  members: z.nullable(
    z.array(z.lazy(() => CreateTeamOnCallScheduleMember$outboundSchema)),
  ).optional(),
  strategy: z.nullable(
    z.lazy(() => CreateTeamOnCallScheduleStrategy$outboundSchema),
  ).optional(),
  restrictions: z.nullable(
    z.array(z.lazy(() => CreateTeamOnCallScheduleRestriction$outboundSchema)),
  ).optional(),
  startTime: z.nullable(z.string()).optional(),
  memberIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    rotationName: "rotation_name",
    rotationDescription: "rotation_description",
    timeZone: "time_zone",
    slackUserGroupId: "slack_user_group_id",
    startTime: "start_time",
    memberIds: "member_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamOnCallSchedule$ {
  /** @deprecated use `CreateTeamOnCallSchedule$inboundSchema` instead. */
  export const inboundSchema = CreateTeamOnCallSchedule$inboundSchema;
  /** @deprecated use `CreateTeamOnCallSchedule$outboundSchema` instead. */
  export const outboundSchema = CreateTeamOnCallSchedule$outboundSchema;
  /** @deprecated use `CreateTeamOnCallSchedule$Outbound` instead. */
  export type Outbound = CreateTeamOnCallSchedule$Outbound;
}

export function createTeamOnCallScheduleToJSON(
  createTeamOnCallSchedule: CreateTeamOnCallSchedule,
): string {
  return JSON.stringify(
    CreateTeamOnCallSchedule$outboundSchema.parse(createTeamOnCallSchedule),
  );
}

export function createTeamOnCallScheduleFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamOnCallSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamOnCallSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamOnCallSchedule' from JSON`,
  );
}
