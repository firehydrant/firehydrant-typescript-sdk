/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a link to be displayed on a FireHydrant status page
 */
export type PatchV1NuncConnectionsNuncConnectionIdLinksLinkId = {
  displayText?: string | undefined;
  iconUrl?: string | undefined;
  hrefUrl?: string | undefined;
};

/** @internal */
export const PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$inboundSchema:
  z.ZodType<
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    display_text: z.string().optional(),
    icon_url: z.string().optional(),
    href_url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "display_text": "displayText",
      "icon_url": "iconUrl",
      "href_url": "hrefUrl",
    });
  });

/** @internal */
export type PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$Outbound = {
  display_text?: string | undefined;
  icon_url?: string | undefined;
  href_url?: string | undefined;
};

/** @internal */
export const PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$outboundSchema:
  z.ZodType<
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$Outbound,
    z.ZodTypeDef,
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId
  > = z.object({
    displayText: z.string().optional(),
    iconUrl: z.string().optional(),
    hrefUrl: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      displayText: "display_text",
      iconUrl: "icon_url",
      hrefUrl: "href_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$ {
  /** @deprecated use `PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$inboundSchema;
  /** @deprecated use `PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$outboundSchema;
  /** @deprecated use `PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$Outbound` instead. */
  export type Outbound =
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$Outbound;
}

export function patchV1NuncConnectionsNuncConnectionIdLinksLinkIdToJSON(
  patchV1NuncConnectionsNuncConnectionIdLinksLinkId:
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId,
): string {
  return JSON.stringify(
    PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$outboundSchema.parse(
      patchV1NuncConnectionsNuncConnectionIdLinksLinkId,
    ),
  );
}

export function patchV1NuncConnectionsNuncConnectionIdLinksLinkIdFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1NuncConnectionsNuncConnectionIdLinksLinkId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1NuncConnectionsNuncConnectionIdLinksLinkId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchV1NuncConnectionsNuncConnectionIdLinksLinkId' from JSON`,
  );
}
