/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableSuccinctEntity,
  NullableSuccinctEntity$inboundSchema,
  NullableSuccinctEntity$Outbound,
  NullableSuccinctEntity$outboundSchema,
} from "./nullablesuccinctentity.js";

/**
 * Signals_API_OnCallShiftEntity model
 */
export type SignalsAPIOnCallShiftEntity = {
  id?: string | null | undefined;
  user?: NullableSuccinctEntity | null | undefined;
  coverageRequest?: string | null | undefined;
  color?: string | null | undefined;
  timeZone?: string | null | undefined;
  onCallSchedule?: NullableSuccinctEntity | null | undefined;
  onCallRotation?: NullableSuccinctEntity | null | undefined;
  team?: NullableSuccinctEntity | null | undefined;
  startTime?: Date | null | undefined;
  endTime?: Date | null | undefined;
};

/** @internal */
export const SignalsAPIOnCallShiftEntity$inboundSchema: z.ZodType<
  SignalsAPIOnCallShiftEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  user: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
  coverage_request: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  time_zone: z.nullable(z.string()).optional(),
  on_call_schedule: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
  on_call_rotation: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
  team: z.nullable(NullableSuccinctEntity$inboundSchema).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "coverage_request": "coverageRequest",
    "time_zone": "timeZone",
    "on_call_schedule": "onCallSchedule",
    "on_call_rotation": "onCallRotation",
    "start_time": "startTime",
    "end_time": "endTime",
  });
});

/** @internal */
export type SignalsAPIOnCallShiftEntity$Outbound = {
  id?: string | null | undefined;
  user?: NullableSuccinctEntity$Outbound | null | undefined;
  coverage_request?: string | null | undefined;
  color?: string | null | undefined;
  time_zone?: string | null | undefined;
  on_call_schedule?: NullableSuccinctEntity$Outbound | null | undefined;
  on_call_rotation?: NullableSuccinctEntity$Outbound | null | undefined;
  team?: NullableSuccinctEntity$Outbound | null | undefined;
  start_time?: string | null | undefined;
  end_time?: string | null | undefined;
};

/** @internal */
export const SignalsAPIOnCallShiftEntity$outboundSchema: z.ZodType<
  SignalsAPIOnCallShiftEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPIOnCallShiftEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  user: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
  coverageRequest: z.nullable(z.string()).optional(),
  color: z.nullable(z.string()).optional(),
  timeZone: z.nullable(z.string()).optional(),
  onCallSchedule: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
  onCallRotation: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
  team: z.nullable(NullableSuccinctEntity$outboundSchema).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    coverageRequest: "coverage_request",
    timeZone: "time_zone",
    onCallSchedule: "on_call_schedule",
    onCallRotation: "on_call_rotation",
    startTime: "start_time",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPIOnCallShiftEntity$ {
  /** @deprecated use `SignalsAPIOnCallShiftEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPIOnCallShiftEntity$inboundSchema;
  /** @deprecated use `SignalsAPIOnCallShiftEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPIOnCallShiftEntity$outboundSchema;
  /** @deprecated use `SignalsAPIOnCallShiftEntity$Outbound` instead. */
  export type Outbound = SignalsAPIOnCallShiftEntity$Outbound;
}

export function signalsAPIOnCallShiftEntityToJSON(
  signalsAPIOnCallShiftEntity: SignalsAPIOnCallShiftEntity,
): string {
  return JSON.stringify(
    SignalsAPIOnCallShiftEntity$outboundSchema.parse(
      signalsAPIOnCallShiftEntity,
    ),
  );
}

export function signalsAPIOnCallShiftEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPIOnCallShiftEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPIOnCallShiftEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPIOnCallShiftEntity' from JSON`,
  );
}
