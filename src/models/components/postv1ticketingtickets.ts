/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Creates a ticket for a project
 */
export type PostV1TicketingTickets = {
  summary: string;
  /**
   * Which incident this ticket is related to, in the format of 'incident/UUID'
   */
  relatedTo?: string | undefined;
  projectId?: string | undefined;
  description?: string | undefined;
  state?: string | undefined;
  type?: string | undefined;
  priorityId?: string | undefined;
  /**
   * List of tags for the ticket
   */
  tagList?: Array<string> | undefined;
  /**
   * The remote URL for an existing ticket in a supported and configured ticketing integration
   */
  remoteUrl?: string | undefined;
};

/** @internal */
export const PostV1TicketingTickets$inboundSchema: z.ZodType<
  PostV1TicketingTickets,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  related_to: z.string().optional(),
  project_id: z.string().optional(),
  description: z.string().optional(),
  state: z.string().optional(),
  type: z.string().optional(),
  priority_id: z.string().optional(),
  tag_list: z.array(z.string()).optional(),
  remote_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "related_to": "relatedTo",
    "project_id": "projectId",
    "priority_id": "priorityId",
    "tag_list": "tagList",
    "remote_url": "remoteUrl",
  });
});

/** @internal */
export type PostV1TicketingTickets$Outbound = {
  summary: string;
  related_to?: string | undefined;
  project_id?: string | undefined;
  description?: string | undefined;
  state?: string | undefined;
  type?: string | undefined;
  priority_id?: string | undefined;
  tag_list?: Array<string> | undefined;
  remote_url?: string | undefined;
};

/** @internal */
export const PostV1TicketingTickets$outboundSchema: z.ZodType<
  PostV1TicketingTickets$Outbound,
  z.ZodTypeDef,
  PostV1TicketingTickets
> = z.object({
  summary: z.string(),
  relatedTo: z.string().optional(),
  projectId: z.string().optional(),
  description: z.string().optional(),
  state: z.string().optional(),
  type: z.string().optional(),
  priorityId: z.string().optional(),
  tagList: z.array(z.string()).optional(),
  remoteUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    relatedTo: "related_to",
    projectId: "project_id",
    priorityId: "priority_id",
    tagList: "tag_list",
    remoteUrl: "remote_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TicketingTickets$ {
  /** @deprecated use `PostV1TicketingTickets$inboundSchema` instead. */
  export const inboundSchema = PostV1TicketingTickets$inboundSchema;
  /** @deprecated use `PostV1TicketingTickets$outboundSchema` instead. */
  export const outboundSchema = PostV1TicketingTickets$outboundSchema;
  /** @deprecated use `PostV1TicketingTickets$Outbound` instead. */
  export type Outbound = PostV1TicketingTickets$Outbound;
}

export function postV1TicketingTicketsToJSON(
  postV1TicketingTickets: PostV1TicketingTickets,
): string {
  return JSON.stringify(
    PostV1TicketingTickets$outboundSchema.parse(postV1TicketingTickets),
  );
}

export function postV1TicketingTicketsFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TicketingTickets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TicketingTickets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TicketingTickets' from JSON`,
  );
}
