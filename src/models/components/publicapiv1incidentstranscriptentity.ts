/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";

/**
 * PublicAPI_V1_Incidents_TranscriptEntity model
 */
export type PublicApiv1IncidentsTranscriptEntity = {
  /**
   * The unique identifier for the transcript entry
   */
  id?: string | null | undefined;
  /**
   * The speaker for the transcript entry
   */
  speaker?: string | null | undefined;
  /**
   * The start time for the transcript entry
   */
  start?: number | null | undefined;
  /**
   * The end time for the transcript entry
   */
  until?: number | null | undefined;
  /**
   * The words spoken for the transcript entry
   */
  words?: string | null | undefined;
  /**
   * The time the transcript entry was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The time the transcript entry was last updated
   */
  updatedAt?: Date | null | undefined;
  author?: NullableAuthorEntity | null | undefined;
};

/** @internal */
export const PublicApiv1IncidentsTranscriptEntity$inboundSchema: z.ZodType<
  PublicApiv1IncidentsTranscriptEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  speaker: z.nullable(z.string()).optional(),
  start: z.nullable(z.number().int()).optional(),
  until: z.nullable(z.number().int()).optional(),
  words: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  author: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PublicApiv1IncidentsTranscriptEntity$Outbound = {
  id?: string | null | undefined;
  speaker?: string | null | undefined;
  start?: number | null | undefined;
  until?: number | null | undefined;
  words?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  author?: NullableAuthorEntity$Outbound | null | undefined;
};

/** @internal */
export const PublicApiv1IncidentsTranscriptEntity$outboundSchema: z.ZodType<
  PublicApiv1IncidentsTranscriptEntity$Outbound,
  z.ZodTypeDef,
  PublicApiv1IncidentsTranscriptEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  speaker: z.nullable(z.string()).optional(),
  start: z.nullable(z.number().int()).optional(),
  until: z.nullable(z.number().int()).optional(),
  words: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  author: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicApiv1IncidentsTranscriptEntity$ {
  /** @deprecated use `PublicApiv1IncidentsTranscriptEntity$inboundSchema` instead. */
  export const inboundSchema =
    PublicApiv1IncidentsTranscriptEntity$inboundSchema;
  /** @deprecated use `PublicApiv1IncidentsTranscriptEntity$outboundSchema` instead. */
  export const outboundSchema =
    PublicApiv1IncidentsTranscriptEntity$outboundSchema;
  /** @deprecated use `PublicApiv1IncidentsTranscriptEntity$Outbound` instead. */
  export type Outbound = PublicApiv1IncidentsTranscriptEntity$Outbound;
}

export function publicAPIV1IncidentsTranscriptEntityToJSON(
  publicApiv1IncidentsTranscriptEntity: PublicApiv1IncidentsTranscriptEntity,
): string {
  return JSON.stringify(
    PublicApiv1IncidentsTranscriptEntity$outboundSchema.parse(
      publicApiv1IncidentsTranscriptEntity,
    ),
  );
}

export function publicAPIV1IncidentsTranscriptEntityFromJSON(
  jsonString: string,
): SafeParseResult<PublicApiv1IncidentsTranscriptEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PublicApiv1IncidentsTranscriptEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicApiv1IncidentsTranscriptEntity' from JSON`,
  );
}
