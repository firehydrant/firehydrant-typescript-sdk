/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetricsRetrospectiveEntityDataEntity = {
  x?: string | undefined;
  y?: number | undefined;
};

/** @internal */
export const MetricsRetrospectiveEntityDataEntity$inboundSchema: z.ZodType<
  MetricsRetrospectiveEntityDataEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  x: z.string().optional(),
  y: z.number().optional(),
});

/** @internal */
export type MetricsRetrospectiveEntityDataEntity$Outbound = {
  x?: string | undefined;
  y?: number | undefined;
};

/** @internal */
export const MetricsRetrospectiveEntityDataEntity$outboundSchema: z.ZodType<
  MetricsRetrospectiveEntityDataEntity$Outbound,
  z.ZodTypeDef,
  MetricsRetrospectiveEntityDataEntity
> = z.object({
  x: z.string().optional(),
  y: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsRetrospectiveEntityDataEntity$ {
  /** @deprecated use `MetricsRetrospectiveEntityDataEntity$inboundSchema` instead. */
  export const inboundSchema =
    MetricsRetrospectiveEntityDataEntity$inboundSchema;
  /** @deprecated use `MetricsRetrospectiveEntityDataEntity$outboundSchema` instead. */
  export const outboundSchema =
    MetricsRetrospectiveEntityDataEntity$outboundSchema;
  /** @deprecated use `MetricsRetrospectiveEntityDataEntity$Outbound` instead. */
  export type Outbound = MetricsRetrospectiveEntityDataEntity$Outbound;
}

export function metricsRetrospectiveEntityDataEntityToJSON(
  metricsRetrospectiveEntityDataEntity: MetricsRetrospectiveEntityDataEntity,
): string {
  return JSON.stringify(
    MetricsRetrospectiveEntityDataEntity$outboundSchema.parse(
      metricsRetrospectiveEntityDataEntity,
    ),
  );
}

export function metricsRetrospectiveEntityDataEntityFromJSON(
  jsonString: string,
): SafeParseResult<MetricsRetrospectiveEntityDataEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsRetrospectiveEntityDataEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsRetrospectiveEntityDataEntity' from JSON`,
  );
}
