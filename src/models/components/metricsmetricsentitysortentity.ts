/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetricsMetricsEntitySortEntity = {
  field?: string | undefined;
  direction?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const MetricsMetricsEntitySortEntity$inboundSchema: z.ZodType<
  MetricsMetricsEntitySortEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string().optional(),
  direction: z.string().optional(),
  limit: z.number().int().optional(),
});

/** @internal */
export type MetricsMetricsEntitySortEntity$Outbound = {
  field?: string | undefined;
  direction?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const MetricsMetricsEntitySortEntity$outboundSchema: z.ZodType<
  MetricsMetricsEntitySortEntity$Outbound,
  z.ZodTypeDef,
  MetricsMetricsEntitySortEntity
> = z.object({
  field: z.string().optional(),
  direction: z.string().optional(),
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsMetricsEntitySortEntity$ {
  /** @deprecated use `MetricsMetricsEntitySortEntity$inboundSchema` instead. */
  export const inboundSchema = MetricsMetricsEntitySortEntity$inboundSchema;
  /** @deprecated use `MetricsMetricsEntitySortEntity$outboundSchema` instead. */
  export const outboundSchema = MetricsMetricsEntitySortEntity$outboundSchema;
  /** @deprecated use `MetricsMetricsEntitySortEntity$Outbound` instead. */
  export type Outbound = MetricsMetricsEntitySortEntity$Outbound;
}

export function metricsMetricsEntitySortEntityToJSON(
  metricsMetricsEntitySortEntity: MetricsMetricsEntitySortEntity,
): string {
  return JSON.stringify(
    MetricsMetricsEntitySortEntity$outboundSchema.parse(
      metricsMetricsEntitySortEntity,
    ),
  );
}

export function metricsMetricsEntitySortEntityFromJSON(
  jsonString: string,
): SafeParseResult<MetricsMetricsEntitySortEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsMetricsEntitySortEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsMetricsEntitySortEntity' from JSON`,
  );
}
