/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Copy an on-call rotation into a different schedule, allowing you to merge them together safely.
 */
export type CopyOnCallScheduleRotation = {
  /**
   * The ID of the schedule to clone the rotation into
   */
  targetScheduleId: string;
  /**
   * The name of the on-call rotation
   */
  name?: string | null | undefined;
};

/** @internal */
export const CopyOnCallScheduleRotation$inboundSchema: z.ZodType<
  CopyOnCallScheduleRotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_schedule_id: z.string(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_schedule_id": "targetScheduleId",
  });
});

/** @internal */
export type CopyOnCallScheduleRotation$Outbound = {
  target_schedule_id: string;
  name?: string | null | undefined;
};

/** @internal */
export const CopyOnCallScheduleRotation$outboundSchema: z.ZodType<
  CopyOnCallScheduleRotation$Outbound,
  z.ZodTypeDef,
  CopyOnCallScheduleRotation
> = z.object({
  targetScheduleId: z.string(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetScheduleId: "target_schedule_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CopyOnCallScheduleRotation$ {
  /** @deprecated use `CopyOnCallScheduleRotation$inboundSchema` instead. */
  export const inboundSchema = CopyOnCallScheduleRotation$inboundSchema;
  /** @deprecated use `CopyOnCallScheduleRotation$outboundSchema` instead. */
  export const outboundSchema = CopyOnCallScheduleRotation$outboundSchema;
  /** @deprecated use `CopyOnCallScheduleRotation$Outbound` instead. */
  export type Outbound = CopyOnCallScheduleRotation$Outbound;
}

export function copyOnCallScheduleRotationToJSON(
  copyOnCallScheduleRotation: CopyOnCallScheduleRotation,
): string {
  return JSON.stringify(
    CopyOnCallScheduleRotation$outboundSchema.parse(copyOnCallScheduleRotation),
  );
}

export function copyOnCallScheduleRotationFromJSON(
  jsonString: string,
): SafeParseResult<CopyOnCallScheduleRotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CopyOnCallScheduleRotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CopyOnCallScheduleRotation' from JSON`,
  );
}
