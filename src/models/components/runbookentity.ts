/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableAuthorEntity,
  NullableAuthorEntity$inboundSchema,
  NullableAuthorEntity$Outbound,
  NullableAuthorEntity$outboundSchema,
} from "./nullableauthorentity.js";
import {
  NullableRulesRuleEntity,
  NullableRulesRuleEntity$inboundSchema,
  NullableRulesRuleEntity$Outbound,
  NullableRulesRuleEntity$outboundSchema,
} from "./nullablerulesruleentity.js";
import {
  NullableTeamEntityLite,
  NullableTeamEntityLite$inboundSchema,
  NullableTeamEntityLite$Outbound,
  NullableTeamEntityLite$outboundSchema,
} from "./nullableteamentitylite.js";
import {
  NullableVotesEntity,
  NullableVotesEntity$inboundSchema,
  NullableVotesEntity$Outbound,
  NullableVotesEntity$outboundSchema,
} from "./nullablevotesentity.js";
import {
  RunbookStepEntity,
  RunbookStepEntity$inboundSchema,
  RunbookStepEntity$Outbound,
  RunbookStepEntity$outboundSchema,
} from "./runbookstepentity.js";

/**
 * RunbookEntity model
 */
export type RunbookEntity = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  runbookTemplateId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  createdBy?: NullableAuthorEntity | null | undefined;
  updatedBy?: NullableAuthorEntity | null | undefined;
  steps?: Array<RunbookStepEntity> | null | undefined;
  attachmentRule?: NullableRulesRuleEntity | null | undefined;
  votes?: NullableVotesEntity | null | undefined;
  isEditable?: boolean | null | undefined;
  owner?: NullableTeamEntityLite | null | undefined;
  /**
   * categories the runbook applies to
   */
  categories?: Array<string> | null | undefined;
  autoAttachToRestrictedIncidents?: boolean | null | undefined;
  tutorial?: boolean | null | undefined;
};

/** @internal */
export const RunbookEntity$inboundSchema: z.ZodType<
  RunbookEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  runbook_template_id: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  updated_by: z.nullable(NullableAuthorEntity$inboundSchema).optional(),
  steps: z.nullable(z.array(RunbookStepEntity$inboundSchema)).optional(),
  attachment_rule: z.nullable(NullableRulesRuleEntity$inboundSchema).optional(),
  votes: z.nullable(NullableVotesEntity$inboundSchema).optional(),
  is_editable: z.nullable(z.boolean()).optional(),
  owner: z.nullable(NullableTeamEntityLite$inboundSchema).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
  auto_attach_to_restricted_incidents: z.nullable(z.boolean()).optional(),
  tutorial: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "runbook_template_id": "runbookTemplateId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "created_by": "createdBy",
    "updated_by": "updatedBy",
    "attachment_rule": "attachmentRule",
    "is_editable": "isEditable",
    "auto_attach_to_restricted_incidents": "autoAttachToRestrictedIncidents",
  });
});

/** @internal */
export type RunbookEntity$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  summary?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  runbook_template_id?: string | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_by?: NullableAuthorEntity$Outbound | null | undefined;
  updated_by?: NullableAuthorEntity$Outbound | null | undefined;
  steps?: Array<RunbookStepEntity$Outbound> | null | undefined;
  attachment_rule?: NullableRulesRuleEntity$Outbound | null | undefined;
  votes?: NullableVotesEntity$Outbound | null | undefined;
  is_editable?: boolean | null | undefined;
  owner?: NullableTeamEntityLite$Outbound | null | undefined;
  categories?: Array<string> | null | undefined;
  auto_attach_to_restricted_incidents?: boolean | null | undefined;
  tutorial?: boolean | null | undefined;
};

/** @internal */
export const RunbookEntity$outboundSchema: z.ZodType<
  RunbookEntity$Outbound,
  z.ZodTypeDef,
  RunbookEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  runbookTemplateId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  updatedBy: z.nullable(NullableAuthorEntity$outboundSchema).optional(),
  steps: z.nullable(z.array(RunbookStepEntity$outboundSchema)).optional(),
  attachmentRule: z.nullable(NullableRulesRuleEntity$outboundSchema).optional(),
  votes: z.nullable(NullableVotesEntity$outboundSchema).optional(),
  isEditable: z.nullable(z.boolean()).optional(),
  owner: z.nullable(NullableTeamEntityLite$outboundSchema).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
  autoAttachToRestrictedIncidents: z.nullable(z.boolean()).optional(),
  tutorial: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    runbookTemplateId: "runbook_template_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    createdBy: "created_by",
    updatedBy: "updated_by",
    attachmentRule: "attachment_rule",
    isEditable: "is_editable",
    autoAttachToRestrictedIncidents: "auto_attach_to_restricted_incidents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunbookEntity$ {
  /** @deprecated use `RunbookEntity$inboundSchema` instead. */
  export const inboundSchema = RunbookEntity$inboundSchema;
  /** @deprecated use `RunbookEntity$outboundSchema` instead. */
  export const outboundSchema = RunbookEntity$outboundSchema;
  /** @deprecated use `RunbookEntity$Outbound` instead. */
  export type Outbound = RunbookEntity$Outbound;
}

export function runbookEntityToJSON(runbookEntity: RunbookEntity): string {
  return JSON.stringify(RunbookEntity$outboundSchema.parse(runbookEntity));
}

export function runbookEntityFromJSON(
  jsonString: string,
): SafeParseResult<RunbookEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunbookEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunbookEntity' from JSON`,
  );
}
