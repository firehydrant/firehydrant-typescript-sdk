/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object with keys that can have different versions of an image
 */
export type VersionsUrls = {};

export type MediaImageEntity = {
  originalUrl?: string | undefined;
  /**
   * An object with keys that can have different versions of an image
   */
  versionsUrls?: VersionsUrls | undefined;
};

/** @internal */
export const VersionsUrls$inboundSchema: z.ZodType<
  VersionsUrls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type VersionsUrls$Outbound = {};

/** @internal */
export const VersionsUrls$outboundSchema: z.ZodType<
  VersionsUrls$Outbound,
  z.ZodTypeDef,
  VersionsUrls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VersionsUrls$ {
  /** @deprecated use `VersionsUrls$inboundSchema` instead. */
  export const inboundSchema = VersionsUrls$inboundSchema;
  /** @deprecated use `VersionsUrls$outboundSchema` instead. */
  export const outboundSchema = VersionsUrls$outboundSchema;
  /** @deprecated use `VersionsUrls$Outbound` instead. */
  export type Outbound = VersionsUrls$Outbound;
}

export function versionsUrlsToJSON(versionsUrls: VersionsUrls): string {
  return JSON.stringify(VersionsUrls$outboundSchema.parse(versionsUrls));
}

export function versionsUrlsFromJSON(
  jsonString: string,
): SafeParseResult<VersionsUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VersionsUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VersionsUrls' from JSON`,
  );
}

/** @internal */
export const MediaImageEntity$inboundSchema: z.ZodType<
  MediaImageEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  original_url: z.string().optional(),
  versions_urls: z.lazy(() => VersionsUrls$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "original_url": "originalUrl",
    "versions_urls": "versionsUrls",
  });
});

/** @internal */
export type MediaImageEntity$Outbound = {
  original_url?: string | undefined;
  versions_urls?: VersionsUrls$Outbound | undefined;
};

/** @internal */
export const MediaImageEntity$outboundSchema: z.ZodType<
  MediaImageEntity$Outbound,
  z.ZodTypeDef,
  MediaImageEntity
> = z.object({
  originalUrl: z.string().optional(),
  versionsUrls: z.lazy(() => VersionsUrls$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    originalUrl: "original_url",
    versionsUrls: "versions_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaImageEntity$ {
  /** @deprecated use `MediaImageEntity$inboundSchema` instead. */
  export const inboundSchema = MediaImageEntity$inboundSchema;
  /** @deprecated use `MediaImageEntity$outboundSchema` instead. */
  export const outboundSchema = MediaImageEntity$outboundSchema;
  /** @deprecated use `MediaImageEntity$Outbound` instead. */
  export type Outbound = MediaImageEntity$Outbound;
}

export function mediaImageEntityToJSON(
  mediaImageEntity: MediaImageEntity,
): string {
  return JSON.stringify(
    MediaImageEntity$outboundSchema.parse(mediaImageEntity),
  );
}

export function mediaImageEntityFromJSON(
  jsonString: string,
): SafeParseResult<MediaImageEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MediaImageEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MediaImageEntity' from JSON`,
  );
}
