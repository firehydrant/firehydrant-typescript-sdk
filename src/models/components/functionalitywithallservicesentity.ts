/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceEntity,
  ServiceEntity$inboundSchema,
  ServiceEntity$Outbound,
  ServiceEntity$outboundSchema,
} from "./serviceentity.js";

/**
 * FunctionalityWithAllServicesEntity model
 */
export type FunctionalityWithAllServicesEntity = {
  /**
   * Services this functionality provides
   */
  services?: Array<ServiceEntity> | null | undefined;
};

/** @internal */
export const FunctionalityWithAllServicesEntity$inboundSchema: z.ZodType<
  FunctionalityWithAllServicesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  services: z.nullable(z.array(ServiceEntity$inboundSchema)).optional(),
});

/** @internal */
export type FunctionalityWithAllServicesEntity$Outbound = {
  services?: Array<ServiceEntity$Outbound> | null | undefined;
};

/** @internal */
export const FunctionalityWithAllServicesEntity$outboundSchema: z.ZodType<
  FunctionalityWithAllServicesEntity$Outbound,
  z.ZodTypeDef,
  FunctionalityWithAllServicesEntity
> = z.object({
  services: z.nullable(z.array(ServiceEntity$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionalityWithAllServicesEntity$ {
  /** @deprecated use `FunctionalityWithAllServicesEntity$inboundSchema` instead. */
  export const inboundSchema = FunctionalityWithAllServicesEntity$inboundSchema;
  /** @deprecated use `FunctionalityWithAllServicesEntity$outboundSchema` instead. */
  export const outboundSchema =
    FunctionalityWithAllServicesEntity$outboundSchema;
  /** @deprecated use `FunctionalityWithAllServicesEntity$Outbound` instead. */
  export type Outbound = FunctionalityWithAllServicesEntity$Outbound;
}

export function functionalityWithAllServicesEntityToJSON(
  functionalityWithAllServicesEntity: FunctionalityWithAllServicesEntity,
): string {
  return JSON.stringify(
    FunctionalityWithAllServicesEntity$outboundSchema.parse(
      functionalityWithAllServicesEntity,
    ),
  );
}

export function functionalityWithAllServicesEntityFromJSON(
  jsonString: string,
): SafeParseResult<FunctionalityWithAllServicesEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionalityWithAllServicesEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionalityWithAllServicesEntity' from JSON`,
  );
}
