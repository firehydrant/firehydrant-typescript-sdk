/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableSignalsAPITransposerEntity,
  NullableSignalsAPITransposerEntity$inboundSchema,
  NullableSignalsAPITransposerEntity$Outbound,
  NullableSignalsAPITransposerEntity$outboundSchema,
} from "./nullablesignalsapitransposerentity.js";

/**
 * Signals_API_TransposerListEntity model
 */
export type SignalsAPITransposerListEntity = {
  data?: NullableSignalsAPITransposerEntity | null | undefined;
};

/** @internal */
export const SignalsAPITransposerListEntity$inboundSchema: z.ZodType<
  SignalsAPITransposerListEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(NullableSignalsAPITransposerEntity$inboundSchema).optional(),
});

/** @internal */
export type SignalsAPITransposerListEntity$Outbound = {
  data?: NullableSignalsAPITransposerEntity$Outbound | null | undefined;
};

/** @internal */
export const SignalsAPITransposerListEntity$outboundSchema: z.ZodType<
  SignalsAPITransposerListEntity$Outbound,
  z.ZodTypeDef,
  SignalsAPITransposerListEntity
> = z.object({
  data: z.nullable(NullableSignalsAPITransposerEntity$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignalsAPITransposerListEntity$ {
  /** @deprecated use `SignalsAPITransposerListEntity$inboundSchema` instead. */
  export const inboundSchema = SignalsAPITransposerListEntity$inboundSchema;
  /** @deprecated use `SignalsAPITransposerListEntity$outboundSchema` instead. */
  export const outboundSchema = SignalsAPITransposerListEntity$outboundSchema;
  /** @deprecated use `SignalsAPITransposerListEntity$Outbound` instead. */
  export type Outbound = SignalsAPITransposerListEntity$Outbound;
}

export function signalsAPITransposerListEntityToJSON(
  signalsAPITransposerListEntity: SignalsAPITransposerListEntity,
): string {
  return JSON.stringify(
    SignalsAPITransposerListEntity$outboundSchema.parse(
      signalsAPITransposerListEntity,
    ),
  );
}

export function signalsAPITransposerListEntityFromJSON(
  jsonString: string,
): SafeParseResult<SignalsAPITransposerListEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignalsAPITransposerListEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignalsAPITransposerListEntity' from JSON`,
  );
}
