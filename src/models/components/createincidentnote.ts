/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateIncidentNoteVisibility = {
  PrivateToOrg: "private_to_org",
  OpenToPublic: "open_to_public",
  InternalStatusPage: "internal_status_page",
} as const;
export type CreateIncidentNoteVisibility = ClosedEnum<
  typeof CreateIncidentNoteVisibility
>;

export type CreateIncidentNoteStatusPage = {
  id: string;
  integrationSlug: string;
};

/**
 * Create a new note on for an incident. The visibility field on a note determines where it gets posted.
 */
export type CreateIncidentNote = {
  body: string;
  /**
   * ISO8601 timestamp for when the note occurred
   */
  occurredAt?: Date | null | undefined;
  visibility?: CreateIncidentNoteVisibility | null | undefined;
  statusPages?: Array<CreateIncidentNoteStatusPage> | null | undefined;
};

/** @internal */
export const CreateIncidentNoteVisibility$inboundSchema: z.ZodNativeEnum<
  typeof CreateIncidentNoteVisibility
> = z.nativeEnum(CreateIncidentNoteVisibility);

/** @internal */
export const CreateIncidentNoteVisibility$outboundSchema: z.ZodNativeEnum<
  typeof CreateIncidentNoteVisibility
> = CreateIncidentNoteVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentNoteVisibility$ {
  /** @deprecated use `CreateIncidentNoteVisibility$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentNoteVisibility$inboundSchema;
  /** @deprecated use `CreateIncidentNoteVisibility$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentNoteVisibility$outboundSchema;
}

/** @internal */
export const CreateIncidentNoteStatusPage$inboundSchema: z.ZodType<
  CreateIncidentNoteStatusPage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
  });
});

/** @internal */
export type CreateIncidentNoteStatusPage$Outbound = {
  id: string;
  integration_slug: string;
};

/** @internal */
export const CreateIncidentNoteStatusPage$outboundSchema: z.ZodType<
  CreateIncidentNoteStatusPage$Outbound,
  z.ZodTypeDef,
  CreateIncidentNoteStatusPage
> = z.object({
  id: z.string(),
  integrationSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentNoteStatusPage$ {
  /** @deprecated use `CreateIncidentNoteStatusPage$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentNoteStatusPage$inboundSchema;
  /** @deprecated use `CreateIncidentNoteStatusPage$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentNoteStatusPage$outboundSchema;
  /** @deprecated use `CreateIncidentNoteStatusPage$Outbound` instead. */
  export type Outbound = CreateIncidentNoteStatusPage$Outbound;
}

export function createIncidentNoteStatusPageToJSON(
  createIncidentNoteStatusPage: CreateIncidentNoteStatusPage,
): string {
  return JSON.stringify(
    CreateIncidentNoteStatusPage$outboundSchema.parse(
      createIncidentNoteStatusPage,
    ),
  );
}

export function createIncidentNoteStatusPageFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentNoteStatusPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentNoteStatusPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentNoteStatusPage' from JSON`,
  );
}

/** @internal */
export const CreateIncidentNote$inboundSchema: z.ZodType<
  CreateIncidentNote,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string(),
  occurred_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  visibility: z.nullable(
    CreateIncidentNoteVisibility$inboundSchema.default("private_to_org"),
  ),
  status_pages: z.nullable(
    z.array(z.lazy(() => CreateIncidentNoteStatusPage$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
    "status_pages": "statusPages",
  });
});

/** @internal */
export type CreateIncidentNote$Outbound = {
  body: string;
  occurred_at?: string | null | undefined;
  visibility: string | null;
  status_pages?:
    | Array<CreateIncidentNoteStatusPage$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateIncidentNote$outboundSchema: z.ZodType<
  CreateIncidentNote$Outbound,
  z.ZodTypeDef,
  CreateIncidentNote
> = z.object({
  body: z.string(),
  occurredAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  visibility: z.nullable(
    CreateIncidentNoteVisibility$outboundSchema.default("private_to_org"),
  ),
  statusPages: z.nullable(
    z.array(z.lazy(() => CreateIncidentNoteStatusPage$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
    statusPages: "status_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentNote$ {
  /** @deprecated use `CreateIncidentNote$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentNote$inboundSchema;
  /** @deprecated use `CreateIncidentNote$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentNote$outboundSchema;
  /** @deprecated use `CreateIncidentNote$Outbound` instead. */
  export type Outbound = CreateIncidentNote$Outbound;
}

export function createIncidentNoteToJSON(
  createIncidentNote: CreateIncidentNote,
): string {
  return JSON.stringify(
    CreateIncidentNote$outboundSchema.parse(createIncidentNote),
  );
}

export function createIncidentNoteFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentNote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentNote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentNote' from JSON`,
  );
}
