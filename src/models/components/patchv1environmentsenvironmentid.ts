/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a environments attributes
 */
export type PatchV1EnvironmentsEnvironmentId = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const PatchV1EnvironmentsEnvironmentId$inboundSchema: z.ZodType<
  PatchV1EnvironmentsEnvironmentId,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type PatchV1EnvironmentsEnvironmentId$Outbound = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const PatchV1EnvironmentsEnvironmentId$outboundSchema: z.ZodType<
  PatchV1EnvironmentsEnvironmentId$Outbound,
  z.ZodTypeDef,
  PatchV1EnvironmentsEnvironmentId
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1EnvironmentsEnvironmentId$ {
  /** @deprecated use `PatchV1EnvironmentsEnvironmentId$inboundSchema` instead. */
  export const inboundSchema = PatchV1EnvironmentsEnvironmentId$inboundSchema;
  /** @deprecated use `PatchV1EnvironmentsEnvironmentId$outboundSchema` instead. */
  export const outboundSchema = PatchV1EnvironmentsEnvironmentId$outboundSchema;
  /** @deprecated use `PatchV1EnvironmentsEnvironmentId$Outbound` instead. */
  export type Outbound = PatchV1EnvironmentsEnvironmentId$Outbound;
}

export function patchV1EnvironmentsEnvironmentIdToJSON(
  patchV1EnvironmentsEnvironmentId: PatchV1EnvironmentsEnvironmentId,
): string {
  return JSON.stringify(
    PatchV1EnvironmentsEnvironmentId$outboundSchema.parse(
      patchV1EnvironmentsEnvironmentId,
    ),
  );
}

export function patchV1EnvironmentsEnvironmentIdFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1EnvironmentsEnvironmentId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1EnvironmentsEnvironmentId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1EnvironmentsEnvironmentId' from JSON`,
  );
}
