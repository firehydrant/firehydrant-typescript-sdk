/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateSeverityColor = {
  Red: "red",
  Orange: "orange",
  Yellow: "yellow",
  Blue: "blue",
  Teal: "teal",
  Grey: "grey",
} as const;
export type CreateSeverityColor = ClosedEnum<typeof CreateSeverityColor>;

/**
 * Create a new severity
 */
export type CreateSeverity = {
  slug: string;
  description?: string | null | undefined;
  position?: number | null | undefined;
  color?: CreateSeverityColor | null | undefined;
};

/** @internal */
export const CreateSeverityColor$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeverityColor
> = z.nativeEnum(CreateSeverityColor);

/** @internal */
export const CreateSeverityColor$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeverityColor
> = CreateSeverityColor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeverityColor$ {
  /** @deprecated use `CreateSeverityColor$inboundSchema` instead. */
  export const inboundSchema = CreateSeverityColor$inboundSchema;
  /** @deprecated use `CreateSeverityColor$outboundSchema` instead. */
  export const outboundSchema = CreateSeverityColor$outboundSchema;
}

/** @internal */
export const CreateSeverity$inboundSchema: z.ZodType<
  CreateSeverity,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  color: z.nullable(CreateSeverityColor$inboundSchema).optional(),
});

/** @internal */
export type CreateSeverity$Outbound = {
  slug: string;
  description?: string | null | undefined;
  position?: number | null | undefined;
  color?: string | null | undefined;
};

/** @internal */
export const CreateSeverity$outboundSchema: z.ZodType<
  CreateSeverity$Outbound,
  z.ZodTypeDef,
  CreateSeverity
> = z.object({
  slug: z.string(),
  description: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
  color: z.nullable(CreateSeverityColor$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeverity$ {
  /** @deprecated use `CreateSeverity$inboundSchema` instead. */
  export const inboundSchema = CreateSeverity$inboundSchema;
  /** @deprecated use `CreateSeverity$outboundSchema` instead. */
  export const outboundSchema = CreateSeverity$outboundSchema;
  /** @deprecated use `CreateSeverity$Outbound` instead. */
  export type Outbound = CreateSeverity$Outbound;
}

export function createSeverityToJSON(createSeverity: CreateSeverity): string {
  return JSON.stringify(CreateSeverity$outboundSchema.parse(createSeverity));
}

export function createSeverityFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeverity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeverity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeverity' from JSON`,
  );
}
