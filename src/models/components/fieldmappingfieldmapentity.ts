/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Body = {};

/**
 * FieldMapping_FieldMapEntity model
 */
export type FieldMappingFieldMapEntity = {
  id?: string | null | undefined;
  connectionId?: string | null | undefined;
  connectionType?: string | null | undefined;
  entityId?: string | null | undefined;
  entityType?: string | null | undefined;
  body?: Body | null | undefined;
  availableFieldsUrl?: string | null | undefined;
  dataBagUrl?: string | null | undefined;
};

/** @internal */
export const Body$inboundSchema: z.ZodType<Body, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Body$Outbound = {};

/** @internal */
export const Body$outboundSchema: z.ZodType<Body$Outbound, z.ZodTypeDef, Body> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Body$ {
  /** @deprecated use `Body$inboundSchema` instead. */
  export const inboundSchema = Body$inboundSchema;
  /** @deprecated use `Body$outboundSchema` instead. */
  export const outboundSchema = Body$outboundSchema;
  /** @deprecated use `Body$Outbound` instead. */
  export type Outbound = Body$Outbound;
}

export function bodyToJSON(body: Body): string {
  return JSON.stringify(Body$outboundSchema.parse(body));
}

export function bodyFromJSON(
  jsonString: string,
): SafeParseResult<Body, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Body$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Body' from JSON`,
  );
}

/** @internal */
export const FieldMappingFieldMapEntity$inboundSchema: z.ZodType<
  FieldMappingFieldMapEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  connection_type: z.nullable(z.string()).optional(),
  entity_id: z.nullable(z.string()).optional(),
  entity_type: z.nullable(z.string()).optional(),
  body: z.nullable(z.lazy(() => Body$inboundSchema)).optional(),
  available_fields_url: z.nullable(z.string()).optional(),
  data_bag_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "connection_type": "connectionType",
    "entity_id": "entityId",
    "entity_type": "entityType",
    "available_fields_url": "availableFieldsUrl",
    "data_bag_url": "dataBagUrl",
  });
});

/** @internal */
export type FieldMappingFieldMapEntity$Outbound = {
  id?: string | null | undefined;
  connection_id?: string | null | undefined;
  connection_type?: string | null | undefined;
  entity_id?: string | null | undefined;
  entity_type?: string | null | undefined;
  body?: Body$Outbound | null | undefined;
  available_fields_url?: string | null | undefined;
  data_bag_url?: string | null | undefined;
};

/** @internal */
export const FieldMappingFieldMapEntity$outboundSchema: z.ZodType<
  FieldMappingFieldMapEntity$Outbound,
  z.ZodTypeDef,
  FieldMappingFieldMapEntity
> = z.object({
  id: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  connectionType: z.nullable(z.string()).optional(),
  entityId: z.nullable(z.string()).optional(),
  entityType: z.nullable(z.string()).optional(),
  body: z.nullable(z.lazy(() => Body$outboundSchema)).optional(),
  availableFieldsUrl: z.nullable(z.string()).optional(),
  dataBagUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    connectionType: "connection_type",
    entityId: "entity_id",
    entityType: "entity_type",
    availableFieldsUrl: "available_fields_url",
    dataBagUrl: "data_bag_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMappingFieldMapEntity$ {
  /** @deprecated use `FieldMappingFieldMapEntity$inboundSchema` instead. */
  export const inboundSchema = FieldMappingFieldMapEntity$inboundSchema;
  /** @deprecated use `FieldMappingFieldMapEntity$outboundSchema` instead. */
  export const outboundSchema = FieldMappingFieldMapEntity$outboundSchema;
  /** @deprecated use `FieldMappingFieldMapEntity$Outbound` instead. */
  export type Outbound = FieldMappingFieldMapEntity$Outbound;
}

export function fieldMappingFieldMapEntityToJSON(
  fieldMappingFieldMapEntity: FieldMappingFieldMapEntity,
): string {
  return JSON.stringify(
    FieldMappingFieldMapEntity$outboundSchema.parse(fieldMappingFieldMapEntity),
  );
}

export function fieldMappingFieldMapEntityFromJSON(
  jsonString: string,
): SafeParseResult<FieldMappingFieldMapEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMappingFieldMapEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMappingFieldMapEntity' from JSON`,
  );
}
