/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * FormConfigurationEntity model
 */
export type FormConfigurationEntity = {
  fields?: string | null | undefined;
  showIncidentTypes?: string | null | undefined;
};

/** @internal */
export const FormConfigurationEntity$inboundSchema: z.ZodType<
  FormConfigurationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  show_incident_types: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "show_incident_types": "showIncidentTypes",
  });
});

/** @internal */
export type FormConfigurationEntity$Outbound = {
  fields?: string | null | undefined;
  show_incident_types?: string | null | undefined;
};

/** @internal */
export const FormConfigurationEntity$outboundSchema: z.ZodType<
  FormConfigurationEntity$Outbound,
  z.ZodTypeDef,
  FormConfigurationEntity
> = z.object({
  fields: z.nullable(z.string()).optional(),
  showIncidentTypes: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    showIncidentTypes: "show_incident_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormConfigurationEntity$ {
  /** @deprecated use `FormConfigurationEntity$inboundSchema` instead. */
  export const inboundSchema = FormConfigurationEntity$inboundSchema;
  /** @deprecated use `FormConfigurationEntity$outboundSchema` instead. */
  export const outboundSchema = FormConfigurationEntity$outboundSchema;
  /** @deprecated use `FormConfigurationEntity$Outbound` instead. */
  export type Outbound = FormConfigurationEntity$Outbound;
}

export function formConfigurationEntityToJSON(
  formConfigurationEntity: FormConfigurationEntity,
): string {
  return JSON.stringify(
    FormConfigurationEntity$outboundSchema.parse(formConfigurationEntity),
  );
}

export function formConfigurationEntityFromJSON(
  jsonString: string,
): SafeParseResult<FormConfigurationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormConfigurationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormConfigurationEntity' from JSON`,
  );
}
