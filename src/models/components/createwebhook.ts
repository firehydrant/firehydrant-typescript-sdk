/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a new webhook
 */
export type CreateWebhook = {
  url: string;
};

/** @internal */
export const CreateWebhook$inboundSchema: z.ZodType<
  CreateWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type CreateWebhook$Outbound = {
  url: string;
};

/** @internal */
export const CreateWebhook$outboundSchema: z.ZodType<
  CreateWebhook$Outbound,
  z.ZodTypeDef,
  CreateWebhook
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhook$ {
  /** @deprecated use `CreateWebhook$inboundSchema` instead. */
  export const inboundSchema = CreateWebhook$inboundSchema;
  /** @deprecated use `CreateWebhook$outboundSchema` instead. */
  export const outboundSchema = CreateWebhook$outboundSchema;
  /** @deprecated use `CreateWebhook$Outbound` instead. */
  export type Outbound = CreateWebhook$Outbound;
}

export function createWebhookToJSON(createWebhook: CreateWebhook): string {
  return JSON.stringify(CreateWebhook$outboundSchema.parse(createWebhook));
}

export function createWebhookFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhook' from JSON`,
  );
}
