/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceChildDependencyEntity,
  ServiceChildDependencyEntity$inboundSchema,
  ServiceChildDependencyEntity$Outbound,
  ServiceChildDependencyEntity$outboundSchema,
} from "./servicechilddependencyentity.js";
import {
  ServiceParentDependencyEntity,
  ServiceParentDependencyEntity$inboundSchema,
  ServiceParentDependencyEntity$Outbound,
  ServiceParentDependencyEntity$outboundSchema,
} from "./serviceparentdependencyentity.js";

export type ServiceDependencies = {};

/**
 * ServiceWithAllDependenciesEntity model
 */
export type ServiceWithAllDependenciesEntity = {
  /**
   * Services that depend on this service
   */
  childServiceDependencies?: Array<ServiceChildDependencyEntity> | undefined;
  /**
   * Services that this service is dependent on
   */
  parentServiceDependencies?: Array<ServiceParentDependencyEntity> | undefined;
  /**
   * All dependencies. Can be one of: ServiceChildDependencyEntity, ServiceParentDependencyEntity
   */
  serviceDependencies?: Array<ServiceDependencies> | undefined;
};

/** @internal */
export const ServiceDependencies$inboundSchema: z.ZodType<
  ServiceDependencies,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ServiceDependencies$Outbound = {};

/** @internal */
export const ServiceDependencies$outboundSchema: z.ZodType<
  ServiceDependencies$Outbound,
  z.ZodTypeDef,
  ServiceDependencies
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDependencies$ {
  /** @deprecated use `ServiceDependencies$inboundSchema` instead. */
  export const inboundSchema = ServiceDependencies$inboundSchema;
  /** @deprecated use `ServiceDependencies$outboundSchema` instead. */
  export const outboundSchema = ServiceDependencies$outboundSchema;
  /** @deprecated use `ServiceDependencies$Outbound` instead. */
  export type Outbound = ServiceDependencies$Outbound;
}

export function serviceDependenciesToJSON(
  serviceDependencies: ServiceDependencies,
): string {
  return JSON.stringify(
    ServiceDependencies$outboundSchema.parse(serviceDependencies),
  );
}

export function serviceDependenciesFromJSON(
  jsonString: string,
): SafeParseResult<ServiceDependencies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceDependencies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceDependencies' from JSON`,
  );
}

/** @internal */
export const ServiceWithAllDependenciesEntity$inboundSchema: z.ZodType<
  ServiceWithAllDependenciesEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  child_service_dependencies: z.array(
    ServiceChildDependencyEntity$inboundSchema,
  ).optional(),
  parent_service_dependencies: z.array(
    ServiceParentDependencyEntity$inboundSchema,
  ).optional(),
  service_dependencies: z.array(z.lazy(() => ServiceDependencies$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "child_service_dependencies": "childServiceDependencies",
    "parent_service_dependencies": "parentServiceDependencies",
    "service_dependencies": "serviceDependencies",
  });
});

/** @internal */
export type ServiceWithAllDependenciesEntity$Outbound = {
  child_service_dependencies?:
    | Array<ServiceChildDependencyEntity$Outbound>
    | undefined;
  parent_service_dependencies?:
    | Array<ServiceParentDependencyEntity$Outbound>
    | undefined;
  service_dependencies?: Array<ServiceDependencies$Outbound> | undefined;
};

/** @internal */
export const ServiceWithAllDependenciesEntity$outboundSchema: z.ZodType<
  ServiceWithAllDependenciesEntity$Outbound,
  z.ZodTypeDef,
  ServiceWithAllDependenciesEntity
> = z.object({
  childServiceDependencies: z.array(ServiceChildDependencyEntity$outboundSchema)
    .optional(),
  parentServiceDependencies: z.array(
    ServiceParentDependencyEntity$outboundSchema,
  ).optional(),
  serviceDependencies: z.array(z.lazy(() => ServiceDependencies$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    childServiceDependencies: "child_service_dependencies",
    parentServiceDependencies: "parent_service_dependencies",
    serviceDependencies: "service_dependencies",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceWithAllDependenciesEntity$ {
  /** @deprecated use `ServiceWithAllDependenciesEntity$inboundSchema` instead. */
  export const inboundSchema = ServiceWithAllDependenciesEntity$inboundSchema;
  /** @deprecated use `ServiceWithAllDependenciesEntity$outboundSchema` instead. */
  export const outboundSchema = ServiceWithAllDependenciesEntity$outboundSchema;
  /** @deprecated use `ServiceWithAllDependenciesEntity$Outbound` instead. */
  export type Outbound = ServiceWithAllDependenciesEntity$Outbound;
}

export function serviceWithAllDependenciesEntityToJSON(
  serviceWithAllDependenciesEntity: ServiceWithAllDependenciesEntity,
): string {
  return JSON.stringify(
    ServiceWithAllDependenciesEntity$outboundSchema.parse(
      serviceWithAllDependenciesEntity,
    ),
  );
}

export function serviceWithAllDependenciesEntityFromJSON(
  jsonString: string,
): SafeParseResult<ServiceWithAllDependenciesEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceWithAllDependenciesEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceWithAllDependenciesEntity' from JSON`,
  );
}
