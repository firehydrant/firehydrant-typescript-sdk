/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Bulk = {
  True: "true",
} as const;
export type Bulk = ClosedEnum<typeof Bulk>;

export type BulkUpdateIncidentMilestonesMilestone = {
  /**
   * The type/slug of the milestone. Must be one of the currently configured milestones for the given incident.
   */
  type: string;
  /**
   * An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
   */
  occurredAt: Date;
  /**
   * If set to true, the milestone will be removed from the incident
   */
  remove?: boolean | null | undefined;
};

/**
 * Update milestone times in bulk for a given incident. All milestone
 *
 * @remarks
 * times for an incident must occur in chronological order
 * corresponding to the configured order of milestones. If the result
 * of this request would cause any milestone(s) to appear out of place,
 * a 422 response will instead be returned. This includes milestones
 * not explicitly submitted or updated in this request.
 */
export type BulkUpdateIncidentMilestones = {
  bulk?: Bulk | null | undefined;
  milestones: Array<BulkUpdateIncidentMilestonesMilestone>;
};

/** @internal */
export const Bulk$inboundSchema: z.ZodNativeEnum<typeof Bulk> = z.nativeEnum(
  Bulk,
);

/** @internal */
export const Bulk$outboundSchema: z.ZodNativeEnum<typeof Bulk> =
  Bulk$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bulk$ {
  /** @deprecated use `Bulk$inboundSchema` instead. */
  export const inboundSchema = Bulk$inboundSchema;
  /** @deprecated use `Bulk$outboundSchema` instead. */
  export const outboundSchema = Bulk$outboundSchema;
}

/** @internal */
export const BulkUpdateIncidentMilestonesMilestone$inboundSchema: z.ZodType<
  BulkUpdateIncidentMilestonesMilestone,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  occurred_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  remove: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "occurred_at": "occurredAt",
  });
});

/** @internal */
export type BulkUpdateIncidentMilestonesMilestone$Outbound = {
  type: string;
  occurred_at: string;
  remove?: boolean | null | undefined;
};

/** @internal */
export const BulkUpdateIncidentMilestonesMilestone$outboundSchema: z.ZodType<
  BulkUpdateIncidentMilestonesMilestone$Outbound,
  z.ZodTypeDef,
  BulkUpdateIncidentMilestonesMilestone
> = z.object({
  type: z.string(),
  occurredAt: z.date().transform(v => v.toISOString()),
  remove: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    occurredAt: "occurred_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUpdateIncidentMilestonesMilestone$ {
  /** @deprecated use `BulkUpdateIncidentMilestonesMilestone$inboundSchema` instead. */
  export const inboundSchema =
    BulkUpdateIncidentMilestonesMilestone$inboundSchema;
  /** @deprecated use `BulkUpdateIncidentMilestonesMilestone$outboundSchema` instead. */
  export const outboundSchema =
    BulkUpdateIncidentMilestonesMilestone$outboundSchema;
  /** @deprecated use `BulkUpdateIncidentMilestonesMilestone$Outbound` instead. */
  export type Outbound = BulkUpdateIncidentMilestonesMilestone$Outbound;
}

export function bulkUpdateIncidentMilestonesMilestoneToJSON(
  bulkUpdateIncidentMilestonesMilestone: BulkUpdateIncidentMilestonesMilestone,
): string {
  return JSON.stringify(
    BulkUpdateIncidentMilestonesMilestone$outboundSchema.parse(
      bulkUpdateIncidentMilestonesMilestone,
    ),
  );
}

export function bulkUpdateIncidentMilestonesMilestoneFromJSON(
  jsonString: string,
): SafeParseResult<BulkUpdateIncidentMilestonesMilestone, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkUpdateIncidentMilestonesMilestone$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkUpdateIncidentMilestonesMilestone' from JSON`,
  );
}

/** @internal */
export const BulkUpdateIncidentMilestones$inboundSchema: z.ZodType<
  BulkUpdateIncidentMilestones,
  z.ZodTypeDef,
  unknown
> = z.object({
  bulk: z.nullable(Bulk$inboundSchema).optional(),
  milestones: z.array(
    z.lazy(() => BulkUpdateIncidentMilestonesMilestone$inboundSchema),
  ),
});

/** @internal */
export type BulkUpdateIncidentMilestones$Outbound = {
  bulk?: string | null | undefined;
  milestones: Array<BulkUpdateIncidentMilestonesMilestone$Outbound>;
};

/** @internal */
export const BulkUpdateIncidentMilestones$outboundSchema: z.ZodType<
  BulkUpdateIncidentMilestones$Outbound,
  z.ZodTypeDef,
  BulkUpdateIncidentMilestones
> = z.object({
  bulk: z.nullable(Bulk$outboundSchema).optional(),
  milestones: z.array(
    z.lazy(() => BulkUpdateIncidentMilestonesMilestone$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUpdateIncidentMilestones$ {
  /** @deprecated use `BulkUpdateIncidentMilestones$inboundSchema` instead. */
  export const inboundSchema = BulkUpdateIncidentMilestones$inboundSchema;
  /** @deprecated use `BulkUpdateIncidentMilestones$outboundSchema` instead. */
  export const outboundSchema = BulkUpdateIncidentMilestones$outboundSchema;
  /** @deprecated use `BulkUpdateIncidentMilestones$Outbound` instead. */
  export type Outbound = BulkUpdateIncidentMilestones$Outbound;
}

export function bulkUpdateIncidentMilestonesToJSON(
  bulkUpdateIncidentMilestones: BulkUpdateIncidentMilestones,
): string {
  return JSON.stringify(
    BulkUpdateIncidentMilestones$outboundSchema.parse(
      bulkUpdateIncidentMilestones,
    ),
  );
}

export function bulkUpdateIncidentMilestonesFromJSON(
  jsonString: string,
): SafeParseResult<BulkUpdateIncidentMilestones, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkUpdateIncidentMilestones$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkUpdateIncidentMilestones' from JSON`,
  );
}
