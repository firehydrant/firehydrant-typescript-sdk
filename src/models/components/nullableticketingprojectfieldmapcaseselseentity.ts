/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NullableTicketingProjectFieldMapExternalValueEntity,
  NullableTicketingProjectFieldMapExternalValueEntity$inboundSchema,
  NullableTicketingProjectFieldMapExternalValueEntity$Outbound,
  NullableTicketingProjectFieldMapExternalValueEntity$outboundSchema,
} from "./nullableticketingprojectfieldmapexternalvalueentity.js";

export type NullableTicketingProjectFieldMapCasesElseEntity = {
  externalValue?:
    | NullableTicketingProjectFieldMapExternalValueEntity
    | null
    | undefined;
};

/** @internal */
export const NullableTicketingProjectFieldMapCasesElseEntity$inboundSchema:
  z.ZodType<
    NullableTicketingProjectFieldMapCasesElseEntity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    external_value: z.nullable(
      NullableTicketingProjectFieldMapExternalValueEntity$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "external_value": "externalValue",
    });
  });

/** @internal */
export type NullableTicketingProjectFieldMapCasesElseEntity$Outbound = {
  external_value?:
    | NullableTicketingProjectFieldMapExternalValueEntity$Outbound
    | null
    | undefined;
};

/** @internal */
export const NullableTicketingProjectFieldMapCasesElseEntity$outboundSchema:
  z.ZodType<
    NullableTicketingProjectFieldMapCasesElseEntity$Outbound,
    z.ZodTypeDef,
    NullableTicketingProjectFieldMapCasesElseEntity
  > = z.object({
    externalValue: z.nullable(
      NullableTicketingProjectFieldMapExternalValueEntity$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      externalValue: "external_value",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableTicketingProjectFieldMapCasesElseEntity$ {
  /** @deprecated use `NullableTicketingProjectFieldMapCasesElseEntity$inboundSchema` instead. */
  export const inboundSchema =
    NullableTicketingProjectFieldMapCasesElseEntity$inboundSchema;
  /** @deprecated use `NullableTicketingProjectFieldMapCasesElseEntity$outboundSchema` instead. */
  export const outboundSchema =
    NullableTicketingProjectFieldMapCasesElseEntity$outboundSchema;
  /** @deprecated use `NullableTicketingProjectFieldMapCasesElseEntity$Outbound` instead. */
  export type Outbound =
    NullableTicketingProjectFieldMapCasesElseEntity$Outbound;
}

export function nullableTicketingProjectFieldMapCasesElseEntityToJSON(
  nullableTicketingProjectFieldMapCasesElseEntity:
    NullableTicketingProjectFieldMapCasesElseEntity,
): string {
  return JSON.stringify(
    NullableTicketingProjectFieldMapCasesElseEntity$outboundSchema.parse(
      nullableTicketingProjectFieldMapCasesElseEntity,
    ),
  );
}

export function nullableTicketingProjectFieldMapCasesElseEntityFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableTicketingProjectFieldMapCasesElseEntity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableTicketingProjectFieldMapCasesElseEntity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableTicketingProjectFieldMapCasesElseEntity' from JSON`,
  );
}
