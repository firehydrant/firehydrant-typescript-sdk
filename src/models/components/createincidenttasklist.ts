/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Add all tasks from list to incident
 */
export type CreateIncidentTaskList = {
  /**
   * The id of the task list.
   */
  taskListId: string;
  /**
   * The ID of the user assigned to the tasks in this list.
   */
  assigneeId?: string | null | undefined;
};

/** @internal */
export const CreateIncidentTaskList$inboundSchema: z.ZodType<
  CreateIncidentTaskList,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_list_id: z.string(),
  assignee_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "task_list_id": "taskListId",
    "assignee_id": "assigneeId",
  });
});

/** @internal */
export type CreateIncidentTaskList$Outbound = {
  task_list_id: string;
  assignee_id?: string | null | undefined;
};

/** @internal */
export const CreateIncidentTaskList$outboundSchema: z.ZodType<
  CreateIncidentTaskList$Outbound,
  z.ZodTypeDef,
  CreateIncidentTaskList
> = z.object({
  taskListId: z.string(),
  assigneeId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    taskListId: "task_list_id",
    assigneeId: "assignee_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentTaskList$ {
  /** @deprecated use `CreateIncidentTaskList$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentTaskList$inboundSchema;
  /** @deprecated use `CreateIncidentTaskList$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentTaskList$outboundSchema;
  /** @deprecated use `CreateIncidentTaskList$Outbound` instead. */
  export type Outbound = CreateIncidentTaskList$Outbound;
}

export function createIncidentTaskListToJSON(
  createIncidentTaskList: CreateIncidentTaskList,
): string {
  return JSON.stringify(
    CreateIncidentTaskList$outboundSchema.parse(createIncidentTaskList),
  );
}

export function createIncidentTaskListFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentTaskList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentTaskList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentTaskList' from JSON`,
  );
}
