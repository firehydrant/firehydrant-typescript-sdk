/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The components of the user's name
 */
export type CreateScimUserName = {
  /**
   * The family name of the User, or last name in most Western languages
   */
  familyName: string;
  /**
   * The given name of the User, or first name in most Western languages
   */
  givenName: string;
};

export type CreateScimUserEmail = {
  /**
   * String that represents an email address for the User
   */
  value: string;
  /**
   * Boolean which signifies if an email is intended as the primary email for the User
   */
  primary: boolean;
};

/**
 * Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.
 */
export type CreateScimUserRoles = {};

/**
 * SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.
 */
export type CreateScimUser = {
  /**
   * A service provider's unique identifier for the user
   */
  userName: string;
  /**
   * The components of the user's name
   */
  name: CreateScimUserName;
  /**
   * Email addresses for the User
   */
  emails: Array<CreateScimUserEmail>;
  /**
   * Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.
   */
  roles?: CreateScimUserRoles | null | undefined;
  /**
   * This attribute is intended to be used as a means to set, replace, or compare (i.e., filter for equality) a password
   */
  password?: string | null | undefined;
};

/** @internal */
export const CreateScimUserName$inboundSchema: z.ZodType<
  CreateScimUserName,
  z.ZodTypeDef,
  unknown
> = z.object({
  familyName: z.string(),
  givenName: z.string(),
});

/** @internal */
export type CreateScimUserName$Outbound = {
  familyName: string;
  givenName: string;
};

/** @internal */
export const CreateScimUserName$outboundSchema: z.ZodType<
  CreateScimUserName$Outbound,
  z.ZodTypeDef,
  CreateScimUserName
> = z.object({
  familyName: z.string(),
  givenName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScimUserName$ {
  /** @deprecated use `CreateScimUserName$inboundSchema` instead. */
  export const inboundSchema = CreateScimUserName$inboundSchema;
  /** @deprecated use `CreateScimUserName$outboundSchema` instead. */
  export const outboundSchema = CreateScimUserName$outboundSchema;
  /** @deprecated use `CreateScimUserName$Outbound` instead. */
  export type Outbound = CreateScimUserName$Outbound;
}

export function createScimUserNameToJSON(
  createScimUserName: CreateScimUserName,
): string {
  return JSON.stringify(
    CreateScimUserName$outboundSchema.parse(createScimUserName),
  );
}

export function createScimUserNameFromJSON(
  jsonString: string,
): SafeParseResult<CreateScimUserName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScimUserName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScimUserName' from JSON`,
  );
}

/** @internal */
export const CreateScimUserEmail$inboundSchema: z.ZodType<
  CreateScimUserEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  primary: z.boolean(),
});

/** @internal */
export type CreateScimUserEmail$Outbound = {
  value: string;
  primary: boolean;
};

/** @internal */
export const CreateScimUserEmail$outboundSchema: z.ZodType<
  CreateScimUserEmail$Outbound,
  z.ZodTypeDef,
  CreateScimUserEmail
> = z.object({
  value: z.string(),
  primary: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScimUserEmail$ {
  /** @deprecated use `CreateScimUserEmail$inboundSchema` instead. */
  export const inboundSchema = CreateScimUserEmail$inboundSchema;
  /** @deprecated use `CreateScimUserEmail$outboundSchema` instead. */
  export const outboundSchema = CreateScimUserEmail$outboundSchema;
  /** @deprecated use `CreateScimUserEmail$Outbound` instead. */
  export type Outbound = CreateScimUserEmail$Outbound;
}

export function createScimUserEmailToJSON(
  createScimUserEmail: CreateScimUserEmail,
): string {
  return JSON.stringify(
    CreateScimUserEmail$outboundSchema.parse(createScimUserEmail),
  );
}

export function createScimUserEmailFromJSON(
  jsonString: string,
): SafeParseResult<CreateScimUserEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScimUserEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScimUserEmail' from JSON`,
  );
}

/** @internal */
export const CreateScimUserRoles$inboundSchema: z.ZodType<
  CreateScimUserRoles,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateScimUserRoles$Outbound = {};

/** @internal */
export const CreateScimUserRoles$outboundSchema: z.ZodType<
  CreateScimUserRoles$Outbound,
  z.ZodTypeDef,
  CreateScimUserRoles
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScimUserRoles$ {
  /** @deprecated use `CreateScimUserRoles$inboundSchema` instead. */
  export const inboundSchema = CreateScimUserRoles$inboundSchema;
  /** @deprecated use `CreateScimUserRoles$outboundSchema` instead. */
  export const outboundSchema = CreateScimUserRoles$outboundSchema;
  /** @deprecated use `CreateScimUserRoles$Outbound` instead. */
  export type Outbound = CreateScimUserRoles$Outbound;
}

export function createScimUserRolesToJSON(
  createScimUserRoles: CreateScimUserRoles,
): string {
  return JSON.stringify(
    CreateScimUserRoles$outboundSchema.parse(createScimUserRoles),
  );
}

export function createScimUserRolesFromJSON(
  jsonString: string,
): SafeParseResult<CreateScimUserRoles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScimUserRoles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScimUserRoles' from JSON`,
  );
}

/** @internal */
export const CreateScimUser$inboundSchema: z.ZodType<
  CreateScimUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  userName: z.string(),
  name: z.lazy(() => CreateScimUserName$inboundSchema),
  emails: z.array(z.lazy(() => CreateScimUserEmail$inboundSchema)),
  roles: z.nullable(z.lazy(() => CreateScimUserRoles$inboundSchema)).optional(),
  password: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateScimUser$Outbound = {
  userName: string;
  name: CreateScimUserName$Outbound;
  emails: Array<CreateScimUserEmail$Outbound>;
  roles?: CreateScimUserRoles$Outbound | null | undefined;
  password?: string | null | undefined;
};

/** @internal */
export const CreateScimUser$outboundSchema: z.ZodType<
  CreateScimUser$Outbound,
  z.ZodTypeDef,
  CreateScimUser
> = z.object({
  userName: z.string(),
  name: z.lazy(() => CreateScimUserName$outboundSchema),
  emails: z.array(z.lazy(() => CreateScimUserEmail$outboundSchema)),
  roles: z.nullable(z.lazy(() => CreateScimUserRoles$outboundSchema))
    .optional(),
  password: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScimUser$ {
  /** @deprecated use `CreateScimUser$inboundSchema` instead. */
  export const inboundSchema = CreateScimUser$inboundSchema;
  /** @deprecated use `CreateScimUser$outboundSchema` instead. */
  export const outboundSchema = CreateScimUser$outboundSchema;
  /** @deprecated use `CreateScimUser$Outbound` instead. */
  export type Outbound = CreateScimUser$Outbound;
}

export function createScimUserToJSON(createScimUser: CreateScimUser): string {
  return JSON.stringify(CreateScimUser$outboundSchema.parse(createScimUser));
}

export function createScimUserFromJSON(
  jsonString: string,
): SafeParseResult<CreateScimUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScimUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScimUser' from JSON`,
  );
}
