/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * An object with additional error metadata
 */
export type Meta = {};

/**
 * ErrorEntity model
 */
export type ErrorEntityData = {
  detail?: string | null | undefined;
  messages?: Array<string> | null | undefined;
  /**
   * An object with additional error metadata
   */
  meta?: Meta | null | undefined;
  /**
   * A stable code on which to match errors
   */
  code?: string | null | undefined;
};

/**
 * ErrorEntity model
 */
export class ErrorEntity extends Error {
  detail?: string | null | undefined;
  messages?: Array<string> | null | undefined;
  /**
   * An object with additional error metadata
   */
  meta?: Meta | null | undefined;
  /**
   * A stable code on which to match errors
   */
  code?: string | null | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorEntityData;

  constructor(err: ErrorEntityData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.detail != null) this.detail = err.detail;
    if (err.messages != null) this.messages = err.messages;
    if (err.meta != null) this.meta = err.meta;
    if (err.code != null) this.code = err.code;

    this.name = "ErrorEntity";
  }
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Meta$Outbound = {};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const ErrorEntity$inboundSchema: z.ZodType<
  ErrorEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  detail: z.nullable(z.string()).optional(),
  messages: z.nullable(z.array(z.string())).optional(),
  meta: z.nullable(z.lazy(() => Meta$inboundSchema)).optional(),
  code: z.nullable(z.string()).optional(),
})
  .transform((v) => {
    return new ErrorEntity(v);
  });

/** @internal */
export type ErrorEntity$Outbound = {
  detail?: string | null | undefined;
  messages?: Array<string> | null | undefined;
  meta?: Meta$Outbound | null | undefined;
  code?: string | null | undefined;
};

/** @internal */
export const ErrorEntity$outboundSchema: z.ZodType<
  ErrorEntity$Outbound,
  z.ZodTypeDef,
  ErrorEntity
> = z.instanceof(ErrorEntity)
  .transform(v => v.data$)
  .pipe(z.object({
    detail: z.nullable(z.string()).optional(),
    messages: z.nullable(z.array(z.string())).optional(),
    meta: z.nullable(z.lazy(() => Meta$outboundSchema)).optional(),
    code: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorEntity$ {
  /** @deprecated use `ErrorEntity$inboundSchema` instead. */
  export const inboundSchema = ErrorEntity$inboundSchema;
  /** @deprecated use `ErrorEntity$outboundSchema` instead. */
  export const outboundSchema = ErrorEntity$outboundSchema;
  /** @deprecated use `ErrorEntity$Outbound` instead. */
  export type Outbound = ErrorEntity$Outbound;
}
