/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteChangeIdentityRequest = {
  identityId: string;
  changeId: string;
};

/** @internal */
export const DeleteChangeIdentityRequest$inboundSchema: z.ZodType<
  DeleteChangeIdentityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identity_id: z.string(),
  change_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "identity_id": "identityId",
    "change_id": "changeId",
  });
});

/** @internal */
export type DeleteChangeIdentityRequest$Outbound = {
  identity_id: string;
  change_id: string;
};

/** @internal */
export const DeleteChangeIdentityRequest$outboundSchema: z.ZodType<
  DeleteChangeIdentityRequest$Outbound,
  z.ZodTypeDef,
  DeleteChangeIdentityRequest
> = z.object({
  identityId: z.string(),
  changeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    identityId: "identity_id",
    changeId: "change_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChangeIdentityRequest$ {
  /** @deprecated use `DeleteChangeIdentityRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteChangeIdentityRequest$inboundSchema;
  /** @deprecated use `DeleteChangeIdentityRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteChangeIdentityRequest$outboundSchema;
  /** @deprecated use `DeleteChangeIdentityRequest$Outbound` instead. */
  export type Outbound = DeleteChangeIdentityRequest$Outbound;
}

export function deleteChangeIdentityRequestToJSON(
  deleteChangeIdentityRequest: DeleteChangeIdentityRequest,
): string {
  return JSON.stringify(
    DeleteChangeIdentityRequest$outboundSchema.parse(
      deleteChangeIdentityRequest,
    ),
  );
}

export function deleteChangeIdentityRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteChangeIdentityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteChangeIdentityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteChangeIdentityRequest' from JSON`,
  );
}
