/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTeamSignalRuleRequest = {
  teamId: string;
  postV1TeamsTeamIdSignalRules: components.PostV1TeamsTeamIdSignalRules;
};

/** @internal */
export const CreateTeamSignalRuleRequest$inboundSchema: z.ZodType<
  CreateTeamSignalRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  team_id: z.string(),
  postV1TeamsTeamIdSignalRules:
    components.PostV1TeamsTeamIdSignalRules$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
  });
});

/** @internal */
export type CreateTeamSignalRuleRequest$Outbound = {
  team_id: string;
  postV1TeamsTeamIdSignalRules:
    components.PostV1TeamsTeamIdSignalRules$Outbound;
};

/** @internal */
export const CreateTeamSignalRuleRequest$outboundSchema: z.ZodType<
  CreateTeamSignalRuleRequest$Outbound,
  z.ZodTypeDef,
  CreateTeamSignalRuleRequest
> = z.object({
  teamId: z.string(),
  postV1TeamsTeamIdSignalRules:
    components.PostV1TeamsTeamIdSignalRules$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTeamSignalRuleRequest$ {
  /** @deprecated use `CreateTeamSignalRuleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTeamSignalRuleRequest$inboundSchema;
  /** @deprecated use `CreateTeamSignalRuleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTeamSignalRuleRequest$outboundSchema;
  /** @deprecated use `CreateTeamSignalRuleRequest$Outbound` instead. */
  export type Outbound = CreateTeamSignalRuleRequest$Outbound;
}

export function createTeamSignalRuleRequestToJSON(
  createTeamSignalRuleRequest: CreateTeamSignalRuleRequest,
): string {
  return JSON.stringify(
    CreateTeamSignalRuleRequest$outboundSchema.parse(
      createTeamSignalRuleRequest,
    ),
  );
}

export function createTeamSignalRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTeamSignalRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTeamSignalRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTeamSignalRuleRequest' from JSON`,
  );
}
