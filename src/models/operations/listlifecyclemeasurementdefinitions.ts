/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListLifecycleMeasurementDefinitionsRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
};

/** @internal */
export const ListLifecycleMeasurementDefinitionsRequest$inboundSchema:
  z.ZodType<ListLifecycleMeasurementDefinitionsRequest, z.ZodTypeDef, unknown> =
    z.object({
      page: z.nullable(z.number().int()).optional(),
      per_page: z.nullable(z.number().int()).optional(),
    }).transform((v) => {
      return remap$(v, {
        "per_page": "perPage",
      });
    });

/** @internal */
export type ListLifecycleMeasurementDefinitionsRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
};

/** @internal */
export const ListLifecycleMeasurementDefinitionsRequest$outboundSchema:
  z.ZodType<
    ListLifecycleMeasurementDefinitionsRequest$Outbound,
    z.ZodTypeDef,
    ListLifecycleMeasurementDefinitionsRequest
  > = z.object({
    page: z.nullable(z.number().int()).optional(),
    perPage: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      perPage: "per_page",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLifecycleMeasurementDefinitionsRequest$ {
  /** @deprecated use `ListLifecycleMeasurementDefinitionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListLifecycleMeasurementDefinitionsRequest$inboundSchema;
  /** @deprecated use `ListLifecycleMeasurementDefinitionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListLifecycleMeasurementDefinitionsRequest$outboundSchema;
  /** @deprecated use `ListLifecycleMeasurementDefinitionsRequest$Outbound` instead. */
  export type Outbound = ListLifecycleMeasurementDefinitionsRequest$Outbound;
}

export function listLifecycleMeasurementDefinitionsRequestToJSON(
  listLifecycleMeasurementDefinitionsRequest:
    ListLifecycleMeasurementDefinitionsRequest,
): string {
  return JSON.stringify(
    ListLifecycleMeasurementDefinitionsRequest$outboundSchema.parse(
      listLifecycleMeasurementDefinitionsRequest,
    ),
  );
}

export function listLifecycleMeasurementDefinitionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListLifecycleMeasurementDefinitionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListLifecycleMeasurementDefinitionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListLifecycleMeasurementDefinitionsRequest' from JSON`,
  );
}
