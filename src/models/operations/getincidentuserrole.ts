/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIncidentUserRoleRequest = {
  incidentId: string;
  userId: string;
};

/** @internal */
export const GetIncidentUserRoleRequest$inboundSchema: z.ZodType<
  GetIncidentUserRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "user_id": "userId",
  });
});

/** @internal */
export type GetIncidentUserRoleRequest$Outbound = {
  incident_id: string;
  user_id: string;
};

/** @internal */
export const GetIncidentUserRoleRequest$outboundSchema: z.ZodType<
  GetIncidentUserRoleRequest$Outbound,
  z.ZodTypeDef,
  GetIncidentUserRoleRequest
> = z.object({
  incidentId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIncidentUserRoleRequest$ {
  /** @deprecated use `GetIncidentUserRoleRequest$inboundSchema` instead. */
  export const inboundSchema = GetIncidentUserRoleRequest$inboundSchema;
  /** @deprecated use `GetIncidentUserRoleRequest$outboundSchema` instead. */
  export const outboundSchema = GetIncidentUserRoleRequest$outboundSchema;
  /** @deprecated use `GetIncidentUserRoleRequest$Outbound` instead. */
  export type Outbound = GetIncidentUserRoleRequest$Outbound;
}

export function getIncidentUserRoleRequestToJSON(
  getIncidentUserRoleRequest: GetIncidentUserRoleRequest,
): string {
  return JSON.stringify(
    GetIncidentUserRoleRequest$outboundSchema.parse(getIncidentUserRoleRequest),
  );
}

export function getIncidentUserRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIncidentUserRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIncidentUserRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIncidentUserRoleRequest' from JSON`,
  );
}
