/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListServicesRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value
   */
  labels?: string | null | undefined;
  /**
   * A query to search services by their name or description
   */
  query?: string | null | undefined;
  /**
   * A query to search services by their name
   */
  name?: string | null | undefined;
  /**
   * A query to search services by their tier
   */
  tiers?: string | null | undefined;
  /**
   * A query to search services by if they are impacted with active incidents
   */
  impacted?: string | null | undefined;
  /**
   * A query to search services by their owner
   */
  owner?: string | null | undefined;
  /**
   * A comma separated list of team ids
   */
  respondingTeams?: string | null | undefined;
  /**
   * A comma separated list of functionality ids
   */
  functionalities?: string | null | undefined;
  /**
   * A query to find services that are available to be downstream dependencies for the passed service ID
   */
  availableDownstreamDependenciesForId?: string | null | undefined;
  /**
   * A query to find services that are available to be upstream dependencies for the passed service ID
   */
  availableUpstreamDependenciesForId?: string | null | undefined;
  /**
   * Boolean to determine whether to return a slimified version of the services object
   */
  lite?: boolean | null | undefined;
  /**
   * Use in conjunction with lite param to specify additional attributes to include
   */
  include?: Array<string> | null | undefined;
};

/** @internal */
export const ListServicesRequest$inboundSchema: z.ZodType<
  ListServicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  labels: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  tiers: z.nullable(z.string()).optional(),
  impacted: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()).optional(),
  responding_teams: z.nullable(z.string()).optional(),
  functionalities: z.nullable(z.string()).optional(),
  available_downstream_dependencies_for_id: z.nullable(z.string()).optional(),
  available_upstream_dependencies_for_id: z.nullable(z.string()).optional(),
  lite: z.nullable(z.boolean()).optional(),
  include: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "responding_teams": "respondingTeams",
    "available_downstream_dependencies_for_id":
      "availableDownstreamDependenciesForId",
    "available_upstream_dependencies_for_id":
      "availableUpstreamDependenciesForId",
  });
});

/** @internal */
export type ListServicesRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  labels?: string | null | undefined;
  query?: string | null | undefined;
  name?: string | null | undefined;
  tiers?: string | null | undefined;
  impacted?: string | null | undefined;
  owner?: string | null | undefined;
  responding_teams?: string | null | undefined;
  functionalities?: string | null | undefined;
  available_downstream_dependencies_for_id?: string | null | undefined;
  available_upstream_dependencies_for_id?: string | null | undefined;
  lite?: boolean | null | undefined;
  include?: Array<string> | null | undefined;
};

/** @internal */
export const ListServicesRequest$outboundSchema: z.ZodType<
  ListServicesRequest$Outbound,
  z.ZodTypeDef,
  ListServicesRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  labels: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  tiers: z.nullable(z.string()).optional(),
  impacted: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()).optional(),
  respondingTeams: z.nullable(z.string()).optional(),
  functionalities: z.nullable(z.string()).optional(),
  availableDownstreamDependenciesForId: z.nullable(z.string()).optional(),
  availableUpstreamDependenciesForId: z.nullable(z.string()).optional(),
  lite: z.nullable(z.boolean()).optional(),
  include: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    respondingTeams: "responding_teams",
    availableDownstreamDependenciesForId:
      "available_downstream_dependencies_for_id",
    availableUpstreamDependenciesForId:
      "available_upstream_dependencies_for_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListServicesRequest$ {
  /** @deprecated use `ListServicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListServicesRequest$inboundSchema;
  /** @deprecated use `ListServicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListServicesRequest$outboundSchema;
  /** @deprecated use `ListServicesRequest$Outbound` instead. */
  export type Outbound = ListServicesRequest$Outbound;
}

export function listServicesRequestToJSON(
  listServicesRequest: ListServicesRequest,
): string {
  return JSON.stringify(
    ListServicesRequest$outboundSchema.parse(listServicesRequest),
  );
}

export function listServicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListServicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListServicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListServicesRequest' from JSON`,
  );
}
