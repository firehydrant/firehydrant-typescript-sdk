/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCommentReactionRequest = {
  reactionId: string;
  conversationId: string;
  commentId: string;
};

/** @internal */
export const DeleteCommentReactionRequest$inboundSchema: z.ZodType<
  DeleteCommentReactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reaction_id: z.string(),
  conversation_id: z.string(),
  comment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "reaction_id": "reactionId",
    "conversation_id": "conversationId",
    "comment_id": "commentId",
  });
});

/** @internal */
export type DeleteCommentReactionRequest$Outbound = {
  reaction_id: string;
  conversation_id: string;
  comment_id: string;
};

/** @internal */
export const DeleteCommentReactionRequest$outboundSchema: z.ZodType<
  DeleteCommentReactionRequest$Outbound,
  z.ZodTypeDef,
  DeleteCommentReactionRequest
> = z.object({
  reactionId: z.string(),
  conversationId: z.string(),
  commentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    reactionId: "reaction_id",
    conversationId: "conversation_id",
    commentId: "comment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCommentReactionRequest$ {
  /** @deprecated use `DeleteCommentReactionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCommentReactionRequest$inboundSchema;
  /** @deprecated use `DeleteCommentReactionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCommentReactionRequest$outboundSchema;
  /** @deprecated use `DeleteCommentReactionRequest$Outbound` instead. */
  export type Outbound = DeleteCommentReactionRequest$Outbound;
}

export function deleteCommentReactionRequestToJSON(
  deleteCommentReactionRequest: DeleteCommentReactionRequest,
): string {
  return JSON.stringify(
    DeleteCommentReactionRequest$outboundSchema.parse(
      deleteCommentReactionRequest,
    ),
  );
}

export function deleteCommentReactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCommentReactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCommentReactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCommentReactionRequest' from JSON`,
  );
}
