/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRetrospectiveMetricsRequest = {
  /**
   * The start date to return metrics from
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The end date to return metrics from
   */
  endDate?: RFCDate | null | undefined;
};

/** @internal */
export const ListRetrospectiveMetricsRequest$inboundSchema: z.ZodType<
  ListRetrospectiveMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type ListRetrospectiveMetricsRequest$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const ListRetrospectiveMetricsRequest$outboundSchema: z.ZodType<
  ListRetrospectiveMetricsRequest$Outbound,
  z.ZodTypeDef,
  ListRetrospectiveMetricsRequest
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRetrospectiveMetricsRequest$ {
  /** @deprecated use `ListRetrospectiveMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRetrospectiveMetricsRequest$inboundSchema;
  /** @deprecated use `ListRetrospectiveMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRetrospectiveMetricsRequest$outboundSchema;
  /** @deprecated use `ListRetrospectiveMetricsRequest$Outbound` instead. */
  export type Outbound = ListRetrospectiveMetricsRequest$Outbound;
}

export function listRetrospectiveMetricsRequestToJSON(
  listRetrospectiveMetricsRequest: ListRetrospectiveMetricsRequest,
): string {
  return JSON.stringify(
    ListRetrospectiveMetricsRequest$outboundSchema.parse(
      listRetrospectiveMetricsRequest,
    ),
  );
}

export function listRetrospectiveMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRetrospectiveMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRetrospectiveMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRetrospectiveMetricsRequest' from JSON`,
  );
}
