/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSlackEmojiActionRequest = {
  /**
   * Slack Connection UUID
   */
  connectionId: string;
  emojiActionId: string;
};

/** @internal */
export const DeleteSlackEmojiActionRequest$inboundSchema: z.ZodType<
  DeleteSlackEmojiActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  emoji_action_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "emoji_action_id": "emojiActionId",
  });
});

/** @internal */
export type DeleteSlackEmojiActionRequest$Outbound = {
  connection_id: string;
  emoji_action_id: string;
};

/** @internal */
export const DeleteSlackEmojiActionRequest$outboundSchema: z.ZodType<
  DeleteSlackEmojiActionRequest$Outbound,
  z.ZodTypeDef,
  DeleteSlackEmojiActionRequest
> = z.object({
  connectionId: z.string(),
  emojiActionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    emojiActionId: "emoji_action_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSlackEmojiActionRequest$ {
  /** @deprecated use `DeleteSlackEmojiActionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSlackEmojiActionRequest$inboundSchema;
  /** @deprecated use `DeleteSlackEmojiActionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSlackEmojiActionRequest$outboundSchema;
  /** @deprecated use `DeleteSlackEmojiActionRequest$Outbound` instead. */
  export type Outbound = DeleteSlackEmojiActionRequest$Outbound;
}

export function deleteSlackEmojiActionRequestToJSON(
  deleteSlackEmojiActionRequest: DeleteSlackEmojiActionRequest,
): string {
  return JSON.stringify(
    DeleteSlackEmojiActionRequest$outboundSchema.parse(
      deleteSlackEmojiActionRequest,
    ),
  );
}

export function deleteSlackEmojiActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSlackEmojiActionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSlackEmojiActionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSlackEmojiActionRequest' from JSON`,
  );
}
