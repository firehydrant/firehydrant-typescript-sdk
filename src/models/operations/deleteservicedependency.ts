/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteServiceDependencyRequest = {
  serviceDependencyId: string;
};

/** @internal */
export const DeleteServiceDependencyRequest$inboundSchema: z.ZodType<
  DeleteServiceDependencyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_dependency_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "service_dependency_id": "serviceDependencyId",
  });
});

/** @internal */
export type DeleteServiceDependencyRequest$Outbound = {
  service_dependency_id: string;
};

/** @internal */
export const DeleteServiceDependencyRequest$outboundSchema: z.ZodType<
  DeleteServiceDependencyRequest$Outbound,
  z.ZodTypeDef,
  DeleteServiceDependencyRequest
> = z.object({
  serviceDependencyId: z.string(),
}).transform((v) => {
  return remap$(v, {
    serviceDependencyId: "service_dependency_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteServiceDependencyRequest$ {
  /** @deprecated use `DeleteServiceDependencyRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteServiceDependencyRequest$inboundSchema;
  /** @deprecated use `DeleteServiceDependencyRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteServiceDependencyRequest$outboundSchema;
  /** @deprecated use `DeleteServiceDependencyRequest$Outbound` instead. */
  export type Outbound = DeleteServiceDependencyRequest$Outbound;
}

export function deleteServiceDependencyRequestToJSON(
  deleteServiceDependencyRequest: DeleteServiceDependencyRequest,
): string {
  return JSON.stringify(
    DeleteServiceDependencyRequest$outboundSchema.parse(
      deleteServiceDependencyRequest,
    ),
  );
}

export function deleteServiceDependencyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteServiceDependencyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteServiceDependencyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteServiceDependencyRequest' from JSON`,
  );
}
