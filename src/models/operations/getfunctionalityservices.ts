/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFunctionalityServicesRequest = {
  functionalityId: string;
};

/** @internal */
export const GetFunctionalityServicesRequest$inboundSchema: z.ZodType<
  GetFunctionalityServicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  functionality_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "functionality_id": "functionalityId",
  });
});

/** @internal */
export type GetFunctionalityServicesRequest$Outbound = {
  functionality_id: string;
};

/** @internal */
export const GetFunctionalityServicesRequest$outboundSchema: z.ZodType<
  GetFunctionalityServicesRequest$Outbound,
  z.ZodTypeDef,
  GetFunctionalityServicesRequest
> = z.object({
  functionalityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    functionalityId: "functionality_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFunctionalityServicesRequest$ {
  /** @deprecated use `GetFunctionalityServicesRequest$inboundSchema` instead. */
  export const inboundSchema = GetFunctionalityServicesRequest$inboundSchema;
  /** @deprecated use `GetFunctionalityServicesRequest$outboundSchema` instead. */
  export const outboundSchema = GetFunctionalityServicesRequest$outboundSchema;
  /** @deprecated use `GetFunctionalityServicesRequest$Outbound` instead. */
  export type Outbound = GetFunctionalityServicesRequest$Outbound;
}

export function getFunctionalityServicesRequestToJSON(
  getFunctionalityServicesRequest: GetFunctionalityServicesRequest,
): string {
  return JSON.stringify(
    GetFunctionalityServicesRequest$outboundSchema.parse(
      getFunctionalityServicesRequest,
    ),
  );
}

export function getFunctionalityServicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFunctionalityServicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFunctionalityServicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFunctionalityServicesRequest' from JSON`,
  );
}
