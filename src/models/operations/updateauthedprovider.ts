/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAuthedProviderRequestBody = {
  /**
   * Set as the default integration for the account
   */
  integrationDefault?: boolean | null | undefined;
};

export type UpdateAuthedProviderRequest = {
  /**
   * Integration slug
   */
  integrationSlug: string;
  /**
   * Connection ID
   */
  connectionId: string;
  /**
   * Authed provider ID
   */
  authedProviderId: string;
  requestBody?: UpdateAuthedProviderRequestBody | undefined;
};

/** @internal */
export const UpdateAuthedProviderRequestBody$inboundSchema: z.ZodType<
  UpdateAuthedProviderRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_default: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_default": "integrationDefault",
  });
});

/** @internal */
export type UpdateAuthedProviderRequestBody$Outbound = {
  integration_default?: boolean | null | undefined;
};

/** @internal */
export const UpdateAuthedProviderRequestBody$outboundSchema: z.ZodType<
  UpdateAuthedProviderRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAuthedProviderRequestBody
> = z.object({
  integrationDefault: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    integrationDefault: "integration_default",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAuthedProviderRequestBody$ {
  /** @deprecated use `UpdateAuthedProviderRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateAuthedProviderRequestBody$inboundSchema;
  /** @deprecated use `UpdateAuthedProviderRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateAuthedProviderRequestBody$outboundSchema;
  /** @deprecated use `UpdateAuthedProviderRequestBody$Outbound` instead. */
  export type Outbound = UpdateAuthedProviderRequestBody$Outbound;
}

export function updateAuthedProviderRequestBodyToJSON(
  updateAuthedProviderRequestBody: UpdateAuthedProviderRequestBody,
): string {
  return JSON.stringify(
    UpdateAuthedProviderRequestBody$outboundSchema.parse(
      updateAuthedProviderRequestBody,
    ),
  );
}

export function updateAuthedProviderRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAuthedProviderRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAuthedProviderRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAuthedProviderRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAuthedProviderRequest$inboundSchema: z.ZodType<
  UpdateAuthedProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_slug: z.string(),
  connection_id: z.string(),
  authed_provider_id: z.string(),
  RequestBody: z.lazy(() => UpdateAuthedProviderRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
    "connection_id": "connectionId",
    "authed_provider_id": "authedProviderId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAuthedProviderRequest$Outbound = {
  integration_slug: string;
  connection_id: string;
  authed_provider_id: string;
  RequestBody?: UpdateAuthedProviderRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateAuthedProviderRequest$outboundSchema: z.ZodType<
  UpdateAuthedProviderRequest$Outbound,
  z.ZodTypeDef,
  UpdateAuthedProviderRequest
> = z.object({
  integrationSlug: z.string(),
  connectionId: z.string(),
  authedProviderId: z.string(),
  requestBody: z.lazy(() => UpdateAuthedProviderRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
    connectionId: "connection_id",
    authedProviderId: "authed_provider_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAuthedProviderRequest$ {
  /** @deprecated use `UpdateAuthedProviderRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAuthedProviderRequest$inboundSchema;
  /** @deprecated use `UpdateAuthedProviderRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAuthedProviderRequest$outboundSchema;
  /** @deprecated use `UpdateAuthedProviderRequest$Outbound` instead. */
  export type Outbound = UpdateAuthedProviderRequest$Outbound;
}

export function updateAuthedProviderRequestToJSON(
  updateAuthedProviderRequest: UpdateAuthedProviderRequest,
): string {
  return JSON.stringify(
    UpdateAuthedProviderRequest$outboundSchema.parse(
      updateAuthedProviderRequest,
    ),
  );
}

export function updateAuthedProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAuthedProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAuthedProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAuthedProviderRequest' from JSON`,
  );
}
