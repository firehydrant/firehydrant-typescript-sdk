/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateServiceDependencyRequest = {
  serviceDependencyId: string;
  patchV1ServiceDependenciesServiceDependencyId:
    components.PatchV1ServiceDependenciesServiceDependencyId;
};

/** @internal */
export const UpdateServiceDependencyRequest$inboundSchema: z.ZodType<
  UpdateServiceDependencyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_dependency_id: z.string(),
  patchV1ServiceDependenciesServiceDependencyId:
    components.PatchV1ServiceDependenciesServiceDependencyId$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "service_dependency_id": "serviceDependencyId",
  });
});

/** @internal */
export type UpdateServiceDependencyRequest$Outbound = {
  service_dependency_id: string;
  patchV1ServiceDependenciesServiceDependencyId:
    components.PatchV1ServiceDependenciesServiceDependencyId$Outbound;
};

/** @internal */
export const UpdateServiceDependencyRequest$outboundSchema: z.ZodType<
  UpdateServiceDependencyRequest$Outbound,
  z.ZodTypeDef,
  UpdateServiceDependencyRequest
> = z.object({
  serviceDependencyId: z.string(),
  patchV1ServiceDependenciesServiceDependencyId:
    components.PatchV1ServiceDependenciesServiceDependencyId$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    serviceDependencyId: "service_dependency_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceDependencyRequest$ {
  /** @deprecated use `UpdateServiceDependencyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceDependencyRequest$inboundSchema;
  /** @deprecated use `UpdateServiceDependencyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceDependencyRequest$outboundSchema;
  /** @deprecated use `UpdateServiceDependencyRequest$Outbound` instead. */
  export type Outbound = UpdateServiceDependencyRequest$Outbound;
}

export function updateServiceDependencyRequestToJSON(
  updateServiceDependencyRequest: UpdateServiceDependencyRequest,
): string {
  return JSON.stringify(
    UpdateServiceDependencyRequest$outboundSchema.parse(
      updateServiceDependencyRequest,
    ),
  );
}

export function updateServiceDependencyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceDependencyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceDependencyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceDependencyRequest' from JSON`,
  );
}
