/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IngestCatalogDataRequest = {
  catalogId: string;
  ingestCatalogData: components.IngestCatalogData;
};

/** @internal */
export const IngestCatalogDataRequest$inboundSchema: z.ZodType<
  IngestCatalogDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  catalog_id: z.string(),
  ingest_catalog_data: z.lazy(() => components.IngestCatalogData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "catalog_id": "catalogId",
    "ingest_catalog_data": "ingestCatalogData",
  });
});

/** @internal */
export type IngestCatalogDataRequest$Outbound = {
  catalog_id: string;
  ingest_catalog_data: components.IngestCatalogData$Outbound;
};

/** @internal */
export const IngestCatalogDataRequest$outboundSchema: z.ZodType<
  IngestCatalogDataRequest$Outbound,
  z.ZodTypeDef,
  IngestCatalogDataRequest
> = z.object({
  catalogId: z.string(),
  ingestCatalogData: z.lazy(() => components.IngestCatalogData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    catalogId: "catalog_id",
    ingestCatalogData: "ingest_catalog_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestCatalogDataRequest$ {
  /** @deprecated use `IngestCatalogDataRequest$inboundSchema` instead. */
  export const inboundSchema = IngestCatalogDataRequest$inboundSchema;
  /** @deprecated use `IngestCatalogDataRequest$outboundSchema` instead. */
  export const outboundSchema = IngestCatalogDataRequest$outboundSchema;
  /** @deprecated use `IngestCatalogDataRequest$Outbound` instead. */
  export type Outbound = IngestCatalogDataRequest$Outbound;
}

export function ingestCatalogDataRequestToJSON(
  ingestCatalogDataRequest: IngestCatalogDataRequest,
): string {
  return JSON.stringify(
    IngestCatalogDataRequest$outboundSchema.parse(ingestCatalogDataRequest),
  );
}

export function ingestCatalogDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<IngestCatalogDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IngestCatalogDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IngestCatalogDataRequest' from JSON`,
  );
}
