/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSignalWebhookTargetsRequest = {
  /**
   * A query string for searching through the list of webhook targets.
   */
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
};

/** @internal */
export const ListSignalWebhookTargetsRequest$inboundSchema: z.ZodType<
  ListSignalWebhookTargetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
  });
});

/** @internal */
export type ListSignalWebhookTargetsRequest$Outbound = {
  query?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListSignalWebhookTargetsRequest$outboundSchema: z.ZodType<
  ListSignalWebhookTargetsRequest$Outbound,
  z.ZodTypeDef,
  ListSignalWebhookTargetsRequest
> = z.object({
  query: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSignalWebhookTargetsRequest$ {
  /** @deprecated use `ListSignalWebhookTargetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSignalWebhookTargetsRequest$inboundSchema;
  /** @deprecated use `ListSignalWebhookTargetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSignalWebhookTargetsRequest$outboundSchema;
  /** @deprecated use `ListSignalWebhookTargetsRequest$Outbound` instead. */
  export type Outbound = ListSignalWebhookTargetsRequest$Outbound;
}

export function listSignalWebhookTargetsRequestToJSON(
  listSignalWebhookTargetsRequest: ListSignalWebhookTargetsRequest,
): string {
  return JSON.stringify(
    ListSignalWebhookTargetsRequest$outboundSchema.parse(
      listSignalWebhookTargetsRequest,
    ),
  );
}

export function listSignalWebhookTargetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSignalWebhookTargetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSignalWebhookTargetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSignalWebhookTargetsRequest' from JSON`,
  );
}
