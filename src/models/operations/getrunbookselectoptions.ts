/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRunbookSelectOptionsRequest = {
  integrationSlug: string;
  actionSlug: string;
  field: string;
  /**
   * Text string of a query for filtering values.
   */
  query?: string | undefined;
  /**
   * Generic params used to add specificity (eg an id of some kind) to the select options request
   */
  scope?: string | undefined;
  /**
   * Maximum number of items to return.
   */
  perPage?: number | undefined;
};

/** @internal */
export const GetRunbookSelectOptionsRequest$inboundSchema: z.ZodType<
  GetRunbookSelectOptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_slug: z.string(),
  action_slug: z.string(),
  field: z.string(),
  query: z.string().optional(),
  scope: z.string().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
    "action_slug": "actionSlug",
    "per_page": "perPage",
  });
});

/** @internal */
export type GetRunbookSelectOptionsRequest$Outbound = {
  integration_slug: string;
  action_slug: string;
  field: string;
  query?: string | undefined;
  scope?: string | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const GetRunbookSelectOptionsRequest$outboundSchema: z.ZodType<
  GetRunbookSelectOptionsRequest$Outbound,
  z.ZodTypeDef,
  GetRunbookSelectOptionsRequest
> = z.object({
  integrationSlug: z.string(),
  actionSlug: z.string(),
  field: z.string(),
  query: z.string().optional(),
  scope: z.string().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
    actionSlug: "action_slug",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunbookSelectOptionsRequest$ {
  /** @deprecated use `GetRunbookSelectOptionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetRunbookSelectOptionsRequest$inboundSchema;
  /** @deprecated use `GetRunbookSelectOptionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetRunbookSelectOptionsRequest$outboundSchema;
  /** @deprecated use `GetRunbookSelectOptionsRequest$Outbound` instead. */
  export type Outbound = GetRunbookSelectOptionsRequest$Outbound;
}

export function getRunbookSelectOptionsRequestToJSON(
  getRunbookSelectOptionsRequest: GetRunbookSelectOptionsRequest,
): string {
  return JSON.stringify(
    GetRunbookSelectOptionsRequest$outboundSchema.parse(
      getRunbookSelectOptionsRequest,
    ),
  );
}

export function getRunbookSelectOptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRunbookSelectOptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRunbookSelectOptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRunbookSelectOptionsRequest' from JSON`,
  );
}
