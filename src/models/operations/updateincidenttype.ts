/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIncidentTypeRequest = {
  id: string;
  patchV1IncidentTypesId: components.PatchV1IncidentTypesId;
};

/** @internal */
export const UpdateIncidentTypeRequest$inboundSchema: z.ZodType<
  UpdateIncidentTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  patchV1IncidentTypesId: components.PatchV1IncidentTypesId$inboundSchema,
});

/** @internal */
export type UpdateIncidentTypeRequest$Outbound = {
  id: string;
  patchV1IncidentTypesId: components.PatchV1IncidentTypesId$Outbound;
};

/** @internal */
export const UpdateIncidentTypeRequest$outboundSchema: z.ZodType<
  UpdateIncidentTypeRequest$Outbound,
  z.ZodTypeDef,
  UpdateIncidentTypeRequest
> = z.object({
  id: z.string(),
  patchV1IncidentTypesId: components.PatchV1IncidentTypesId$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentTypeRequest$ {
  /** @deprecated use `UpdateIncidentTypeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentTypeRequest$inboundSchema;
  /** @deprecated use `UpdateIncidentTypeRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentTypeRequest$outboundSchema;
  /** @deprecated use `UpdateIncidentTypeRequest$Outbound` instead. */
  export type Outbound = UpdateIncidentTypeRequest$Outbound;
}

export function updateIncidentTypeRequestToJSON(
  updateIncidentTypeRequest: UpdateIncidentTypeRequest,
): string {
  return JSON.stringify(
    UpdateIncidentTypeRequest$outboundSchema.parse(updateIncidentTypeRequest),
  );
}

export function updateIncidentTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentTypeRequest' from JSON`,
  );
}
