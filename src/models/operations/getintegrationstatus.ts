/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIntegrationStatusRequest = {
  slug: string;
};

/** @internal */
export const GetIntegrationStatusRequest$inboundSchema: z.ZodType<
  GetIntegrationStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
});

/** @internal */
export type GetIntegrationStatusRequest$Outbound = {
  slug: string;
};

/** @internal */
export const GetIntegrationStatusRequest$outboundSchema: z.ZodType<
  GetIntegrationStatusRequest$Outbound,
  z.ZodTypeDef,
  GetIntegrationStatusRequest
> = z.object({
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationStatusRequest$ {
  /** @deprecated use `GetIntegrationStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationStatusRequest$inboundSchema;
  /** @deprecated use `GetIntegrationStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationStatusRequest$outboundSchema;
  /** @deprecated use `GetIntegrationStatusRequest$Outbound` instead. */
  export type Outbound = GetIntegrationStatusRequest$Outbound;
}

export function getIntegrationStatusRequestToJSON(
  getIntegrationStatusRequest: GetIntegrationStatusRequest,
): string {
  return JSON.stringify(
    GetIntegrationStatusRequest$outboundSchema.parse(
      getIntegrationStatusRequest,
    ),
  );
}

export function getIntegrationStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationStatusRequest' from JSON`,
  );
}
