/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTaskListRequest = {
  taskListId: string;
  updateTaskList: components.UpdateTaskList;
};

/** @internal */
export const UpdateTaskListRequest$inboundSchema: z.ZodType<
  UpdateTaskListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_list_id: z.string(),
  update_task_list: z.lazy(() => components.UpdateTaskList$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "task_list_id": "taskListId",
    "update_task_list": "updateTaskList",
  });
});

/** @internal */
export type UpdateTaskListRequest$Outbound = {
  task_list_id: string;
  update_task_list: components.UpdateTaskList$Outbound;
};

/** @internal */
export const UpdateTaskListRequest$outboundSchema: z.ZodType<
  UpdateTaskListRequest$Outbound,
  z.ZodTypeDef,
  UpdateTaskListRequest
> = z.object({
  taskListId: z.string(),
  updateTaskList: z.lazy(() => components.UpdateTaskList$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    taskListId: "task_list_id",
    updateTaskList: "update_task_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTaskListRequest$ {
  /** @deprecated use `UpdateTaskListRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTaskListRequest$inboundSchema;
  /** @deprecated use `UpdateTaskListRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTaskListRequest$outboundSchema;
  /** @deprecated use `UpdateTaskListRequest$Outbound` instead. */
  export type Outbound = UpdateTaskListRequest$Outbound;
}

export function updateTaskListRequestToJSON(
  updateTaskListRequest: UpdateTaskListRequest,
): string {
  return JSON.stringify(
    UpdateTaskListRequest$outboundSchema.parse(updateTaskListRequest),
  );
}

export function updateTaskListRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTaskListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTaskListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTaskListRequest' from JSON`,
  );
}
