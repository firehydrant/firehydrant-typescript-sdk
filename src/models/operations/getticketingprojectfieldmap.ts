/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTicketingProjectFieldMapRequest = {
  mapId: string;
  ticketingProjectId: string;
};

/** @internal */
export const GetTicketingProjectFieldMapRequest$inboundSchema: z.ZodType<
  GetTicketingProjectFieldMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  map_id: z.string(),
  ticketing_project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "map_id": "mapId",
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type GetTicketingProjectFieldMapRequest$Outbound = {
  map_id: string;
  ticketing_project_id: string;
};

/** @internal */
export const GetTicketingProjectFieldMapRequest$outboundSchema: z.ZodType<
  GetTicketingProjectFieldMapRequest$Outbound,
  z.ZodTypeDef,
  GetTicketingProjectFieldMapRequest
> = z.object({
  mapId: z.string(),
  ticketingProjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    mapId: "map_id",
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTicketingProjectFieldMapRequest$ {
  /** @deprecated use `GetTicketingProjectFieldMapRequest$inboundSchema` instead. */
  export const inboundSchema = GetTicketingProjectFieldMapRequest$inboundSchema;
  /** @deprecated use `GetTicketingProjectFieldMapRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTicketingProjectFieldMapRequest$outboundSchema;
  /** @deprecated use `GetTicketingProjectFieldMapRequest$Outbound` instead. */
  export type Outbound = GetTicketingProjectFieldMapRequest$Outbound;
}

export function getTicketingProjectFieldMapRequestToJSON(
  getTicketingProjectFieldMapRequest: GetTicketingProjectFieldMapRequest,
): string {
  return JSON.stringify(
    GetTicketingProjectFieldMapRequest$outboundSchema.parse(
      getTicketingProjectFieldMapRequest,
    ),
  );
}

export function getTicketingProjectFieldMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTicketingProjectFieldMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTicketingProjectFieldMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTicketingProjectFieldMapRequest' from JSON`,
  );
}
