/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The group method of notification that will be delivered.
 */
export const CreateNotificationPolicyNotificationGroupMethod = {
  Any: "any",
  Push: "push",
  Email: "email",
  Voice: "voice",
  MobileText: "mobile_text",
  Chat: "chat",
} as const;
/**
 * The group method of notification that will be delivered.
 */
export type CreateNotificationPolicyNotificationGroupMethod = ClosedEnum<
  typeof CreateNotificationPolicyNotificationGroupMethod
>;

/**
 * The priority of the notification.
 */
export const CreateNotificationPolicyPriority = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
} as const;
/**
 * The priority of the notification.
 */
export type CreateNotificationPolicyPriority = ClosedEnum<
  typeof CreateNotificationPolicyPriority
>;

export type CreateNotificationPolicyRequest = {
  /**
   * The group method of notification that will be delivered.
   */
  notificationGroupMethod: CreateNotificationPolicyNotificationGroupMethod;
  /**
   * An ISO8601 duration string specifying the maximum delay of the notification.
   */
  maxDelay: string;
  /**
   * The priority of the notification.
   */
  priority: CreateNotificationPolicyPriority;
};

/** @internal */
export const CreateNotificationPolicyNotificationGroupMethod$inboundSchema:
  z.ZodNativeEnum<typeof CreateNotificationPolicyNotificationGroupMethod> = z
    .nativeEnum(CreateNotificationPolicyNotificationGroupMethod);

/** @internal */
export const CreateNotificationPolicyNotificationGroupMethod$outboundSchema:
  z.ZodNativeEnum<typeof CreateNotificationPolicyNotificationGroupMethod> =
    CreateNotificationPolicyNotificationGroupMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNotificationPolicyNotificationGroupMethod$ {
  /** @deprecated use `CreateNotificationPolicyNotificationGroupMethod$inboundSchema` instead. */
  export const inboundSchema =
    CreateNotificationPolicyNotificationGroupMethod$inboundSchema;
  /** @deprecated use `CreateNotificationPolicyNotificationGroupMethod$outboundSchema` instead. */
  export const outboundSchema =
    CreateNotificationPolicyNotificationGroupMethod$outboundSchema;
}

/** @internal */
export const CreateNotificationPolicyPriority$inboundSchema: z.ZodNativeEnum<
  typeof CreateNotificationPolicyPriority
> = z.nativeEnum(CreateNotificationPolicyPriority);

/** @internal */
export const CreateNotificationPolicyPriority$outboundSchema: z.ZodNativeEnum<
  typeof CreateNotificationPolicyPriority
> = CreateNotificationPolicyPriority$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNotificationPolicyPriority$ {
  /** @deprecated use `CreateNotificationPolicyPriority$inboundSchema` instead. */
  export const inboundSchema = CreateNotificationPolicyPriority$inboundSchema;
  /** @deprecated use `CreateNotificationPolicyPriority$outboundSchema` instead. */
  export const outboundSchema = CreateNotificationPolicyPriority$outboundSchema;
}

/** @internal */
export const CreateNotificationPolicyRequest$inboundSchema: z.ZodType<
  CreateNotificationPolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  notification_group_method:
    CreateNotificationPolicyNotificationGroupMethod$inboundSchema,
  max_delay: z.string(),
  priority: CreateNotificationPolicyPriority$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "notification_group_method": "notificationGroupMethod",
    "max_delay": "maxDelay",
  });
});

/** @internal */
export type CreateNotificationPolicyRequest$Outbound = {
  notification_group_method: string;
  max_delay: string;
  priority: string;
};

/** @internal */
export const CreateNotificationPolicyRequest$outboundSchema: z.ZodType<
  CreateNotificationPolicyRequest$Outbound,
  z.ZodTypeDef,
  CreateNotificationPolicyRequest
> = z.object({
  notificationGroupMethod:
    CreateNotificationPolicyNotificationGroupMethod$outboundSchema,
  maxDelay: z.string(),
  priority: CreateNotificationPolicyPriority$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    notificationGroupMethod: "notification_group_method",
    maxDelay: "max_delay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNotificationPolicyRequest$ {
  /** @deprecated use `CreateNotificationPolicyRequest$inboundSchema` instead. */
  export const inboundSchema = CreateNotificationPolicyRequest$inboundSchema;
  /** @deprecated use `CreateNotificationPolicyRequest$outboundSchema` instead. */
  export const outboundSchema = CreateNotificationPolicyRequest$outboundSchema;
  /** @deprecated use `CreateNotificationPolicyRequest$Outbound` instead. */
  export type Outbound = CreateNotificationPolicyRequest$Outbound;
}

export function createNotificationPolicyRequestToJSON(
  createNotificationPolicyRequest: CreateNotificationPolicyRequest,
): string {
  return JSON.stringify(
    CreateNotificationPolicyRequest$outboundSchema.parse(
      createNotificationPolicyRequest,
    ),
  );
}

export function createNotificationPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateNotificationPolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateNotificationPolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateNotificationPolicyRequest' from JSON`,
  );
}
