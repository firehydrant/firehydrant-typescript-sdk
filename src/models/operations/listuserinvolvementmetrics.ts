/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const QueryParamSortField = {
  UserCount: "user_count",
  IncidentCount: "incident_count",
  TimeSpent: "time_spent",
} as const;
export type QueryParamSortField = ClosedEnum<typeof QueryParamSortField>;

export const QueryParamSortDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type QueryParamSortDirection = ClosedEnum<
  typeof QueryParamSortDirection
>;

export type ListUserInvolvementMetricsRequest = {
  /**
   * The start date to return metrics from
   */
  startDate?: RFCDate | undefined;
  /**
   * The end date to return metrics from
   */
  endDate?: RFCDate | undefined;
  bucketSize?: string | undefined;
  by?: string | undefined;
  sortField?: QueryParamSortField | undefined;
  sortDirection?: QueryParamSortDirection | undefined;
  sortLimit?: number | undefined;
};

/** @internal */
export const QueryParamSortField$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortField
> = z.nativeEnum(QueryParamSortField);

/** @internal */
export const QueryParamSortField$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortField
> = QueryParamSortField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSortField$ {
  /** @deprecated use `QueryParamSortField$inboundSchema` instead. */
  export const inboundSchema = QueryParamSortField$inboundSchema;
  /** @deprecated use `QueryParamSortField$outboundSchema` instead. */
  export const outboundSchema = QueryParamSortField$outboundSchema;
}

/** @internal */
export const QueryParamSortDirection$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortDirection
> = z.nativeEnum(QueryParamSortDirection);

/** @internal */
export const QueryParamSortDirection$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortDirection
> = QueryParamSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSortDirection$ {
  /** @deprecated use `QueryParamSortDirection$inboundSchema` instead. */
  export const inboundSchema = QueryParamSortDirection$inboundSchema;
  /** @deprecated use `QueryParamSortDirection$outboundSchema` instead. */
  export const outboundSchema = QueryParamSortDirection$outboundSchema;
}

/** @internal */
export const ListUserInvolvementMetricsRequest$inboundSchema: z.ZodType<
  ListUserInvolvementMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
  bucket_size: z.string().optional(),
  by: z.string().optional(),
  sort_field: QueryParamSortField$inboundSchema.optional(),
  sort_direction: QueryParamSortDirection$inboundSchema.optional(),
  sort_limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "bucket_size": "bucketSize",
    "sort_field": "sortField",
    "sort_direction": "sortDirection",
    "sort_limit": "sortLimit",
  });
});

/** @internal */
export type ListUserInvolvementMetricsRequest$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
  bucket_size?: string | undefined;
  by?: string | undefined;
  sort_field?: string | undefined;
  sort_direction?: string | undefined;
  sort_limit?: number | undefined;
};

/** @internal */
export const ListUserInvolvementMetricsRequest$outboundSchema: z.ZodType<
  ListUserInvolvementMetricsRequest$Outbound,
  z.ZodTypeDef,
  ListUserInvolvementMetricsRequest
> = z.object({
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  bucketSize: z.string().optional(),
  by: z.string().optional(),
  sortField: QueryParamSortField$outboundSchema.optional(),
  sortDirection: QueryParamSortDirection$outboundSchema.optional(),
  sortLimit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    bucketSize: "bucket_size",
    sortField: "sort_field",
    sortDirection: "sort_direction",
    sortLimit: "sort_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserInvolvementMetricsRequest$ {
  /** @deprecated use `ListUserInvolvementMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = ListUserInvolvementMetricsRequest$inboundSchema;
  /** @deprecated use `ListUserInvolvementMetricsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListUserInvolvementMetricsRequest$outboundSchema;
  /** @deprecated use `ListUserInvolvementMetricsRequest$Outbound` instead. */
  export type Outbound = ListUserInvolvementMetricsRequest$Outbound;
}

export function listUserInvolvementMetricsRequestToJSON(
  listUserInvolvementMetricsRequest: ListUserInvolvementMetricsRequest,
): string {
  return JSON.stringify(
    ListUserInvolvementMetricsRequest$outboundSchema.parse(
      listUserInvolvementMetricsRequest,
    ),
  );
}

export function listUserInvolvementMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListUserInvolvementMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserInvolvementMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserInvolvementMetricsRequest' from JSON`,
  );
}
