/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSignalsEmailTargetRequest = {
  id: string;
  updateSignalsEmailTarget: components.UpdateSignalsEmailTarget;
};

/** @internal */
export const UpdateSignalsEmailTargetRequest$inboundSchema: z.ZodType<
  UpdateSignalsEmailTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  update_signals_email_target: z.lazy(() =>
    components.UpdateSignalsEmailTarget$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "update_signals_email_target": "updateSignalsEmailTarget",
  });
});

/** @internal */
export type UpdateSignalsEmailTargetRequest$Outbound = {
  id: string;
  update_signals_email_target: components.UpdateSignalsEmailTarget$Outbound;
};

/** @internal */
export const UpdateSignalsEmailTargetRequest$outboundSchema: z.ZodType<
  UpdateSignalsEmailTargetRequest$Outbound,
  z.ZodTypeDef,
  UpdateSignalsEmailTargetRequest
> = z.object({
  id: z.string(),
  updateSignalsEmailTarget: z.lazy(() =>
    components.UpdateSignalsEmailTarget$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    updateSignalsEmailTarget: "update_signals_email_target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsEmailTargetRequest$ {
  /** @deprecated use `UpdateSignalsEmailTargetRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSignalsEmailTargetRequest$inboundSchema;
  /** @deprecated use `UpdateSignalsEmailTargetRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSignalsEmailTargetRequest$outboundSchema;
  /** @deprecated use `UpdateSignalsEmailTargetRequest$Outbound` instead. */
  export type Outbound = UpdateSignalsEmailTargetRequest$Outbound;
}

export function updateSignalsEmailTargetRequestToJSON(
  updateSignalsEmailTargetRequest: UpdateSignalsEmailTargetRequest,
): string {
  return JSON.stringify(
    UpdateSignalsEmailTargetRequest$outboundSchema.parse(
      updateSignalsEmailTargetRequest,
    ),
  );
}

export function updateSignalsEmailTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignalsEmailTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSignalsEmailTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignalsEmailTargetRequest' from JSON`,
  );
}
