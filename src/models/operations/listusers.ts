/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListUsersRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * Text string of a query to filter users by name or email
   */
  query?: string | undefined;
  /**
   * Text string of a query to filter users by name
   */
  name?: string | undefined;
};

/** @internal */
export const ListUsersRequest$inboundSchema: z.ZodType<
  ListUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  query: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
  });
});

/** @internal */
export type ListUsersRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  query?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ListUsersRequest$outboundSchema: z.ZodType<
  ListUsersRequest$Outbound,
  z.ZodTypeDef,
  ListUsersRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  query: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersRequest$ {
  /** @deprecated use `ListUsersRequest$inboundSchema` instead. */
  export const inboundSchema = ListUsersRequest$inboundSchema;
  /** @deprecated use `ListUsersRequest$outboundSchema` instead. */
  export const outboundSchema = ListUsersRequest$outboundSchema;
  /** @deprecated use `ListUsersRequest$Outbound` instead. */
  export type Outbound = ListUsersRequest$Outbound;
}

export function listUsersRequestToJSON(
  listUsersRequest: ListUsersRequest,
): string {
  return JSON.stringify(
    ListUsersRequest$outboundSchema.parse(listUsersRequest),
  );
}

export function listUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersRequest' from JSON`,
  );
}
