/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
 */
export const TagMatchStrategy = {
  Any: "any",
  MatchAll: "match_all",
  Exclude: "exclude",
} as const;
/**
 * The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
 */
export type TagMatchStrategy = ClosedEnum<typeof TagMatchStrategy>;

export type ListAlertsRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * A text query for alerts
   */
  query?: string | undefined;
  /**
   * A comma separated list of user IDs. This currently only works for Signals alerts.
   */
  users?: string | undefined;
  /**
   * A comma separated list of team IDs. This currently only works for Signals alerts.
   */
  teams?: string | undefined;
  /**
   * A comma separated list of signals rule IDs. This currently only works for Signals alerts.
   */
  signalRules?: string | undefined;
  /**
   * A comma separated list of environment IDs. This currently only works for Signals alerts.
   */
  environments?: string | undefined;
  /**
   * A comma separated list of functionality IDs. This currently only works for Signals alerts.
   */
  functionalities?: string | undefined;
  /**
   * A comma separated list of service IDs. This currently only works for Signals alerts.
   */
  services?: string | undefined;
  /**
   * A comma separated list of tags. This currently only works for Signals alerts.
   */
  tags?: string | undefined;
  /**
   * The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
   */
  tagMatchStrategy?: TagMatchStrategy | undefined;
  /**
   * A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired
   */
  statuses?: string | undefined;
};

/** @internal */
export const TagMatchStrategy$inboundSchema: z.ZodNativeEnum<
  typeof TagMatchStrategy
> = z.nativeEnum(TagMatchStrategy);

/** @internal */
export const TagMatchStrategy$outboundSchema: z.ZodNativeEnum<
  typeof TagMatchStrategy
> = TagMatchStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagMatchStrategy$ {
  /** @deprecated use `TagMatchStrategy$inboundSchema` instead. */
  export const inboundSchema = TagMatchStrategy$inboundSchema;
  /** @deprecated use `TagMatchStrategy$outboundSchema` instead. */
  export const outboundSchema = TagMatchStrategy$outboundSchema;
}

/** @internal */
export const ListAlertsRequest$inboundSchema: z.ZodType<
  ListAlertsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  query: z.string().optional(),
  users: z.string().optional(),
  teams: z.string().optional(),
  signal_rules: z.string().optional(),
  environments: z.string().optional(),
  functionalities: z.string().optional(),
  services: z.string().optional(),
  tags: z.string().optional(),
  tag_match_strategy: TagMatchStrategy$inboundSchema.optional(),
  statuses: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "signal_rules": "signalRules",
    "tag_match_strategy": "tagMatchStrategy",
  });
});

/** @internal */
export type ListAlertsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  query?: string | undefined;
  users?: string | undefined;
  teams?: string | undefined;
  signal_rules?: string | undefined;
  environments?: string | undefined;
  functionalities?: string | undefined;
  services?: string | undefined;
  tags?: string | undefined;
  tag_match_strategy?: string | undefined;
  statuses?: string | undefined;
};

/** @internal */
export const ListAlertsRequest$outboundSchema: z.ZodType<
  ListAlertsRequest$Outbound,
  z.ZodTypeDef,
  ListAlertsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  query: z.string().optional(),
  users: z.string().optional(),
  teams: z.string().optional(),
  signalRules: z.string().optional(),
  environments: z.string().optional(),
  functionalities: z.string().optional(),
  services: z.string().optional(),
  tags: z.string().optional(),
  tagMatchStrategy: TagMatchStrategy$outboundSchema.optional(),
  statuses: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    signalRules: "signal_rules",
    tagMatchStrategy: "tag_match_strategy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAlertsRequest$ {
  /** @deprecated use `ListAlertsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAlertsRequest$inboundSchema;
  /** @deprecated use `ListAlertsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAlertsRequest$outboundSchema;
  /** @deprecated use `ListAlertsRequest$Outbound` instead. */
  export type Outbound = ListAlertsRequest$Outbound;
}

export function listAlertsRequestToJSON(
  listAlertsRequest: ListAlertsRequest,
): string {
  return JSON.stringify(
    ListAlertsRequest$outboundSchema.parse(listAlertsRequest),
  );
}

export function listAlertsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAlertsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAlertsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAlertsRequest' from JSON`,
  );
}
