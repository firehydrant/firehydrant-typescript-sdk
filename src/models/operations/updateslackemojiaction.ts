/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSlackEmojiActionRequestBody = {
  /**
   * The name of the emoji to associate with this action
   */
  emojiName?: string | null | undefined;
  /**
   * The ID of the incident type to associate with this emoji action
   */
  incidentTypeId?: string | null | undefined;
};

export type UpdateSlackEmojiActionRequest = {
  /**
   * Slack Connection UUID
   */
  connectionId: string;
  emojiActionId: string;
  requestBody?: UpdateSlackEmojiActionRequestBody | undefined;
};

/** @internal */
export const UpdateSlackEmojiActionRequestBody$inboundSchema: z.ZodType<
  UpdateSlackEmojiActionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  emoji_name: z.nullable(z.string()).optional(),
  incident_type_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "emoji_name": "emojiName",
    "incident_type_id": "incidentTypeId",
  });
});

/** @internal */
export type UpdateSlackEmojiActionRequestBody$Outbound = {
  emoji_name?: string | null | undefined;
  incident_type_id?: string | null | undefined;
};

/** @internal */
export const UpdateSlackEmojiActionRequestBody$outboundSchema: z.ZodType<
  UpdateSlackEmojiActionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSlackEmojiActionRequestBody
> = z.object({
  emojiName: z.nullable(z.string()).optional(),
  incidentTypeId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    emojiName: "emoji_name",
    incidentTypeId: "incident_type_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSlackEmojiActionRequestBody$ {
  /** @deprecated use `UpdateSlackEmojiActionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSlackEmojiActionRequestBody$inboundSchema;
  /** @deprecated use `UpdateSlackEmojiActionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSlackEmojiActionRequestBody$outboundSchema;
  /** @deprecated use `UpdateSlackEmojiActionRequestBody$Outbound` instead. */
  export type Outbound = UpdateSlackEmojiActionRequestBody$Outbound;
}

export function updateSlackEmojiActionRequestBodyToJSON(
  updateSlackEmojiActionRequestBody: UpdateSlackEmojiActionRequestBody,
): string {
  return JSON.stringify(
    UpdateSlackEmojiActionRequestBody$outboundSchema.parse(
      updateSlackEmojiActionRequestBody,
    ),
  );
}

export function updateSlackEmojiActionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSlackEmojiActionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSlackEmojiActionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSlackEmojiActionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSlackEmojiActionRequest$inboundSchema: z.ZodType<
  UpdateSlackEmojiActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  emoji_action_id: z.string(),
  RequestBody: z.lazy(() => UpdateSlackEmojiActionRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "emoji_action_id": "emojiActionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSlackEmojiActionRequest$Outbound = {
  connection_id: string;
  emoji_action_id: string;
  RequestBody?: UpdateSlackEmojiActionRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSlackEmojiActionRequest$outboundSchema: z.ZodType<
  UpdateSlackEmojiActionRequest$Outbound,
  z.ZodTypeDef,
  UpdateSlackEmojiActionRequest
> = z.object({
  connectionId: z.string(),
  emojiActionId: z.string(),
  requestBody: z.lazy(() => UpdateSlackEmojiActionRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    emojiActionId: "emoji_action_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSlackEmojiActionRequest$ {
  /** @deprecated use `UpdateSlackEmojiActionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSlackEmojiActionRequest$inboundSchema;
  /** @deprecated use `UpdateSlackEmojiActionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSlackEmojiActionRequest$outboundSchema;
  /** @deprecated use `UpdateSlackEmojiActionRequest$Outbound` instead. */
  export type Outbound = UpdateSlackEmojiActionRequest$Outbound;
}

export function updateSlackEmojiActionRequestToJSON(
  updateSlackEmojiActionRequest: UpdateSlackEmojiActionRequest,
): string {
  return JSON.stringify(
    UpdateSlackEmojiActionRequest$outboundSchema.parse(
      updateSlackEmojiActionRequest,
    ),
  );
}

export function updateSlackEmojiActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSlackEmojiActionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSlackEmojiActionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSlackEmojiActionRequest' from JSON`,
  );
}
