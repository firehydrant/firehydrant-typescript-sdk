/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter on status of the role assignment
 */
export const Status = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * Filter on status of the role assignment
 */
export type Status = ClosedEnum<typeof Status>;

export type ListIncidentRoleAssignmentsRequest = {
  incidentId: string;
  /**
   * Filter on status of the role assignment
   */
  status?: Status | null | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const ListIncidentRoleAssignmentsRequest$inboundSchema: z.ZodType<
  ListIncidentRoleAssignmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  status: z.nullable(Status$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
  });
});

/** @internal */
export type ListIncidentRoleAssignmentsRequest$Outbound = {
  incident_id: string;
  status?: string | null | undefined;
};

/** @internal */
export const ListIncidentRoleAssignmentsRequest$outboundSchema: z.ZodType<
  ListIncidentRoleAssignmentsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentRoleAssignmentsRequest
> = z.object({
  incidentId: z.string(),
  status: z.nullable(Status$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentRoleAssignmentsRequest$ {
  /** @deprecated use `ListIncidentRoleAssignmentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentRoleAssignmentsRequest$inboundSchema;
  /** @deprecated use `ListIncidentRoleAssignmentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListIncidentRoleAssignmentsRequest$outboundSchema;
  /** @deprecated use `ListIncidentRoleAssignmentsRequest$Outbound` instead. */
  export type Outbound = ListIncidentRoleAssignmentsRequest$Outbound;
}

export function listIncidentRoleAssignmentsRequestToJSON(
  listIncidentRoleAssignmentsRequest: ListIncidentRoleAssignmentsRequest,
): string {
  return JSON.stringify(
    ListIncidentRoleAssignmentsRequest$outboundSchema.parse(
      listIncidentRoleAssignmentsRequest,
    ),
  );
}

export function listIncidentRoleAssignmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentRoleAssignmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIncidentRoleAssignmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentRoleAssignmentsRequest' from JSON`,
  );
}
