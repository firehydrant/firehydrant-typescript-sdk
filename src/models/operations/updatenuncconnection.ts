/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNuncConnectionRequestBody = {
  companyName?: string | null | undefined;
  companyWebsite?: string | null | undefined;
  companyTosUrl?: string | null | undefined;
  greetingTitle?: string | null | undefined;
  greetingBody?: string | null | undefined;
  operationalMessage?: string | null | undefined;
  title?: string | null | undefined;
  /**
   * Status page condition to map your severity matrix condition to
   */
  conditionsNuncCondition: Array<string>;
  /**
   * Severity matrix condition id
   */
  conditionsConditionId: Array<string>;
  componentsInfrastructureType: Array<string>;
  componentsInfrastructureId: Array<string>;
  primaryColor?: string | null | undefined;
  secondaryColor?: string | null | undefined;
  exposedFields?: Array<string> | null | undefined;
  enableHistogram?: boolean | null | undefined;
  uiVersion?: number | null | undefined;
};

export type UpdateNuncConnectionRequest = {
  nuncConnectionId: string;
  requestBody: UpdateNuncConnectionRequestBody;
};

/** @internal */
export const UpdateNuncConnectionRequestBody$inboundSchema: z.ZodType<
  UpdateNuncConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_name: z.nullable(z.string()).optional(),
  company_website: z.nullable(z.string()).optional(),
  company_tos_url: z.nullable(z.string()).optional(),
  greeting_title: z.nullable(z.string()).optional(),
  greeting_body: z.nullable(z.string()).optional(),
  operational_message: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  "conditions[nunc_condition]": z.array(z.string()),
  "conditions[condition_id]": z.array(z.string()),
  "components[infrastructure_type]": z.array(z.string()),
  "components[infrastructure_id]": z.array(z.string()),
  primary_color: z.nullable(z.string()).optional(),
  secondary_color: z.nullable(z.string()).optional(),
  exposed_fields: z.nullable(z.array(z.string())).optional(),
  enable_histogram: z.nullable(z.boolean()).optional(),
  ui_version: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "company_website": "companyWebsite",
    "company_tos_url": "companyTosUrl",
    "greeting_title": "greetingTitle",
    "greeting_body": "greetingBody",
    "operational_message": "operationalMessage",
    "conditions[nunc_condition]": "conditionsNuncCondition",
    "conditions[condition_id]": "conditionsConditionId",
    "components[infrastructure_type]": "componentsInfrastructureType",
    "components[infrastructure_id]": "componentsInfrastructureId",
    "primary_color": "primaryColor",
    "secondary_color": "secondaryColor",
    "exposed_fields": "exposedFields",
    "enable_histogram": "enableHistogram",
    "ui_version": "uiVersion",
  });
});

/** @internal */
export type UpdateNuncConnectionRequestBody$Outbound = {
  company_name?: string | null | undefined;
  company_website?: string | null | undefined;
  company_tos_url?: string | null | undefined;
  greeting_title?: string | null | undefined;
  greeting_body?: string | null | undefined;
  operational_message?: string | null | undefined;
  title?: string | null | undefined;
  "conditions[nunc_condition]": Array<string>;
  "conditions[condition_id]": Array<string>;
  "components[infrastructure_type]": Array<string>;
  "components[infrastructure_id]": Array<string>;
  primary_color?: string | null | undefined;
  secondary_color?: string | null | undefined;
  exposed_fields?: Array<string> | null | undefined;
  enable_histogram?: boolean | null | undefined;
  ui_version?: number | null | undefined;
};

/** @internal */
export const UpdateNuncConnectionRequestBody$outboundSchema: z.ZodType<
  UpdateNuncConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateNuncConnectionRequestBody
> = z.object({
  companyName: z.nullable(z.string()).optional(),
  companyWebsite: z.nullable(z.string()).optional(),
  companyTosUrl: z.nullable(z.string()).optional(),
  greetingTitle: z.nullable(z.string()).optional(),
  greetingBody: z.nullable(z.string()).optional(),
  operationalMessage: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  conditionsNuncCondition: z.array(z.string()),
  conditionsConditionId: z.array(z.string()),
  componentsInfrastructureType: z.array(z.string()),
  componentsInfrastructureId: z.array(z.string()),
  primaryColor: z.nullable(z.string()).optional(),
  secondaryColor: z.nullable(z.string()).optional(),
  exposedFields: z.nullable(z.array(z.string())).optional(),
  enableHistogram: z.nullable(z.boolean()).optional(),
  uiVersion: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    companyWebsite: "company_website",
    companyTosUrl: "company_tos_url",
    greetingTitle: "greeting_title",
    greetingBody: "greeting_body",
    operationalMessage: "operational_message",
    conditionsNuncCondition: "conditions[nunc_condition]",
    conditionsConditionId: "conditions[condition_id]",
    componentsInfrastructureType: "components[infrastructure_type]",
    componentsInfrastructureId: "components[infrastructure_id]",
    primaryColor: "primary_color",
    secondaryColor: "secondary_color",
    exposedFields: "exposed_fields",
    enableHistogram: "enable_histogram",
    uiVersion: "ui_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncConnectionRequestBody$ {
  /** @deprecated use `UpdateNuncConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncConnectionRequestBody$inboundSchema;
  /** @deprecated use `UpdateNuncConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncConnectionRequestBody$outboundSchema;
  /** @deprecated use `UpdateNuncConnectionRequestBody$Outbound` instead. */
  export type Outbound = UpdateNuncConnectionRequestBody$Outbound;
}

export function updateNuncConnectionRequestBodyToJSON(
  updateNuncConnectionRequestBody: UpdateNuncConnectionRequestBody,
): string {
  return JSON.stringify(
    UpdateNuncConnectionRequestBody$outboundSchema.parse(
      updateNuncConnectionRequestBody,
    ),
  );
}

export function updateNuncConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncConnectionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateNuncConnectionRequest$inboundSchema: z.ZodType<
  UpdateNuncConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  RequestBody: z.lazy(() => UpdateNuncConnectionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateNuncConnectionRequest$Outbound = {
  nunc_connection_id: string;
  RequestBody: UpdateNuncConnectionRequestBody$Outbound;
};

/** @internal */
export const UpdateNuncConnectionRequest$outboundSchema: z.ZodType<
  UpdateNuncConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateNuncConnectionRequest
> = z.object({
  nuncConnectionId: z.string(),
  requestBody: z.lazy(() => UpdateNuncConnectionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncConnectionRequest$ {
  /** @deprecated use `UpdateNuncConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateNuncConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateNuncConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateNuncConnectionRequest$Outbound;
}

export function updateNuncConnectionRequestToJSON(
  updateNuncConnectionRequest: UpdateNuncConnectionRequest,
): string {
  return JSON.stringify(
    UpdateNuncConnectionRequest$outboundSchema.parse(
      updateNuncConnectionRequest,
    ),
  );
}

export function updateNuncConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncConnectionRequest' from JSON`,
  );
}
