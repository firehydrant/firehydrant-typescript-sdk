/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteIncidentRoleAssignmentRequest = {
  incidentId: string;
  roleAssignmentId: string;
};

/** @internal */
export const DeleteIncidentRoleAssignmentRequest$inboundSchema: z.ZodType<
  DeleteIncidentRoleAssignmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  role_assignment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "role_assignment_id": "roleAssignmentId",
  });
});

/** @internal */
export type DeleteIncidentRoleAssignmentRequest$Outbound = {
  incident_id: string;
  role_assignment_id: string;
};

/** @internal */
export const DeleteIncidentRoleAssignmentRequest$outboundSchema: z.ZodType<
  DeleteIncidentRoleAssignmentRequest$Outbound,
  z.ZodTypeDef,
  DeleteIncidentRoleAssignmentRequest
> = z.object({
  incidentId: z.string(),
  roleAssignmentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    roleAssignmentId: "role_assignment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIncidentRoleAssignmentRequest$ {
  /** @deprecated use `DeleteIncidentRoleAssignmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteIncidentRoleAssignmentRequest$inboundSchema;
  /** @deprecated use `DeleteIncidentRoleAssignmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteIncidentRoleAssignmentRequest$outboundSchema;
  /** @deprecated use `DeleteIncidentRoleAssignmentRequest$Outbound` instead. */
  export type Outbound = DeleteIncidentRoleAssignmentRequest$Outbound;
}

export function deleteIncidentRoleAssignmentRequestToJSON(
  deleteIncidentRoleAssignmentRequest: DeleteIncidentRoleAssignmentRequest,
): string {
  return JSON.stringify(
    DeleteIncidentRoleAssignmentRequest$outboundSchema.parse(
      deleteIncidentRoleAssignmentRequest,
    ),
  );
}

export function deleteIncidentRoleAssignmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIncidentRoleAssignmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteIncidentRoleAssignmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIncidentRoleAssignmentRequest' from JSON`,
  );
}
