/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIncidentChangeEventRequest = {
  relatedChangeEventId: string;
  incidentId: string;
  updateIncidentChangeEvent: components.UpdateIncidentChangeEvent;
};

/** @internal */
export const UpdateIncidentChangeEventRequest$inboundSchema: z.ZodType<
  UpdateIncidentChangeEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  related_change_event_id: z.string(),
  incident_id: z.string(),
  update_incident_change_event: z.lazy(() =>
    components.UpdateIncidentChangeEvent$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "related_change_event_id": "relatedChangeEventId",
    "incident_id": "incidentId",
    "update_incident_change_event": "updateIncidentChangeEvent",
  });
});

/** @internal */
export type UpdateIncidentChangeEventRequest$Outbound = {
  related_change_event_id: string;
  incident_id: string;
  update_incident_change_event: components.UpdateIncidentChangeEvent$Outbound;
};

/** @internal */
export const UpdateIncidentChangeEventRequest$outboundSchema: z.ZodType<
  UpdateIncidentChangeEventRequest$Outbound,
  z.ZodTypeDef,
  UpdateIncidentChangeEventRequest
> = z.object({
  relatedChangeEventId: z.string(),
  incidentId: z.string(),
  updateIncidentChangeEvent: z.lazy(() =>
    components.UpdateIncidentChangeEvent$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    relatedChangeEventId: "related_change_event_id",
    incidentId: "incident_id",
    updateIncidentChangeEvent: "update_incident_change_event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIncidentChangeEventRequest$ {
  /** @deprecated use `UpdateIncidentChangeEventRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIncidentChangeEventRequest$inboundSchema;
  /** @deprecated use `UpdateIncidentChangeEventRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateIncidentChangeEventRequest$outboundSchema;
  /** @deprecated use `UpdateIncidentChangeEventRequest$Outbound` instead. */
  export type Outbound = UpdateIncidentChangeEventRequest$Outbound;
}

export function updateIncidentChangeEventRequestToJSON(
  updateIncidentChangeEventRequest: UpdateIncidentChangeEventRequest,
): string {
  return JSON.stringify(
    UpdateIncidentChangeEventRequest$outboundSchema.parse(
      updateIncidentChangeEventRequest,
    ),
  );
}

export function updateIncidentChangeEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIncidentChangeEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIncidentChangeEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIncidentChangeEventRequest' from JSON`,
  );
}
