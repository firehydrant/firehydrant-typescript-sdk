/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ShareIncidentRetrospectivesRequestBody = {
  /**
   * An array of user IDs with whom to share the report
   */
  userIds?: Array<string> | null | undefined;
  /**
   * An array of team IDs with whom to share the report
   */
  teamIds?: Array<string> | null | undefined;
  /**
   * An array of retrospective IDs to share
   */
  retrospectiveIds: Array<string>;
};

export type ShareIncidentRetrospectivesRequest = {
  incidentId: string;
  requestBody: ShareIncidentRetrospectivesRequestBody;
};

/** @internal */
export const ShareIncidentRetrospectivesRequestBody$inboundSchema: z.ZodType<
  ShareIncidentRetrospectivesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_ids: z.nullable(z.array(z.string())).optional(),
  team_ids: z.nullable(z.array(z.string())).optional(),
  retrospective_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "user_ids": "userIds",
    "team_ids": "teamIds",
    "retrospective_ids": "retrospectiveIds",
  });
});

/** @internal */
export type ShareIncidentRetrospectivesRequestBody$Outbound = {
  user_ids?: Array<string> | null | undefined;
  team_ids?: Array<string> | null | undefined;
  retrospective_ids: Array<string>;
};

/** @internal */
export const ShareIncidentRetrospectivesRequestBody$outboundSchema: z.ZodType<
  ShareIncidentRetrospectivesRequestBody$Outbound,
  z.ZodTypeDef,
  ShareIncidentRetrospectivesRequestBody
> = z.object({
  userIds: z.nullable(z.array(z.string())).optional(),
  teamIds: z.nullable(z.array(z.string())).optional(),
  retrospectiveIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    userIds: "user_ids",
    teamIds: "team_ids",
    retrospectiveIds: "retrospective_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShareIncidentRetrospectivesRequestBody$ {
  /** @deprecated use `ShareIncidentRetrospectivesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ShareIncidentRetrospectivesRequestBody$inboundSchema;
  /** @deprecated use `ShareIncidentRetrospectivesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ShareIncidentRetrospectivesRequestBody$outboundSchema;
  /** @deprecated use `ShareIncidentRetrospectivesRequestBody$Outbound` instead. */
  export type Outbound = ShareIncidentRetrospectivesRequestBody$Outbound;
}

export function shareIncidentRetrospectivesRequestBodyToJSON(
  shareIncidentRetrospectivesRequestBody:
    ShareIncidentRetrospectivesRequestBody,
): string {
  return JSON.stringify(
    ShareIncidentRetrospectivesRequestBody$outboundSchema.parse(
      shareIncidentRetrospectivesRequestBody,
    ),
  );
}

export function shareIncidentRetrospectivesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ShareIncidentRetrospectivesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ShareIncidentRetrospectivesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShareIncidentRetrospectivesRequestBody' from JSON`,
  );
}

/** @internal */
export const ShareIncidentRetrospectivesRequest$inboundSchema: z.ZodType<
  ShareIncidentRetrospectivesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.lazy(() =>
    ShareIncidentRetrospectivesRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ShareIncidentRetrospectivesRequest$Outbound = {
  incident_id: string;
  RequestBody: ShareIncidentRetrospectivesRequestBody$Outbound;
};

/** @internal */
export const ShareIncidentRetrospectivesRequest$outboundSchema: z.ZodType<
  ShareIncidentRetrospectivesRequest$Outbound,
  z.ZodTypeDef,
  ShareIncidentRetrospectivesRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.lazy(() =>
    ShareIncidentRetrospectivesRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShareIncidentRetrospectivesRequest$ {
  /** @deprecated use `ShareIncidentRetrospectivesRequest$inboundSchema` instead. */
  export const inboundSchema = ShareIncidentRetrospectivesRequest$inboundSchema;
  /** @deprecated use `ShareIncidentRetrospectivesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ShareIncidentRetrospectivesRequest$outboundSchema;
  /** @deprecated use `ShareIncidentRetrospectivesRequest$Outbound` instead. */
  export type Outbound = ShareIncidentRetrospectivesRequest$Outbound;
}

export function shareIncidentRetrospectivesRequestToJSON(
  shareIncidentRetrospectivesRequest: ShareIncidentRetrospectivesRequest,
): string {
  return JSON.stringify(
    ShareIncidentRetrospectivesRequest$outboundSchema.parse(
      shareIncidentRetrospectivesRequest,
    ),
  );
}

export function shareIncidentRetrospectivesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ShareIncidentRetrospectivesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ShareIncidentRetrospectivesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShareIncidentRetrospectivesRequest' from JSON`,
  );
}
