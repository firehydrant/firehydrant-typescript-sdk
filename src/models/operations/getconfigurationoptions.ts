/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetConfigurationOptionsRequest = {
  ticketingProjectId: string;
};

/** @internal */
export const GetConfigurationOptionsRequest$inboundSchema: z.ZodType<
  GetConfigurationOptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticketing_project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type GetConfigurationOptionsRequest$Outbound = {
  ticketing_project_id: string;
};

/** @internal */
export const GetConfigurationOptionsRequest$outboundSchema: z.ZodType<
  GetConfigurationOptionsRequest$Outbound,
  z.ZodTypeDef,
  GetConfigurationOptionsRequest
> = z.object({
  ticketingProjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationOptionsRequest$ {
  /** @deprecated use `GetConfigurationOptionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationOptionsRequest$inboundSchema;
  /** @deprecated use `GetConfigurationOptionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationOptionsRequest$outboundSchema;
  /** @deprecated use `GetConfigurationOptionsRequest$Outbound` instead. */
  export type Outbound = GetConfigurationOptionsRequest$Outbound;
}

export function getConfigurationOptionsRequestToJSON(
  getConfigurationOptionsRequest: GetConfigurationOptionsRequest,
): string {
  return JSON.stringify(
    GetConfigurationOptionsRequest$outboundSchema.parse(
      getConfigurationOptionsRequest,
    ),
  );
}

export function getConfigurationOptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationOptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationOptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationOptionsRequest' from JSON`,
  );
}
