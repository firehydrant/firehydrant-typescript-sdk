/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SectionsSlug = {
  Timeline: "timeline",
  KeyData: "key_data",
  Details: "details",
  Resources: "resources",
  Actions: "actions",
} as const;
export type SectionsSlug = ClosedEnum<typeof SectionsSlug>;

export const CreateRetrospectiveTemplateFieldsType = {
  Text: "text",
  SingleSelect: "single_select",
  MultiSelect: "multi_select",
  Numeric: "numeric",
  Datetime: "datetime",
  DynamicInputGroup: "dynamic_input_group",
  Markdown: "markdown",
  MarkdownText: "markdown_text",
} as const;
export type CreateRetrospectiveTemplateFieldsType = ClosedEnum<
  typeof CreateRetrospectiveTemplateFieldsType
>;

export type CreateRetrospectiveTemplateRequest = {
  name: string;
  description: string;
  isDefault?: boolean | null | undefined;
  sectionsSlug: Array<SectionsSlug>;
  sectionsElements: Array<string>;
  fieldsLabel: Array<string>;
  fieldsType: Array<CreateRetrospectiveTemplateFieldsType>;
  fieldsHelpText?: Array<string> | null | undefined;
  fieldsPermissibleValues?: Array<string> | null | undefined;
  fieldsIsRequired?: Array<boolean> | null | undefined;
  fieldsSchema?: Array<string> | null | undefined;
};

/** @internal */
export const SectionsSlug$inboundSchema: z.ZodNativeEnum<typeof SectionsSlug> =
  z.nativeEnum(SectionsSlug);

/** @internal */
export const SectionsSlug$outboundSchema: z.ZodNativeEnum<typeof SectionsSlug> =
  SectionsSlug$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SectionsSlug$ {
  /** @deprecated use `SectionsSlug$inboundSchema` instead. */
  export const inboundSchema = SectionsSlug$inboundSchema;
  /** @deprecated use `SectionsSlug$outboundSchema` instead. */
  export const outboundSchema = SectionsSlug$outboundSchema;
}

/** @internal */
export const CreateRetrospectiveTemplateFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof CreateRetrospectiveTemplateFieldsType> = z.nativeEnum(
    CreateRetrospectiveTemplateFieldsType,
  );

/** @internal */
export const CreateRetrospectiveTemplateFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof CreateRetrospectiveTemplateFieldsType> =
    CreateRetrospectiveTemplateFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRetrospectiveTemplateFieldsType$ {
  /** @deprecated use `CreateRetrospectiveTemplateFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateRetrospectiveTemplateFieldsType$inboundSchema;
  /** @deprecated use `CreateRetrospectiveTemplateFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateRetrospectiveTemplateFieldsType$outboundSchema;
}

/** @internal */
export const CreateRetrospectiveTemplateRequest$inboundSchema: z.ZodType<
  CreateRetrospectiveTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  is_default: z.nullable(z.boolean()).optional(),
  "sections[slug]": z.array(SectionsSlug$inboundSchema),
  "sections[elements]": z.array(z.string()),
  "fields[label]": z.array(z.string()),
  "fields[type]": z.array(CreateRetrospectiveTemplateFieldsType$inboundSchema),
  "fields[help_text]": z.nullable(z.array(z.string())).optional(),
  "fields[permissible_values]": z.nullable(z.array(z.string())).optional(),
  "fields[is_required]": z.nullable(z.array(z.boolean())).optional(),
  "fields[schema]": z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_default": "isDefault",
    "sections[slug]": "sectionsSlug",
    "sections[elements]": "sectionsElements",
    "fields[label]": "fieldsLabel",
    "fields[type]": "fieldsType",
    "fields[help_text]": "fieldsHelpText",
    "fields[permissible_values]": "fieldsPermissibleValues",
    "fields[is_required]": "fieldsIsRequired",
    "fields[schema]": "fieldsSchema",
  });
});

/** @internal */
export type CreateRetrospectiveTemplateRequest$Outbound = {
  name: string;
  description: string;
  is_default?: boolean | null | undefined;
  "sections[slug]": Array<string>;
  "sections[elements]": Array<string>;
  "fields[label]": Array<string>;
  "fields[type]": Array<string>;
  "fields[help_text]"?: Array<string> | null | undefined;
  "fields[permissible_values]"?: Array<string> | null | undefined;
  "fields[is_required]"?: Array<boolean> | null | undefined;
  "fields[schema]"?: Array<string> | null | undefined;
};

/** @internal */
export const CreateRetrospectiveTemplateRequest$outboundSchema: z.ZodType<
  CreateRetrospectiveTemplateRequest$Outbound,
  z.ZodTypeDef,
  CreateRetrospectiveTemplateRequest
> = z.object({
  name: z.string(),
  description: z.string(),
  isDefault: z.nullable(z.boolean()).optional(),
  sectionsSlug: z.array(SectionsSlug$outboundSchema),
  sectionsElements: z.array(z.string()),
  fieldsLabel: z.array(z.string()),
  fieldsType: z.array(CreateRetrospectiveTemplateFieldsType$outboundSchema),
  fieldsHelpText: z.nullable(z.array(z.string())).optional(),
  fieldsPermissibleValues: z.nullable(z.array(z.string())).optional(),
  fieldsIsRequired: z.nullable(z.array(z.boolean())).optional(),
  fieldsSchema: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    isDefault: "is_default",
    sectionsSlug: "sections[slug]",
    sectionsElements: "sections[elements]",
    fieldsLabel: "fields[label]",
    fieldsType: "fields[type]",
    fieldsHelpText: "fields[help_text]",
    fieldsPermissibleValues: "fields[permissible_values]",
    fieldsIsRequired: "fields[is_required]",
    fieldsSchema: "fields[schema]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRetrospectiveTemplateRequest$ {
  /** @deprecated use `CreateRetrospectiveTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRetrospectiveTemplateRequest$inboundSchema;
  /** @deprecated use `CreateRetrospectiveTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateRetrospectiveTemplateRequest$outboundSchema;
  /** @deprecated use `CreateRetrospectiveTemplateRequest$Outbound` instead. */
  export type Outbound = CreateRetrospectiveTemplateRequest$Outbound;
}

export function createRetrospectiveTemplateRequestToJSON(
  createRetrospectiveTemplateRequest: CreateRetrospectiveTemplateRequest,
): string {
  return JSON.stringify(
    CreateRetrospectiveTemplateRequest$outboundSchema.parse(
      createRetrospectiveTemplateRequest,
    ),
  );
}

export function createRetrospectiveTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRetrospectiveTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRetrospectiveTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRetrospectiveTemplateRequest' from JSON`,
  );
}
