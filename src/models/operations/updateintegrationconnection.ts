/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIntegrationConnectionRequest = {
  slug: string;
  connectionId: string;
};

/** @internal */
export const UpdateIntegrationConnectionRequest$inboundSchema: z.ZodType<
  UpdateIntegrationConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  connection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type UpdateIntegrationConnectionRequest$Outbound = {
  slug: string;
  connection_id: string;
};

/** @internal */
export const UpdateIntegrationConnectionRequest$outboundSchema: z.ZodType<
  UpdateIntegrationConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateIntegrationConnectionRequest
> = z.object({
  slug: z.string(),
  connectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIntegrationConnectionRequest$ {
  /** @deprecated use `UpdateIntegrationConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIntegrationConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateIntegrationConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateIntegrationConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateIntegrationConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateIntegrationConnectionRequest$Outbound;
}

export function updateIntegrationConnectionRequestToJSON(
  updateIntegrationConnectionRequest: UpdateIntegrationConnectionRequest,
): string {
  return JSON.stringify(
    UpdateIntegrationConnectionRequest$outboundSchema.parse(
      updateIntegrationConnectionRequest,
    ),
  );
}

export function updateIntegrationConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIntegrationConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateIntegrationConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIntegrationConnectionRequest' from JSON`,
  );
}
