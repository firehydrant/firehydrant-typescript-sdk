/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSlackEmojiActionRequestBody = {
  /**
   * The name of the emoji to associate with this action
   */
  emojiName: string;
  /**
   * The ID of the incident type to associate with this emoji action
   */
  incidentTypeId?: string | null | undefined;
};

export type CreateSlackEmojiActionRequest = {
  /**
   * Slack Connection UUID
   */
  connectionId: string;
  requestBody: CreateSlackEmojiActionRequestBody;
};

/** @internal */
export const CreateSlackEmojiActionRequestBody$inboundSchema: z.ZodType<
  CreateSlackEmojiActionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  emoji_name: z.string(),
  incident_type_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "emoji_name": "emojiName",
    "incident_type_id": "incidentTypeId",
  });
});

/** @internal */
export type CreateSlackEmojiActionRequestBody$Outbound = {
  emoji_name: string;
  incident_type_id?: string | null | undefined;
};

/** @internal */
export const CreateSlackEmojiActionRequestBody$outboundSchema: z.ZodType<
  CreateSlackEmojiActionRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSlackEmojiActionRequestBody
> = z.object({
  emojiName: z.string(),
  incidentTypeId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    emojiName: "emoji_name",
    incidentTypeId: "incident_type_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSlackEmojiActionRequestBody$ {
  /** @deprecated use `CreateSlackEmojiActionRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSlackEmojiActionRequestBody$inboundSchema;
  /** @deprecated use `CreateSlackEmojiActionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateSlackEmojiActionRequestBody$outboundSchema;
  /** @deprecated use `CreateSlackEmojiActionRequestBody$Outbound` instead. */
  export type Outbound = CreateSlackEmojiActionRequestBody$Outbound;
}

export function createSlackEmojiActionRequestBodyToJSON(
  createSlackEmojiActionRequestBody: CreateSlackEmojiActionRequestBody,
): string {
  return JSON.stringify(
    CreateSlackEmojiActionRequestBody$outboundSchema.parse(
      createSlackEmojiActionRequestBody,
    ),
  );
}

export function createSlackEmojiActionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSlackEmojiActionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSlackEmojiActionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSlackEmojiActionRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateSlackEmojiActionRequest$inboundSchema: z.ZodType<
  CreateSlackEmojiActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  RequestBody: z.lazy(() => CreateSlackEmojiActionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateSlackEmojiActionRequest$Outbound = {
  connection_id: string;
  RequestBody: CreateSlackEmojiActionRequestBody$Outbound;
};

/** @internal */
export const CreateSlackEmojiActionRequest$outboundSchema: z.ZodType<
  CreateSlackEmojiActionRequest$Outbound,
  z.ZodTypeDef,
  CreateSlackEmojiActionRequest
> = z.object({
  connectionId: z.string(),
  requestBody: z.lazy(() => CreateSlackEmojiActionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSlackEmojiActionRequest$ {
  /** @deprecated use `CreateSlackEmojiActionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSlackEmojiActionRequest$inboundSchema;
  /** @deprecated use `CreateSlackEmojiActionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSlackEmojiActionRequest$outboundSchema;
  /** @deprecated use `CreateSlackEmojiActionRequest$Outbound` instead. */
  export type Outbound = CreateSlackEmojiActionRequest$Outbound;
}

export function createSlackEmojiActionRequestToJSON(
  createSlackEmojiActionRequest: CreateSlackEmojiActionRequest,
): string {
  return JSON.stringify(
    CreateSlackEmojiActionRequest$outboundSchema.parse(
      createSlackEmojiActionRequest,
    ),
  );
}

export function createSlackEmojiActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSlackEmojiActionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSlackEmojiActionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSlackEmojiActionRequest' from JSON`,
  );
}
