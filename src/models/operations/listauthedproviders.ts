/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAuthedProvidersRequest = {
  /**
   * Integration slug
   */
  integrationSlug: string;
  /**
   * Connection ID
   */
  connectionId: string;
  /**
   * Query for users by name
   */
  query?: string | null | undefined;
};

/** @internal */
export const ListAuthedProvidersRequest$inboundSchema: z.ZodType<
  ListAuthedProvidersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_slug: z.string(),
  connection_id: z.string(),
  query: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type ListAuthedProvidersRequest$Outbound = {
  integration_slug: string;
  connection_id: string;
  query?: string | null | undefined;
};

/** @internal */
export const ListAuthedProvidersRequest$outboundSchema: z.ZodType<
  ListAuthedProvidersRequest$Outbound,
  z.ZodTypeDef,
  ListAuthedProvidersRequest
> = z.object({
  integrationSlug: z.string(),
  connectionId: z.string(),
  query: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuthedProvidersRequest$ {
  /** @deprecated use `ListAuthedProvidersRequest$inboundSchema` instead. */
  export const inboundSchema = ListAuthedProvidersRequest$inboundSchema;
  /** @deprecated use `ListAuthedProvidersRequest$outboundSchema` instead. */
  export const outboundSchema = ListAuthedProvidersRequest$outboundSchema;
  /** @deprecated use `ListAuthedProvidersRequest$Outbound` instead. */
  export type Outbound = ListAuthedProvidersRequest$Outbound;
}

export function listAuthedProvidersRequestToJSON(
  listAuthedProvidersRequest: ListAuthedProvidersRequest,
): string {
  return JSON.stringify(
    ListAuthedProvidersRequest$outboundSchema.parse(listAuthedProvidersRequest),
  );
}

export function listAuthedProvidersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAuthedProvidersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuthedProvidersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuthedProvidersRequest' from JSON`,
  );
}
