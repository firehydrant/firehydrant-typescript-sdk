/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetServiceDependenciesRequest = {
  serviceId: string;
  /**
   * If true, returns all dependencies in one array. If false, splits dependencies into different arrays for child and parent dependencies
   */
  flatten?: boolean | null | undefined;
};

/** @internal */
export const GetServiceDependenciesRequest$inboundSchema: z.ZodType<
  GetServiceDependenciesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  flatten: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
  });
});

/** @internal */
export type GetServiceDependenciesRequest$Outbound = {
  service_id: string;
  flatten?: boolean | null | undefined;
};

/** @internal */
export const GetServiceDependenciesRequest$outboundSchema: z.ZodType<
  GetServiceDependenciesRequest$Outbound,
  z.ZodTypeDef,
  GetServiceDependenciesRequest
> = z.object({
  serviceId: z.string(),
  flatten: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServiceDependenciesRequest$ {
  /** @deprecated use `GetServiceDependenciesRequest$inboundSchema` instead. */
  export const inboundSchema = GetServiceDependenciesRequest$inboundSchema;
  /** @deprecated use `GetServiceDependenciesRequest$outboundSchema` instead. */
  export const outboundSchema = GetServiceDependenciesRequest$outboundSchema;
  /** @deprecated use `GetServiceDependenciesRequest$Outbound` instead. */
  export type Outbound = GetServiceDependenciesRequest$Outbound;
}

export function getServiceDependenciesRequestToJSON(
  getServiceDependenciesRequest: GetServiceDependenciesRequest,
): string {
  return JSON.stringify(
    GetServiceDependenciesRequest$outboundSchema.parse(
      getServiceDependenciesRequest,
    ),
  );
}

export function getServiceDependenciesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetServiceDependenciesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetServiceDependenciesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetServiceDependenciesRequest' from JSON`,
  );
}
