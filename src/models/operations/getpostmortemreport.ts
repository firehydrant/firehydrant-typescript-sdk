/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPostMortemReportRequest = {
  reportId: string;
};

/** @internal */
export const GetPostMortemReportRequest$inboundSchema: z.ZodType<
  GetPostMortemReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  report_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "report_id": "reportId",
  });
});

/** @internal */
export type GetPostMortemReportRequest$Outbound = {
  report_id: string;
};

/** @internal */
export const GetPostMortemReportRequest$outboundSchema: z.ZodType<
  GetPostMortemReportRequest$Outbound,
  z.ZodTypeDef,
  GetPostMortemReportRequest
> = z.object({
  reportId: z.string(),
}).transform((v) => {
  return remap$(v, {
    reportId: "report_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPostMortemReportRequest$ {
  /** @deprecated use `GetPostMortemReportRequest$inboundSchema` instead. */
  export const inboundSchema = GetPostMortemReportRequest$inboundSchema;
  /** @deprecated use `GetPostMortemReportRequest$outboundSchema` instead. */
  export const outboundSchema = GetPostMortemReportRequest$outboundSchema;
  /** @deprecated use `GetPostMortemReportRequest$Outbound` instead. */
  export type Outbound = GetPostMortemReportRequest$Outbound;
}

export function getPostMortemReportRequestToJSON(
  getPostMortemReportRequest: GetPostMortemReportRequest,
): string {
  return JSON.stringify(
    GetPostMortemReportRequest$outboundSchema.parse(getPostMortemReportRequest),
  );
}

export function getPostMortemReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPostMortemReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPostMortemReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPostMortemReportRequest' from JSON`,
  );
}
