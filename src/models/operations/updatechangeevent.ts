/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateChangeEventRequest = {
  changeEventId: string;
  patchV1ChangesEventsChangeEventId:
    components.PatchV1ChangesEventsChangeEventId;
};

/** @internal */
export const UpdateChangeEventRequest$inboundSchema: z.ZodType<
  UpdateChangeEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  change_event_id: z.string(),
  patchV1ChangesEventsChangeEventId:
    components.PatchV1ChangesEventsChangeEventId$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "change_event_id": "changeEventId",
  });
});

/** @internal */
export type UpdateChangeEventRequest$Outbound = {
  change_event_id: string;
  patchV1ChangesEventsChangeEventId:
    components.PatchV1ChangesEventsChangeEventId$Outbound;
};

/** @internal */
export const UpdateChangeEventRequest$outboundSchema: z.ZodType<
  UpdateChangeEventRequest$Outbound,
  z.ZodTypeDef,
  UpdateChangeEventRequest
> = z.object({
  changeEventId: z.string(),
  patchV1ChangesEventsChangeEventId:
    components.PatchV1ChangesEventsChangeEventId$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    changeEventId: "change_event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChangeEventRequest$ {
  /** @deprecated use `UpdateChangeEventRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateChangeEventRequest$inboundSchema;
  /** @deprecated use `UpdateChangeEventRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateChangeEventRequest$outboundSchema;
  /** @deprecated use `UpdateChangeEventRequest$Outbound` instead. */
  export type Outbound = UpdateChangeEventRequest$Outbound;
}

export function updateChangeEventRequestToJSON(
  updateChangeEventRequest: UpdateChangeEventRequest,
): string {
  return JSON.stringify(
    UpdateChangeEventRequest$outboundSchema.parse(updateChangeEventRequest),
  );
}

export function updateChangeEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChangeEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChangeEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChangeEventRequest' from JSON`,
  );
}
