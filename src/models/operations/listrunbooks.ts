/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Sort runbooks by their updated date. Accepts 'asc', 'desc'
 */
export const ListRunbooksQueryParamSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort runbooks by their updated date. Accepts 'asc', 'desc'
 */
export type ListRunbooksQueryParamSort = ClosedEnum<
  typeof ListRunbooksQueryParamSort
>;

export type ListRunbooksRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * A query to search runbooks by their name
   */
  name?: string | undefined;
  /**
   * A query to search runbooks by their owners
   */
  owners?: string | undefined;
  /**
   * Sort runbooks by their updated date. Accepts 'asc', 'desc'
   */
  sort?: ListRunbooksQueryParamSort | undefined;
};

/** @internal */
export const ListRunbooksQueryParamSort$inboundSchema: z.ZodNativeEnum<
  typeof ListRunbooksQueryParamSort
> = z.nativeEnum(ListRunbooksQueryParamSort);

/** @internal */
export const ListRunbooksQueryParamSort$outboundSchema: z.ZodNativeEnum<
  typeof ListRunbooksQueryParamSort
> = ListRunbooksQueryParamSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRunbooksQueryParamSort$ {
  /** @deprecated use `ListRunbooksQueryParamSort$inboundSchema` instead. */
  export const inboundSchema = ListRunbooksQueryParamSort$inboundSchema;
  /** @deprecated use `ListRunbooksQueryParamSort$outboundSchema` instead. */
  export const outboundSchema = ListRunbooksQueryParamSort$outboundSchema;
}

/** @internal */
export const ListRunbooksRequest$inboundSchema: z.ZodType<
  ListRunbooksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  name: z.string().optional(),
  owners: z.string().optional(),
  sort: ListRunbooksQueryParamSort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
  });
});

/** @internal */
export type ListRunbooksRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  name?: string | undefined;
  owners?: string | undefined;
  sort?: string | undefined;
};

/** @internal */
export const ListRunbooksRequest$outboundSchema: z.ZodType<
  ListRunbooksRequest$Outbound,
  z.ZodTypeDef,
  ListRunbooksRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  name: z.string().optional(),
  owners: z.string().optional(),
  sort: ListRunbooksQueryParamSort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRunbooksRequest$ {
  /** @deprecated use `ListRunbooksRequest$inboundSchema` instead. */
  export const inboundSchema = ListRunbooksRequest$inboundSchema;
  /** @deprecated use `ListRunbooksRequest$outboundSchema` instead. */
  export const outboundSchema = ListRunbooksRequest$outboundSchema;
  /** @deprecated use `ListRunbooksRequest$Outbound` instead. */
  export type Outbound = ListRunbooksRequest$Outbound;
}

export function listRunbooksRequestToJSON(
  listRunbooksRequest: ListRunbooksRequest,
): string {
  return JSON.stringify(
    ListRunbooksRequest$outboundSchema.parse(listRunbooksRequest),
  );
}

export function listRunbooksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRunbooksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRunbooksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRunbooksRequest' from JSON`,
  );
}
