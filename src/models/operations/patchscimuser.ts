/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchScimUserRequest = {
  id: string;
  patchScimUser: components.PatchScimUser;
};

/** @internal */
export const PatchScimUserRequest$inboundSchema: z.ZodType<
  PatchScimUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  patch_scim_user: z.lazy(() => components.PatchScimUser$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "patch_scim_user": "patchScimUser",
  });
});

/** @internal */
export type PatchScimUserRequest$Outbound = {
  id: string;
  patch_scim_user: components.PatchScimUser$Outbound;
};

/** @internal */
export const PatchScimUserRequest$outboundSchema: z.ZodType<
  PatchScimUserRequest$Outbound,
  z.ZodTypeDef,
  PatchScimUserRequest
> = z.object({
  id: z.string(),
  patchScimUser: z.lazy(() => components.PatchScimUser$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    patchScimUser: "patch_scim_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchScimUserRequest$ {
  /** @deprecated use `PatchScimUserRequest$inboundSchema` instead. */
  export const inboundSchema = PatchScimUserRequest$inboundSchema;
  /** @deprecated use `PatchScimUserRequest$outboundSchema` instead. */
  export const outboundSchema = PatchScimUserRequest$outboundSchema;
  /** @deprecated use `PatchScimUserRequest$Outbound` instead. */
  export type Outbound = PatchScimUserRequest$Outbound;
}

export function patchScimUserRequestToJSON(
  patchScimUserRequest: PatchScimUserRequest,
): string {
  return JSON.stringify(
    PatchScimUserRequest$outboundSchema.parse(patchScimUserRequest),
  );
}

export function patchScimUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchScimUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchScimUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchScimUserRequest' from JSON`,
  );
}
