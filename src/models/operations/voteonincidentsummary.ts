/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Direction = {
  Up: "up",
  Down: "down",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type VoteOnIncidentSummaryRequestBody = {
  direction: Direction;
};

export type VoteOnIncidentSummaryRequest = {
  incidentId: string;
  generatedSummaryId: string;
  requestBody: VoteOnIncidentSummaryRequestBody;
};

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const VoteOnIncidentSummaryRequestBody$inboundSchema: z.ZodType<
  VoteOnIncidentSummaryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  direction: Direction$inboundSchema,
});

/** @internal */
export type VoteOnIncidentSummaryRequestBody$Outbound = {
  direction: string;
};

/** @internal */
export const VoteOnIncidentSummaryRequestBody$outboundSchema: z.ZodType<
  VoteOnIncidentSummaryRequestBody$Outbound,
  z.ZodTypeDef,
  VoteOnIncidentSummaryRequestBody
> = z.object({
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoteOnIncidentSummaryRequestBody$ {
  /** @deprecated use `VoteOnIncidentSummaryRequestBody$inboundSchema` instead. */
  export const inboundSchema = VoteOnIncidentSummaryRequestBody$inboundSchema;
  /** @deprecated use `VoteOnIncidentSummaryRequestBody$outboundSchema` instead. */
  export const outboundSchema = VoteOnIncidentSummaryRequestBody$outboundSchema;
  /** @deprecated use `VoteOnIncidentSummaryRequestBody$Outbound` instead. */
  export type Outbound = VoteOnIncidentSummaryRequestBody$Outbound;
}

export function voteOnIncidentSummaryRequestBodyToJSON(
  voteOnIncidentSummaryRequestBody: VoteOnIncidentSummaryRequestBody,
): string {
  return JSON.stringify(
    VoteOnIncidentSummaryRequestBody$outboundSchema.parse(
      voteOnIncidentSummaryRequestBody,
    ),
  );
}

export function voteOnIncidentSummaryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VoteOnIncidentSummaryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoteOnIncidentSummaryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoteOnIncidentSummaryRequestBody' from JSON`,
  );
}

/** @internal */
export const VoteOnIncidentSummaryRequest$inboundSchema: z.ZodType<
  VoteOnIncidentSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  generated_summary_id: z.string(),
  RequestBody: z.lazy(() => VoteOnIncidentSummaryRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "generated_summary_id": "generatedSummaryId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VoteOnIncidentSummaryRequest$Outbound = {
  incident_id: string;
  generated_summary_id: string;
  RequestBody: VoteOnIncidentSummaryRequestBody$Outbound;
};

/** @internal */
export const VoteOnIncidentSummaryRequest$outboundSchema: z.ZodType<
  VoteOnIncidentSummaryRequest$Outbound,
  z.ZodTypeDef,
  VoteOnIncidentSummaryRequest
> = z.object({
  incidentId: z.string(),
  generatedSummaryId: z.string(),
  requestBody: z.lazy(() => VoteOnIncidentSummaryRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    generatedSummaryId: "generated_summary_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoteOnIncidentSummaryRequest$ {
  /** @deprecated use `VoteOnIncidentSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = VoteOnIncidentSummaryRequest$inboundSchema;
  /** @deprecated use `VoteOnIncidentSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = VoteOnIncidentSummaryRequest$outboundSchema;
  /** @deprecated use `VoteOnIncidentSummaryRequest$Outbound` instead. */
  export type Outbound = VoteOnIncidentSummaryRequest$Outbound;
}

export function voteOnIncidentSummaryRequestToJSON(
  voteOnIncidentSummaryRequest: VoteOnIncidentSummaryRequest,
): string {
  return JSON.stringify(
    VoteOnIncidentSummaryRequest$outboundSchema.parse(
      voteOnIncidentSummaryRequest,
    ),
  );
}

export function voteOnIncidentSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<VoteOnIncidentSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoteOnIncidentSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoteOnIncidentSummaryRequest' from JSON`,
  );
}
