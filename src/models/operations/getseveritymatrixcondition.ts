/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSeverityMatrixConditionRequest = {
  conditionId: string;
};

/** @internal */
export const GetSeverityMatrixConditionRequest$inboundSchema: z.ZodType<
  GetSeverityMatrixConditionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type GetSeverityMatrixConditionRequest$Outbound = {
  condition_id: string;
};

/** @internal */
export const GetSeverityMatrixConditionRequest$outboundSchema: z.ZodType<
  GetSeverityMatrixConditionRequest$Outbound,
  z.ZodTypeDef,
  GetSeverityMatrixConditionRequest
> = z.object({
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSeverityMatrixConditionRequest$ {
  /** @deprecated use `GetSeverityMatrixConditionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSeverityMatrixConditionRequest$inboundSchema;
  /** @deprecated use `GetSeverityMatrixConditionRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetSeverityMatrixConditionRequest$outboundSchema;
  /** @deprecated use `GetSeverityMatrixConditionRequest$Outbound` instead. */
  export type Outbound = GetSeverityMatrixConditionRequest$Outbound;
}

export function getSeverityMatrixConditionRequestToJSON(
  getSeverityMatrixConditionRequest: GetSeverityMatrixConditionRequest,
): string {
  return JSON.stringify(
    GetSeverityMatrixConditionRequest$outboundSchema.parse(
      getSeverityMatrixConditionRequest,
    ),
  );
}

export function getSeverityMatrixConditionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSeverityMatrixConditionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSeverityMatrixConditionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSeverityMatrixConditionRequest' from JSON`,
  );
}
