/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchZendeskTicketsRequest = {
  connectionId: string;
  query: string;
  page?: number | null | undefined;
  perPage?: number | null | undefined;
};

/** @internal */
export const SearchZendeskTicketsRequest$inboundSchema: z.ZodType<
  SearchZendeskTicketsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  query: z.string(),
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "per_page": "perPage",
  });
});

/** @internal */
export type SearchZendeskTicketsRequest$Outbound = {
  connection_id: string;
  query: string;
  page?: number | null | undefined;
  per_page?: number | null | undefined;
};

/** @internal */
export const SearchZendeskTicketsRequest$outboundSchema: z.ZodType<
  SearchZendeskTicketsRequest$Outbound,
  z.ZodTypeDef,
  SearchZendeskTicketsRequest
> = z.object({
  connectionId: z.string(),
  query: z.string(),
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchZendeskTicketsRequest$ {
  /** @deprecated use `SearchZendeskTicketsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchZendeskTicketsRequest$inboundSchema;
  /** @deprecated use `SearchZendeskTicketsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchZendeskTicketsRequest$outboundSchema;
  /** @deprecated use `SearchZendeskTicketsRequest$Outbound` instead. */
  export type Outbound = SearchZendeskTicketsRequest$Outbound;
}

export function searchZendeskTicketsRequestToJSON(
  searchZendeskTicketsRequest: SearchZendeskTicketsRequest,
): string {
  return JSON.stringify(
    SearchZendeskTicketsRequest$outboundSchema.parse(
      searchZendeskTicketsRequest,
    ),
  );
}

export function searchZendeskTicketsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchZendeskTicketsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchZendeskTicketsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchZendeskTicketsRequest' from JSON`,
  );
}
