/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Allows sorting comments by the time they were posted, ascending or descending.
 */
export const ListCommentsSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Allows sorting comments by the time they were posted, ascending or descending.
 */
export type ListCommentsSort = ClosedEnum<typeof ListCommentsSort>;

export type ListCommentsRequest = {
  /**
   * An ISO8601 timestamp that allows filtering for comments posted before the provided time.
   */
  before?: Date | null | undefined;
  /**
   * An ISO8601 timestamp that allows filtering for comments posted after the provided time.
   */
  after?: Date | null | undefined;
  /**
   * Allows sorting comments by the time they were posted, ascending or descending.
   */
  sort?: ListCommentsSort | null | undefined;
  conversationId: string;
};

/** @internal */
export const ListCommentsSort$inboundSchema: z.ZodNativeEnum<
  typeof ListCommentsSort
> = z.nativeEnum(ListCommentsSort);

/** @internal */
export const ListCommentsSort$outboundSchema: z.ZodNativeEnum<
  typeof ListCommentsSort
> = ListCommentsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCommentsSort$ {
  /** @deprecated use `ListCommentsSort$inboundSchema` instead. */
  export const inboundSchema = ListCommentsSort$inboundSchema;
  /** @deprecated use `ListCommentsSort$outboundSchema` instead. */
  export const outboundSchema = ListCommentsSort$outboundSchema;
}

/** @internal */
export const ListCommentsRequest$inboundSchema: z.ZodType<
  ListCommentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  before: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  sort: z.nullable(ListCommentsSort$inboundSchema.default("asc")),
  conversation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
  });
});

/** @internal */
export type ListCommentsRequest$Outbound = {
  before?: string | null | undefined;
  after?: string | null | undefined;
  sort: string | null;
  conversation_id: string;
};

/** @internal */
export const ListCommentsRequest$outboundSchema: z.ZodType<
  ListCommentsRequest$Outbound,
  z.ZodTypeDef,
  ListCommentsRequest
> = z.object({
  before: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  after: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  sort: z.nullable(ListCommentsSort$outboundSchema.default("asc")),
  conversationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCommentsRequest$ {
  /** @deprecated use `ListCommentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCommentsRequest$inboundSchema;
  /** @deprecated use `ListCommentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCommentsRequest$outboundSchema;
  /** @deprecated use `ListCommentsRequest$Outbound` instead. */
  export type Outbound = ListCommentsRequest$Outbound;
}

export function listCommentsRequestToJSON(
  listCommentsRequest: ListCommentsRequest,
): string {
  return JSON.stringify(
    ListCommentsRequest$outboundSchema.parse(listCommentsRequest),
  );
}

export function listCommentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCommentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCommentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCommentsRequest' from JSON`,
  );
}
