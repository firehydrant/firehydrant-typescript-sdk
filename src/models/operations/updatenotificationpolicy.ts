/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The group method of notification that will be delivered.
 */
export const UpdateNotificationPolicyNotificationGroupMethod = {
  Any: "any",
  Push: "push",
  Email: "email",
  Voice: "voice",
  MobileText: "mobile_text",
  Chat: "chat",
} as const;
/**
 * The group method of notification that will be delivered.
 */
export type UpdateNotificationPolicyNotificationGroupMethod = ClosedEnum<
  typeof UpdateNotificationPolicyNotificationGroupMethod
>;

/**
 * The priority of the notification.
 */
export const UpdateNotificationPolicyPriority = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
} as const;
/**
 * The priority of the notification.
 */
export type UpdateNotificationPolicyPriority = ClosedEnum<
  typeof UpdateNotificationPolicyPriority
>;

export type UpdateNotificationPolicyRequestBody = {
  /**
   * The group method of notification that will be delivered.
   */
  notificationGroupMethod?:
    | UpdateNotificationPolicyNotificationGroupMethod
    | null
    | undefined;
  /**
   * An ISO8601 duration string specifying the maximum delay of the notification.
   */
  maxDelay?: string | null | undefined;
  /**
   * The priority of the notification.
   */
  priority?: UpdateNotificationPolicyPriority | null | undefined;
};

export type UpdateNotificationPolicyRequest = {
  id: string;
  requestBody?: UpdateNotificationPolicyRequestBody | undefined;
};

/** @internal */
export const UpdateNotificationPolicyNotificationGroupMethod$inboundSchema:
  z.ZodNativeEnum<typeof UpdateNotificationPolicyNotificationGroupMethod> = z
    .nativeEnum(UpdateNotificationPolicyNotificationGroupMethod);

/** @internal */
export const UpdateNotificationPolicyNotificationGroupMethod$outboundSchema:
  z.ZodNativeEnum<typeof UpdateNotificationPolicyNotificationGroupMethod> =
    UpdateNotificationPolicyNotificationGroupMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationPolicyNotificationGroupMethod$ {
  /** @deprecated use `UpdateNotificationPolicyNotificationGroupMethod$inboundSchema` instead. */
  export const inboundSchema =
    UpdateNotificationPolicyNotificationGroupMethod$inboundSchema;
  /** @deprecated use `UpdateNotificationPolicyNotificationGroupMethod$outboundSchema` instead. */
  export const outboundSchema =
    UpdateNotificationPolicyNotificationGroupMethod$outboundSchema;
}

/** @internal */
export const UpdateNotificationPolicyPriority$inboundSchema: z.ZodNativeEnum<
  typeof UpdateNotificationPolicyPriority
> = z.nativeEnum(UpdateNotificationPolicyPriority);

/** @internal */
export const UpdateNotificationPolicyPriority$outboundSchema: z.ZodNativeEnum<
  typeof UpdateNotificationPolicyPriority
> = UpdateNotificationPolicyPriority$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationPolicyPriority$ {
  /** @deprecated use `UpdateNotificationPolicyPriority$inboundSchema` instead. */
  export const inboundSchema = UpdateNotificationPolicyPriority$inboundSchema;
  /** @deprecated use `UpdateNotificationPolicyPriority$outboundSchema` instead. */
  export const outboundSchema = UpdateNotificationPolicyPriority$outboundSchema;
}

/** @internal */
export const UpdateNotificationPolicyRequestBody$inboundSchema: z.ZodType<
  UpdateNotificationPolicyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  notification_group_method: z.nullable(
    UpdateNotificationPolicyNotificationGroupMethod$inboundSchema,
  ).optional(),
  max_delay: z.nullable(z.string()).optional(),
  priority: z.nullable(UpdateNotificationPolicyPriority$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "notification_group_method": "notificationGroupMethod",
    "max_delay": "maxDelay",
  });
});

/** @internal */
export type UpdateNotificationPolicyRequestBody$Outbound = {
  notification_group_method?: string | null | undefined;
  max_delay?: string | null | undefined;
  priority?: string | null | undefined;
};

/** @internal */
export const UpdateNotificationPolicyRequestBody$outboundSchema: z.ZodType<
  UpdateNotificationPolicyRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateNotificationPolicyRequestBody
> = z.object({
  notificationGroupMethod: z.nullable(
    UpdateNotificationPolicyNotificationGroupMethod$outboundSchema,
  ).optional(),
  maxDelay: z.nullable(z.string()).optional(),
  priority: z.nullable(UpdateNotificationPolicyPriority$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    notificationGroupMethod: "notification_group_method",
    maxDelay: "max_delay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationPolicyRequestBody$ {
  /** @deprecated use `UpdateNotificationPolicyRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateNotificationPolicyRequestBody$inboundSchema;
  /** @deprecated use `UpdateNotificationPolicyRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateNotificationPolicyRequestBody$outboundSchema;
  /** @deprecated use `UpdateNotificationPolicyRequestBody$Outbound` instead. */
  export type Outbound = UpdateNotificationPolicyRequestBody$Outbound;
}

export function updateNotificationPolicyRequestBodyToJSON(
  updateNotificationPolicyRequestBody: UpdateNotificationPolicyRequestBody,
): string {
  return JSON.stringify(
    UpdateNotificationPolicyRequestBody$outboundSchema.parse(
      updateNotificationPolicyRequestBody,
    ),
  );
}

export function updateNotificationPolicyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotificationPolicyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateNotificationPolicyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotificationPolicyRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateNotificationPolicyRequest$inboundSchema: z.ZodType<
  UpdateNotificationPolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateNotificationPolicyRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateNotificationPolicyRequest$Outbound = {
  id: string;
  RequestBody?: UpdateNotificationPolicyRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateNotificationPolicyRequest$outboundSchema: z.ZodType<
  UpdateNotificationPolicyRequest$Outbound,
  z.ZodTypeDef,
  UpdateNotificationPolicyRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateNotificationPolicyRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationPolicyRequest$ {
  /** @deprecated use `UpdateNotificationPolicyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNotificationPolicyRequest$inboundSchema;
  /** @deprecated use `UpdateNotificationPolicyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNotificationPolicyRequest$outboundSchema;
  /** @deprecated use `UpdateNotificationPolicyRequest$Outbound` instead. */
  export type Outbound = UpdateNotificationPolicyRequest$Outbound;
}

export function updateNotificationPolicyRequestToJSON(
  updateNotificationPolicyRequest: UpdateNotificationPolicyRequest,
): string {
  return JSON.stringify(
    UpdateNotificationPolicyRequest$outboundSchema.parse(
      updateNotificationPolicyRequest,
    ),
  );
}

export function updateNotificationPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotificationPolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNotificationPolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotificationPolicyRequest' from JSON`,
  );
}
