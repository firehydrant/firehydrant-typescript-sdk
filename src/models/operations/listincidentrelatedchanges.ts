/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the relation to the incident
 */
export const QueryParamType = {
  Caused: "caused",
  Fixed: "fixed",
  Suspect: "suspect",
  Dismissed: "dismissed",
} as const;
/**
 * The type of the relation to the incident
 */
export type QueryParamType = ClosedEnum<typeof QueryParamType>;

export type ListIncidentRelatedChangesRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * The type of the relation to the incident
   */
  type?: QueryParamType | undefined;
  incidentId: string;
};

/** @internal */
export const QueryParamType$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = z.nativeEnum(QueryParamType);

/** @internal */
export const QueryParamType$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = QueryParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamType$ {
  /** @deprecated use `QueryParamType$inboundSchema` instead. */
  export const inboundSchema = QueryParamType$inboundSchema;
  /** @deprecated use `QueryParamType$outboundSchema` instead. */
  export const outboundSchema = QueryParamType$outboundSchema;
}

/** @internal */
export const ListIncidentRelatedChangesRequest$inboundSchema: z.ZodType<
  ListIncidentRelatedChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  type: QueryParamType$inboundSchema.optional(),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "incident_id": "incidentId",
  });
});

/** @internal */
export type ListIncidentRelatedChangesRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  type?: string | undefined;
  incident_id: string;
};

/** @internal */
export const ListIncidentRelatedChangesRequest$outboundSchema: z.ZodType<
  ListIncidentRelatedChangesRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentRelatedChangesRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  type: QueryParamType$outboundSchema.optional(),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentRelatedChangesRequest$ {
  /** @deprecated use `ListIncidentRelatedChangesRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentRelatedChangesRequest$inboundSchema;
  /** @deprecated use `ListIncidentRelatedChangesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListIncidentRelatedChangesRequest$outboundSchema;
  /** @deprecated use `ListIncidentRelatedChangesRequest$Outbound` instead. */
  export type Outbound = ListIncidentRelatedChangesRequest$Outbound;
}

export function listIncidentRelatedChangesRequestToJSON(
  listIncidentRelatedChangesRequest: ListIncidentRelatedChangesRequest,
): string {
  return JSON.stringify(
    ListIncidentRelatedChangesRequest$outboundSchema.parse(
      listIncidentRelatedChangesRequest,
    ),
  );
}

export function listIncidentRelatedChangesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentRelatedChangesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentRelatedChangesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentRelatedChangesRequest' from JSON`,
  );
}
