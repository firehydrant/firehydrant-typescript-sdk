/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSignalEmailTargetsRequest = {
  /**
   * A query string to search the list of targets by.
   */
  query?: string | undefined;
};

/** @internal */
export const ListSignalEmailTargetsRequest$inboundSchema: z.ZodType<
  ListSignalEmailTargetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
});

/** @internal */
export type ListSignalEmailTargetsRequest$Outbound = {
  query?: string | undefined;
};

/** @internal */
export const ListSignalEmailTargetsRequest$outboundSchema: z.ZodType<
  ListSignalEmailTargetsRequest$Outbound,
  z.ZodTypeDef,
  ListSignalEmailTargetsRequest
> = z.object({
  query: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSignalEmailTargetsRequest$ {
  /** @deprecated use `ListSignalEmailTargetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSignalEmailTargetsRequest$inboundSchema;
  /** @deprecated use `ListSignalEmailTargetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSignalEmailTargetsRequest$outboundSchema;
  /** @deprecated use `ListSignalEmailTargetsRequest$Outbound` instead. */
  export type Outbound = ListSignalEmailTargetsRequest$Outbound;
}

export function listSignalEmailTargetsRequestToJSON(
  listSignalEmailTargetsRequest: ListSignalEmailTargetsRequest,
): string {
  return JSON.stringify(
    ListSignalEmailTargetsRequest$outboundSchema.parse(
      listSignalEmailTargetsRequest,
    ),
  );
}

export function listSignalEmailTargetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSignalEmailTargetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSignalEmailTargetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSignalEmailTargetsRequest' from JSON`,
  );
}
