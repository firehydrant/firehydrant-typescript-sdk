/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTeamRequest = {
  teamId: string;
  updateTeam: components.UpdateTeam;
};

/** @internal */
export const UpdateTeamRequest$inboundSchema: z.ZodType<
  UpdateTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  team_id: z.string(),
  update_team: z.lazy(() => components.UpdateTeam$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "update_team": "updateTeam",
  });
});

/** @internal */
export type UpdateTeamRequest$Outbound = {
  team_id: string;
  update_team: components.UpdateTeam$Outbound;
};

/** @internal */
export const UpdateTeamRequest$outboundSchema: z.ZodType<
  UpdateTeamRequest$Outbound,
  z.ZodTypeDef,
  UpdateTeamRequest
> = z.object({
  teamId: z.string(),
  updateTeam: z.lazy(() => components.UpdateTeam$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    updateTeam: "update_team",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamRequest$ {
  /** @deprecated use `UpdateTeamRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamRequest$inboundSchema;
  /** @deprecated use `UpdateTeamRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamRequest$outboundSchema;
  /** @deprecated use `UpdateTeamRequest$Outbound` instead. */
  export type Outbound = UpdateTeamRequest$Outbound;
}

export function updateTeamRequestToJSON(
  updateTeamRequest: UpdateTeamRequest,
): string {
  return JSON.stringify(
    UpdateTeamRequest$outboundSchema.parse(updateTeamRequest),
  );
}

export function updateTeamRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamRequest' from JSON`,
  );
}
