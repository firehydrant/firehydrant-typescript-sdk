/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRetrospectiveQuestionRequest = {
  questionId: string;
};

/** @internal */
export const GetRetrospectiveQuestionRequest$inboundSchema: z.ZodType<
  GetRetrospectiveQuestionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  question_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "question_id": "questionId",
  });
});

/** @internal */
export type GetRetrospectiveQuestionRequest$Outbound = {
  question_id: string;
};

/** @internal */
export const GetRetrospectiveQuestionRequest$outboundSchema: z.ZodType<
  GetRetrospectiveQuestionRequest$Outbound,
  z.ZodTypeDef,
  GetRetrospectiveQuestionRequest
> = z.object({
  questionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    questionId: "question_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRetrospectiveQuestionRequest$ {
  /** @deprecated use `GetRetrospectiveQuestionRequest$inboundSchema` instead. */
  export const inboundSchema = GetRetrospectiveQuestionRequest$inboundSchema;
  /** @deprecated use `GetRetrospectiveQuestionRequest$outboundSchema` instead. */
  export const outboundSchema = GetRetrospectiveQuestionRequest$outboundSchema;
  /** @deprecated use `GetRetrospectiveQuestionRequest$Outbound` instead. */
  export type Outbound = GetRetrospectiveQuestionRequest$Outbound;
}

export function getRetrospectiveQuestionRequestToJSON(
  getRetrospectiveQuestionRequest: GetRetrospectiveQuestionRequest,
): string {
  return JSON.stringify(
    GetRetrospectiveQuestionRequest$outboundSchema.parse(
      getRetrospectiveQuestionRequest,
    ),
  );
}

export function getRetrospectiveQuestionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRetrospectiveQuestionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRetrospectiveQuestionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRetrospectiveQuestionRequest' from JSON`,
  );
}
