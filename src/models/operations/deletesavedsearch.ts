/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteSavedSearchPathParamResourceType = {
  ChangeEvents: "change_events",
  Incidents: "incidents",
  Services: "services",
  ScheduledMaintenances: "scheduled_maintenances",
  TicketTasks: "ticket_tasks",
  TicketFollowUps: "ticket_follow_ups",
  Analytics: "analytics",
  ImpactAnalytics: "impact_analytics",
  Alerts: "alerts",
  IncidentEvents: "incident_events",
} as const;
export type DeleteSavedSearchPathParamResourceType = ClosedEnum<
  typeof DeleteSavedSearchPathParamResourceType
>;

export type DeleteSavedSearchRequest = {
  resourceType: DeleteSavedSearchPathParamResourceType;
  savedSearchId: string;
};

/** @internal */
export const DeleteSavedSearchPathParamResourceType$inboundSchema:
  z.ZodNativeEnum<typeof DeleteSavedSearchPathParamResourceType> = z.nativeEnum(
    DeleteSavedSearchPathParamResourceType,
  );

/** @internal */
export const DeleteSavedSearchPathParamResourceType$outboundSchema:
  z.ZodNativeEnum<typeof DeleteSavedSearchPathParamResourceType> =
    DeleteSavedSearchPathParamResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSavedSearchPathParamResourceType$ {
  /** @deprecated use `DeleteSavedSearchPathParamResourceType$inboundSchema` instead. */
  export const inboundSchema =
    DeleteSavedSearchPathParamResourceType$inboundSchema;
  /** @deprecated use `DeleteSavedSearchPathParamResourceType$outboundSchema` instead. */
  export const outboundSchema =
    DeleteSavedSearchPathParamResourceType$outboundSchema;
}

/** @internal */
export const DeleteSavedSearchRequest$inboundSchema: z.ZodType<
  DeleteSavedSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: DeleteSavedSearchPathParamResourceType$inboundSchema,
  saved_search_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "saved_search_id": "savedSearchId",
  });
});

/** @internal */
export type DeleteSavedSearchRequest$Outbound = {
  resource_type: string;
  saved_search_id: string;
};

/** @internal */
export const DeleteSavedSearchRequest$outboundSchema: z.ZodType<
  DeleteSavedSearchRequest$Outbound,
  z.ZodTypeDef,
  DeleteSavedSearchRequest
> = z.object({
  resourceType: DeleteSavedSearchPathParamResourceType$outboundSchema,
  savedSearchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    savedSearchId: "saved_search_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSavedSearchRequest$ {
  /** @deprecated use `DeleteSavedSearchRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSavedSearchRequest$inboundSchema;
  /** @deprecated use `DeleteSavedSearchRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSavedSearchRequest$outboundSchema;
  /** @deprecated use `DeleteSavedSearchRequest$Outbound` instead. */
  export type Outbound = DeleteSavedSearchRequest$Outbound;
}

export function deleteSavedSearchRequestToJSON(
  deleteSavedSearchRequest: DeleteSavedSearchRequest,
): string {
  return JSON.stringify(
    DeleteSavedSearchRequest$outboundSchema.parse(deleteSavedSearchRequest),
  );
}

export function deleteSavedSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSavedSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSavedSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSavedSearchRequest' from JSON`,
  );
}
