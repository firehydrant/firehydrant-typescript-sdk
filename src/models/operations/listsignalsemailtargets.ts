/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSignalsEmailTargetsRequest = {
  /**
   * A query string to search the list of targets by.
   */
  query?: string | null | undefined;
};

/** @internal */
export const ListSignalsEmailTargetsRequest$inboundSchema: z.ZodType<
  ListSignalsEmailTargetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListSignalsEmailTargetsRequest$Outbound = {
  query?: string | null | undefined;
};

/** @internal */
export const ListSignalsEmailTargetsRequest$outboundSchema: z.ZodType<
  ListSignalsEmailTargetsRequest$Outbound,
  z.ZodTypeDef,
  ListSignalsEmailTargetsRequest
> = z.object({
  query: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSignalsEmailTargetsRequest$ {
  /** @deprecated use `ListSignalsEmailTargetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSignalsEmailTargetsRequest$inboundSchema;
  /** @deprecated use `ListSignalsEmailTargetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSignalsEmailTargetsRequest$outboundSchema;
  /** @deprecated use `ListSignalsEmailTargetsRequest$Outbound` instead. */
  export type Outbound = ListSignalsEmailTargetsRequest$Outbound;
}

export function listSignalsEmailTargetsRequestToJSON(
  listSignalsEmailTargetsRequest: ListSignalsEmailTargetsRequest,
): string {
  return JSON.stringify(
    ListSignalsEmailTargetsRequest$outboundSchema.parse(
      listSignalsEmailTargetsRequest,
    ),
  );
}

export function listSignalsEmailTargetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSignalsEmailTargetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSignalsEmailTargetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSignalsEmailTargetsRequest' from JSON`,
  );
}
