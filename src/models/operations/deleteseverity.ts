/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSeverityRequest = {
  severitySlug: string;
};

/** @internal */
export const DeleteSeverityRequest$inboundSchema: z.ZodType<
  DeleteSeverityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "severity_slug": "severitySlug",
  });
});

/** @internal */
export type DeleteSeverityRequest$Outbound = {
  severity_slug: string;
};

/** @internal */
export const DeleteSeverityRequest$outboundSchema: z.ZodType<
  DeleteSeverityRequest$Outbound,
  z.ZodTypeDef,
  DeleteSeverityRequest
> = z.object({
  severitySlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    severitySlug: "severity_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSeverityRequest$ {
  /** @deprecated use `DeleteSeverityRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSeverityRequest$inboundSchema;
  /** @deprecated use `DeleteSeverityRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSeverityRequest$outboundSchema;
  /** @deprecated use `DeleteSeverityRequest$Outbound` instead. */
  export type Outbound = DeleteSeverityRequest$Outbound;
}

export function deleteSeverityRequestToJSON(
  deleteSeverityRequest: DeleteSeverityRequest,
): string {
  return JSON.stringify(
    DeleteSeverityRequest$outboundSchema.parse(deleteSeverityRequest),
  );
}

export function deleteSeverityRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSeverityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSeverityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSeverityRequest' from JSON`,
  );
}
