/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateVoteRequest = {
  incidentId: string;
  eventId: string;
  updateVote: components.UpdateVote;
};

/** @internal */
export const UpdateVoteRequest$inboundSchema: z.ZodType<
  UpdateVoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  event_id: z.string(),
  update_vote: z.lazy(() => components.UpdateVote$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "event_id": "eventId",
    "update_vote": "updateVote",
  });
});

/** @internal */
export type UpdateVoteRequest$Outbound = {
  incident_id: string;
  event_id: string;
  update_vote: components.UpdateVote$Outbound;
};

/** @internal */
export const UpdateVoteRequest$outboundSchema: z.ZodType<
  UpdateVoteRequest$Outbound,
  z.ZodTypeDef,
  UpdateVoteRequest
> = z.object({
  incidentId: z.string(),
  eventId: z.string(),
  updateVote: z.lazy(() => components.UpdateVote$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    eventId: "event_id",
    updateVote: "update_vote",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateVoteRequest$ {
  /** @deprecated use `UpdateVoteRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateVoteRequest$inboundSchema;
  /** @deprecated use `UpdateVoteRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateVoteRequest$outboundSchema;
  /** @deprecated use `UpdateVoteRequest$Outbound` instead. */
  export type Outbound = UpdateVoteRequest$Outbound;
}

export function updateVoteRequestToJSON(
  updateVoteRequest: UpdateVoteRequest,
): string {
  return JSON.stringify(
    UpdateVoteRequest$outboundSchema.parse(updateVoteRequest),
  );
}

export function updateVoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateVoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateVoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateVoteRequest' from JSON`,
  );
}
