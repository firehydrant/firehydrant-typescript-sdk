/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateIncidentRetrospectiveFieldType = {
  Text: "text",
  SingleSelect: "single_select",
  MultiSelect: "multi_select",
  Numeric: "numeric",
  Datetime: "datetime",
  DynamicInputGroup: "dynamic_input_group",
  Markdown: "markdown",
  MarkdownText: "markdown_text",
} as const;
export type CreateIncidentRetrospectiveFieldType = ClosedEnum<
  typeof CreateIncidentRetrospectiveFieldType
>;

export type CreateIncidentRetrospectiveFieldRequestBody = {
  label: string;
  type: CreateIncidentRetrospectiveFieldType;
  helpText?: string | null | undefined;
  permissibleValues?: Array<string> | null | undefined;
  isRequired?: boolean | null | undefined;
  schema?: Array<string> | null | undefined;
};

export type CreateIncidentRetrospectiveFieldRequest = {
  retrospectiveId: string;
  incidentId: string;
  requestBody: CreateIncidentRetrospectiveFieldRequestBody;
};

/** @internal */
export const CreateIncidentRetrospectiveFieldType$inboundSchema:
  z.ZodNativeEnum<typeof CreateIncidentRetrospectiveFieldType> = z.nativeEnum(
    CreateIncidentRetrospectiveFieldType,
  );

/** @internal */
export const CreateIncidentRetrospectiveFieldType$outboundSchema:
  z.ZodNativeEnum<typeof CreateIncidentRetrospectiveFieldType> =
    CreateIncidentRetrospectiveFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentRetrospectiveFieldType$ {
  /** @deprecated use `CreateIncidentRetrospectiveFieldType$inboundSchema` instead. */
  export const inboundSchema =
    CreateIncidentRetrospectiveFieldType$inboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveFieldType$outboundSchema` instead. */
  export const outboundSchema =
    CreateIncidentRetrospectiveFieldType$outboundSchema;
}

/** @internal */
export const CreateIncidentRetrospectiveFieldRequestBody$inboundSchema:
  z.ZodType<
    CreateIncidentRetrospectiveFieldRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string(),
    type: CreateIncidentRetrospectiveFieldType$inboundSchema,
    help_text: z.nullable(z.string()).optional(),
    permissible_values: z.nullable(z.array(z.string())).optional(),
    is_required: z.nullable(z.boolean()).optional(),
    schema: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "help_text": "helpText",
      "permissible_values": "permissibleValues",
      "is_required": "isRequired",
    });
  });

/** @internal */
export type CreateIncidentRetrospectiveFieldRequestBody$Outbound = {
  label: string;
  type: string;
  help_text?: string | null | undefined;
  permissible_values?: Array<string> | null | undefined;
  is_required?: boolean | null | undefined;
  schema?: Array<string> | null | undefined;
};

/** @internal */
export const CreateIncidentRetrospectiveFieldRequestBody$outboundSchema:
  z.ZodType<
    CreateIncidentRetrospectiveFieldRequestBody$Outbound,
    z.ZodTypeDef,
    CreateIncidentRetrospectiveFieldRequestBody
  > = z.object({
    label: z.string(),
    type: CreateIncidentRetrospectiveFieldType$outboundSchema,
    helpText: z.nullable(z.string()).optional(),
    permissibleValues: z.nullable(z.array(z.string())).optional(),
    isRequired: z.nullable(z.boolean()).optional(),
    schema: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      helpText: "help_text",
      permissibleValues: "permissible_values",
      isRequired: "is_required",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentRetrospectiveFieldRequestBody$ {
  /** @deprecated use `CreateIncidentRetrospectiveFieldRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateIncidentRetrospectiveFieldRequestBody$inboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveFieldRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateIncidentRetrospectiveFieldRequestBody$outboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveFieldRequestBody$Outbound` instead. */
  export type Outbound = CreateIncidentRetrospectiveFieldRequestBody$Outbound;
}

export function createIncidentRetrospectiveFieldRequestBodyToJSON(
  createIncidentRetrospectiveFieldRequestBody:
    CreateIncidentRetrospectiveFieldRequestBody,
): string {
  return JSON.stringify(
    CreateIncidentRetrospectiveFieldRequestBody$outboundSchema.parse(
      createIncidentRetrospectiveFieldRequestBody,
    ),
  );
}

export function createIncidentRetrospectiveFieldRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateIncidentRetrospectiveFieldRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateIncidentRetrospectiveFieldRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateIncidentRetrospectiveFieldRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateIncidentRetrospectiveFieldRequest$inboundSchema: z.ZodType<
  CreateIncidentRetrospectiveFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrospective_id: z.string(),
  incident_id: z.string(),
  RequestBody: z.lazy(() =>
    CreateIncidentRetrospectiveFieldRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "retrospective_id": "retrospectiveId",
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateIncidentRetrospectiveFieldRequest$Outbound = {
  retrospective_id: string;
  incident_id: string;
  RequestBody: CreateIncidentRetrospectiveFieldRequestBody$Outbound;
};

/** @internal */
export const CreateIncidentRetrospectiveFieldRequest$outboundSchema: z.ZodType<
  CreateIncidentRetrospectiveFieldRequest$Outbound,
  z.ZodTypeDef,
  CreateIncidentRetrospectiveFieldRequest
> = z.object({
  retrospectiveId: z.string(),
  incidentId: z.string(),
  requestBody: z.lazy(() =>
    CreateIncidentRetrospectiveFieldRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    retrospectiveId: "retrospective_id",
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentRetrospectiveFieldRequest$ {
  /** @deprecated use `CreateIncidentRetrospectiveFieldRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateIncidentRetrospectiveFieldRequest$inboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveFieldRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateIncidentRetrospectiveFieldRequest$outboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveFieldRequest$Outbound` instead. */
  export type Outbound = CreateIncidentRetrospectiveFieldRequest$Outbound;
}

export function createIncidentRetrospectiveFieldRequestToJSON(
  createIncidentRetrospectiveFieldRequest:
    CreateIncidentRetrospectiveFieldRequest,
): string {
  return JSON.stringify(
    CreateIncidentRetrospectiveFieldRequest$outboundSchema.parse(
      createIncidentRetrospectiveFieldRequest,
    ),
  );
}

export function createIncidentRetrospectiveFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateIncidentRetrospectiveFieldRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateIncidentRetrospectiveFieldRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateIncidentRetrospectiveFieldRequest' from JSON`,
  );
}
