/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTranscriptAttributionRequestBody = {
  /**
   * The speaker to attribute the transcript to.
   */
  fromSpeaker?: string | null | undefined;
  /**
   * The user to attribute the transcript to.
   */
  fromUserId?: string | null | undefined;
  /**
   * The ID of the user to attribute the transcript to.
   */
  toUserId: string;
  /**
   * The ID of the specific transcript entry to change attribution for.
   */
  transcriptId?: string | null | undefined;
  /**
   * The ID of the conference bridge to attribute the transcript to.
   */
  conferenceBridgeId?: string | null | undefined;
};

export type UpdateTranscriptAttributionRequest = {
  incidentId: string;
  requestBody: UpdateTranscriptAttributionRequestBody;
};

/** @internal */
export const UpdateTranscriptAttributionRequestBody$inboundSchema: z.ZodType<
  UpdateTranscriptAttributionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  from_speaker: z.nullable(z.string()).optional(),
  from_user_id: z.nullable(z.string()).optional(),
  to_user_id: z.string(),
  transcript_id: z.nullable(z.string()).optional(),
  conference_bridge_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "from_speaker": "fromSpeaker",
    "from_user_id": "fromUserId",
    "to_user_id": "toUserId",
    "transcript_id": "transcriptId",
    "conference_bridge_id": "conferenceBridgeId",
  });
});

/** @internal */
export type UpdateTranscriptAttributionRequestBody$Outbound = {
  from_speaker?: string | null | undefined;
  from_user_id?: string | null | undefined;
  to_user_id: string;
  transcript_id?: string | null | undefined;
  conference_bridge_id?: string | null | undefined;
};

/** @internal */
export const UpdateTranscriptAttributionRequestBody$outboundSchema: z.ZodType<
  UpdateTranscriptAttributionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateTranscriptAttributionRequestBody
> = z.object({
  fromSpeaker: z.nullable(z.string()).optional(),
  fromUserId: z.nullable(z.string()).optional(),
  toUserId: z.string(),
  transcriptId: z.nullable(z.string()).optional(),
  conferenceBridgeId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fromSpeaker: "from_speaker",
    fromUserId: "from_user_id",
    toUserId: "to_user_id",
    transcriptId: "transcript_id",
    conferenceBridgeId: "conference_bridge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTranscriptAttributionRequestBody$ {
  /** @deprecated use `UpdateTranscriptAttributionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTranscriptAttributionRequestBody$inboundSchema;
  /** @deprecated use `UpdateTranscriptAttributionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTranscriptAttributionRequestBody$outboundSchema;
  /** @deprecated use `UpdateTranscriptAttributionRequestBody$Outbound` instead. */
  export type Outbound = UpdateTranscriptAttributionRequestBody$Outbound;
}

export function updateTranscriptAttributionRequestBodyToJSON(
  updateTranscriptAttributionRequestBody:
    UpdateTranscriptAttributionRequestBody,
): string {
  return JSON.stringify(
    UpdateTranscriptAttributionRequestBody$outboundSchema.parse(
      updateTranscriptAttributionRequestBody,
    ),
  );
}

export function updateTranscriptAttributionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTranscriptAttributionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTranscriptAttributionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTranscriptAttributionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateTranscriptAttributionRequest$inboundSchema: z.ZodType<
  UpdateTranscriptAttributionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.lazy(() =>
    UpdateTranscriptAttributionRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateTranscriptAttributionRequest$Outbound = {
  incident_id: string;
  RequestBody: UpdateTranscriptAttributionRequestBody$Outbound;
};

/** @internal */
export const UpdateTranscriptAttributionRequest$outboundSchema: z.ZodType<
  UpdateTranscriptAttributionRequest$Outbound,
  z.ZodTypeDef,
  UpdateTranscriptAttributionRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.lazy(() =>
    UpdateTranscriptAttributionRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTranscriptAttributionRequest$ {
  /** @deprecated use `UpdateTranscriptAttributionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTranscriptAttributionRequest$inboundSchema;
  /** @deprecated use `UpdateTranscriptAttributionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTranscriptAttributionRequest$outboundSchema;
  /** @deprecated use `UpdateTranscriptAttributionRequest$Outbound` instead. */
  export type Outbound = UpdateTranscriptAttributionRequest$Outbound;
}

export function updateTranscriptAttributionRequestToJSON(
  updateTranscriptAttributionRequest: UpdateTranscriptAttributionRequest,
): string {
  return JSON.stringify(
    UpdateTranscriptAttributionRequest$outboundSchema.parse(
      updateTranscriptAttributionRequest,
    ),
  );
}

export function updateTranscriptAttributionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTranscriptAttributionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTranscriptAttributionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTranscriptAttributionRequest' from JSON`,
  );
}
