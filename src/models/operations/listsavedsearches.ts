/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListSavedSearchesResourceType = {
  ChangeEvents: "change_events",
  Incidents: "incidents",
  Services: "services",
  ScheduledMaintenances: "scheduled_maintenances",
  TicketTasks: "ticket_tasks",
  TicketFollowUps: "ticket_follow_ups",
  Analytics: "analytics",
  ImpactAnalytics: "impact_analytics",
  Alerts: "alerts",
  IncidentEvents: "incident_events",
} as const;
export type ListSavedSearchesResourceType = ClosedEnum<
  typeof ListSavedSearchesResourceType
>;

export type ListSavedSearchesRequest = {
  resourceType: ListSavedSearchesResourceType;
  /**
   * The user ID used to filter saved searches.
   */
  userId?: string | null | undefined;
  /**
   * Filter saved searches with a query on their name
   */
  query?: string | null | undefined;
  page?: number | null | undefined;
  perPage?: number | null | undefined;
};

/** @internal */
export const ListSavedSearchesResourceType$inboundSchema: z.ZodNativeEnum<
  typeof ListSavedSearchesResourceType
> = z.nativeEnum(ListSavedSearchesResourceType);

/** @internal */
export const ListSavedSearchesResourceType$outboundSchema: z.ZodNativeEnum<
  typeof ListSavedSearchesResourceType
> = ListSavedSearchesResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSavedSearchesResourceType$ {
  /** @deprecated use `ListSavedSearchesResourceType$inboundSchema` instead. */
  export const inboundSchema = ListSavedSearchesResourceType$inboundSchema;
  /** @deprecated use `ListSavedSearchesResourceType$outboundSchema` instead. */
  export const outboundSchema = ListSavedSearchesResourceType$outboundSchema;
}

/** @internal */
export const ListSavedSearchesRequest$inboundSchema: z.ZodType<
  ListSavedSearchesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: ListSavedSearchesResourceType$inboundSchema,
  user_id: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "user_id": "userId",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListSavedSearchesRequest$Outbound = {
  resource_type: string;
  user_id?: string | null | undefined;
  query?: string | null | undefined;
  page?: number | null | undefined;
  per_page?: number | null | undefined;
};

/** @internal */
export const ListSavedSearchesRequest$outboundSchema: z.ZodType<
  ListSavedSearchesRequest$Outbound,
  z.ZodTypeDef,
  ListSavedSearchesRequest
> = z.object({
  resourceType: ListSavedSearchesResourceType$outboundSchema,
  userId: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    userId: "user_id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSavedSearchesRequest$ {
  /** @deprecated use `ListSavedSearchesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSavedSearchesRequest$inboundSchema;
  /** @deprecated use `ListSavedSearchesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSavedSearchesRequest$outboundSchema;
  /** @deprecated use `ListSavedSearchesRequest$Outbound` instead. */
  export type Outbound = ListSavedSearchesRequest$Outbound;
}

export function listSavedSearchesRequestToJSON(
  listSavedSearchesRequest: ListSavedSearchesRequest,
): string {
  return JSON.stringify(
    ListSavedSearchesRequest$outboundSchema.parse(listSavedSearchesRequest),
  );
}

export function listSavedSearchesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSavedSearchesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSavedSearchesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSavedSearchesRequest' from JSON`,
  );
}
