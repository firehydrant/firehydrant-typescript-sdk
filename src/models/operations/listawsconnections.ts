/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAwsConnectionsRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * AWS account ID containing the role to be assumed
   */
  awsAccountId?: string | null | undefined;
  /**
   * ARN of the role to be assumed
   */
  targetArn?: string | null | undefined;
  /**
   * The external ID supplied when assuming the role
   */
  externalId?: string | null | undefined;
};

/** @internal */
export const ListAwsConnectionsRequest$inboundSchema: z.ZodType<
  ListAwsConnectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  aws_account_id: z.nullable(z.string()).optional(),
  target_arn: z.nullable(z.string()).optional(),
  external_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "aws_account_id": "awsAccountId",
    "target_arn": "targetArn",
    "external_id": "externalId",
  });
});

/** @internal */
export type ListAwsConnectionsRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  aws_account_id?: string | null | undefined;
  target_arn?: string | null | undefined;
  external_id?: string | null | undefined;
};

/** @internal */
export const ListAwsConnectionsRequest$outboundSchema: z.ZodType<
  ListAwsConnectionsRequest$Outbound,
  z.ZodTypeDef,
  ListAwsConnectionsRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  awsAccountId: z.nullable(z.string()).optional(),
  targetArn: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    awsAccountId: "aws_account_id",
    targetArn: "target_arn",
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAwsConnectionsRequest$ {
  /** @deprecated use `ListAwsConnectionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAwsConnectionsRequest$inboundSchema;
  /** @deprecated use `ListAwsConnectionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAwsConnectionsRequest$outboundSchema;
  /** @deprecated use `ListAwsConnectionsRequest$Outbound` instead. */
  export type Outbound = ListAwsConnectionsRequest$Outbound;
}

export function listAwsConnectionsRequestToJSON(
  listAwsConnectionsRequest: ListAwsConnectionsRequest,
): string {
  return JSON.stringify(
    ListAwsConnectionsRequest$outboundSchema.parse(listAwsConnectionsRequest),
  );
}

export function listAwsConnectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAwsConnectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAwsConnectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAwsConnectionsRequest' from JSON`,
  );
}
