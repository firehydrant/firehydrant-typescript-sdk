/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAudienceSummaryRequest = {
  /**
   * Unique identifier of the audience
   */
  audienceId: string;
  /**
   * Unique identifier of the incident to summarize
   */
  incidentId: string;
};

/** @internal */
export const GetAudienceSummaryRequest$inboundSchema: z.ZodType<
  GetAudienceSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  audience_id: z.string(),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "audience_id": "audienceId",
    "incident_id": "incidentId",
  });
});

/** @internal */
export type GetAudienceSummaryRequest$Outbound = {
  audience_id: string;
  incident_id: string;
};

/** @internal */
export const GetAudienceSummaryRequest$outboundSchema: z.ZodType<
  GetAudienceSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetAudienceSummaryRequest
> = z.object({
  audienceId: z.string(),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    audienceId: "audience_id",
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAudienceSummaryRequest$ {
  /** @deprecated use `GetAudienceSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = GetAudienceSummaryRequest$inboundSchema;
  /** @deprecated use `GetAudienceSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = GetAudienceSummaryRequest$outboundSchema;
  /** @deprecated use `GetAudienceSummaryRequest$Outbound` instead. */
  export type Outbound = GetAudienceSummaryRequest$Outbound;
}

export function getAudienceSummaryRequestToJSON(
  getAudienceSummaryRequest: GetAudienceSummaryRequest,
): string {
  return JSON.stringify(
    GetAudienceSummaryRequest$outboundSchema.parse(getAudienceSummaryRequest),
  );
}

export function getAudienceSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAudienceSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAudienceSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAudienceSummaryRequest' from JSON`,
  );
}
