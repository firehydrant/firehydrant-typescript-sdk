/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The name of the integration to export the retrospective to.
 */
export const IntegrationSlug = {
  ConfluenceCloud: "confluence_cloud",
  GoogleDocs: "google_docs",
} as const;
/**
 * The name of the integration to export the retrospective to.
 */
export type IntegrationSlug = ClosedEnum<typeof IntegrationSlug>;

export type ExportIncidentRetrospectivesRequestBody = {
  /**
   * The name of the integration to export the retrospective to.
   */
  integrationSlug: IntegrationSlug;
  /**
   * The ID of the parent page to export the retrospective to.
   */
  parentPageId?: string | null | undefined;
};

export type ExportIncidentRetrospectivesRequest = {
  incidentId: string;
  requestBody: ExportIncidentRetrospectivesRequestBody;
};

/** @internal */
export const IntegrationSlug$inboundSchema: z.ZodNativeEnum<
  typeof IntegrationSlug
> = z.nativeEnum(IntegrationSlug);

/** @internal */
export const IntegrationSlug$outboundSchema: z.ZodNativeEnum<
  typeof IntegrationSlug
> = IntegrationSlug$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationSlug$ {
  /** @deprecated use `IntegrationSlug$inboundSchema` instead. */
  export const inboundSchema = IntegrationSlug$inboundSchema;
  /** @deprecated use `IntegrationSlug$outboundSchema` instead. */
  export const outboundSchema = IntegrationSlug$outboundSchema;
}

/** @internal */
export const ExportIncidentRetrospectivesRequestBody$inboundSchema: z.ZodType<
  ExportIncidentRetrospectivesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_slug: IntegrationSlug$inboundSchema,
  parent_page_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_slug": "integrationSlug",
    "parent_page_id": "parentPageId",
  });
});

/** @internal */
export type ExportIncidentRetrospectivesRequestBody$Outbound = {
  integration_slug: string;
  parent_page_id?: string | null | undefined;
};

/** @internal */
export const ExportIncidentRetrospectivesRequestBody$outboundSchema: z.ZodType<
  ExportIncidentRetrospectivesRequestBody$Outbound,
  z.ZodTypeDef,
  ExportIncidentRetrospectivesRequestBody
> = z.object({
  integrationSlug: IntegrationSlug$outboundSchema,
  parentPageId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    integrationSlug: "integration_slug",
    parentPageId: "parent_page_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportIncidentRetrospectivesRequestBody$ {
  /** @deprecated use `ExportIncidentRetrospectivesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ExportIncidentRetrospectivesRequestBody$inboundSchema;
  /** @deprecated use `ExportIncidentRetrospectivesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ExportIncidentRetrospectivesRequestBody$outboundSchema;
  /** @deprecated use `ExportIncidentRetrospectivesRequestBody$Outbound` instead. */
  export type Outbound = ExportIncidentRetrospectivesRequestBody$Outbound;
}

export function exportIncidentRetrospectivesRequestBodyToJSON(
  exportIncidentRetrospectivesRequestBody:
    ExportIncidentRetrospectivesRequestBody,
): string {
  return JSON.stringify(
    ExportIncidentRetrospectivesRequestBody$outboundSchema.parse(
      exportIncidentRetrospectivesRequestBody,
    ),
  );
}

export function exportIncidentRetrospectivesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ExportIncidentRetrospectivesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ExportIncidentRetrospectivesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ExportIncidentRetrospectivesRequestBody' from JSON`,
  );
}

/** @internal */
export const ExportIncidentRetrospectivesRequest$inboundSchema: z.ZodType<
  ExportIncidentRetrospectivesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.lazy(() =>
    ExportIncidentRetrospectivesRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ExportIncidentRetrospectivesRequest$Outbound = {
  incident_id: string;
  RequestBody: ExportIncidentRetrospectivesRequestBody$Outbound;
};

/** @internal */
export const ExportIncidentRetrospectivesRequest$outboundSchema: z.ZodType<
  ExportIncidentRetrospectivesRequest$Outbound,
  z.ZodTypeDef,
  ExportIncidentRetrospectivesRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.lazy(() =>
    ExportIncidentRetrospectivesRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportIncidentRetrospectivesRequest$ {
  /** @deprecated use `ExportIncidentRetrospectivesRequest$inboundSchema` instead. */
  export const inboundSchema =
    ExportIncidentRetrospectivesRequest$inboundSchema;
  /** @deprecated use `ExportIncidentRetrospectivesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ExportIncidentRetrospectivesRequest$outboundSchema;
  /** @deprecated use `ExportIncidentRetrospectivesRequest$Outbound` instead. */
  export type Outbound = ExportIncidentRetrospectivesRequest$Outbound;
}

export function exportIncidentRetrospectivesRequestToJSON(
  exportIncidentRetrospectivesRequest: ExportIncidentRetrospectivesRequest,
): string {
  return JSON.stringify(
    ExportIncidentRetrospectivesRequest$outboundSchema.parse(
      exportIncidentRetrospectivesRequest,
    ),
  );
}

export function exportIncidentRetrospectivesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExportIncidentRetrospectivesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExportIncidentRetrospectivesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportIncidentRetrospectivesRequest' from JSON`,
  );
}
