/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RestoreAudienceRequest = {
  /**
   * Unique identifier of the audience
   */
  audienceId: string;
};

/** @internal */
export const RestoreAudienceRequest$inboundSchema: z.ZodType<
  RestoreAudienceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  audience_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "audience_id": "audienceId",
  });
});

/** @internal */
export type RestoreAudienceRequest$Outbound = {
  audience_id: string;
};

/** @internal */
export const RestoreAudienceRequest$outboundSchema: z.ZodType<
  RestoreAudienceRequest$Outbound,
  z.ZodTypeDef,
  RestoreAudienceRequest
> = z.object({
  audienceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    audienceId: "audience_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestoreAudienceRequest$ {
  /** @deprecated use `RestoreAudienceRequest$inboundSchema` instead. */
  export const inboundSchema = RestoreAudienceRequest$inboundSchema;
  /** @deprecated use `RestoreAudienceRequest$outboundSchema` instead. */
  export const outboundSchema = RestoreAudienceRequest$outboundSchema;
  /** @deprecated use `RestoreAudienceRequest$Outbound` instead. */
  export type Outbound = RestoreAudienceRequest$Outbound;
}

export function restoreAudienceRequestToJSON(
  restoreAudienceRequest: RestoreAudienceRequest,
): string {
  return JSON.stringify(
    RestoreAudienceRequest$outboundSchema.parse(restoreAudienceRequest),
  );
}

export function restoreAudienceRequestFromJSON(
  jsonString: string,
): SafeParseResult<RestoreAudienceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestoreAudienceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestoreAudienceRequest' from JSON`,
  );
}
