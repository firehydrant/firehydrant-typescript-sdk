/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIncidentAttachmentsRequest = {
  incidentId: string;
  attachableType?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
};

/** @internal */
export const ListIncidentAttachmentsRequest$inboundSchema: z.ZodType<
  ListIncidentAttachmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  attachable_type: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "attachable_type": "attachableType",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListIncidentAttachmentsRequest$Outbound = {
  incident_id: string;
  attachable_type?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListIncidentAttachmentsRequest$outboundSchema: z.ZodType<
  ListIncidentAttachmentsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentAttachmentsRequest
> = z.object({
  incidentId: z.string(),
  attachableType: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    attachableType: "attachable_type",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentAttachmentsRequest$ {
  /** @deprecated use `ListIncidentAttachmentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentAttachmentsRequest$inboundSchema;
  /** @deprecated use `ListIncidentAttachmentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentAttachmentsRequest$outboundSchema;
  /** @deprecated use `ListIncidentAttachmentsRequest$Outbound` instead. */
  export type Outbound = ListIncidentAttachmentsRequest$Outbound;
}

export function listIncidentAttachmentsRequestToJSON(
  listIncidentAttachmentsRequest: ListIncidentAttachmentsRequest,
): string {
  return JSON.stringify(
    ListIncidentAttachmentsRequest$outboundSchema.parse(
      listIncidentAttachmentsRequest,
    ),
  );
}

export function listIncidentAttachmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentAttachmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentAttachmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentAttachmentsRequest' from JSON`,
  );
}
