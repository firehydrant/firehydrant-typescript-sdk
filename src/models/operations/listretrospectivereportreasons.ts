/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRetrospectiveReportReasonsRequest = {
  reportId: string;
  page?: number | undefined;
  perPage?: number | undefined;
};

/** @internal */
export const ListRetrospectiveReportReasonsRequest$inboundSchema: z.ZodType<
  ListRetrospectiveReportReasonsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  report_id: z.string(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "report_id": "reportId",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListRetrospectiveReportReasonsRequest$Outbound = {
  report_id: string;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListRetrospectiveReportReasonsRequest$outboundSchema: z.ZodType<
  ListRetrospectiveReportReasonsRequest$Outbound,
  z.ZodTypeDef,
  ListRetrospectiveReportReasonsRequest
> = z.object({
  reportId: z.string(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    reportId: "report_id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRetrospectiveReportReasonsRequest$ {
  /** @deprecated use `ListRetrospectiveReportReasonsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListRetrospectiveReportReasonsRequest$inboundSchema;
  /** @deprecated use `ListRetrospectiveReportReasonsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListRetrospectiveReportReasonsRequest$outboundSchema;
  /** @deprecated use `ListRetrospectiveReportReasonsRequest$Outbound` instead. */
  export type Outbound = ListRetrospectiveReportReasonsRequest$Outbound;
}

export function listRetrospectiveReportReasonsRequestToJSON(
  listRetrospectiveReportReasonsRequest: ListRetrospectiveReportReasonsRequest,
): string {
  return JSON.stringify(
    ListRetrospectiveReportReasonsRequest$outboundSchema.parse(
      listRetrospectiveReportReasonsRequest,
    ),
  );
}

export function listRetrospectiveReportReasonsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRetrospectiveReportReasonsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListRetrospectiveReportReasonsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRetrospectiveReportReasonsRequest' from JSON`,
  );
}
