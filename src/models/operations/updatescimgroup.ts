/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateScimGroupRequest = {
  id: string;
  updateScimGroup: components.UpdateScimGroup;
};

/** @internal */
export const UpdateScimGroupRequest$inboundSchema: z.ZodType<
  UpdateScimGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  update_scim_group: z.lazy(() => components.UpdateScimGroup$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "update_scim_group": "updateScimGroup",
  });
});

/** @internal */
export type UpdateScimGroupRequest$Outbound = {
  id: string;
  update_scim_group: components.UpdateScimGroup$Outbound;
};

/** @internal */
export const UpdateScimGroupRequest$outboundSchema: z.ZodType<
  UpdateScimGroupRequest$Outbound,
  z.ZodTypeDef,
  UpdateScimGroupRequest
> = z.object({
  id: z.string(),
  updateScimGroup: z.lazy(() => components.UpdateScimGroup$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    updateScimGroup: "update_scim_group",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimGroupRequest$ {
  /** @deprecated use `UpdateScimGroupRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateScimGroupRequest$inboundSchema;
  /** @deprecated use `UpdateScimGroupRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateScimGroupRequest$outboundSchema;
  /** @deprecated use `UpdateScimGroupRequest$Outbound` instead. */
  export type Outbound = UpdateScimGroupRequest$Outbound;
}

export function updateScimGroupRequestToJSON(
  updateScimGroupRequest: UpdateScimGroupRequest,
): string {
  return JSON.stringify(
    UpdateScimGroupRequest$outboundSchema.parse(updateScimGroupRequest),
  );
}

export function updateScimGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimGroupRequest' from JSON`,
  );
}
