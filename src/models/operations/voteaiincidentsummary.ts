/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Direction = {
  Up: "up",
  Down: "down",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type VoteAiIncidentSummaryRequestBody = {
  direction: Direction;
};

export type VoteAiIncidentSummaryRequest = {
  incidentId: string;
  generatedSummaryId: string;
  requestBody: VoteAiIncidentSummaryRequestBody;
};

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const VoteAiIncidentSummaryRequestBody$inboundSchema: z.ZodType<
  VoteAiIncidentSummaryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  direction: Direction$inboundSchema,
});

/** @internal */
export type VoteAiIncidentSummaryRequestBody$Outbound = {
  direction: string;
};

/** @internal */
export const VoteAiIncidentSummaryRequestBody$outboundSchema: z.ZodType<
  VoteAiIncidentSummaryRequestBody$Outbound,
  z.ZodTypeDef,
  VoteAiIncidentSummaryRequestBody
> = z.object({
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoteAiIncidentSummaryRequestBody$ {
  /** @deprecated use `VoteAiIncidentSummaryRequestBody$inboundSchema` instead. */
  export const inboundSchema = VoteAiIncidentSummaryRequestBody$inboundSchema;
  /** @deprecated use `VoteAiIncidentSummaryRequestBody$outboundSchema` instead. */
  export const outboundSchema = VoteAiIncidentSummaryRequestBody$outboundSchema;
  /** @deprecated use `VoteAiIncidentSummaryRequestBody$Outbound` instead. */
  export type Outbound = VoteAiIncidentSummaryRequestBody$Outbound;
}

export function voteAiIncidentSummaryRequestBodyToJSON(
  voteAiIncidentSummaryRequestBody: VoteAiIncidentSummaryRequestBody,
): string {
  return JSON.stringify(
    VoteAiIncidentSummaryRequestBody$outboundSchema.parse(
      voteAiIncidentSummaryRequestBody,
    ),
  );
}

export function voteAiIncidentSummaryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VoteAiIncidentSummaryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoteAiIncidentSummaryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoteAiIncidentSummaryRequestBody' from JSON`,
  );
}

/** @internal */
export const VoteAiIncidentSummaryRequest$inboundSchema: z.ZodType<
  VoteAiIncidentSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  generated_summary_id: z.string(),
  RequestBody: z.lazy(() => VoteAiIncidentSummaryRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "generated_summary_id": "generatedSummaryId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VoteAiIncidentSummaryRequest$Outbound = {
  incident_id: string;
  generated_summary_id: string;
  RequestBody: VoteAiIncidentSummaryRequestBody$Outbound;
};

/** @internal */
export const VoteAiIncidentSummaryRequest$outboundSchema: z.ZodType<
  VoteAiIncidentSummaryRequest$Outbound,
  z.ZodTypeDef,
  VoteAiIncidentSummaryRequest
> = z.object({
  incidentId: z.string(),
  generatedSummaryId: z.string(),
  requestBody: z.lazy(() => VoteAiIncidentSummaryRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    generatedSummaryId: "generated_summary_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoteAiIncidentSummaryRequest$ {
  /** @deprecated use `VoteAiIncidentSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = VoteAiIncidentSummaryRequest$inboundSchema;
  /** @deprecated use `VoteAiIncidentSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = VoteAiIncidentSummaryRequest$outboundSchema;
  /** @deprecated use `VoteAiIncidentSummaryRequest$Outbound` instead. */
  export type Outbound = VoteAiIncidentSummaryRequest$Outbound;
}

export function voteAiIncidentSummaryRequestToJSON(
  voteAiIncidentSummaryRequest: VoteAiIncidentSummaryRequest,
): string {
  return JSON.stringify(
    VoteAiIncidentSummaryRequest$outboundSchema.parse(
      voteAiIncidentSummaryRequest,
    ),
  );
}

export function voteAiIncidentSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<VoteAiIncidentSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoteAiIncidentSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoteAiIncidentSummaryRequest' from JSON`,
  );
}
