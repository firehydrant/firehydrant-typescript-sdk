/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReplaceScimUserRequest = {
  id: string;
  putV1ScimV2UsersId: components.PutV1ScimV2UsersId;
};

/** @internal */
export const ReplaceScimUserRequest$inboundSchema: z.ZodType<
  ReplaceScimUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  putV1ScimV2UsersId: components.PutV1ScimV2UsersId$inboundSchema,
});

/** @internal */
export type ReplaceScimUserRequest$Outbound = {
  id: string;
  putV1ScimV2UsersId: components.PutV1ScimV2UsersId$Outbound;
};

/** @internal */
export const ReplaceScimUserRequest$outboundSchema: z.ZodType<
  ReplaceScimUserRequest$Outbound,
  z.ZodTypeDef,
  ReplaceScimUserRequest
> = z.object({
  id: z.string(),
  putV1ScimV2UsersId: components.PutV1ScimV2UsersId$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplaceScimUserRequest$ {
  /** @deprecated use `ReplaceScimUserRequest$inboundSchema` instead. */
  export const inboundSchema = ReplaceScimUserRequest$inboundSchema;
  /** @deprecated use `ReplaceScimUserRequest$outboundSchema` instead. */
  export const outboundSchema = ReplaceScimUserRequest$outboundSchema;
  /** @deprecated use `ReplaceScimUserRequest$Outbound` instead. */
  export type Outbound = ReplaceScimUserRequest$Outbound;
}

export function replaceScimUserRequestToJSON(
  replaceScimUserRequest: ReplaceScimUserRequest,
): string {
  return JSON.stringify(
    ReplaceScimUserRequest$outboundSchema.parse(replaceScimUserRequest),
  );
}

export function replaceScimUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReplaceScimUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReplaceScimUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReplaceScimUserRequest' from JSON`,
  );
}
