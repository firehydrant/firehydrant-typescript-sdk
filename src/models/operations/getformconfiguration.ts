/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFormConfigurationRequest = {
  slug: string;
};

/** @internal */
export const GetFormConfigurationRequest$inboundSchema: z.ZodType<
  GetFormConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
});

/** @internal */
export type GetFormConfigurationRequest$Outbound = {
  slug: string;
};

/** @internal */
export const GetFormConfigurationRequest$outboundSchema: z.ZodType<
  GetFormConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetFormConfigurationRequest
> = z.object({
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFormConfigurationRequest$ {
  /** @deprecated use `GetFormConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema = GetFormConfigurationRequest$inboundSchema;
  /** @deprecated use `GetFormConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema = GetFormConfigurationRequest$outboundSchema;
  /** @deprecated use `GetFormConfigurationRequest$Outbound` instead. */
  export type Outbound = GetFormConfigurationRequest$Outbound;
}

export function getFormConfigurationRequestToJSON(
  getFormConfigurationRequest: GetFormConfigurationRequest,
): string {
  return JSON.stringify(
    GetFormConfigurationRequest$outboundSchema.parse(
      getFormConfigurationRequest,
    ),
  );
}

export function getFormConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFormConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFormConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFormConfigurationRequest' from JSON`,
  );
}
