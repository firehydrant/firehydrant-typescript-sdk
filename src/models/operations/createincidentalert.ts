/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateIncidentAlertRequest = {
  incidentId: string;
  /**
   * Array of alert IDs to be assigned to the incident
   */
  requestBody: Array<string>;
};

/** @internal */
export const CreateIncidentAlertRequest$inboundSchema: z.ZodType<
  CreateIncidentAlertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateIncidentAlertRequest$Outbound = {
  incident_id: string;
  RequestBody: Array<string>;
};

/** @internal */
export const CreateIncidentAlertRequest$outboundSchema: z.ZodType<
  CreateIncidentAlertRequest$Outbound,
  z.ZodTypeDef,
  CreateIncidentAlertRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentAlertRequest$ {
  /** @deprecated use `CreateIncidentAlertRequest$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentAlertRequest$inboundSchema;
  /** @deprecated use `CreateIncidentAlertRequest$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentAlertRequest$outboundSchema;
  /** @deprecated use `CreateIncidentAlertRequest$Outbound` instead. */
  export type Outbound = CreateIncidentAlertRequest$Outbound;
}

export function createIncidentAlertRequestToJSON(
  createIncidentAlertRequest: CreateIncidentAlertRequest,
): string {
  return JSON.stringify(
    CreateIncidentAlertRequest$outboundSchema.parse(createIncidentAlertRequest),
  );
}

export function createIncidentAlertRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentAlertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentAlertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentAlertRequest' from JSON`,
  );
}
