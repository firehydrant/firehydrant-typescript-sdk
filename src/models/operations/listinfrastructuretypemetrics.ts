/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListInfrastructureTypeMetricsInfraType = {
  Environments: "environments",
  Functionalities: "functionalities",
  Services: "services",
  Customers: "customers",
} as const;
export type ListInfrastructureTypeMetricsInfraType = ClosedEnum<
  typeof ListInfrastructureTypeMetricsInfraType
>;

export type ListInfrastructureTypeMetricsRequest = {
  infraType: ListInfrastructureTypeMetricsInfraType;
  /**
   * The start date to return metrics from; defaults to 30 days ago
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The end date to return metrics from, defaults to today
   */
  endDate?: RFCDate | null | undefined;
};

/** @internal */
export const ListInfrastructureTypeMetricsInfraType$inboundSchema:
  z.ZodNativeEnum<typeof ListInfrastructureTypeMetricsInfraType> = z.nativeEnum(
    ListInfrastructureTypeMetricsInfraType,
  );

/** @internal */
export const ListInfrastructureTypeMetricsInfraType$outboundSchema:
  z.ZodNativeEnum<typeof ListInfrastructureTypeMetricsInfraType> =
    ListInfrastructureTypeMetricsInfraType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInfrastructureTypeMetricsInfraType$ {
  /** @deprecated use `ListInfrastructureTypeMetricsInfraType$inboundSchema` instead. */
  export const inboundSchema =
    ListInfrastructureTypeMetricsInfraType$inboundSchema;
  /** @deprecated use `ListInfrastructureTypeMetricsInfraType$outboundSchema` instead. */
  export const outboundSchema =
    ListInfrastructureTypeMetricsInfraType$outboundSchema;
}

/** @internal */
export const ListInfrastructureTypeMetricsRequest$inboundSchema: z.ZodType<
  ListInfrastructureTypeMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  infra_type: ListInfrastructureTypeMetricsInfraType$inboundSchema,
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "infra_type": "infraType",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type ListInfrastructureTypeMetricsRequest$Outbound = {
  infra_type: string;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const ListInfrastructureTypeMetricsRequest$outboundSchema: z.ZodType<
  ListInfrastructureTypeMetricsRequest$Outbound,
  z.ZodTypeDef,
  ListInfrastructureTypeMetricsRequest
> = z.object({
  infraType: ListInfrastructureTypeMetricsInfraType$outboundSchema,
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    infraType: "infra_type",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInfrastructureTypeMetricsRequest$ {
  /** @deprecated use `ListInfrastructureTypeMetricsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListInfrastructureTypeMetricsRequest$inboundSchema;
  /** @deprecated use `ListInfrastructureTypeMetricsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListInfrastructureTypeMetricsRequest$outboundSchema;
  /** @deprecated use `ListInfrastructureTypeMetricsRequest$Outbound` instead. */
  export type Outbound = ListInfrastructureTypeMetricsRequest$Outbound;
}

export function listInfrastructureTypeMetricsRequestToJSON(
  listInfrastructureTypeMetricsRequest: ListInfrastructureTypeMetricsRequest,
): string {
  return JSON.stringify(
    ListInfrastructureTypeMetricsRequest$outboundSchema.parse(
      listInfrastructureTypeMetricsRequest,
    ),
  );
}

export function listInfrastructureTypeMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInfrastructureTypeMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInfrastructureTypeMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInfrastructureTypeMetricsRequest' from JSON`,
  );
}
