/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateIntegrationFieldMapRequest = {
  fieldMapId: string;
};

/** @internal */
export const UpdateIntegrationFieldMapRequest$inboundSchema: z.ZodType<
  UpdateIntegrationFieldMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_map_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "field_map_id": "fieldMapId",
  });
});

/** @internal */
export type UpdateIntegrationFieldMapRequest$Outbound = {
  field_map_id: string;
};

/** @internal */
export const UpdateIntegrationFieldMapRequest$outboundSchema: z.ZodType<
  UpdateIntegrationFieldMapRequest$Outbound,
  z.ZodTypeDef,
  UpdateIntegrationFieldMapRequest
> = z.object({
  fieldMapId: z.string(),
}).transform((v) => {
  return remap$(v, {
    fieldMapId: "field_map_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIntegrationFieldMapRequest$ {
  /** @deprecated use `UpdateIntegrationFieldMapRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateIntegrationFieldMapRequest$inboundSchema;
  /** @deprecated use `UpdateIntegrationFieldMapRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateIntegrationFieldMapRequest$outboundSchema;
  /** @deprecated use `UpdateIntegrationFieldMapRequest$Outbound` instead. */
  export type Outbound = UpdateIntegrationFieldMapRequest$Outbound;
}

export function updateIntegrationFieldMapRequestToJSON(
  updateIntegrationFieldMapRequest: UpdateIntegrationFieldMapRequest,
): string {
  return JSON.stringify(
    UpdateIntegrationFieldMapRequest$outboundSchema.parse(
      updateIntegrationFieldMapRequest,
    ),
  );
}

export function updateIntegrationFieldMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateIntegrationFieldMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateIntegrationFieldMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateIntegrationFieldMapRequest' from JSON`,
  );
}
