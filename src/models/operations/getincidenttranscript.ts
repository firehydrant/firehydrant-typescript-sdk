/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the transcript entries.
 */
export const QueryParamSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the transcript entries.
 */
export type QueryParamSort = ClosedEnum<typeof QueryParamSort>;

export type GetIncidentTranscriptRequest = {
  /**
   * The ID of the transcript entry to start after.
   */
  after?: string | undefined;
  /**
   * The ID of the transcript entry to start before.
   */
  before?: string | undefined;
  /**
   * The order to sort the transcript entries.
   */
  sort?: QueryParamSort | undefined;
  incidentId: string;
};

/** @internal */
export const QueryParamSort$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSort
> = z.nativeEnum(QueryParamSort);

/** @internal */
export const QueryParamSort$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSort
> = QueryParamSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSort$ {
  /** @deprecated use `QueryParamSort$inboundSchema` instead. */
  export const inboundSchema = QueryParamSort$inboundSchema;
  /** @deprecated use `QueryParamSort$outboundSchema` instead. */
  export const outboundSchema = QueryParamSort$outboundSchema;
}

/** @internal */
export const GetIncidentTranscriptRequest$inboundSchema: z.ZodType<
  GetIncidentTranscriptRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  sort: QueryParamSort$inboundSchema.default("asc"),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
  });
});

/** @internal */
export type GetIncidentTranscriptRequest$Outbound = {
  after?: string | undefined;
  before?: string | undefined;
  sort: string;
  incident_id: string;
};

/** @internal */
export const GetIncidentTranscriptRequest$outboundSchema: z.ZodType<
  GetIncidentTranscriptRequest$Outbound,
  z.ZodTypeDef,
  GetIncidentTranscriptRequest
> = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  sort: QueryParamSort$outboundSchema.default("asc"),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIncidentTranscriptRequest$ {
  /** @deprecated use `GetIncidentTranscriptRequest$inboundSchema` instead. */
  export const inboundSchema = GetIncidentTranscriptRequest$inboundSchema;
  /** @deprecated use `GetIncidentTranscriptRequest$outboundSchema` instead. */
  export const outboundSchema = GetIncidentTranscriptRequest$outboundSchema;
  /** @deprecated use `GetIncidentTranscriptRequest$Outbound` instead. */
  export type Outbound = GetIncidentTranscriptRequest$Outbound;
}

export function getIncidentTranscriptRequestToJSON(
  getIncidentTranscriptRequest: GetIncidentTranscriptRequest,
): string {
  return JSON.stringify(
    GetIncidentTranscriptRequest$outboundSchema.parse(
      getIncidentTranscriptRequest,
    ),
  );
}

export function getIncidentTranscriptRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIncidentTranscriptRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIncidentTranscriptRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIncidentTranscriptRequest' from JSON`,
  );
}
