/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSignalsEventSourceRequest = {
  transposerSlug: string;
};

/** @internal */
export const GetSignalsEventSourceRequest$inboundSchema: z.ZodType<
  GetSignalsEventSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transposer_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transposer_slug": "transposerSlug",
  });
});

/** @internal */
export type GetSignalsEventSourceRequest$Outbound = {
  transposer_slug: string;
};

/** @internal */
export const GetSignalsEventSourceRequest$outboundSchema: z.ZodType<
  GetSignalsEventSourceRequest$Outbound,
  z.ZodTypeDef,
  GetSignalsEventSourceRequest
> = z.object({
  transposerSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    transposerSlug: "transposer_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsEventSourceRequest$ {
  /** @deprecated use `GetSignalsEventSourceRequest$inboundSchema` instead. */
  export const inboundSchema = GetSignalsEventSourceRequest$inboundSchema;
  /** @deprecated use `GetSignalsEventSourceRequest$outboundSchema` instead. */
  export const outboundSchema = GetSignalsEventSourceRequest$outboundSchema;
  /** @deprecated use `GetSignalsEventSourceRequest$Outbound` instead. */
  export type Outbound = GetSignalsEventSourceRequest$Outbound;
}

export function getSignalsEventSourceRequestToJSON(
  getSignalsEventSourceRequest: GetSignalsEventSourceRequest,
): string {
  return JSON.stringify(
    GetSignalsEventSourceRequest$outboundSchema.parse(
      getSignalsEventSourceRequest,
    ),
  );
}

export function getSignalsEventSourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSignalsEventSourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSignalsEventSourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSignalsEventSourceRequest' from JSON`,
  );
}
