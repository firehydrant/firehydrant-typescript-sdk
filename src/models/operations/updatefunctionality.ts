/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFunctionalityRequest = {
  functionalityId: string;
  updateFunctionality: components.UpdateFunctionality;
};

/** @internal */
export const UpdateFunctionalityRequest$inboundSchema: z.ZodType<
  UpdateFunctionalityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  functionality_id: z.string(),
  update_functionality: z.lazy(() =>
    components.UpdateFunctionality$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "functionality_id": "functionalityId",
    "update_functionality": "updateFunctionality",
  });
});

/** @internal */
export type UpdateFunctionalityRequest$Outbound = {
  functionality_id: string;
  update_functionality: components.UpdateFunctionality$Outbound;
};

/** @internal */
export const UpdateFunctionalityRequest$outboundSchema: z.ZodType<
  UpdateFunctionalityRequest$Outbound,
  z.ZodTypeDef,
  UpdateFunctionalityRequest
> = z.object({
  functionalityId: z.string(),
  updateFunctionality: z.lazy(() =>
    components.UpdateFunctionality$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    functionalityId: "functionality_id",
    updateFunctionality: "update_functionality",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionalityRequest$ {
  /** @deprecated use `UpdateFunctionalityRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFunctionalityRequest$inboundSchema;
  /** @deprecated use `UpdateFunctionalityRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFunctionalityRequest$outboundSchema;
  /** @deprecated use `UpdateFunctionalityRequest$Outbound` instead. */
  export type Outbound = UpdateFunctionalityRequest$Outbound;
}

export function updateFunctionalityRequestToJSON(
  updateFunctionalityRequest: UpdateFunctionalityRequest,
): string {
  return JSON.stringify(
    UpdateFunctionalityRequest$outboundSchema.parse(updateFunctionalityRequest),
  );
}

export function updateFunctionalityRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFunctionalityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFunctionalityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFunctionalityRequest' from JSON`,
  );
}
