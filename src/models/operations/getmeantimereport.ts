/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMeanTimeReportRequest = {
  /**
   * A comma separated list of environment IDs
   */
  environments?: string | null | undefined;
  /**
   * A comma separated list of team IDs
   */
  teams?: string | null | undefined;
  /**
   * A comma separated list of service IDs
   */
  services?: string | null | undefined;
  /**
   * Incident status
   */
  status?: string | null | undefined;
  /**
   * The start date to return incidents from
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The end date to return incidents from
   */
  endDate?: RFCDate | null | undefined;
  /**
   * A text query for an incident that searches on name, summary, and desciption
   */
  query?: string | null | undefined;
  /**
   * The id of a previously saved search.
   */
  savedSearchId?: string | null | undefined;
  /**
   * A comma separated list of priorities
   */
  priorities?: string | null | undefined;
  /**
   * Flag for including incidents where priority has not been set
   */
  priorityNotSet?: boolean | null | undefined;
  /**
   * A comma separated list of severities
   */
  severities?: string | null | undefined;
  /**
   * Flag for including incidents where severity has not been set
   */
  severityNotSet?: boolean | null | undefined;
  /**
   * A comma separated list of current milestones
   */
  currentMilestones?: string | null | undefined;
};

/** @internal */
export const GetMeanTimeReportRequest$inboundSchema: z.ZodType<
  GetMeanTimeReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.nullable(z.string()).optional(),
  teams: z.nullable(z.string()).optional(),
  services: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  query: z.nullable(z.string()).optional(),
  saved_search_id: z.nullable(z.string()).optional(),
  priorities: z.nullable(z.string()).optional(),
  priority_not_set: z.nullable(z.boolean()).optional(),
  severities: z.nullable(z.string()).optional(),
  severity_not_set: z.nullable(z.boolean()).optional(),
  current_milestones: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "saved_search_id": "savedSearchId",
    "priority_not_set": "priorityNotSet",
    "severity_not_set": "severityNotSet",
    "current_milestones": "currentMilestones",
  });
});

/** @internal */
export type GetMeanTimeReportRequest$Outbound = {
  environments?: string | null | undefined;
  teams?: string | null | undefined;
  services?: string | null | undefined;
  status?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  query?: string | null | undefined;
  saved_search_id?: string | null | undefined;
  priorities?: string | null | undefined;
  priority_not_set?: boolean | null | undefined;
  severities?: string | null | undefined;
  severity_not_set?: boolean | null | undefined;
  current_milestones?: string | null | undefined;
};

/** @internal */
export const GetMeanTimeReportRequest$outboundSchema: z.ZodType<
  GetMeanTimeReportRequest$Outbound,
  z.ZodTypeDef,
  GetMeanTimeReportRequest
> = z.object({
  environments: z.nullable(z.string()).optional(),
  teams: z.nullable(z.string()).optional(),
  services: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  query: z.nullable(z.string()).optional(),
  savedSearchId: z.nullable(z.string()).optional(),
  priorities: z.nullable(z.string()).optional(),
  priorityNotSet: z.nullable(z.boolean()).optional(),
  severities: z.nullable(z.string()).optional(),
  severityNotSet: z.nullable(z.boolean()).optional(),
  currentMilestones: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    savedSearchId: "saved_search_id",
    priorityNotSet: "priority_not_set",
    severityNotSet: "severity_not_set",
    currentMilestones: "current_milestones",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMeanTimeReportRequest$ {
  /** @deprecated use `GetMeanTimeReportRequest$inboundSchema` instead. */
  export const inboundSchema = GetMeanTimeReportRequest$inboundSchema;
  /** @deprecated use `GetMeanTimeReportRequest$outboundSchema` instead. */
  export const outboundSchema = GetMeanTimeReportRequest$outboundSchema;
  /** @deprecated use `GetMeanTimeReportRequest$Outbound` instead. */
  export type Outbound = GetMeanTimeReportRequest$Outbound;
}

export function getMeanTimeReportRequestToJSON(
  getMeanTimeReportRequest: GetMeanTimeReportRequest,
): string {
  return JSON.stringify(
    GetMeanTimeReportRequest$outboundSchema.parse(getMeanTimeReportRequest),
  );
}

export function getMeanTimeReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMeanTimeReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMeanTimeReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMeanTimeReportRequest' from JSON`,
  );
}
