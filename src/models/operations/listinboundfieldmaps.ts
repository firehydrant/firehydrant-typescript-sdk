/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by ticket type. Values: incident, follow_up
 */
export const TicketType = {
  Incident: "incident",
  FollowUp: "follow_up",
} as const;
/**
 * Filter by ticket type. Values: incident, follow_up
 */
export type TicketType = ClosedEnum<typeof TicketType>;

export type ListInboundFieldMapsRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * Filter by ticket type. Values: incident, follow_up
   */
  ticketType?: TicketType | null | undefined;
  ticketingProjectId: string;
};

/** @internal */
export const TicketType$inboundSchema: z.ZodNativeEnum<typeof TicketType> = z
  .nativeEnum(TicketType);

/** @internal */
export const TicketType$outboundSchema: z.ZodNativeEnum<typeof TicketType> =
  TicketType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketType$ {
  /** @deprecated use `TicketType$inboundSchema` instead. */
  export const inboundSchema = TicketType$inboundSchema;
  /** @deprecated use `TicketType$outboundSchema` instead. */
  export const outboundSchema = TicketType$outboundSchema;
}

/** @internal */
export const ListInboundFieldMapsRequest$inboundSchema: z.ZodType<
  ListInboundFieldMapsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  ticket_type: z.nullable(TicketType$inboundSchema).optional(),
  ticketing_project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "ticket_type": "ticketType",
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type ListInboundFieldMapsRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  ticket_type?: string | null | undefined;
  ticketing_project_id: string;
};

/** @internal */
export const ListInboundFieldMapsRequest$outboundSchema: z.ZodType<
  ListInboundFieldMapsRequest$Outbound,
  z.ZodTypeDef,
  ListInboundFieldMapsRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  ticketType: z.nullable(TicketType$outboundSchema).optional(),
  ticketingProjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    ticketType: "ticket_type",
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboundFieldMapsRequest$ {
  /** @deprecated use `ListInboundFieldMapsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInboundFieldMapsRequest$inboundSchema;
  /** @deprecated use `ListInboundFieldMapsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInboundFieldMapsRequest$outboundSchema;
  /** @deprecated use `ListInboundFieldMapsRequest$Outbound` instead. */
  export type Outbound = ListInboundFieldMapsRequest$Outbound;
}

export function listInboundFieldMapsRequestToJSON(
  listInboundFieldMapsRequest: ListInboundFieldMapsRequest,
): string {
  return JSON.stringify(
    ListInboundFieldMapsRequest$outboundSchema.parse(
      listInboundFieldMapsRequest,
    ),
  );
}

export function listInboundFieldMapsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInboundFieldMapsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboundFieldMapsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboundFieldMapsRequest' from JSON`,
  );
}
