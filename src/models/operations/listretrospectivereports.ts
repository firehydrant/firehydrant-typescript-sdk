/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRetrospectiveReportsRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * Filter the reports by an incident ID
   */
  incidentId?: string | undefined;
  /**
   * Filter for reports updated after the given ISO8601 timestamp
   */
  updatedSince?: Date | undefined;
};

/** @internal */
export const ListRetrospectiveReportsRequest$inboundSchema: z.ZodType<
  ListRetrospectiveReportsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  incident_id: z.string().optional(),
  updated_since: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "incident_id": "incidentId",
    "updated_since": "updatedSince",
  });
});

/** @internal */
export type ListRetrospectiveReportsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  incident_id?: string | undefined;
  updated_since?: string | undefined;
};

/** @internal */
export const ListRetrospectiveReportsRequest$outboundSchema: z.ZodType<
  ListRetrospectiveReportsRequest$Outbound,
  z.ZodTypeDef,
  ListRetrospectiveReportsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  incidentId: z.string().optional(),
  updatedSince: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    incidentId: "incident_id",
    updatedSince: "updated_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRetrospectiveReportsRequest$ {
  /** @deprecated use `ListRetrospectiveReportsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRetrospectiveReportsRequest$inboundSchema;
  /** @deprecated use `ListRetrospectiveReportsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRetrospectiveReportsRequest$outboundSchema;
  /** @deprecated use `ListRetrospectiveReportsRequest$Outbound` instead. */
  export type Outbound = ListRetrospectiveReportsRequest$Outbound;
}

export function listRetrospectiveReportsRequestToJSON(
  listRetrospectiveReportsRequest: ListRetrospectiveReportsRequest,
): string {
  return JSON.stringify(
    ListRetrospectiveReportsRequest$outboundSchema.parse(
      listRetrospectiveReportsRequest,
    ),
  );
}

export function listRetrospectiveReportsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRetrospectiveReportsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRetrospectiveReportsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRetrospectiveReportsRequest' from JSON`,
  );
}
