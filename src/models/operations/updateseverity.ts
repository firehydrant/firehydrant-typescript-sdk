/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSeverityRequest = {
  severitySlug: string;
  updateSeverity: components.UpdateSeverity;
};

/** @internal */
export const UpdateSeverityRequest$inboundSchema: z.ZodType<
  UpdateSeverityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  severity_slug: z.string(),
  update_severity: z.lazy(() => components.UpdateSeverity$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "severity_slug": "severitySlug",
    "update_severity": "updateSeverity",
  });
});

/** @internal */
export type UpdateSeverityRequest$Outbound = {
  severity_slug: string;
  update_severity: components.UpdateSeverity$Outbound;
};

/** @internal */
export const UpdateSeverityRequest$outboundSchema: z.ZodType<
  UpdateSeverityRequest$Outbound,
  z.ZodTypeDef,
  UpdateSeverityRequest
> = z.object({
  severitySlug: z.string(),
  updateSeverity: z.lazy(() => components.UpdateSeverity$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    severitySlug: "severity_slug",
    updateSeverity: "update_severity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeverityRequest$ {
  /** @deprecated use `UpdateSeverityRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSeverityRequest$inboundSchema;
  /** @deprecated use `UpdateSeverityRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSeverityRequest$outboundSchema;
  /** @deprecated use `UpdateSeverityRequest$Outbound` instead. */
  export type Outbound = UpdateSeverityRequest$Outbound;
}

export function updateSeverityRequestToJSON(
  updateSeverityRequest: UpdateSeverityRequest,
): string {
  return JSON.stringify(
    UpdateSeverityRequest$outboundSchema.parse(updateSeverityRequest),
  );
}

export function updateSeverityRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSeverityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSeverityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSeverityRequest' from JSON`,
  );
}
