/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListScimGroupsRequest = {
  startIndex?: number | null | undefined;
  count?: number | null | undefined;
  /**
   * This is a string used to query groups by displayName.
   *
   * @remarks
   *         Proper example syntax for this would be `?filter=displayName eq "My Team Name"`.
   *         Currently we only support the `eq` operator
   */
  filter?: string | null | undefined;
};

/** @internal */
export const ListScimGroupsRequest$inboundSchema: z.ZodType<
  ListScimGroupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  startIndex: z.nullable(z.number().int()).optional(),
  count: z.nullable(z.number().int()).optional(),
  filter: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListScimGroupsRequest$Outbound = {
  startIndex?: number | null | undefined;
  count?: number | null | undefined;
  filter?: string | null | undefined;
};

/** @internal */
export const ListScimGroupsRequest$outboundSchema: z.ZodType<
  ListScimGroupsRequest$Outbound,
  z.ZodTypeDef,
  ListScimGroupsRequest
> = z.object({
  startIndex: z.nullable(z.number().int()).optional(),
  count: z.nullable(z.number().int()).optional(),
  filter: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListScimGroupsRequest$ {
  /** @deprecated use `ListScimGroupsRequest$inboundSchema` instead. */
  export const inboundSchema = ListScimGroupsRequest$inboundSchema;
  /** @deprecated use `ListScimGroupsRequest$outboundSchema` instead. */
  export const outboundSchema = ListScimGroupsRequest$outboundSchema;
  /** @deprecated use `ListScimGroupsRequest$Outbound` instead. */
  export type Outbound = ListScimGroupsRequest$Outbound;
}

export function listScimGroupsRequestToJSON(
  listScimGroupsRequest: ListScimGroupsRequest,
): string {
  return JSON.stringify(
    ListScimGroupsRequest$outboundSchema.parse(listScimGroupsRequest),
  );
}

export function listScimGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListScimGroupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListScimGroupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListScimGroupsRequest' from JSON`,
  );
}
