/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OverrideOnCallScheduleRotationShiftsRequest = {
  rotationId: string;
  teamId: string;
  scheduleId: string;
  overrideOnCallScheduleRotationShifts:
    components.OverrideOnCallScheduleRotationShifts;
};

/** @internal */
export const OverrideOnCallScheduleRotationShiftsRequest$inboundSchema:
  z.ZodType<
    OverrideOnCallScheduleRotationShiftsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    rotation_id: z.string(),
    team_id: z.string(),
    schedule_id: z.string(),
    override_on_call_schedule_rotation_shifts: z.lazy(() =>
      components.OverrideOnCallScheduleRotationShifts$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "rotation_id": "rotationId",
      "team_id": "teamId",
      "schedule_id": "scheduleId",
      "override_on_call_schedule_rotation_shifts":
        "overrideOnCallScheduleRotationShifts",
    });
  });

/** @internal */
export type OverrideOnCallScheduleRotationShiftsRequest$Outbound = {
  rotation_id: string;
  team_id: string;
  schedule_id: string;
  override_on_call_schedule_rotation_shifts:
    components.OverrideOnCallScheduleRotationShifts$Outbound;
};

/** @internal */
export const OverrideOnCallScheduleRotationShiftsRequest$outboundSchema:
  z.ZodType<
    OverrideOnCallScheduleRotationShiftsRequest$Outbound,
    z.ZodTypeDef,
    OverrideOnCallScheduleRotationShiftsRequest
  > = z.object({
    rotationId: z.string(),
    teamId: z.string(),
    scheduleId: z.string(),
    overrideOnCallScheduleRotationShifts: z.lazy(() =>
      components.OverrideOnCallScheduleRotationShifts$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      rotationId: "rotation_id",
      teamId: "team_id",
      scheduleId: "schedule_id",
      overrideOnCallScheduleRotationShifts:
        "override_on_call_schedule_rotation_shifts",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverrideOnCallScheduleRotationShiftsRequest$ {
  /** @deprecated use `OverrideOnCallScheduleRotationShiftsRequest$inboundSchema` instead. */
  export const inboundSchema =
    OverrideOnCallScheduleRotationShiftsRequest$inboundSchema;
  /** @deprecated use `OverrideOnCallScheduleRotationShiftsRequest$outboundSchema` instead. */
  export const outboundSchema =
    OverrideOnCallScheduleRotationShiftsRequest$outboundSchema;
  /** @deprecated use `OverrideOnCallScheduleRotationShiftsRequest$Outbound` instead. */
  export type Outbound = OverrideOnCallScheduleRotationShiftsRequest$Outbound;
}

export function overrideOnCallScheduleRotationShiftsRequestToJSON(
  overrideOnCallScheduleRotationShiftsRequest:
    OverrideOnCallScheduleRotationShiftsRequest,
): string {
  return JSON.stringify(
    OverrideOnCallScheduleRotationShiftsRequest$outboundSchema.parse(
      overrideOnCallScheduleRotationShiftsRequest,
    ),
  );
}

export function overrideOnCallScheduleRotationShiftsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  OverrideOnCallScheduleRotationShiftsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OverrideOnCallScheduleRotationShiftsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OverrideOnCallScheduleRotationShiftsRequest' from JSON`,
  );
}
