/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateScimUserRequest = {
  id: string;
  patchV1ScimV2UsersId: components.PatchV1ScimV2UsersId;
};

/** @internal */
export const UpdateScimUserRequest$inboundSchema: z.ZodType<
  UpdateScimUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  patchV1ScimV2UsersId: components.PatchV1ScimV2UsersId$inboundSchema,
});

/** @internal */
export type UpdateScimUserRequest$Outbound = {
  id: string;
  patchV1ScimV2UsersId: components.PatchV1ScimV2UsersId$Outbound;
};

/** @internal */
export const UpdateScimUserRequest$outboundSchema: z.ZodType<
  UpdateScimUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateScimUserRequest
> = z.object({
  id: z.string(),
  patchV1ScimV2UsersId: components.PatchV1ScimV2UsersId$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimUserRequest$ {
  /** @deprecated use `UpdateScimUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateScimUserRequest$inboundSchema;
  /** @deprecated use `UpdateScimUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateScimUserRequest$outboundSchema;
  /** @deprecated use `UpdateScimUserRequest$Outbound` instead. */
  export type Outbound = UpdateScimUserRequest$Outbound;
}

export function updateScimUserRequestToJSON(
  updateScimUserRequest: UpdateScimUserRequest,
): string {
  return JSON.stringify(
    UpdateScimUserRequest$outboundSchema.parse(updateScimUserRequest),
  );
}

export function updateScimUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimUserRequest' from JSON`,
  );
}
