/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteInboundFieldMapRequest = {
  mapId: string;
  ticketingProjectId: string;
};

/** @internal */
export const DeleteInboundFieldMapRequest$inboundSchema: z.ZodType<
  DeleteInboundFieldMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  map_id: z.string(),
  ticketing_project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "map_id": "mapId",
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type DeleteInboundFieldMapRequest$Outbound = {
  map_id: string;
  ticketing_project_id: string;
};

/** @internal */
export const DeleteInboundFieldMapRequest$outboundSchema: z.ZodType<
  DeleteInboundFieldMapRequest$Outbound,
  z.ZodTypeDef,
  DeleteInboundFieldMapRequest
> = z.object({
  mapId: z.string(),
  ticketingProjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    mapId: "map_id",
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInboundFieldMapRequest$ {
  /** @deprecated use `DeleteInboundFieldMapRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteInboundFieldMapRequest$inboundSchema;
  /** @deprecated use `DeleteInboundFieldMapRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteInboundFieldMapRequest$outboundSchema;
  /** @deprecated use `DeleteInboundFieldMapRequest$Outbound` instead. */
  export type Outbound = DeleteInboundFieldMapRequest$Outbound;
}

export function deleteInboundFieldMapRequestToJSON(
  deleteInboundFieldMapRequest: DeleteInboundFieldMapRequest,
): string {
  return JSON.stringify(
    DeleteInboundFieldMapRequest$outboundSchema.parse(
      deleteInboundFieldMapRequest,
    ),
  );
}

export function deleteInboundFieldMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInboundFieldMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInboundFieldMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInboundFieldMapRequest' from JSON`,
  );
}
