/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteIncidentAlertRequest = {
  incidentAlertId: string;
  incidentId: string;
};

/** @internal */
export const DeleteIncidentAlertRequest$inboundSchema: z.ZodType<
  DeleteIncidentAlertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_alert_id: z.string(),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_alert_id": "incidentAlertId",
    "incident_id": "incidentId",
  });
});

/** @internal */
export type DeleteIncidentAlertRequest$Outbound = {
  incident_alert_id: string;
  incident_id: string;
};

/** @internal */
export const DeleteIncidentAlertRequest$outboundSchema: z.ZodType<
  DeleteIncidentAlertRequest$Outbound,
  z.ZodTypeDef,
  DeleteIncidentAlertRequest
> = z.object({
  incidentAlertId: z.string(),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentAlertId: "incident_alert_id",
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIncidentAlertRequest$ {
  /** @deprecated use `DeleteIncidentAlertRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteIncidentAlertRequest$inboundSchema;
  /** @deprecated use `DeleteIncidentAlertRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteIncidentAlertRequest$outboundSchema;
  /** @deprecated use `DeleteIncidentAlertRequest$Outbound` instead. */
  export type Outbound = DeleteIncidentAlertRequest$Outbound;
}

export function deleteIncidentAlertRequestToJSON(
  deleteIncidentAlertRequest: DeleteIncidentAlertRequest,
): string {
  return JSON.stringify(
    DeleteIncidentAlertRequest$outboundSchema.parse(deleteIncidentAlertRequest),
  );
}

export function deleteIncidentAlertRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIncidentAlertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteIncidentAlertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIncidentAlertRequest' from JSON`,
  );
}
