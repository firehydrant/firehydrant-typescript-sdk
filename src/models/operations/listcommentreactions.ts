/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCommentReactionsRequest = {
  conversationId: string;
  commentId: string;
};

/** @internal */
export const ListCommentReactionsRequest$inboundSchema: z.ZodType<
  ListCommentReactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  conversation_id: z.string(),
  comment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
    "comment_id": "commentId",
  });
});

/** @internal */
export type ListCommentReactionsRequest$Outbound = {
  conversation_id: string;
  comment_id: string;
};

/** @internal */
export const ListCommentReactionsRequest$outboundSchema: z.ZodType<
  ListCommentReactionsRequest$Outbound,
  z.ZodTypeDef,
  ListCommentReactionsRequest
> = z.object({
  conversationId: z.string(),
  commentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
    commentId: "comment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCommentReactionsRequest$ {
  /** @deprecated use `ListCommentReactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCommentReactionsRequest$inboundSchema;
  /** @deprecated use `ListCommentReactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCommentReactionsRequest$outboundSchema;
  /** @deprecated use `ListCommentReactionsRequest$Outbound` instead. */
  export type Outbound = ListCommentReactionsRequest$Outbound;
}

export function listCommentReactionsRequestToJSON(
  listCommentReactionsRequest: ListCommentReactionsRequest,
): string {
  return JSON.stringify(
    ListCommentReactionsRequest$outboundSchema.parse(
      listCommentReactionsRequest,
    ),
  );
}

export function listCommentReactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCommentReactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCommentReactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCommentReactionsRequest' from JSON`,
  );
}
