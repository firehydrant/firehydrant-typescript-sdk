/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCommentRequest = {
  conversationId: string;
  createComment: components.CreateComment;
};

/** @internal */
export const CreateCommentRequest$inboundSchema: z.ZodType<
  CreateCommentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  conversation_id: z.string(),
  create_comment: z.lazy(() => components.CreateComment$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
    "create_comment": "createComment",
  });
});

/** @internal */
export type CreateCommentRequest$Outbound = {
  conversation_id: string;
  create_comment: components.CreateComment$Outbound;
};

/** @internal */
export const CreateCommentRequest$outboundSchema: z.ZodType<
  CreateCommentRequest$Outbound,
  z.ZodTypeDef,
  CreateCommentRequest
> = z.object({
  conversationId: z.string(),
  createComment: z.lazy(() => components.CreateComment$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
    createComment: "create_comment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCommentRequest$ {
  /** @deprecated use `CreateCommentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCommentRequest$inboundSchema;
  /** @deprecated use `CreateCommentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCommentRequest$outboundSchema;
  /** @deprecated use `CreateCommentRequest$Outbound` instead. */
  export type Outbound = CreateCommentRequest$Outbound;
}

export function createCommentRequestToJSON(
  createCommentRequest: CreateCommentRequest,
): string {
  return JSON.stringify(
    CreateCommentRequest$outboundSchema.parse(createCommentRequest),
  );
}

export function createCommentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCommentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCommentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCommentRequest' from JSON`,
  );
}
