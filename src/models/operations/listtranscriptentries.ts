/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the transcript entries.
 */
export const ListTranscriptEntriesSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the transcript entries.
 */
export type ListTranscriptEntriesSort = ClosedEnum<
  typeof ListTranscriptEntriesSort
>;

export type ListTranscriptEntriesRequest = {
  /**
   * The ID of the transcript entry to start after.
   */
  after?: string | null | undefined;
  /**
   * The ID of the transcript entry to start before.
   */
  before?: string | null | undefined;
  /**
   * The order to sort the transcript entries.
   */
  sort?: ListTranscriptEntriesSort | null | undefined;
  incidentId: string;
};

/** @internal */
export const ListTranscriptEntriesSort$inboundSchema: z.ZodNativeEnum<
  typeof ListTranscriptEntriesSort
> = z.nativeEnum(ListTranscriptEntriesSort);

/** @internal */
export const ListTranscriptEntriesSort$outboundSchema: z.ZodNativeEnum<
  typeof ListTranscriptEntriesSort
> = ListTranscriptEntriesSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTranscriptEntriesSort$ {
  /** @deprecated use `ListTranscriptEntriesSort$inboundSchema` instead. */
  export const inboundSchema = ListTranscriptEntriesSort$inboundSchema;
  /** @deprecated use `ListTranscriptEntriesSort$outboundSchema` instead. */
  export const outboundSchema = ListTranscriptEntriesSort$outboundSchema;
}

/** @internal */
export const ListTranscriptEntriesRequest$inboundSchema: z.ZodType<
  ListTranscriptEntriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.nullable(z.string()).optional(),
  before: z.nullable(z.string()).optional(),
  sort: z.nullable(ListTranscriptEntriesSort$inboundSchema.default("asc")),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
  });
});

/** @internal */
export type ListTranscriptEntriesRequest$Outbound = {
  after?: string | null | undefined;
  before?: string | null | undefined;
  sort: string | null;
  incident_id: string;
};

/** @internal */
export const ListTranscriptEntriesRequest$outboundSchema: z.ZodType<
  ListTranscriptEntriesRequest$Outbound,
  z.ZodTypeDef,
  ListTranscriptEntriesRequest
> = z.object({
  after: z.nullable(z.string()).optional(),
  before: z.nullable(z.string()).optional(),
  sort: z.nullable(ListTranscriptEntriesSort$outboundSchema.default("asc")),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTranscriptEntriesRequest$ {
  /** @deprecated use `ListTranscriptEntriesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTranscriptEntriesRequest$inboundSchema;
  /** @deprecated use `ListTranscriptEntriesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTranscriptEntriesRequest$outboundSchema;
  /** @deprecated use `ListTranscriptEntriesRequest$Outbound` instead. */
  export type Outbound = ListTranscriptEntriesRequest$Outbound;
}

export function listTranscriptEntriesRequestToJSON(
  listTranscriptEntriesRequest: ListTranscriptEntriesRequest,
): string {
  return JSON.stringify(
    ListTranscriptEntriesRequest$outboundSchema.parse(
      listTranscriptEntriesRequest,
    ),
  );
}

export function listTranscriptEntriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTranscriptEntriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTranscriptEntriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTranscriptEntriesRequest' from JSON`,
  );
}
