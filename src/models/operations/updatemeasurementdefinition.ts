/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateMeasurementDefinitionRequestBody = {
  name?: string | undefined;
  slug?: string | undefined;
  description?: string | undefined;
  startsAtMilestoneId?: string | undefined;
  endsAtMilestoneId?: string | undefined;
};

export type UpdateMeasurementDefinitionRequest = {
  measurementDefinitionId: string;
  requestBody?: UpdateMeasurementDefinitionRequestBody | undefined;
};

/** @internal */
export const UpdateMeasurementDefinitionRequestBody$inboundSchema: z.ZodType<
  UpdateMeasurementDefinitionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  slug: z.string().optional(),
  description: z.string().optional(),
  starts_at_milestone_id: z.string().optional(),
  ends_at_milestone_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "starts_at_milestone_id": "startsAtMilestoneId",
    "ends_at_milestone_id": "endsAtMilestoneId",
  });
});

/** @internal */
export type UpdateMeasurementDefinitionRequestBody$Outbound = {
  name?: string | undefined;
  slug?: string | undefined;
  description?: string | undefined;
  starts_at_milestone_id?: string | undefined;
  ends_at_milestone_id?: string | undefined;
};

/** @internal */
export const UpdateMeasurementDefinitionRequestBody$outboundSchema: z.ZodType<
  UpdateMeasurementDefinitionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateMeasurementDefinitionRequestBody
> = z.object({
  name: z.string().optional(),
  slug: z.string().optional(),
  description: z.string().optional(),
  startsAtMilestoneId: z.string().optional(),
  endsAtMilestoneId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startsAtMilestoneId: "starts_at_milestone_id",
    endsAtMilestoneId: "ends_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMeasurementDefinitionRequestBody$ {
  /** @deprecated use `UpdateMeasurementDefinitionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMeasurementDefinitionRequestBody$inboundSchema;
  /** @deprecated use `UpdateMeasurementDefinitionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMeasurementDefinitionRequestBody$outboundSchema;
  /** @deprecated use `UpdateMeasurementDefinitionRequestBody$Outbound` instead. */
  export type Outbound = UpdateMeasurementDefinitionRequestBody$Outbound;
}

export function updateMeasurementDefinitionRequestBodyToJSON(
  updateMeasurementDefinitionRequestBody:
    UpdateMeasurementDefinitionRequestBody,
): string {
  return JSON.stringify(
    UpdateMeasurementDefinitionRequestBody$outboundSchema.parse(
      updateMeasurementDefinitionRequestBody,
    ),
  );
}

export function updateMeasurementDefinitionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMeasurementDefinitionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMeasurementDefinitionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMeasurementDefinitionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateMeasurementDefinitionRequest$inboundSchema: z.ZodType<
  UpdateMeasurementDefinitionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  measurement_definition_id: z.string(),
  RequestBody: z.lazy(() =>
    UpdateMeasurementDefinitionRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "measurement_definition_id": "measurementDefinitionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateMeasurementDefinitionRequest$Outbound = {
  measurement_definition_id: string;
  RequestBody?: UpdateMeasurementDefinitionRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateMeasurementDefinitionRequest$outboundSchema: z.ZodType<
  UpdateMeasurementDefinitionRequest$Outbound,
  z.ZodTypeDef,
  UpdateMeasurementDefinitionRequest
> = z.object({
  measurementDefinitionId: z.string(),
  requestBody: z.lazy(() =>
    UpdateMeasurementDefinitionRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    measurementDefinitionId: "measurement_definition_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMeasurementDefinitionRequest$ {
  /** @deprecated use `UpdateMeasurementDefinitionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMeasurementDefinitionRequest$inboundSchema;
  /** @deprecated use `UpdateMeasurementDefinitionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMeasurementDefinitionRequest$outboundSchema;
  /** @deprecated use `UpdateMeasurementDefinitionRequest$Outbound` instead. */
  export type Outbound = UpdateMeasurementDefinitionRequest$Outbound;
}

export function updateMeasurementDefinitionRequestToJSON(
  updateMeasurementDefinitionRequest: UpdateMeasurementDefinitionRequest,
): string {
  return JSON.stringify(
    UpdateMeasurementDefinitionRequest$outboundSchema.parse(
      updateMeasurementDefinitionRequest,
    ),
  );
}

export function updateMeasurementDefinitionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMeasurementDefinitionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMeasurementDefinitionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMeasurementDefinitionRequest' from JSON`,
  );
}
