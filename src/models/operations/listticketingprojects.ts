/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketingProjectsRequest = {
  supportsTicketTypes?: string | undefined;
  providers?: string | undefined;
  connectionIds?: string | undefined;
  configuredProjects?: boolean | undefined;
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
};

/** @internal */
export const ListTicketingProjectsRequest$inboundSchema: z.ZodType<
  ListTicketingProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  supports_ticket_types: z.string().optional(),
  providers: z.string().optional(),
  connection_ids: z.string().optional(),
  configured_projects: z.boolean().optional(),
  query: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "supports_ticket_types": "supportsTicketTypes",
    "connection_ids": "connectionIds",
    "configured_projects": "configuredProjects",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListTicketingProjectsRequest$Outbound = {
  supports_ticket_types?: string | undefined;
  providers?: string | undefined;
  connection_ids?: string | undefined;
  configured_projects?: boolean | undefined;
  query?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListTicketingProjectsRequest$outboundSchema: z.ZodType<
  ListTicketingProjectsRequest$Outbound,
  z.ZodTypeDef,
  ListTicketingProjectsRequest
> = z.object({
  supportsTicketTypes: z.string().optional(),
  providers: z.string().optional(),
  connectionIds: z.string().optional(),
  configuredProjects: z.boolean().optional(),
  query: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    supportsTicketTypes: "supports_ticket_types",
    connectionIds: "connection_ids",
    configuredProjects: "configured_projects",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingProjectsRequest$ {
  /** @deprecated use `ListTicketingProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketingProjectsRequest$inboundSchema;
  /** @deprecated use `ListTicketingProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketingProjectsRequest$outboundSchema;
  /** @deprecated use `ListTicketingProjectsRequest$Outbound` instead. */
  export type Outbound = ListTicketingProjectsRequest$Outbound;
}

export function listTicketingProjectsRequestToJSON(
  listTicketingProjectsRequest: ListTicketingProjectsRequest,
): string {
  return JSON.stringify(
    ListTicketingProjectsRequest$outboundSchema.parse(
      listTicketingProjectsRequest,
    ),
  );
}

export function listTicketingProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingProjectsRequest' from JSON`,
  );
}
