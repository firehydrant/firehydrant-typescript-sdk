/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSignalsOnCallRequest = {
  /**
   * An optional comma separated list of team IDs to filter currently on-call users by
   */
  teamId?: string | undefined;
};

/** @internal */
export const ListSignalsOnCallRequest$inboundSchema: z.ZodType<
  ListSignalsOnCallRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  team_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
  });
});

/** @internal */
export type ListSignalsOnCallRequest$Outbound = {
  team_id?: string | undefined;
};

/** @internal */
export const ListSignalsOnCallRequest$outboundSchema: z.ZodType<
  ListSignalsOnCallRequest$Outbound,
  z.ZodTypeDef,
  ListSignalsOnCallRequest
> = z.object({
  teamId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSignalsOnCallRequest$ {
  /** @deprecated use `ListSignalsOnCallRequest$inboundSchema` instead. */
  export const inboundSchema = ListSignalsOnCallRequest$inboundSchema;
  /** @deprecated use `ListSignalsOnCallRequest$outboundSchema` instead. */
  export const outboundSchema = ListSignalsOnCallRequest$outboundSchema;
  /** @deprecated use `ListSignalsOnCallRequest$Outbound` instead. */
  export type Outbound = ListSignalsOnCallRequest$Outbound;
}

export function listSignalsOnCallRequestToJSON(
  listSignalsOnCallRequest: ListSignalsOnCallRequest,
): string {
  return JSON.stringify(
    ListSignalsOnCallRequest$outboundSchema.parse(listSignalsOnCallRequest),
  );
}

export function listSignalsOnCallRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSignalsOnCallRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSignalsOnCallRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSignalsOnCallRequest' from JSON`,
  );
}
