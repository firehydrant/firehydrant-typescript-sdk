/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetNuncConnectionRequest = {
  nuncConnectionId: string;
};

/** @internal */
export const GetNuncConnectionRequest$inboundSchema: z.ZodType<
  GetNuncConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
  });
});

/** @internal */
export type GetNuncConnectionRequest$Outbound = {
  nunc_connection_id: string;
};

/** @internal */
export const GetNuncConnectionRequest$outboundSchema: z.ZodType<
  GetNuncConnectionRequest$Outbound,
  z.ZodTypeDef,
  GetNuncConnectionRequest
> = z.object({
  nuncConnectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNuncConnectionRequest$ {
  /** @deprecated use `GetNuncConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GetNuncConnectionRequest$inboundSchema;
  /** @deprecated use `GetNuncConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GetNuncConnectionRequest$outboundSchema;
  /** @deprecated use `GetNuncConnectionRequest$Outbound` instead. */
  export type Outbound = GetNuncConnectionRequest$Outbound;
}

export function getNuncConnectionRequestToJSON(
  getNuncConnectionRequest: GetNuncConnectionRequest,
): string {
  return JSON.stringify(
    GetNuncConnectionRequest$outboundSchema.parse(getNuncConnectionRequest),
  );
}

export function getNuncConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetNuncConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNuncConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNuncConnectionRequest' from JSON`,
  );
}
