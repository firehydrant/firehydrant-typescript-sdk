/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PublishPostMortemReportRequest = {
  reportId: string;
  publishPostMortemReport: components.PublishPostMortemReport;
};

/** @internal */
export const PublishPostMortemReportRequest$inboundSchema: z.ZodType<
  PublishPostMortemReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  report_id: z.string(),
  publish_post_mortem_report: z.lazy(() =>
    components.PublishPostMortemReport$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "report_id": "reportId",
    "publish_post_mortem_report": "publishPostMortemReport",
  });
});

/** @internal */
export type PublishPostMortemReportRequest$Outbound = {
  report_id: string;
  publish_post_mortem_report: components.PublishPostMortemReport$Outbound;
};

/** @internal */
export const PublishPostMortemReportRequest$outboundSchema: z.ZodType<
  PublishPostMortemReportRequest$Outbound,
  z.ZodTypeDef,
  PublishPostMortemReportRequest
> = z.object({
  reportId: z.string(),
  publishPostMortemReport: z.lazy(() =>
    components.PublishPostMortemReport$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    reportId: "report_id",
    publishPostMortemReport: "publish_post_mortem_report",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishPostMortemReportRequest$ {
  /** @deprecated use `PublishPostMortemReportRequest$inboundSchema` instead. */
  export const inboundSchema = PublishPostMortemReportRequest$inboundSchema;
  /** @deprecated use `PublishPostMortemReportRequest$outboundSchema` instead. */
  export const outboundSchema = PublishPostMortemReportRequest$outboundSchema;
  /** @deprecated use `PublishPostMortemReportRequest$Outbound` instead. */
  export type Outbound = PublishPostMortemReportRequest$Outbound;
}

export function publishPostMortemReportRequestToJSON(
  publishPostMortemReportRequest: PublishPostMortemReportRequest,
): string {
  return JSON.stringify(
    PublishPostMortemReportRequest$outboundSchema.parse(
      publishPostMortemReportRequest,
    ),
  );
}

export function publishPostMortemReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<PublishPostMortemReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishPostMortemReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishPostMortemReportRequest' from JSON`,
  );
}
