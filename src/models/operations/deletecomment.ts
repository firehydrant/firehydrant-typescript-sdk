/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCommentRequest = {
  commentId: string;
  conversationId: string;
};

/** @internal */
export const DeleteCommentRequest$inboundSchema: z.ZodType<
  DeleteCommentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment_id: z.string(),
  conversation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "comment_id": "commentId",
    "conversation_id": "conversationId",
  });
});

/** @internal */
export type DeleteCommentRequest$Outbound = {
  comment_id: string;
  conversation_id: string;
};

/** @internal */
export const DeleteCommentRequest$outboundSchema: z.ZodType<
  DeleteCommentRequest$Outbound,
  z.ZodTypeDef,
  DeleteCommentRequest
> = z.object({
  commentId: z.string(),
  conversationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    commentId: "comment_id",
    conversationId: "conversation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCommentRequest$ {
  /** @deprecated use `DeleteCommentRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCommentRequest$inboundSchema;
  /** @deprecated use `DeleteCommentRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCommentRequest$outboundSchema;
  /** @deprecated use `DeleteCommentRequest$Outbound` instead. */
  export type Outbound = DeleteCommentRequest$Outbound;
}

export function deleteCommentRequestToJSON(
  deleteCommentRequest: DeleteCommentRequest,
): string {
  return JSON.stringify(
    DeleteCommentRequest$outboundSchema.parse(deleteCommentRequest),
  );
}

export function deleteCommentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCommentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCommentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCommentRequest' from JSON`,
  );
}
