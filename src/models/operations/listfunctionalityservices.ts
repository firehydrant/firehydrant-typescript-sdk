/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFunctionalityServicesRequest = {
  functionalityId: string;
};

/** @internal */
export const ListFunctionalityServicesRequest$inboundSchema: z.ZodType<
  ListFunctionalityServicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  functionality_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "functionality_id": "functionalityId",
  });
});

/** @internal */
export type ListFunctionalityServicesRequest$Outbound = {
  functionality_id: string;
};

/** @internal */
export const ListFunctionalityServicesRequest$outboundSchema: z.ZodType<
  ListFunctionalityServicesRequest$Outbound,
  z.ZodTypeDef,
  ListFunctionalityServicesRequest
> = z.object({
  functionalityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    functionalityId: "functionality_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFunctionalityServicesRequest$ {
  /** @deprecated use `ListFunctionalityServicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListFunctionalityServicesRequest$inboundSchema;
  /** @deprecated use `ListFunctionalityServicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListFunctionalityServicesRequest$outboundSchema;
  /** @deprecated use `ListFunctionalityServicesRequest$Outbound` instead. */
  export type Outbound = ListFunctionalityServicesRequest$Outbound;
}

export function listFunctionalityServicesRequestToJSON(
  listFunctionalityServicesRequest: ListFunctionalityServicesRequest,
): string {
  return JSON.stringify(
    ListFunctionalityServicesRequest$outboundSchema.parse(
      listFunctionalityServicesRequest,
    ),
  );
}

export function listFunctionalityServicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFunctionalityServicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFunctionalityServicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFunctionalityServicesRequest' from JSON`,
  );
}
