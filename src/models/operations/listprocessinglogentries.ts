/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Returns logs of all levels equal to or above the provided level
 */
export const OfLevel = {
  Unknown: "unknown",
  Debug: "debug",
  Info: "info",
  Warn: "warn",
  Error: "error",
  Fatal: "fatal",
} as const;
/**
 * Returns logs of all levels equal to or above the provided level
 */
export type OfLevel = ClosedEnum<typeof OfLevel>;

/**
 * Returns log entries of all levels equal to the provided level
 */
export const ExactLevel = {
  Unknown: "unknown",
  Debug: "debug",
  Info: "info",
  Warn: "warn",
  Error: "error",
  Fatal: "fatal",
} as const;
/**
 * Returns log entries of all levels equal to the provided level
 */
export type ExactLevel = ClosedEnum<typeof ExactLevel>;

export type ListProcessingLogEntriesRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * Scopes returned log entries to a specific integration ID
   */
  integrationSlug?: string | null | undefined;
  /**
   * Scopes returned log entries to a specific connection ID
   */
  connectionId?: string | null | undefined;
  /**
   * Returns logs of all levels equal to or above the provided level
   */
  ofLevel?: OfLevel | null | undefined;
  /**
   * Returns log entries of all levels equal to the provided level
   */
  exactLevel?: ExactLevel | null | undefined;
};

/** @internal */
export const OfLevel$inboundSchema: z.ZodNativeEnum<typeof OfLevel> = z
  .nativeEnum(OfLevel);

/** @internal */
export const OfLevel$outboundSchema: z.ZodNativeEnum<typeof OfLevel> =
  OfLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OfLevel$ {
  /** @deprecated use `OfLevel$inboundSchema` instead. */
  export const inboundSchema = OfLevel$inboundSchema;
  /** @deprecated use `OfLevel$outboundSchema` instead. */
  export const outboundSchema = OfLevel$outboundSchema;
}

/** @internal */
export const ExactLevel$inboundSchema: z.ZodNativeEnum<typeof ExactLevel> = z
  .nativeEnum(ExactLevel);

/** @internal */
export const ExactLevel$outboundSchema: z.ZodNativeEnum<typeof ExactLevel> =
  ExactLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExactLevel$ {
  /** @deprecated use `ExactLevel$inboundSchema` instead. */
  export const inboundSchema = ExactLevel$inboundSchema;
  /** @deprecated use `ExactLevel$outboundSchema` instead. */
  export const outboundSchema = ExactLevel$outboundSchema;
}

/** @internal */
export const ListProcessingLogEntriesRequest$inboundSchema: z.ZodType<
  ListProcessingLogEntriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  integration_slug: z.nullable(z.string()).optional(),
  connection_id: z.nullable(z.string()).optional(),
  of_level: z.nullable(OfLevel$inboundSchema).optional(),
  exact_level: z.nullable(ExactLevel$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "integration_slug": "integrationSlug",
    "connection_id": "connectionId",
    "of_level": "ofLevel",
    "exact_level": "exactLevel",
  });
});

/** @internal */
export type ListProcessingLogEntriesRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  integration_slug?: string | null | undefined;
  connection_id?: string | null | undefined;
  of_level?: string | null | undefined;
  exact_level?: string | null | undefined;
};

/** @internal */
export const ListProcessingLogEntriesRequest$outboundSchema: z.ZodType<
  ListProcessingLogEntriesRequest$Outbound,
  z.ZodTypeDef,
  ListProcessingLogEntriesRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  integrationSlug: z.nullable(z.string()).optional(),
  connectionId: z.nullable(z.string()).optional(),
  ofLevel: z.nullable(OfLevel$outboundSchema).optional(),
  exactLevel: z.nullable(ExactLevel$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    integrationSlug: "integration_slug",
    connectionId: "connection_id",
    ofLevel: "of_level",
    exactLevel: "exact_level",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProcessingLogEntriesRequest$ {
  /** @deprecated use `ListProcessingLogEntriesRequest$inboundSchema` instead. */
  export const inboundSchema = ListProcessingLogEntriesRequest$inboundSchema;
  /** @deprecated use `ListProcessingLogEntriesRequest$outboundSchema` instead. */
  export const outboundSchema = ListProcessingLogEntriesRequest$outboundSchema;
  /** @deprecated use `ListProcessingLogEntriesRequest$Outbound` instead. */
  export type Outbound = ListProcessingLogEntriesRequest$Outbound;
}

export function listProcessingLogEntriesRequestToJSON(
  listProcessingLogEntriesRequest: ListProcessingLogEntriesRequest,
): string {
  return JSON.stringify(
    ListProcessingLogEntriesRequest$outboundSchema.parse(
      listProcessingLogEntriesRequest,
    ),
  );
}

export function listProcessingLogEntriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProcessingLogEntriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProcessingLogEntriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProcessingLogEntriesRequest' from JSON`,
  );
}
