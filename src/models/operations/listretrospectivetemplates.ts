/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRetrospectiveTemplatesRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  forIncident?: string | null | undefined;
};

/** @internal */
export const ListRetrospectiveTemplatesRequest$inboundSchema: z.ZodType<
  ListRetrospectiveTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  for_incident: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "for_incident": "forIncident",
  });
});

/** @internal */
export type ListRetrospectiveTemplatesRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  for_incident?: string | null | undefined;
};

/** @internal */
export const ListRetrospectiveTemplatesRequest$outboundSchema: z.ZodType<
  ListRetrospectiveTemplatesRequest$Outbound,
  z.ZodTypeDef,
  ListRetrospectiveTemplatesRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  forIncident: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    forIncident: "for_incident",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRetrospectiveTemplatesRequest$ {
  /** @deprecated use `ListRetrospectiveTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = ListRetrospectiveTemplatesRequest$inboundSchema;
  /** @deprecated use `ListRetrospectiveTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListRetrospectiveTemplatesRequest$outboundSchema;
  /** @deprecated use `ListRetrospectiveTemplatesRequest$Outbound` instead. */
  export type Outbound = ListRetrospectiveTemplatesRequest$Outbound;
}

export function listRetrospectiveTemplatesRequestToJSON(
  listRetrospectiveTemplatesRequest: ListRetrospectiveTemplatesRequest,
): string {
  return JSON.stringify(
    ListRetrospectiveTemplatesRequest$outboundSchema.parse(
      listRetrospectiveTemplatesRequest,
    ),
  );
}

export function listRetrospectiveTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRetrospectiveTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRetrospectiveTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRetrospectiveTemplatesRequest' from JSON`,
  );
}
