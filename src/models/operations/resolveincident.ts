/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResolveIncidentRequestBody = {
  /**
   * The slug of any milestone in the post-incident or closed phase to set on the incident (and its children, if `resolve_children` os set). Must be one of the configured milestones available on this incident.
   */
  milestone?: string | null | undefined;
};

export type ResolveIncidentRequest = {
  incidentId: string;
  requestBody?: ResolveIncidentRequestBody | undefined;
};

/** @internal */
export const ResolveIncidentRequestBody$inboundSchema: z.ZodType<
  ResolveIncidentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  milestone: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResolveIncidentRequestBody$Outbound = {
  milestone?: string | null | undefined;
};

/** @internal */
export const ResolveIncidentRequestBody$outboundSchema: z.ZodType<
  ResolveIncidentRequestBody$Outbound,
  z.ZodTypeDef,
  ResolveIncidentRequestBody
> = z.object({
  milestone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResolveIncidentRequestBody$ {
  /** @deprecated use `ResolveIncidentRequestBody$inboundSchema` instead. */
  export const inboundSchema = ResolveIncidentRequestBody$inboundSchema;
  /** @deprecated use `ResolveIncidentRequestBody$outboundSchema` instead. */
  export const outboundSchema = ResolveIncidentRequestBody$outboundSchema;
  /** @deprecated use `ResolveIncidentRequestBody$Outbound` instead. */
  export type Outbound = ResolveIncidentRequestBody$Outbound;
}

export function resolveIncidentRequestBodyToJSON(
  resolveIncidentRequestBody: ResolveIncidentRequestBody,
): string {
  return JSON.stringify(
    ResolveIncidentRequestBody$outboundSchema.parse(resolveIncidentRequestBody),
  );
}

export function resolveIncidentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResolveIncidentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResolveIncidentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResolveIncidentRequestBody' from JSON`,
  );
}

/** @internal */
export const ResolveIncidentRequest$inboundSchema: z.ZodType<
  ResolveIncidentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.lazy(() => ResolveIncidentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ResolveIncidentRequest$Outbound = {
  incident_id: string;
  RequestBody?: ResolveIncidentRequestBody$Outbound | undefined;
};

/** @internal */
export const ResolveIncidentRequest$outboundSchema: z.ZodType<
  ResolveIncidentRequest$Outbound,
  z.ZodTypeDef,
  ResolveIncidentRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.lazy(() => ResolveIncidentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResolveIncidentRequest$ {
  /** @deprecated use `ResolveIncidentRequest$inboundSchema` instead. */
  export const inboundSchema = ResolveIncidentRequest$inboundSchema;
  /** @deprecated use `ResolveIncidentRequest$outboundSchema` instead. */
  export const outboundSchema = ResolveIncidentRequest$outboundSchema;
  /** @deprecated use `ResolveIncidentRequest$Outbound` instead. */
  export type Outbound = ResolveIncidentRequest$Outbound;
}

export function resolveIncidentRequestToJSON(
  resolveIncidentRequest: ResolveIncidentRequest,
): string {
  return JSON.stringify(
    ResolveIncidentRequest$outboundSchema.parse(resolveIncidentRequest),
  );
}

export function resolveIncidentRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResolveIncidentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResolveIncidentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResolveIncidentRequest' from JSON`,
  );
}
