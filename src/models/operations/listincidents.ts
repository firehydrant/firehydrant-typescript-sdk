/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A matching strategy for the tags provided
 */
export const QueryParamTagMatchStrategy = {
  Any: "any",
  MatchAll: "match_all",
  Exclude: "exclude",
} as const;
/**
 * A matching strategy for the tags provided
 */
export type QueryParamTagMatchStrategy = ClosedEnum<
  typeof QueryParamTagMatchStrategy
>;

export type ListIncidentsRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * A JSON string that defines 'logic' and 'user_data'
   */
  conditions?: string | undefined;
  /**
   * A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
   */
  environments?: string | undefined;
  /**
   * A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
   */
  services?: string | undefined;
  /**
   * A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
   */
  functionalities?: string | undefined;
  /**
   * A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.
   */
  excludedInfrastructureIds?: string | undefined;
  /**
   * A comma separated list of team IDs
   */
  teams?: string | undefined;
  /**
   * A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
   */
  assignedTeams?: string | undefined;
  /**
   * Incident status
   */
  status?: string | undefined;
  /**
   * Filters for incidents that started on or after this date
   */
  startDate?: RFCDate | undefined;
  /**
   * Filters for incidents that started on or before this date
   */
  endDate?: RFCDate | undefined;
  /**
   * Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
   */
  resolvedAtOrAfter?: Date | undefined;
  /**
   * Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
   */
  resolvedAtOrBefore?: Date | undefined;
  /**
   * Filters for incidents that were created at or after this time
   */
  createdAtOrAfter?: Date | undefined;
  /**
   * Filters for incidents that were created at or before this time
   */
  createdAtOrBefore?: Date | undefined;
  /**
   * A text query for an incident that searches on name, summary, and desciption
   */
  query?: string | undefined;
  /**
   * A query to search incidents by their name
   */
  name?: string | undefined;
  /**
   * The id of a previously saved search.
   */
  savedSearchId?: string | undefined;
  /**
   * A text value of priority
   */
  priorities?: string | undefined;
  /**
   * Flag for including incidents where priority has not been set
   */
  priorityNotSet?: boolean | undefined;
  /**
   * A text value of severity
   */
  severities?: string | undefined;
  /**
   * Flag for including incidents where severity has not been set
   */
  severityNotSet?: boolean | undefined;
  /**
   * A comma separated list of current milestones
   */
  currentMilestones?: string | undefined;
  /**
   * A comma separated list of tags
   */
  tags?: string | undefined;
  /**
   * A matching strategy for the tags provided
   */
  tagMatchStrategy?: QueryParamTagMatchStrategy | undefined;
  /**
   * Return archived incidents
   */
  archived?: boolean | undefined;
  /**
   * Filters for incidents that were updated after this date
   */
  updatedAfter?: Date | undefined;
  /**
   * Filters for incidents that were updated before this date
   */
  updatedBefore?: Date | undefined;
  /**
   * A comma separated list of incident type IDs
   */
  incidentTypeId?: string | undefined;
};

/** @internal */
export const QueryParamTagMatchStrategy$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamTagMatchStrategy
> = z.nativeEnum(QueryParamTagMatchStrategy);

/** @internal */
export const QueryParamTagMatchStrategy$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamTagMatchStrategy
> = QueryParamTagMatchStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamTagMatchStrategy$ {
  /** @deprecated use `QueryParamTagMatchStrategy$inboundSchema` instead. */
  export const inboundSchema = QueryParamTagMatchStrategy$inboundSchema;
  /** @deprecated use `QueryParamTagMatchStrategy$outboundSchema` instead. */
  export const outboundSchema = QueryParamTagMatchStrategy$outboundSchema;
}

/** @internal */
export const ListIncidentsRequest$inboundSchema: z.ZodType<
  ListIncidentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  conditions: z.string().optional(),
  environments: z.string().optional(),
  services: z.string().optional(),
  functionalities: z.string().optional(),
  excluded_infrastructure_ids: z.string().optional(),
  teams: z.string().optional(),
  assigned_teams: z.string().optional(),
  status: z.string().optional(),
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
  resolved_at_or_after: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  resolved_at_or_before: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  created_at_or_after: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  created_at_or_before: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  query: z.string().optional(),
  name: z.string().optional(),
  saved_search_id: z.string().optional(),
  priorities: z.string().optional(),
  priority_not_set: z.boolean().optional(),
  severities: z.string().optional(),
  severity_not_set: z.boolean().optional(),
  current_milestones: z.string().optional(),
  tags: z.string().optional(),
  tag_match_strategy: QueryParamTagMatchStrategy$inboundSchema.optional(),
  archived: z.boolean().optional(),
  updated_after: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  updated_before: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  incident_type_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "excluded_infrastructure_ids": "excludedInfrastructureIds",
    "assigned_teams": "assignedTeams",
    "start_date": "startDate",
    "end_date": "endDate",
    "resolved_at_or_after": "resolvedAtOrAfter",
    "resolved_at_or_before": "resolvedAtOrBefore",
    "created_at_or_after": "createdAtOrAfter",
    "created_at_or_before": "createdAtOrBefore",
    "saved_search_id": "savedSearchId",
    "priority_not_set": "priorityNotSet",
    "severity_not_set": "severityNotSet",
    "current_milestones": "currentMilestones",
    "tag_match_strategy": "tagMatchStrategy",
    "updated_after": "updatedAfter",
    "updated_before": "updatedBefore",
    "incident_type_id": "incidentTypeId",
  });
});

/** @internal */
export type ListIncidentsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  conditions?: string | undefined;
  environments?: string | undefined;
  services?: string | undefined;
  functionalities?: string | undefined;
  excluded_infrastructure_ids?: string | undefined;
  teams?: string | undefined;
  assigned_teams?: string | undefined;
  status?: string | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
  resolved_at_or_after?: string | undefined;
  resolved_at_or_before?: string | undefined;
  created_at_or_after?: string | undefined;
  created_at_or_before?: string | undefined;
  query?: string | undefined;
  name?: string | undefined;
  saved_search_id?: string | undefined;
  priorities?: string | undefined;
  priority_not_set?: boolean | undefined;
  severities?: string | undefined;
  severity_not_set?: boolean | undefined;
  current_milestones?: string | undefined;
  tags?: string | undefined;
  tag_match_strategy?: string | undefined;
  archived?: boolean | undefined;
  updated_after?: string | undefined;
  updated_before?: string | undefined;
  incident_type_id?: string | undefined;
};

/** @internal */
export const ListIncidentsRequest$outboundSchema: z.ZodType<
  ListIncidentsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  conditions: z.string().optional(),
  environments: z.string().optional(),
  services: z.string().optional(),
  functionalities: z.string().optional(),
  excludedInfrastructureIds: z.string().optional(),
  teams: z.string().optional(),
  assignedTeams: z.string().optional(),
  status: z.string().optional(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  resolvedAtOrAfter: z.date().transform(v => v.toISOString()).optional(),
  resolvedAtOrBefore: z.date().transform(v => v.toISOString()).optional(),
  createdAtOrAfter: z.date().transform(v => v.toISOString()).optional(),
  createdAtOrBefore: z.date().transform(v => v.toISOString()).optional(),
  query: z.string().optional(),
  name: z.string().optional(),
  savedSearchId: z.string().optional(),
  priorities: z.string().optional(),
  priorityNotSet: z.boolean().optional(),
  severities: z.string().optional(),
  severityNotSet: z.boolean().optional(),
  currentMilestones: z.string().optional(),
  tags: z.string().optional(),
  tagMatchStrategy: QueryParamTagMatchStrategy$outboundSchema.optional(),
  archived: z.boolean().optional(),
  updatedAfter: z.date().transform(v => v.toISOString()).optional(),
  updatedBefore: z.date().transform(v => v.toISOString()).optional(),
  incidentTypeId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    excludedInfrastructureIds: "excluded_infrastructure_ids",
    assignedTeams: "assigned_teams",
    startDate: "start_date",
    endDate: "end_date",
    resolvedAtOrAfter: "resolved_at_or_after",
    resolvedAtOrBefore: "resolved_at_or_before",
    createdAtOrAfter: "created_at_or_after",
    createdAtOrBefore: "created_at_or_before",
    savedSearchId: "saved_search_id",
    priorityNotSet: "priority_not_set",
    severityNotSet: "severity_not_set",
    currentMilestones: "current_milestones",
    tagMatchStrategy: "tag_match_strategy",
    updatedAfter: "updated_after",
    updatedBefore: "updated_before",
    incidentTypeId: "incident_type_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentsRequest$ {
  /** @deprecated use `ListIncidentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentsRequest$inboundSchema;
  /** @deprecated use `ListIncidentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentsRequest$outboundSchema;
  /** @deprecated use `ListIncidentsRequest$Outbound` instead. */
  export type Outbound = ListIncidentsRequest$Outbound;
}

export function listIncidentsRequestToJSON(
  listIncidentsRequest: ListIncidentsRequest,
): string {
  return JSON.stringify(
    ListIncidentsRequest$outboundSchema.parse(listIncidentsRequest),
  );
}

export function listIncidentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentsRequest' from JSON`,
  );
}
