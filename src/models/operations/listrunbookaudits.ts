/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A query to filter audits by type
 */
export const AuditableType = {
  RunbooksStep: "Runbooks::Step",
  RunbooksRunbook: "Runbooks::Runbook",
} as const;
/**
 * A query to filter audits by type
 */
export type AuditableType = ClosedEnum<typeof AuditableType>;

export type ListRunbookAuditsRequest = {
  page?: number | undefined;
  perPage?: number | undefined;
  /**
   * A query to filter audits by type
   */
  auditableType?: AuditableType | undefined;
  /**
   * A query to sort audits by their created_at timestamp. Options are 'asc' or 'desc'
   */
  sort?: string | undefined;
};

/** @internal */
export const AuditableType$inboundSchema: z.ZodNativeEnum<
  typeof AuditableType
> = z.nativeEnum(AuditableType);

/** @internal */
export const AuditableType$outboundSchema: z.ZodNativeEnum<
  typeof AuditableType
> = AuditableType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditableType$ {
  /** @deprecated use `AuditableType$inboundSchema` instead. */
  export const inboundSchema = AuditableType$inboundSchema;
  /** @deprecated use `AuditableType$outboundSchema` instead. */
  export const outboundSchema = AuditableType$outboundSchema;
}

/** @internal */
export const ListRunbookAuditsRequest$inboundSchema: z.ZodType<
  ListRunbookAuditsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  auditable_type: AuditableType$inboundSchema.default("Runbooks::Step"),
  sort: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "auditable_type": "auditableType",
  });
});

/** @internal */
export type ListRunbookAuditsRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  auditable_type: string;
  sort?: string | undefined;
};

/** @internal */
export const ListRunbookAuditsRequest$outboundSchema: z.ZodType<
  ListRunbookAuditsRequest$Outbound,
  z.ZodTypeDef,
  ListRunbookAuditsRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  auditableType: AuditableType$outboundSchema.default("Runbooks::Step"),
  sort: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    auditableType: "auditable_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRunbookAuditsRequest$ {
  /** @deprecated use `ListRunbookAuditsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRunbookAuditsRequest$inboundSchema;
  /** @deprecated use `ListRunbookAuditsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRunbookAuditsRequest$outboundSchema;
  /** @deprecated use `ListRunbookAuditsRequest$Outbound` instead. */
  export type Outbound = ListRunbookAuditsRequest$Outbound;
}

export function listRunbookAuditsRequestToJSON(
  listRunbookAuditsRequest: ListRunbookAuditsRequest,
): string {
  return JSON.stringify(
    ListRunbookAuditsRequest$outboundSchema.parse(listRunbookAuditsRequest),
  );
}

export function listRunbookAuditsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRunbookAuditsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRunbookAuditsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRunbookAuditsRequest' from JSON`,
  );
}
