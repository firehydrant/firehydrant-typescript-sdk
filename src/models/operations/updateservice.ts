/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateServiceRequest = {
  serviceId: string;
  updateService: components.UpdateService;
};

/** @internal */
export const UpdateServiceRequest$inboundSchema: z.ZodType<
  UpdateServiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  update_service: z.lazy(() => components.UpdateService$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "update_service": "updateService",
  });
});

/** @internal */
export type UpdateServiceRequest$Outbound = {
  service_id: string;
  update_service: components.UpdateService$Outbound;
};

/** @internal */
export const UpdateServiceRequest$outboundSchema: z.ZodType<
  UpdateServiceRequest$Outbound,
  z.ZodTypeDef,
  UpdateServiceRequest
> = z.object({
  serviceId: z.string(),
  updateService: z.lazy(() => components.UpdateService$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    updateService: "update_service",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateServiceRequest$ {
  /** @deprecated use `UpdateServiceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateServiceRequest$inboundSchema;
  /** @deprecated use `UpdateServiceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateServiceRequest$outboundSchema;
  /** @deprecated use `UpdateServiceRequest$Outbound` instead. */
  export type Outbound = UpdateServiceRequest$Outbound;
}

export function updateServiceRequestToJSON(
  updateServiceRequest: UpdateServiceRequest,
): string {
  return JSON.stringify(
    UpdateServiceRequest$outboundSchema.parse(updateServiceRequest),
  );
}

export function updateServiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateServiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateServiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateServiceRequest' from JSON`,
  );
}
