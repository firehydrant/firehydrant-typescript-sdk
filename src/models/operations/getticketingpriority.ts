/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTicketingPriorityRequest = {
  id: string;
};

/** @internal */
export const GetTicketingPriorityRequest$inboundSchema: z.ZodType<
  GetTicketingPriorityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetTicketingPriorityRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetTicketingPriorityRequest$outboundSchema: z.ZodType<
  GetTicketingPriorityRequest$Outbound,
  z.ZodTypeDef,
  GetTicketingPriorityRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTicketingPriorityRequest$ {
  /** @deprecated use `GetTicketingPriorityRequest$inboundSchema` instead. */
  export const inboundSchema = GetTicketingPriorityRequest$inboundSchema;
  /** @deprecated use `GetTicketingPriorityRequest$outboundSchema` instead. */
  export const outboundSchema = GetTicketingPriorityRequest$outboundSchema;
  /** @deprecated use `GetTicketingPriorityRequest$Outbound` instead. */
  export type Outbound = GetTicketingPriorityRequest$Outbound;
}

export function getTicketingPriorityRequestToJSON(
  getTicketingPriorityRequest: GetTicketingPriorityRequest,
): string {
  return JSON.stringify(
    GetTicketingPriorityRequest$outboundSchema.parse(
      getTicketingPriorityRequest,
    ),
  );
}

export function getTicketingPriorityRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTicketingPriorityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTicketingPriorityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTicketingPriorityRequest' from JSON`,
  );
}
