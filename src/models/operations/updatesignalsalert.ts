/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSignalsAlertRequest = {
  id: string;
  updateSignalsAlert: components.UpdateSignalsAlert;
};

/** @internal */
export const UpdateSignalsAlertRequest$inboundSchema: z.ZodType<
  UpdateSignalsAlertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  update_signals_alert: z.lazy(() =>
    components.UpdateSignalsAlert$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "update_signals_alert": "updateSignalsAlert",
  });
});

/** @internal */
export type UpdateSignalsAlertRequest$Outbound = {
  id: string;
  update_signals_alert: components.UpdateSignalsAlert$Outbound;
};

/** @internal */
export const UpdateSignalsAlertRequest$outboundSchema: z.ZodType<
  UpdateSignalsAlertRequest$Outbound,
  z.ZodTypeDef,
  UpdateSignalsAlertRequest
> = z.object({
  id: z.string(),
  updateSignalsAlert: z.lazy(() =>
    components.UpdateSignalsAlert$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    updateSignalsAlert: "update_signals_alert",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsAlertRequest$ {
  /** @deprecated use `UpdateSignalsAlertRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSignalsAlertRequest$inboundSchema;
  /** @deprecated use `UpdateSignalsAlertRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSignalsAlertRequest$outboundSchema;
  /** @deprecated use `UpdateSignalsAlertRequest$Outbound` instead. */
  export type Outbound = UpdateSignalsAlertRequest$Outbound;
}

export function updateSignalsAlertRequestToJSON(
  updateSignalsAlertRequest: UpdateSignalsAlertRequest,
): string {
  return JSON.stringify(
    UpdateSignalsAlertRequest$outboundSchema.parse(updateSignalsAlertRequest),
  );
}

export function updateSignalsAlertRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignalsAlertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSignalsAlertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignalsAlertRequest' from JSON`,
  );
}
