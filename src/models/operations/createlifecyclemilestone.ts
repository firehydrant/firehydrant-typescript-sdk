/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateLifecycleMilestoneRequestBody = {
  /**
   * The name of the milestone
   */
  name: string;
  /**
   * A long-form description of the milestone's purpose
   */
  description: string;
  /**
   * A unique identifier for the milestone. If not provided, one will be generated from the name.
   */
  slug?: string | undefined;
  /**
   * The ID of the phase to which the milestone should belong
   */
  phaseId: string;
  /**
   * The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.
   */
  position?: number | undefined;
  /**
   * The ID of a later milestone that cannot be started until this milestone has a timestamp populated
   */
  requiredAtMilestoneId?: string | undefined;
};

/** @internal */
export const CreateLifecycleMilestoneRequestBody$inboundSchema: z.ZodType<
  CreateLifecycleMilestoneRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  slug: z.string().optional(),
  phase_id: z.string(),
  position: z.number().int().optional(),
  required_at_milestone_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "phase_id": "phaseId",
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type CreateLifecycleMilestoneRequestBody$Outbound = {
  name: string;
  description: string;
  slug?: string | undefined;
  phase_id: string;
  position?: number | undefined;
  required_at_milestone_id?: string | undefined;
};

/** @internal */
export const CreateLifecycleMilestoneRequestBody$outboundSchema: z.ZodType<
  CreateLifecycleMilestoneRequestBody$Outbound,
  z.ZodTypeDef,
  CreateLifecycleMilestoneRequestBody
> = z.object({
  name: z.string(),
  description: z.string(),
  slug: z.string().optional(),
  phaseId: z.string(),
  position: z.number().int().optional(),
  requiredAtMilestoneId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    phaseId: "phase_id",
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLifecycleMilestoneRequestBody$ {
  /** @deprecated use `CreateLifecycleMilestoneRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateLifecycleMilestoneRequestBody$inboundSchema;
  /** @deprecated use `CreateLifecycleMilestoneRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateLifecycleMilestoneRequestBody$outboundSchema;
  /** @deprecated use `CreateLifecycleMilestoneRequestBody$Outbound` instead. */
  export type Outbound = CreateLifecycleMilestoneRequestBody$Outbound;
}

export function createLifecycleMilestoneRequestBodyToJSON(
  createLifecycleMilestoneRequestBody: CreateLifecycleMilestoneRequestBody,
): string {
  return JSON.stringify(
    CreateLifecycleMilestoneRequestBody$outboundSchema.parse(
      createLifecycleMilestoneRequestBody,
    ),
  );
}

export function createLifecycleMilestoneRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateLifecycleMilestoneRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateLifecycleMilestoneRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLifecycleMilestoneRequestBody' from JSON`,
  );
}
