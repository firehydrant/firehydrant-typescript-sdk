/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The setting for auto-assigning the milestone's timestamp during incident declaration
 */
export const CreateLifecycleMilestoneAutoAssignTimestampOnCreate = {
  AlwaysSetOnCreate: "always_set_on_create",
  OnlySetOnManualCreate: "only_set_on_manual_create",
  NeverSetOnCreate: "never_set_on_create",
} as const;
/**
 * The setting for auto-assigning the milestone's timestamp during incident declaration
 */
export type CreateLifecycleMilestoneAutoAssignTimestampOnCreate = ClosedEnum<
  typeof CreateLifecycleMilestoneAutoAssignTimestampOnCreate
>;

export type CreateLifecycleMilestoneRequest = {
  /**
   * The name of the milestone
   */
  name: string;
  /**
   * A long-form description of the milestone's purpose
   */
  description: string;
  /**
   * A unique identifier for the milestone. If not provided, one will be generated from the name.
   */
  slug?: string | null | undefined;
  /**
   * The ID of the phase to which the milestone should belong
   */
  phaseId: string;
  /**
   * The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.
   */
  position?: number | null | undefined;
  /**
   * The ID of a later milestone that cannot be started until this milestone has a timestamp populated
   */
  requiredAtMilestoneId?: string | null | undefined;
  /**
   * The setting for auto-assigning the milestone's timestamp during incident declaration
   */
  autoAssignTimestampOnCreate?:
    | CreateLifecycleMilestoneAutoAssignTimestampOnCreate
    | null
    | undefined;
};

/** @internal */
export const CreateLifecycleMilestoneAutoAssignTimestampOnCreate$inboundSchema:
  z.ZodNativeEnum<typeof CreateLifecycleMilestoneAutoAssignTimestampOnCreate> =
    z.nativeEnum(CreateLifecycleMilestoneAutoAssignTimestampOnCreate);

/** @internal */
export const CreateLifecycleMilestoneAutoAssignTimestampOnCreate$outboundSchema:
  z.ZodNativeEnum<typeof CreateLifecycleMilestoneAutoAssignTimestampOnCreate> =
    CreateLifecycleMilestoneAutoAssignTimestampOnCreate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLifecycleMilestoneAutoAssignTimestampOnCreate$ {
  /** @deprecated use `CreateLifecycleMilestoneAutoAssignTimestampOnCreate$inboundSchema` instead. */
  export const inboundSchema =
    CreateLifecycleMilestoneAutoAssignTimestampOnCreate$inboundSchema;
  /** @deprecated use `CreateLifecycleMilestoneAutoAssignTimestampOnCreate$outboundSchema` instead. */
  export const outboundSchema =
    CreateLifecycleMilestoneAutoAssignTimestampOnCreate$outboundSchema;
}

/** @internal */
export const CreateLifecycleMilestoneRequest$inboundSchema: z.ZodType<
  CreateLifecycleMilestoneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  slug: z.nullable(z.string()).optional(),
  phase_id: z.string(),
  position: z.nullable(z.number().int()).optional(),
  required_at_milestone_id: z.nullable(z.string()).optional(),
  auto_assign_timestamp_on_create: z.nullable(
    CreateLifecycleMilestoneAutoAssignTimestampOnCreate$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "phase_id": "phaseId",
    "required_at_milestone_id": "requiredAtMilestoneId",
    "auto_assign_timestamp_on_create": "autoAssignTimestampOnCreate",
  });
});

/** @internal */
export type CreateLifecycleMilestoneRequest$Outbound = {
  name: string;
  description: string;
  slug?: string | null | undefined;
  phase_id: string;
  position?: number | null | undefined;
  required_at_milestone_id?: string | null | undefined;
  auto_assign_timestamp_on_create?: string | null | undefined;
};

/** @internal */
export const CreateLifecycleMilestoneRequest$outboundSchema: z.ZodType<
  CreateLifecycleMilestoneRequest$Outbound,
  z.ZodTypeDef,
  CreateLifecycleMilestoneRequest
> = z.object({
  name: z.string(),
  description: z.string(),
  slug: z.nullable(z.string()).optional(),
  phaseId: z.string(),
  position: z.nullable(z.number().int()).optional(),
  requiredAtMilestoneId: z.nullable(z.string()).optional(),
  autoAssignTimestampOnCreate: z.nullable(
    CreateLifecycleMilestoneAutoAssignTimestampOnCreate$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    phaseId: "phase_id",
    requiredAtMilestoneId: "required_at_milestone_id",
    autoAssignTimestampOnCreate: "auto_assign_timestamp_on_create",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLifecycleMilestoneRequest$ {
  /** @deprecated use `CreateLifecycleMilestoneRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLifecycleMilestoneRequest$inboundSchema;
  /** @deprecated use `CreateLifecycleMilestoneRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLifecycleMilestoneRequest$outboundSchema;
  /** @deprecated use `CreateLifecycleMilestoneRequest$Outbound` instead. */
  export type Outbound = CreateLifecycleMilestoneRequest$Outbound;
}

export function createLifecycleMilestoneRequestToJSON(
  createLifecycleMilestoneRequest: CreateLifecycleMilestoneRequest,
): string {
  return JSON.stringify(
    CreateLifecycleMilestoneRequest$outboundSchema.parse(
      createLifecycleMilestoneRequest,
    ),
  );
}

export function createLifecycleMilestoneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLifecycleMilestoneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLifecycleMilestoneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLifecycleMilestoneRequest' from JSON`,
  );
}
