/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIncidentRetrospectivesRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * Filter by hidden status.
   */
  isHidden?: boolean | null | undefined;
  incidentId: string;
};

/** @internal */
export const ListIncidentRetrospectivesRequest$inboundSchema: z.ZodType<
  ListIncidentRetrospectivesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  is_hidden: z.nullable(z.boolean()).optional(),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "is_hidden": "isHidden",
    "incident_id": "incidentId",
  });
});

/** @internal */
export type ListIncidentRetrospectivesRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  is_hidden?: boolean | null | undefined;
  incident_id: string;
};

/** @internal */
export const ListIncidentRetrospectivesRequest$outboundSchema: z.ZodType<
  ListIncidentRetrospectivesRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentRetrospectivesRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  isHidden: z.nullable(z.boolean()).optional(),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    isHidden: "is_hidden",
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentRetrospectivesRequest$ {
  /** @deprecated use `ListIncidentRetrospectivesRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentRetrospectivesRequest$inboundSchema;
  /** @deprecated use `ListIncidentRetrospectivesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListIncidentRetrospectivesRequest$outboundSchema;
  /** @deprecated use `ListIncidentRetrospectivesRequest$Outbound` instead. */
  export type Outbound = ListIncidentRetrospectivesRequest$Outbound;
}

export function listIncidentRetrospectivesRequestToJSON(
  listIncidentRetrospectivesRequest: ListIncidentRetrospectivesRequest,
): string {
  return JSON.stringify(
    ListIncidentRetrospectivesRequest$outboundSchema.parse(
      listIncidentRetrospectivesRequest,
    ),
  );
}

export function listIncidentRetrospectivesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentRetrospectivesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentRetrospectivesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentRetrospectivesRequest' from JSON`,
  );
}
