/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCallRouteRequest = {
  id: string;
};

/** @internal */
export const GetCallRouteRequest$inboundSchema: z.ZodType<
  GetCallRouteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetCallRouteRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetCallRouteRequest$outboundSchema: z.ZodType<
  GetCallRouteRequest$Outbound,
  z.ZodTypeDef,
  GetCallRouteRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCallRouteRequest$ {
  /** @deprecated use `GetCallRouteRequest$inboundSchema` instead. */
  export const inboundSchema = GetCallRouteRequest$inboundSchema;
  /** @deprecated use `GetCallRouteRequest$outboundSchema` instead. */
  export const outboundSchema = GetCallRouteRequest$outboundSchema;
  /** @deprecated use `GetCallRouteRequest$Outbound` instead. */
  export type Outbound = GetCallRouteRequest$Outbound;
}

export function getCallRouteRequestToJSON(
  getCallRouteRequest: GetCallRouteRequest,
): string {
  return JSON.stringify(
    GetCallRouteRequest$outboundSchema.parse(getCallRouteRequest),
  );
}

export function getCallRouteRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCallRouteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCallRouteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCallRouteRequest' from JSON`,
  );
}
