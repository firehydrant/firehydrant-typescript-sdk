/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BucketSize = {
  Week: "week",
  Day: "day",
  Month: "month",
  AllTime: "all_time",
} as const;
export type BucketSize = ClosedEnum<typeof BucketSize>;

export const By = {
  Total: "total",
  Severity: "severity",
  Priority: "priority",
  Functionality: "functionality",
  Service: "service",
  Environment: "environment",
  User: "user",
  UserInvolvement: "user_involvement",
} as const;
export type By = ClosedEnum<typeof By>;

export const SortField = {
  Mttd: "mttd",
  Mtta: "mtta",
  Mttm: "mttm",
  Mttr: "mttr",
  Count: "count",
  TotalTime: "total_time",
} as const;
export type SortField = ClosedEnum<typeof SortField>;

export const SortDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type SortDirection = ClosedEnum<typeof SortDirection>;

export type ListIncidentMetricsRequest = {
  /**
   * The start date to return metrics from
   */
  startDate?: RFCDate | undefined;
  /**
   * The end date to return metrics from
   */
  endDate?: RFCDate | undefined;
  bucketSize?: BucketSize | undefined;
  by?: By | undefined;
  sortField?: SortField | undefined;
  sortDirection?: SortDirection | undefined;
  sortLimit?: number | undefined;
  conditions?: string | undefined;
};

/** @internal */
export const BucketSize$inboundSchema: z.ZodNativeEnum<typeof BucketSize> = z
  .nativeEnum(BucketSize);

/** @internal */
export const BucketSize$outboundSchema: z.ZodNativeEnum<typeof BucketSize> =
  BucketSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BucketSize$ {
  /** @deprecated use `BucketSize$inboundSchema` instead. */
  export const inboundSchema = BucketSize$inboundSchema;
  /** @deprecated use `BucketSize$outboundSchema` instead. */
  export const outboundSchema = BucketSize$outboundSchema;
}

/** @internal */
export const By$inboundSchema: z.ZodNativeEnum<typeof By> = z.nativeEnum(By);

/** @internal */
export const By$outboundSchema: z.ZodNativeEnum<typeof By> = By$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace By$ {
  /** @deprecated use `By$inboundSchema` instead. */
  export const inboundSchema = By$inboundSchema;
  /** @deprecated use `By$outboundSchema` instead. */
  export const outboundSchema = By$outboundSchema;
}

/** @internal */
export const SortField$inboundSchema: z.ZodNativeEnum<typeof SortField> = z
  .nativeEnum(SortField);

/** @internal */
export const SortField$outboundSchema: z.ZodNativeEnum<typeof SortField> =
  SortField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortField$ {
  /** @deprecated use `SortField$inboundSchema` instead. */
  export const inboundSchema = SortField$inboundSchema;
  /** @deprecated use `SortField$outboundSchema` instead. */
  export const outboundSchema = SortField$outboundSchema;
}

/** @internal */
export const SortDirection$inboundSchema: z.ZodNativeEnum<
  typeof SortDirection
> = z.nativeEnum(SortDirection);

/** @internal */
export const SortDirection$outboundSchema: z.ZodNativeEnum<
  typeof SortDirection
> = SortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortDirection$ {
  /** @deprecated use `SortDirection$inboundSchema` instead. */
  export const inboundSchema = SortDirection$inboundSchema;
  /** @deprecated use `SortDirection$outboundSchema` instead. */
  export const outboundSchema = SortDirection$outboundSchema;
}

/** @internal */
export const ListIncidentMetricsRequest$inboundSchema: z.ZodType<
  ListIncidentMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
  bucket_size: BucketSize$inboundSchema.optional(),
  by: By$inboundSchema.optional(),
  sort_field: SortField$inboundSchema.optional(),
  sort_direction: SortDirection$inboundSchema.optional(),
  sort_limit: z.number().int().optional(),
  conditions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "bucket_size": "bucketSize",
    "sort_field": "sortField",
    "sort_direction": "sortDirection",
    "sort_limit": "sortLimit",
  });
});

/** @internal */
export type ListIncidentMetricsRequest$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
  bucket_size?: string | undefined;
  by?: string | undefined;
  sort_field?: string | undefined;
  sort_direction?: string | undefined;
  sort_limit?: number | undefined;
  conditions?: string | undefined;
};

/** @internal */
export const ListIncidentMetricsRequest$outboundSchema: z.ZodType<
  ListIncidentMetricsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentMetricsRequest
> = z.object({
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  bucketSize: BucketSize$outboundSchema.optional(),
  by: By$outboundSchema.optional(),
  sortField: SortField$outboundSchema.optional(),
  sortDirection: SortDirection$outboundSchema.optional(),
  sortLimit: z.number().int().optional(),
  conditions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    bucketSize: "bucket_size",
    sortField: "sort_field",
    sortDirection: "sort_direction",
    sortLimit: "sort_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentMetricsRequest$ {
  /** @deprecated use `ListIncidentMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentMetricsRequest$inboundSchema;
  /** @deprecated use `ListIncidentMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentMetricsRequest$outboundSchema;
  /** @deprecated use `ListIncidentMetricsRequest$Outbound` instead. */
  export type Outbound = ListIncidentMetricsRequest$Outbound;
}

export function listIncidentMetricsRequestToJSON(
  listIncidentMetricsRequest: ListIncidentMetricsRequest,
): string {
  return JSON.stringify(
    ListIncidentMetricsRequest$outboundSchema.parse(listIncidentMetricsRequest),
  );
}

export function listIncidentMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentMetricsRequest' from JSON`,
  );
}
