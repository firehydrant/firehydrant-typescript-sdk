/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BucketSize = {
  Week: "week",
  Day: "day",
  Month: "month",
  AllTime: "all_time",
} as const;
export type BucketSize = ClosedEnum<typeof BucketSize>;

export const By = {
  Total: "total",
  Severity: "severity",
  Priority: "priority",
  Functionality: "functionality",
  Service: "service",
  Environment: "environment",
  User: "user",
  UserInvolvement: "user_involvement",
} as const;
export type By = ClosedEnum<typeof By>;

export const ListIncidentMetricsSortField = {
  Mttd: "mttd",
  Mtta: "mtta",
  Mttm: "mttm",
  Mttr: "mttr",
  Count: "count",
  TotalTime: "total_time",
} as const;
export type ListIncidentMetricsSortField = ClosedEnum<
  typeof ListIncidentMetricsSortField
>;

export const ListIncidentMetricsSortDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListIncidentMetricsSortDirection = ClosedEnum<
  typeof ListIncidentMetricsSortDirection
>;

export type ListIncidentMetricsRequest = {
  /**
   * The start date to return metrics from
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The end date to return metrics from
   */
  endDate?: RFCDate | null | undefined;
  bucketSize?: BucketSize | null | undefined;
  by?: By | null | undefined;
  sortField?: ListIncidentMetricsSortField | null | undefined;
  sortDirection?: ListIncidentMetricsSortDirection | null | undefined;
  sortLimit?: number | null | undefined;
  conditions?: string | null | undefined;
};

/** @internal */
export const BucketSize$inboundSchema: z.ZodNativeEnum<typeof BucketSize> = z
  .nativeEnum(BucketSize);

/** @internal */
export const BucketSize$outboundSchema: z.ZodNativeEnum<typeof BucketSize> =
  BucketSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BucketSize$ {
  /** @deprecated use `BucketSize$inboundSchema` instead. */
  export const inboundSchema = BucketSize$inboundSchema;
  /** @deprecated use `BucketSize$outboundSchema` instead. */
  export const outboundSchema = BucketSize$outboundSchema;
}

/** @internal */
export const By$inboundSchema: z.ZodNativeEnum<typeof By> = z.nativeEnum(By);

/** @internal */
export const By$outboundSchema: z.ZodNativeEnum<typeof By> = By$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace By$ {
  /** @deprecated use `By$inboundSchema` instead. */
  export const inboundSchema = By$inboundSchema;
  /** @deprecated use `By$outboundSchema` instead. */
  export const outboundSchema = By$outboundSchema;
}

/** @internal */
export const ListIncidentMetricsSortField$inboundSchema: z.ZodNativeEnum<
  typeof ListIncidentMetricsSortField
> = z.nativeEnum(ListIncidentMetricsSortField);

/** @internal */
export const ListIncidentMetricsSortField$outboundSchema: z.ZodNativeEnum<
  typeof ListIncidentMetricsSortField
> = ListIncidentMetricsSortField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentMetricsSortField$ {
  /** @deprecated use `ListIncidentMetricsSortField$inboundSchema` instead. */
  export const inboundSchema = ListIncidentMetricsSortField$inboundSchema;
  /** @deprecated use `ListIncidentMetricsSortField$outboundSchema` instead. */
  export const outboundSchema = ListIncidentMetricsSortField$outboundSchema;
}

/** @internal */
export const ListIncidentMetricsSortDirection$inboundSchema: z.ZodNativeEnum<
  typeof ListIncidentMetricsSortDirection
> = z.nativeEnum(ListIncidentMetricsSortDirection);

/** @internal */
export const ListIncidentMetricsSortDirection$outboundSchema: z.ZodNativeEnum<
  typeof ListIncidentMetricsSortDirection
> = ListIncidentMetricsSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentMetricsSortDirection$ {
  /** @deprecated use `ListIncidentMetricsSortDirection$inboundSchema` instead. */
  export const inboundSchema = ListIncidentMetricsSortDirection$inboundSchema;
  /** @deprecated use `ListIncidentMetricsSortDirection$outboundSchema` instead. */
  export const outboundSchema = ListIncidentMetricsSortDirection$outboundSchema;
}

/** @internal */
export const ListIncidentMetricsRequest$inboundSchema: z.ZodType<
  ListIncidentMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  bucket_size: z.nullable(BucketSize$inboundSchema).optional(),
  by: z.nullable(By$inboundSchema).optional(),
  sort_field: z.nullable(ListIncidentMetricsSortField$inboundSchema).optional(),
  sort_direction: z.nullable(ListIncidentMetricsSortDirection$inboundSchema)
    .optional(),
  sort_limit: z.nullable(z.number().int()).optional(),
  conditions: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "bucket_size": "bucketSize",
    "sort_field": "sortField",
    "sort_direction": "sortDirection",
    "sort_limit": "sortLimit",
  });
});

/** @internal */
export type ListIncidentMetricsRequest$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  bucket_size?: string | null | undefined;
  by?: string | null | undefined;
  sort_field?: string | null | undefined;
  sort_direction?: string | null | undefined;
  sort_limit?: number | null | undefined;
  conditions?: string | null | undefined;
};

/** @internal */
export const ListIncidentMetricsRequest$outboundSchema: z.ZodType<
  ListIncidentMetricsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentMetricsRequest
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  bucketSize: z.nullable(BucketSize$outboundSchema).optional(),
  by: z.nullable(By$outboundSchema).optional(),
  sortField: z.nullable(ListIncidentMetricsSortField$outboundSchema).optional(),
  sortDirection: z.nullable(ListIncidentMetricsSortDirection$outboundSchema)
    .optional(),
  sortLimit: z.nullable(z.number().int()).optional(),
  conditions: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    bucketSize: "bucket_size",
    sortField: "sort_field",
    sortDirection: "sort_direction",
    sortLimit: "sort_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentMetricsRequest$ {
  /** @deprecated use `ListIncidentMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentMetricsRequest$inboundSchema;
  /** @deprecated use `ListIncidentMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentMetricsRequest$outboundSchema;
  /** @deprecated use `ListIncidentMetricsRequest$Outbound` instead. */
  export type Outbound = ListIncidentMetricsRequest$Outbound;
}

export function listIncidentMetricsRequestToJSON(
  listIncidentMetricsRequest: ListIncidentMetricsRequest,
): string {
  return JSON.stringify(
    ListIncidentMetricsRequest$outboundSchema.parse(listIncidentMetricsRequest),
  );
}

export function listIncidentMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentMetricsRequest' from JSON`,
  );
}
