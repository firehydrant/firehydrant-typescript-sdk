/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListChangeIdentitiesRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  changeId: string;
};

/** @internal */
export const ListChangeIdentitiesRequest$inboundSchema: z.ZodType<
  ListChangeIdentitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  change_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "change_id": "changeId",
  });
});

/** @internal */
export type ListChangeIdentitiesRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  change_id: string;
};

/** @internal */
export const ListChangeIdentitiesRequest$outboundSchema: z.ZodType<
  ListChangeIdentitiesRequest$Outbound,
  z.ZodTypeDef,
  ListChangeIdentitiesRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  changeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    changeId: "change_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChangeIdentitiesRequest$ {
  /** @deprecated use `ListChangeIdentitiesRequest$inboundSchema` instead. */
  export const inboundSchema = ListChangeIdentitiesRequest$inboundSchema;
  /** @deprecated use `ListChangeIdentitiesRequest$outboundSchema` instead. */
  export const outboundSchema = ListChangeIdentitiesRequest$outboundSchema;
  /** @deprecated use `ListChangeIdentitiesRequest$Outbound` instead. */
  export type Outbound = ListChangeIdentitiesRequest$Outbound;
}

export function listChangeIdentitiesRequestToJSON(
  listChangeIdentitiesRequest: ListChangeIdentitiesRequest,
): string {
  return JSON.stringify(
    ListChangeIdentitiesRequest$outboundSchema.parse(
      listChangeIdentitiesRequest,
    ),
  );
}

export function listChangeIdentitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListChangeIdentitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChangeIdentitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChangeIdentitiesRequest' from JSON`,
  );
}
