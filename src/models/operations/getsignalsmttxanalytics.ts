/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String that determines how records are grouped
 */
export const QueryParamGroupBy = {
  SignalRules: "signal_rules",
  Teams: "teams",
  Services: "services",
  Environments: "environments",
  Tags: "tags",
} as const;
/**
 * String that determines how records are grouped
 */
export type QueryParamGroupBy = ClosedEnum<typeof QueryParamGroupBy>;

/**
 * String that determines how records are sorted
 */
export const QueryParamSortBy = {
  TotalOpenedAlerts: "total_opened_alerts",
  TotalAckedAlerts: "total_acked_alerts",
  TotalIncidents: "total_incidents",
  AckedPercentage: "acked_percentage",
  IncidentsPercentage: "incidents_percentage",
} as const;
/**
 * String that determines how records are sorted
 */
export type QueryParamSortBy = ClosedEnum<typeof QueryParamSortBy>;

/**
 * String that determines how records are sorted
 */
export const GetSignalsMttxAnalyticsQueryParamSortDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * String that determines how records are sorted
 */
export type GetSignalsMttxAnalyticsQueryParamSortDirection = ClosedEnum<
  typeof GetSignalsMttxAnalyticsQueryParamSortDirection
>;

export type GetSignalsMttxAnalyticsRequest = {
  /**
   * A comma separated list of signal rule IDs
   */
  signalRules?: string | undefined;
  /**
   * A comma separated list of team IDs
   */
  teams?: string | undefined;
  /**
   * A comma separated list of environment IDs
   */
  environments?: string | undefined;
  /**
   * A comma separated list of service IDs
   */
  services?: string | undefined;
  /**
   * A comma separated list of tags
   */
  tags?: string | undefined;
  /**
   * A comma separated list of user IDs
   */
  users?: string | undefined;
  /**
   * String that determines how records are grouped
   */
  groupBy?: QueryParamGroupBy | undefined;
  /**
   * String that determines how records are sorted
   */
  sortBy?: QueryParamSortBy | undefined;
  /**
   * String that determines how records are sorted
   */
  sortDirection?: GetSignalsMttxAnalyticsQueryParamSortDirection | undefined;
  /**
   * The start date to return metrics from
   */
  startDate?: Date | undefined;
  /**
   * The end date to return metrics from
   */
  endDate?: Date | undefined;
};

/** @internal */
export const QueryParamGroupBy$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamGroupBy
> = z.nativeEnum(QueryParamGroupBy);

/** @internal */
export const QueryParamGroupBy$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamGroupBy
> = QueryParamGroupBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamGroupBy$ {
  /** @deprecated use `QueryParamGroupBy$inboundSchema` instead. */
  export const inboundSchema = QueryParamGroupBy$inboundSchema;
  /** @deprecated use `QueryParamGroupBy$outboundSchema` instead. */
  export const outboundSchema = QueryParamGroupBy$outboundSchema;
}

/** @internal */
export const QueryParamSortBy$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortBy
> = z.nativeEnum(QueryParamSortBy);

/** @internal */
export const QueryParamSortBy$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortBy
> = QueryParamSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSortBy$ {
  /** @deprecated use `QueryParamSortBy$inboundSchema` instead. */
  export const inboundSchema = QueryParamSortBy$inboundSchema;
  /** @deprecated use `QueryParamSortBy$outboundSchema` instead. */
  export const outboundSchema = QueryParamSortBy$outboundSchema;
}

/** @internal */
export const GetSignalsMttxAnalyticsQueryParamSortDirection$inboundSchema:
  z.ZodNativeEnum<typeof GetSignalsMttxAnalyticsQueryParamSortDirection> = z
    .nativeEnum(GetSignalsMttxAnalyticsQueryParamSortDirection);

/** @internal */
export const GetSignalsMttxAnalyticsQueryParamSortDirection$outboundSchema:
  z.ZodNativeEnum<typeof GetSignalsMttxAnalyticsQueryParamSortDirection> =
    GetSignalsMttxAnalyticsQueryParamSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsMttxAnalyticsQueryParamSortDirection$ {
  /** @deprecated use `GetSignalsMttxAnalyticsQueryParamSortDirection$inboundSchema` instead. */
  export const inboundSchema =
    GetSignalsMttxAnalyticsQueryParamSortDirection$inboundSchema;
  /** @deprecated use `GetSignalsMttxAnalyticsQueryParamSortDirection$outboundSchema` instead. */
  export const outboundSchema =
    GetSignalsMttxAnalyticsQueryParamSortDirection$outboundSchema;
}

/** @internal */
export const GetSignalsMttxAnalyticsRequest$inboundSchema: z.ZodType<
  GetSignalsMttxAnalyticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  signal_rules: z.string().optional(),
  teams: z.string().optional(),
  environments: z.string().optional(),
  services: z.string().optional(),
  tags: z.string().optional(),
  users: z.string().optional(),
  group_by: QueryParamGroupBy$inboundSchema.optional(),
  sort_by: QueryParamSortBy$inboundSchema.optional(),
  sort_direction: GetSignalsMttxAnalyticsQueryParamSortDirection$inboundSchema
    .optional(),
  start_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "signal_rules": "signalRules",
    "group_by": "groupBy",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type GetSignalsMttxAnalyticsRequest$Outbound = {
  signal_rules?: string | undefined;
  teams?: string | undefined;
  environments?: string | undefined;
  services?: string | undefined;
  tags?: string | undefined;
  users?: string | undefined;
  group_by?: string | undefined;
  sort_by?: string | undefined;
  sort_direction?: string | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const GetSignalsMttxAnalyticsRequest$outboundSchema: z.ZodType<
  GetSignalsMttxAnalyticsRequest$Outbound,
  z.ZodTypeDef,
  GetSignalsMttxAnalyticsRequest
> = z.object({
  signalRules: z.string().optional(),
  teams: z.string().optional(),
  environments: z.string().optional(),
  services: z.string().optional(),
  tags: z.string().optional(),
  users: z.string().optional(),
  groupBy: QueryParamGroupBy$outboundSchema.optional(),
  sortBy: QueryParamSortBy$outboundSchema.optional(),
  sortDirection: GetSignalsMttxAnalyticsQueryParamSortDirection$outboundSchema
    .optional(),
  startDate: z.date().transform(v => v.toISOString()).optional(),
  endDate: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    signalRules: "signal_rules",
    groupBy: "group_by",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsMttxAnalyticsRequest$ {
  /** @deprecated use `GetSignalsMttxAnalyticsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSignalsMttxAnalyticsRequest$inboundSchema;
  /** @deprecated use `GetSignalsMttxAnalyticsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSignalsMttxAnalyticsRequest$outboundSchema;
  /** @deprecated use `GetSignalsMttxAnalyticsRequest$Outbound` instead. */
  export type Outbound = GetSignalsMttxAnalyticsRequest$Outbound;
}

export function getSignalsMttxAnalyticsRequestToJSON(
  getSignalsMttxAnalyticsRequest: GetSignalsMttxAnalyticsRequest,
): string {
  return JSON.stringify(
    GetSignalsMttxAnalyticsRequest$outboundSchema.parse(
      getSignalsMttxAnalyticsRequest,
    ),
  );
}

export function getSignalsMttxAnalyticsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSignalsMttxAnalyticsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSignalsMttxAnalyticsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSignalsMttxAnalyticsRequest' from JSON`,
  );
}
