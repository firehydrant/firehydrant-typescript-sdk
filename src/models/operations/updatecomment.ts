/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCommentRequest = {
  commentId: string;
  conversationId: string;
  updateComment: components.UpdateComment;
};

/** @internal */
export const UpdateCommentRequest$inboundSchema: z.ZodType<
  UpdateCommentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment_id: z.string(),
  conversation_id: z.string(),
  update_comment: z.lazy(() => components.UpdateComment$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "comment_id": "commentId",
    "conversation_id": "conversationId",
    "update_comment": "updateComment",
  });
});

/** @internal */
export type UpdateCommentRequest$Outbound = {
  comment_id: string;
  conversation_id: string;
  update_comment: components.UpdateComment$Outbound;
};

/** @internal */
export const UpdateCommentRequest$outboundSchema: z.ZodType<
  UpdateCommentRequest$Outbound,
  z.ZodTypeDef,
  UpdateCommentRequest
> = z.object({
  commentId: z.string(),
  conversationId: z.string(),
  updateComment: z.lazy(() => components.UpdateComment$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    commentId: "comment_id",
    conversationId: "conversation_id",
    updateComment: "update_comment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCommentRequest$ {
  /** @deprecated use `UpdateCommentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCommentRequest$inboundSchema;
  /** @deprecated use `UpdateCommentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCommentRequest$outboundSchema;
  /** @deprecated use `UpdateCommentRequest$Outbound` instead. */
  export type Outbound = UpdateCommentRequest$Outbound;
}

export function updateCommentRequestToJSON(
  updateCommentRequest: UpdateCommentRequest,
): string {
  return JSON.stringify(
    UpdateCommentRequest$outboundSchema.parse(updateCommentRequest),
  );
}

export function updateCommentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCommentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCommentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCommentRequest' from JSON`,
  );
}
