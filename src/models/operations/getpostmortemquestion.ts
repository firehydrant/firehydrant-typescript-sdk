/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPostMortemQuestionRequest = {
  questionId: string;
};

/** @internal */
export const GetPostMortemQuestionRequest$inboundSchema: z.ZodType<
  GetPostMortemQuestionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  question_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "question_id": "questionId",
  });
});

/** @internal */
export type GetPostMortemQuestionRequest$Outbound = {
  question_id: string;
};

/** @internal */
export const GetPostMortemQuestionRequest$outboundSchema: z.ZodType<
  GetPostMortemQuestionRequest$Outbound,
  z.ZodTypeDef,
  GetPostMortemQuestionRequest
> = z.object({
  questionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    questionId: "question_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPostMortemQuestionRequest$ {
  /** @deprecated use `GetPostMortemQuestionRequest$inboundSchema` instead. */
  export const inboundSchema = GetPostMortemQuestionRequest$inboundSchema;
  /** @deprecated use `GetPostMortemQuestionRequest$outboundSchema` instead. */
  export const outboundSchema = GetPostMortemQuestionRequest$outboundSchema;
  /** @deprecated use `GetPostMortemQuestionRequest$Outbound` instead. */
  export type Outbound = GetPostMortemQuestionRequest$Outbound;
}

export function getPostMortemQuestionRequestToJSON(
  getPostMortemQuestionRequest: GetPostMortemQuestionRequest,
): string {
  return JSON.stringify(
    GetPostMortemQuestionRequest$outboundSchema.parse(
      getPostMortemQuestionRequest,
    ),
  );
}

export function getPostMortemQuestionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPostMortemQuestionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPostMortemQuestionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPostMortemQuestionRequest' from JSON`,
  );
}
