/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateLifecycleMilestoneRequestBody = {
  /**
   * The name of the milestone
   */
  name?: string | undefined;
  /**
   * A long-form description of the milestone's purpose
   */
  description?: string | undefined;
  /**
   * A unique identifier for the milestone. If not provided, one will be generated from the name.
   */
  slug?: string | undefined;
  /**
   * The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.
   */
  position?: number | undefined;
  /**
   * The ID of a later milestone that cannot be started until this milestone has a timestamp populated
   */
  requiredAtMilestoneId?: string | undefined;
};

export type UpdateLifecycleMilestoneRequest = {
  milestoneId: string;
  requestBody?: UpdateLifecycleMilestoneRequestBody | undefined;
};

/** @internal */
export const UpdateLifecycleMilestoneRequestBody$inboundSchema: z.ZodType<
  UpdateLifecycleMilestoneRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  position: z.number().int().optional(),
  required_at_milestone_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "required_at_milestone_id": "requiredAtMilestoneId",
  });
});

/** @internal */
export type UpdateLifecycleMilestoneRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  position?: number | undefined;
  required_at_milestone_id?: string | undefined;
};

/** @internal */
export const UpdateLifecycleMilestoneRequestBody$outboundSchema: z.ZodType<
  UpdateLifecycleMilestoneRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateLifecycleMilestoneRequestBody
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  slug: z.string().optional(),
  position: z.number().int().optional(),
  requiredAtMilestoneId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requiredAtMilestoneId: "required_at_milestone_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLifecycleMilestoneRequestBody$ {
  /** @deprecated use `UpdateLifecycleMilestoneRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateLifecycleMilestoneRequestBody$inboundSchema;
  /** @deprecated use `UpdateLifecycleMilestoneRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateLifecycleMilestoneRequestBody$outboundSchema;
  /** @deprecated use `UpdateLifecycleMilestoneRequestBody$Outbound` instead. */
  export type Outbound = UpdateLifecycleMilestoneRequestBody$Outbound;
}

export function updateLifecycleMilestoneRequestBodyToJSON(
  updateLifecycleMilestoneRequestBody: UpdateLifecycleMilestoneRequestBody,
): string {
  return JSON.stringify(
    UpdateLifecycleMilestoneRequestBody$outboundSchema.parse(
      updateLifecycleMilestoneRequestBody,
    ),
  );
}

export function updateLifecycleMilestoneRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLifecycleMilestoneRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateLifecycleMilestoneRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLifecycleMilestoneRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateLifecycleMilestoneRequest$inboundSchema: z.ZodType<
  UpdateLifecycleMilestoneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  milestone_id: z.string(),
  RequestBody: z.lazy(() => UpdateLifecycleMilestoneRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "milestone_id": "milestoneId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateLifecycleMilestoneRequest$Outbound = {
  milestone_id: string;
  RequestBody?: UpdateLifecycleMilestoneRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateLifecycleMilestoneRequest$outboundSchema: z.ZodType<
  UpdateLifecycleMilestoneRequest$Outbound,
  z.ZodTypeDef,
  UpdateLifecycleMilestoneRequest
> = z.object({
  milestoneId: z.string(),
  requestBody: z.lazy(() => UpdateLifecycleMilestoneRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    milestoneId: "milestone_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLifecycleMilestoneRequest$ {
  /** @deprecated use `UpdateLifecycleMilestoneRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateLifecycleMilestoneRequest$inboundSchema;
  /** @deprecated use `UpdateLifecycleMilestoneRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateLifecycleMilestoneRequest$outboundSchema;
  /** @deprecated use `UpdateLifecycleMilestoneRequest$Outbound` instead. */
  export type Outbound = UpdateLifecycleMilestoneRequest$Outbound;
}

export function updateLifecycleMilestoneRequestToJSON(
  updateLifecycleMilestoneRequest: UpdateLifecycleMilestoneRequest,
): string {
  return JSON.stringify(
    UpdateLifecycleMilestoneRequest$outboundSchema.parse(
      updateLifecycleMilestoneRequest,
    ),
  );
}

export function updateLifecycleMilestoneRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLifecycleMilestoneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLifecycleMilestoneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLifecycleMilestoneRequest' from JSON`,
  );
}
