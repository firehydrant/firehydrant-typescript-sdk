/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNuncComponentGroupRequestBody = {
  name?: string | null | undefined;
  componentGroupId?: string | null | undefined;
  position?: number | null | undefined;
};

export type UpdateNuncComponentGroupRequest = {
  nuncConnectionId: string;
  groupId: string;
  requestBody?: UpdateNuncComponentGroupRequestBody | undefined;
};

/** @internal */
export const UpdateNuncComponentGroupRequestBody$inboundSchema: z.ZodType<
  UpdateNuncComponentGroupRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  component_group_id: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "component_group_id": "componentGroupId",
  });
});

/** @internal */
export type UpdateNuncComponentGroupRequestBody$Outbound = {
  name?: string | null | undefined;
  component_group_id?: string | null | undefined;
  position?: number | null | undefined;
};

/** @internal */
export const UpdateNuncComponentGroupRequestBody$outboundSchema: z.ZodType<
  UpdateNuncComponentGroupRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateNuncComponentGroupRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  componentGroupId: z.nullable(z.string()).optional(),
  position: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    componentGroupId: "component_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncComponentGroupRequestBody$ {
  /** @deprecated use `UpdateNuncComponentGroupRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateNuncComponentGroupRequestBody$inboundSchema;
  /** @deprecated use `UpdateNuncComponentGroupRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateNuncComponentGroupRequestBody$outboundSchema;
  /** @deprecated use `UpdateNuncComponentGroupRequestBody$Outbound` instead. */
  export type Outbound = UpdateNuncComponentGroupRequestBody$Outbound;
}

export function updateNuncComponentGroupRequestBodyToJSON(
  updateNuncComponentGroupRequestBody: UpdateNuncComponentGroupRequestBody,
): string {
  return JSON.stringify(
    UpdateNuncComponentGroupRequestBody$outboundSchema.parse(
      updateNuncComponentGroupRequestBody,
    ),
  );
}

export function updateNuncComponentGroupRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncComponentGroupRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateNuncComponentGroupRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncComponentGroupRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateNuncComponentGroupRequest$inboundSchema: z.ZodType<
  UpdateNuncComponentGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  group_id: z.string(),
  RequestBody: z.lazy(() => UpdateNuncComponentGroupRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "group_id": "groupId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateNuncComponentGroupRequest$Outbound = {
  nunc_connection_id: string;
  group_id: string;
  RequestBody?: UpdateNuncComponentGroupRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateNuncComponentGroupRequest$outboundSchema: z.ZodType<
  UpdateNuncComponentGroupRequest$Outbound,
  z.ZodTypeDef,
  UpdateNuncComponentGroupRequest
> = z.object({
  nuncConnectionId: z.string(),
  groupId: z.string(),
  requestBody: z.lazy(() => UpdateNuncComponentGroupRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    groupId: "group_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncComponentGroupRequest$ {
  /** @deprecated use `UpdateNuncComponentGroupRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncComponentGroupRequest$inboundSchema;
  /** @deprecated use `UpdateNuncComponentGroupRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncComponentGroupRequest$outboundSchema;
  /** @deprecated use `UpdateNuncComponentGroupRequest$Outbound` instead. */
  export type Outbound = UpdateNuncComponentGroupRequest$Outbound;
}

export function updateNuncComponentGroupRequestToJSON(
  updateNuncComponentGroupRequest: UpdateNuncComponentGroupRequest,
): string {
  return JSON.stringify(
    UpdateNuncComponentGroupRequest$outboundSchema.parse(
      updateNuncComponentGroupRequest,
    ),
  );
}

export function updateNuncComponentGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncComponentGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncComponentGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncComponentGroupRequest' from JSON`,
  );
}
