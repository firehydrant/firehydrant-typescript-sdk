/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSeverityMatrixConditionRequest = {
  conditionId: string;
};

/** @internal */
export const DeleteSeverityMatrixConditionRequest$inboundSchema: z.ZodType<
  DeleteSeverityMatrixConditionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "condition_id": "conditionId",
  });
});

/** @internal */
export type DeleteSeverityMatrixConditionRequest$Outbound = {
  condition_id: string;
};

/** @internal */
export const DeleteSeverityMatrixConditionRequest$outboundSchema: z.ZodType<
  DeleteSeverityMatrixConditionRequest$Outbound,
  z.ZodTypeDef,
  DeleteSeverityMatrixConditionRequest
> = z.object({
  conditionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conditionId: "condition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSeverityMatrixConditionRequest$ {
  /** @deprecated use `DeleteSeverityMatrixConditionRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteSeverityMatrixConditionRequest$inboundSchema;
  /** @deprecated use `DeleteSeverityMatrixConditionRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteSeverityMatrixConditionRequest$outboundSchema;
  /** @deprecated use `DeleteSeverityMatrixConditionRequest$Outbound` instead. */
  export type Outbound = DeleteSeverityMatrixConditionRequest$Outbound;
}

export function deleteSeverityMatrixConditionRequestToJSON(
  deleteSeverityMatrixConditionRequest: DeleteSeverityMatrixConditionRequest,
): string {
  return JSON.stringify(
    DeleteSeverityMatrixConditionRequest$outboundSchema.parse(
      deleteSeverityMatrixConditionRequest,
    ),
  );
}

export function deleteSeverityMatrixConditionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSeverityMatrixConditionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteSeverityMatrixConditionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSeverityMatrixConditionRequest' from JSON`,
  );
}
