/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateIncidentAlertsRequest = {
  incidentId: string;
  /**
   * Array of alert IDs to be assigned to the incident
   */
  requestBody: Array<string>;
};

/** @internal */
export const CreateIncidentAlertsRequest$inboundSchema: z.ZodType<
  CreateIncidentAlertsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateIncidentAlertsRequest$Outbound = {
  incident_id: string;
  RequestBody: Array<string>;
};

/** @internal */
export const CreateIncidentAlertsRequest$outboundSchema: z.ZodType<
  CreateIncidentAlertsRequest$Outbound,
  z.ZodTypeDef,
  CreateIncidentAlertsRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentAlertsRequest$ {
  /** @deprecated use `CreateIncidentAlertsRequest$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentAlertsRequest$inboundSchema;
  /** @deprecated use `CreateIncidentAlertsRequest$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentAlertsRequest$outboundSchema;
  /** @deprecated use `CreateIncidentAlertsRequest$Outbound` instead. */
  export type Outbound = CreateIncidentAlertsRequest$Outbound;
}

export function createIncidentAlertsRequestToJSON(
  createIncidentAlertsRequest: CreateIncidentAlertsRequest,
): string {
  return JSON.stringify(
    CreateIncidentAlertsRequest$outboundSchema.parse(
      createIncidentAlertsRequest,
    ),
  );
}

export function createIncidentAlertsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentAlertsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentAlertsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentAlertsRequest' from JSON`,
  );
}
