/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNuncImageFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type UpdateNuncImageRequestBody = {
  file?: UpdateNuncImageFile | Blob | undefined;
};

export type UpdateNuncImageRequest = {
  nuncConnectionId: string;
  type: string;
  requestBody?: UpdateNuncImageRequestBody | undefined;
};

/** @internal */
export const UpdateNuncImageFile$inboundSchema: z.ZodType<
  UpdateNuncImageFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type UpdateNuncImageFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UpdateNuncImageFile$outboundSchema: z.ZodType<
  UpdateNuncImageFile$Outbound,
  z.ZodTypeDef,
  UpdateNuncImageFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncImageFile$ {
  /** @deprecated use `UpdateNuncImageFile$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncImageFile$inboundSchema;
  /** @deprecated use `UpdateNuncImageFile$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncImageFile$outboundSchema;
  /** @deprecated use `UpdateNuncImageFile$Outbound` instead. */
  export type Outbound = UpdateNuncImageFile$Outbound;
}

export function updateNuncImageFileToJSON(
  updateNuncImageFile: UpdateNuncImageFile,
): string {
  return JSON.stringify(
    UpdateNuncImageFile$outboundSchema.parse(updateNuncImageFile),
  );
}

export function updateNuncImageFileFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncImageFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncImageFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncImageFile' from JSON`,
  );
}

/** @internal */
export const UpdateNuncImageRequestBody$inboundSchema: z.ZodType<
  UpdateNuncImageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => UpdateNuncImageFile$inboundSchema).optional(),
});

/** @internal */
export type UpdateNuncImageRequestBody$Outbound = {
  file?: UpdateNuncImageFile$Outbound | Blob | undefined;
};

/** @internal */
export const UpdateNuncImageRequestBody$outboundSchema: z.ZodType<
  UpdateNuncImageRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateNuncImageRequestBody
> = z.object({
  file: z.lazy(() => UpdateNuncImageFile$outboundSchema).or(blobLikeSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncImageRequestBody$ {
  /** @deprecated use `UpdateNuncImageRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncImageRequestBody$inboundSchema;
  /** @deprecated use `UpdateNuncImageRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncImageRequestBody$outboundSchema;
  /** @deprecated use `UpdateNuncImageRequestBody$Outbound` instead. */
  export type Outbound = UpdateNuncImageRequestBody$Outbound;
}

export function updateNuncImageRequestBodyToJSON(
  updateNuncImageRequestBody: UpdateNuncImageRequestBody,
): string {
  return JSON.stringify(
    UpdateNuncImageRequestBody$outboundSchema.parse(updateNuncImageRequestBody),
  );
}

export function updateNuncImageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncImageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncImageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncImageRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateNuncImageRequest$inboundSchema: z.ZodType<
  UpdateNuncImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  type: z.string(),
  RequestBody: z.lazy(() => UpdateNuncImageRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateNuncImageRequest$Outbound = {
  nunc_connection_id: string;
  type: string;
  RequestBody?: UpdateNuncImageRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateNuncImageRequest$outboundSchema: z.ZodType<
  UpdateNuncImageRequest$Outbound,
  z.ZodTypeDef,
  UpdateNuncImageRequest
> = z.object({
  nuncConnectionId: z.string(),
  type: z.string(),
  requestBody: z.lazy(() => UpdateNuncImageRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncImageRequest$ {
  /** @deprecated use `UpdateNuncImageRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncImageRequest$inboundSchema;
  /** @deprecated use `UpdateNuncImageRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncImageRequest$outboundSchema;
  /** @deprecated use `UpdateNuncImageRequest$Outbound` instead. */
  export type Outbound = UpdateNuncImageRequest$Outbound;
}

export function updateNuncImageRequestToJSON(
  updateNuncImageRequest: UpdateNuncImageRequest,
): string {
  return JSON.stringify(
    UpdateNuncImageRequest$outboundSchema.parse(updateNuncImageRequest),
  );
}

export function updateNuncImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncImageRequest' from JSON`,
  );
}
