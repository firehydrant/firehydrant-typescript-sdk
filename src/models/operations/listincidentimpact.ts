/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PathParamType = {
  Environments: "environments",
  Functionalities: "functionalities",
  Services: "services",
  Customers: "customers",
} as const;
export type PathParamType = ClosedEnum<typeof PathParamType>;

export type ListIncidentImpactRequest = {
  incidentId: string;
  type: PathParamType;
};

/** @internal */
export const PathParamType$inboundSchema: z.ZodNativeEnum<
  typeof PathParamType
> = z.nativeEnum(PathParamType);

/** @internal */
export const PathParamType$outboundSchema: z.ZodNativeEnum<
  typeof PathParamType
> = PathParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PathParamType$ {
  /** @deprecated use `PathParamType$inboundSchema` instead. */
  export const inboundSchema = PathParamType$inboundSchema;
  /** @deprecated use `PathParamType$outboundSchema` instead. */
  export const outboundSchema = PathParamType$outboundSchema;
}

/** @internal */
export const ListIncidentImpactRequest$inboundSchema: z.ZodType<
  ListIncidentImpactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  type: PathParamType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
  });
});

/** @internal */
export type ListIncidentImpactRequest$Outbound = {
  incident_id: string;
  type: string;
};

/** @internal */
export const ListIncidentImpactRequest$outboundSchema: z.ZodType<
  ListIncidentImpactRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentImpactRequest
> = z.object({
  incidentId: z.string(),
  type: PathParamType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentImpactRequest$ {
  /** @deprecated use `ListIncidentImpactRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentImpactRequest$inboundSchema;
  /** @deprecated use `ListIncidentImpactRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentImpactRequest$outboundSchema;
  /** @deprecated use `ListIncidentImpactRequest$Outbound` instead. */
  export type Outbound = ListIncidentImpactRequest$Outbound;
}

export function listIncidentImpactRequestToJSON(
  listIncidentImpactRequest: ListIncidentImpactRequest,
): string {
  return JSON.stringify(
    ListIncidentImpactRequest$outboundSchema.parse(listIncidentImpactRequest),
  );
}

export function listIncidentImpactRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentImpactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentImpactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentImpactRequest' from JSON`,
  );
}
