/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListIncidentImpactsType = {
  Environments: "environments",
  Functionalities: "functionalities",
  Services: "services",
  Customers: "customers",
} as const;
export type ListIncidentImpactsType = ClosedEnum<
  typeof ListIncidentImpactsType
>;

export type ListIncidentImpactsRequest = {
  incidentId: string;
  type: ListIncidentImpactsType;
};

/** @internal */
export const ListIncidentImpactsType$inboundSchema: z.ZodNativeEnum<
  typeof ListIncidentImpactsType
> = z.nativeEnum(ListIncidentImpactsType);

/** @internal */
export const ListIncidentImpactsType$outboundSchema: z.ZodNativeEnum<
  typeof ListIncidentImpactsType
> = ListIncidentImpactsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentImpactsType$ {
  /** @deprecated use `ListIncidentImpactsType$inboundSchema` instead. */
  export const inboundSchema = ListIncidentImpactsType$inboundSchema;
  /** @deprecated use `ListIncidentImpactsType$outboundSchema` instead. */
  export const outboundSchema = ListIncidentImpactsType$outboundSchema;
}

/** @internal */
export const ListIncidentImpactsRequest$inboundSchema: z.ZodType<
  ListIncidentImpactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  type: ListIncidentImpactsType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
  });
});

/** @internal */
export type ListIncidentImpactsRequest$Outbound = {
  incident_id: string;
  type: string;
};

/** @internal */
export const ListIncidentImpactsRequest$outboundSchema: z.ZodType<
  ListIncidentImpactsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentImpactsRequest
> = z.object({
  incidentId: z.string(),
  type: ListIncidentImpactsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentImpactsRequest$ {
  /** @deprecated use `ListIncidentImpactsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentImpactsRequest$inboundSchema;
  /** @deprecated use `ListIncidentImpactsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentImpactsRequest$outboundSchema;
  /** @deprecated use `ListIncidentImpactsRequest$Outbound` instead. */
  export type Outbound = ListIncidentImpactsRequest$Outbound;
}

export function listIncidentImpactsRequestToJSON(
  listIncidentImpactsRequest: ListIncidentImpactsRequest,
): string {
  return JSON.stringify(
    ListIncidentImpactsRequest$outboundSchema.parse(listIncidentImpactsRequest),
  );
}

export function listIncidentImpactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentImpactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentImpactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentImpactsRequest' from JSON`,
  );
}
