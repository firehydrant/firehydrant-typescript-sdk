/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateChangeRequest = {
  changeId: string;
  updateChange: components.UpdateChange;
};

/** @internal */
export const UpdateChangeRequest$inboundSchema: z.ZodType<
  UpdateChangeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  change_id: z.string(),
  update_change: z.lazy(() => components.UpdateChange$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "change_id": "changeId",
    "update_change": "updateChange",
  });
});

/** @internal */
export type UpdateChangeRequest$Outbound = {
  change_id: string;
  update_change: components.UpdateChange$Outbound;
};

/** @internal */
export const UpdateChangeRequest$outboundSchema: z.ZodType<
  UpdateChangeRequest$Outbound,
  z.ZodTypeDef,
  UpdateChangeRequest
> = z.object({
  changeId: z.string(),
  updateChange: z.lazy(() => components.UpdateChange$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    changeId: "change_id",
    updateChange: "update_change",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChangeRequest$ {
  /** @deprecated use `UpdateChangeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateChangeRequest$inboundSchema;
  /** @deprecated use `UpdateChangeRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateChangeRequest$outboundSchema;
  /** @deprecated use `UpdateChangeRequest$Outbound` instead. */
  export type Outbound = UpdateChangeRequest$Outbound;
}

export function updateChangeRequestToJSON(
  updateChangeRequest: UpdateChangeRequest,
): string {
  return JSON.stringify(
    UpdateChangeRequest$outboundSchema.parse(updateChangeRequest),
  );
}

export function updateChangeRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChangeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChangeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChangeRequest' from JSON`,
  );
}
