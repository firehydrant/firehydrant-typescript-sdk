/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateRetrospectiveTemplateFieldsType = {
  Text: "text",
  SingleSelect: "single_select",
  MultiSelect: "multi_select",
  Numeric: "numeric",
  Datetime: "datetime",
  DynamicInputGroup: "dynamic_input_group",
  Markdown: "markdown",
  MarkdownText: "markdown_text",
} as const;
export type UpdateRetrospectiveTemplateFieldsType = ClosedEnum<
  typeof UpdateRetrospectiveTemplateFieldsType
>;

export type UpdateRetrospectiveTemplateRequestBody = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  isDefault?: boolean | null | undefined;
  sectionsSlug: Array<string>;
  sectionsElements: Array<string>;
  fieldsId?: Array<string> | null | undefined;
  fieldsLabel: Array<string>;
  fieldsType: Array<UpdateRetrospectiveTemplateFieldsType>;
  fieldsHelpText?: Array<string> | null | undefined;
  fieldsPermissibleValues?: Array<string> | null | undefined;
  fieldsIsRequired?: Array<boolean> | null | undefined;
  fieldsRequiredAtMilestoneId?: Array<string> | null | undefined;
  fieldsSchema?: Array<string> | null | undefined;
};

export type UpdateRetrospectiveTemplateRequest = {
  retrospectiveTemplateId: string;
  requestBody: UpdateRetrospectiveTemplateRequestBody;
};

/** @internal */
export const UpdateRetrospectiveTemplateFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateRetrospectiveTemplateFieldsType> = z.nativeEnum(
    UpdateRetrospectiveTemplateFieldsType,
  );

/** @internal */
export const UpdateRetrospectiveTemplateFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateRetrospectiveTemplateFieldsType> =
    UpdateRetrospectiveTemplateFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRetrospectiveTemplateFieldsType$ {
  /** @deprecated use `UpdateRetrospectiveTemplateFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateRetrospectiveTemplateFieldsType$inboundSchema;
  /** @deprecated use `UpdateRetrospectiveTemplateFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRetrospectiveTemplateFieldsType$outboundSchema;
}

/** @internal */
export const UpdateRetrospectiveTemplateRequestBody$inboundSchema: z.ZodType<
  UpdateRetrospectiveTemplateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  is_default: z.nullable(z.boolean()).optional(),
  "sections[slug]": z.array(z.string()),
  "sections[elements]": z.array(z.string()),
  "fields[id]": z.nullable(z.array(z.string())).optional(),
  "fields[label]": z.array(z.string()),
  "fields[type]": z.array(UpdateRetrospectiveTemplateFieldsType$inboundSchema),
  "fields[help_text]": z.nullable(z.array(z.string())).optional(),
  "fields[permissible_values]": z.nullable(z.array(z.string())).optional(),
  "fields[is_required]": z.nullable(z.array(z.boolean())).optional(),
  "fields[required_at_milestone_id]": z.nullable(z.array(z.string()))
    .optional(),
  "fields[schema]": z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_default": "isDefault",
    "sections[slug]": "sectionsSlug",
    "sections[elements]": "sectionsElements",
    "fields[id]": "fieldsId",
    "fields[label]": "fieldsLabel",
    "fields[type]": "fieldsType",
    "fields[help_text]": "fieldsHelpText",
    "fields[permissible_values]": "fieldsPermissibleValues",
    "fields[is_required]": "fieldsIsRequired",
    "fields[required_at_milestone_id]": "fieldsRequiredAtMilestoneId",
    "fields[schema]": "fieldsSchema",
  });
});

/** @internal */
export type UpdateRetrospectiveTemplateRequestBody$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  is_default?: boolean | null | undefined;
  "sections[slug]": Array<string>;
  "sections[elements]": Array<string>;
  "fields[id]"?: Array<string> | null | undefined;
  "fields[label]": Array<string>;
  "fields[type]": Array<string>;
  "fields[help_text]"?: Array<string> | null | undefined;
  "fields[permissible_values]"?: Array<string> | null | undefined;
  "fields[is_required]"?: Array<boolean> | null | undefined;
  "fields[required_at_milestone_id]"?: Array<string> | null | undefined;
  "fields[schema]"?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateRetrospectiveTemplateRequestBody$outboundSchema: z.ZodType<
  UpdateRetrospectiveTemplateRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateRetrospectiveTemplateRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  isDefault: z.nullable(z.boolean()).optional(),
  sectionsSlug: z.array(z.string()),
  sectionsElements: z.array(z.string()),
  fieldsId: z.nullable(z.array(z.string())).optional(),
  fieldsLabel: z.array(z.string()),
  fieldsType: z.array(UpdateRetrospectiveTemplateFieldsType$outboundSchema),
  fieldsHelpText: z.nullable(z.array(z.string())).optional(),
  fieldsPermissibleValues: z.nullable(z.array(z.string())).optional(),
  fieldsIsRequired: z.nullable(z.array(z.boolean())).optional(),
  fieldsRequiredAtMilestoneId: z.nullable(z.array(z.string())).optional(),
  fieldsSchema: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    isDefault: "is_default",
    sectionsSlug: "sections[slug]",
    sectionsElements: "sections[elements]",
    fieldsId: "fields[id]",
    fieldsLabel: "fields[label]",
    fieldsType: "fields[type]",
    fieldsHelpText: "fields[help_text]",
    fieldsPermissibleValues: "fields[permissible_values]",
    fieldsIsRequired: "fields[is_required]",
    fieldsRequiredAtMilestoneId: "fields[required_at_milestone_id]",
    fieldsSchema: "fields[schema]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRetrospectiveTemplateRequestBody$ {
  /** @deprecated use `UpdateRetrospectiveTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateRetrospectiveTemplateRequestBody$inboundSchema;
  /** @deprecated use `UpdateRetrospectiveTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRetrospectiveTemplateRequestBody$outboundSchema;
  /** @deprecated use `UpdateRetrospectiveTemplateRequestBody$Outbound` instead. */
  export type Outbound = UpdateRetrospectiveTemplateRequestBody$Outbound;
}

export function updateRetrospectiveTemplateRequestBodyToJSON(
  updateRetrospectiveTemplateRequestBody:
    UpdateRetrospectiveTemplateRequestBody,
): string {
  return JSON.stringify(
    UpdateRetrospectiveTemplateRequestBody$outboundSchema.parse(
      updateRetrospectiveTemplateRequestBody,
    ),
  );
}

export function updateRetrospectiveTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRetrospectiveTemplateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateRetrospectiveTemplateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRetrospectiveTemplateRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateRetrospectiveTemplateRequest$inboundSchema: z.ZodType<
  UpdateRetrospectiveTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrospective_template_id: z.string(),
  RequestBody: z.lazy(() =>
    UpdateRetrospectiveTemplateRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "retrospective_template_id": "retrospectiveTemplateId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateRetrospectiveTemplateRequest$Outbound = {
  retrospective_template_id: string;
  RequestBody: UpdateRetrospectiveTemplateRequestBody$Outbound;
};

/** @internal */
export const UpdateRetrospectiveTemplateRequest$outboundSchema: z.ZodType<
  UpdateRetrospectiveTemplateRequest$Outbound,
  z.ZodTypeDef,
  UpdateRetrospectiveTemplateRequest
> = z.object({
  retrospectiveTemplateId: z.string(),
  requestBody: z.lazy(() =>
    UpdateRetrospectiveTemplateRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    retrospectiveTemplateId: "retrospective_template_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRetrospectiveTemplateRequest$ {
  /** @deprecated use `UpdateRetrospectiveTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRetrospectiveTemplateRequest$inboundSchema;
  /** @deprecated use `UpdateRetrospectiveTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRetrospectiveTemplateRequest$outboundSchema;
  /** @deprecated use `UpdateRetrospectiveTemplateRequest$Outbound` instead. */
  export type Outbound = UpdateRetrospectiveTemplateRequest$Outbound;
}

export function updateRetrospectiveTemplateRequestToJSON(
  updateRetrospectiveTemplateRequest: UpdateRetrospectiveTemplateRequest,
): string {
  return JSON.stringify(
    UpdateRetrospectiveTemplateRequest$outboundSchema.parse(
      updateRetrospectiveTemplateRequest,
    ),
  );
}

export function updateRetrospectiveTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRetrospectiveTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateRetrospectiveTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRetrospectiveTemplateRequest' from JSON`,
  );
}
