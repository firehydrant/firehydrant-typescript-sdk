/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMeasurementDefinitionRequest = {
  measurementDefinitionId: string;
};

/** @internal */
export const DeleteMeasurementDefinitionRequest$inboundSchema: z.ZodType<
  DeleteMeasurementDefinitionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  measurement_definition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "measurement_definition_id": "measurementDefinitionId",
  });
});

/** @internal */
export type DeleteMeasurementDefinitionRequest$Outbound = {
  measurement_definition_id: string;
};

/** @internal */
export const DeleteMeasurementDefinitionRequest$outboundSchema: z.ZodType<
  DeleteMeasurementDefinitionRequest$Outbound,
  z.ZodTypeDef,
  DeleteMeasurementDefinitionRequest
> = z.object({
  measurementDefinitionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    measurementDefinitionId: "measurement_definition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMeasurementDefinitionRequest$ {
  /** @deprecated use `DeleteMeasurementDefinitionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMeasurementDefinitionRequest$inboundSchema;
  /** @deprecated use `DeleteMeasurementDefinitionRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMeasurementDefinitionRequest$outboundSchema;
  /** @deprecated use `DeleteMeasurementDefinitionRequest$Outbound` instead. */
  export type Outbound = DeleteMeasurementDefinitionRequest$Outbound;
}

export function deleteMeasurementDefinitionRequestToJSON(
  deleteMeasurementDefinitionRequest: DeleteMeasurementDefinitionRequest,
): string {
  return JSON.stringify(
    DeleteMeasurementDefinitionRequest$outboundSchema.parse(
      deleteMeasurementDefinitionRequest,
    ),
  );
}

export function deleteMeasurementDefinitionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMeasurementDefinitionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMeasurementDefinitionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMeasurementDefinitionRequest' from JSON`,
  );
}
