/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSlackEmojiActionRequest = {
  /**
   * Slack Connection UUID
   */
  connectionId: string;
  emojiActionId: string;
};

/** @internal */
export const GetSlackEmojiActionRequest$inboundSchema: z.ZodType<
  GetSlackEmojiActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  emoji_action_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "emoji_action_id": "emojiActionId",
  });
});

/** @internal */
export type GetSlackEmojiActionRequest$Outbound = {
  connection_id: string;
  emoji_action_id: string;
};

/** @internal */
export const GetSlackEmojiActionRequest$outboundSchema: z.ZodType<
  GetSlackEmojiActionRequest$Outbound,
  z.ZodTypeDef,
  GetSlackEmojiActionRequest
> = z.object({
  connectionId: z.string(),
  emojiActionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    emojiActionId: "emoji_action_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSlackEmojiActionRequest$ {
  /** @deprecated use `GetSlackEmojiActionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSlackEmojiActionRequest$inboundSchema;
  /** @deprecated use `GetSlackEmojiActionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSlackEmojiActionRequest$outboundSchema;
  /** @deprecated use `GetSlackEmojiActionRequest$Outbound` instead. */
  export type Outbound = GetSlackEmojiActionRequest$Outbound;
}

export function getSlackEmojiActionRequestToJSON(
  getSlackEmojiActionRequest: GetSlackEmojiActionRequest,
): string {
  return JSON.stringify(
    GetSlackEmojiActionRequest$outboundSchema.parse(getSlackEmojiActionRequest),
  );
}

export function getSlackEmojiActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSlackEmojiActionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSlackEmojiActionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSlackEmojiActionRequest' from JSON`,
  );
}
