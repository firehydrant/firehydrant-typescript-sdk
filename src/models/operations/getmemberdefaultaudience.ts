/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMemberDefaultAudienceRequest = {
  memberId: number;
};

/** @internal */
export const GetMemberDefaultAudienceRequest$inboundSchema: z.ZodType<
  GetMemberDefaultAudienceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  member_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "member_id": "memberId",
  });
});

/** @internal */
export type GetMemberDefaultAudienceRequest$Outbound = {
  member_id: number;
};

/** @internal */
export const GetMemberDefaultAudienceRequest$outboundSchema: z.ZodType<
  GetMemberDefaultAudienceRequest$Outbound,
  z.ZodTypeDef,
  GetMemberDefaultAudienceRequest
> = z.object({
  memberId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    memberId: "member_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberDefaultAudienceRequest$ {
  /** @deprecated use `GetMemberDefaultAudienceRequest$inboundSchema` instead. */
  export const inboundSchema = GetMemberDefaultAudienceRequest$inboundSchema;
  /** @deprecated use `GetMemberDefaultAudienceRequest$outboundSchema` instead. */
  export const outboundSchema = GetMemberDefaultAudienceRequest$outboundSchema;
  /** @deprecated use `GetMemberDefaultAudienceRequest$Outbound` instead. */
  export type Outbound = GetMemberDefaultAudienceRequest$Outbound;
}

export function getMemberDefaultAudienceRequestToJSON(
  getMemberDefaultAudienceRequest: GetMemberDefaultAudienceRequest,
): string {
  return JSON.stringify(
    GetMemberDefaultAudienceRequest$outboundSchema.parse(
      getMemberDefaultAudienceRequest,
    ),
  );
}

export function getMemberDefaultAudienceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMemberDefaultAudienceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMemberDefaultAudienceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMemberDefaultAudienceRequest' from JSON`,
  );
}
