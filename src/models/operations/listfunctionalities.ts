/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFunctionalitiesRequest = {
  /**
   * A query to search functionalities by their name or description
   */
  query?: string | null | undefined;
  /**
   * A query to search functionalities by their name
   */
  name?: string | null | undefined;
  /**
   * A query to search services by if they are impacted with active incidents
   */
  impacted?: string | null | undefined;
  /**
   * A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value
   */
  labels?: string | null | undefined;
  /**
   * A query to search functionalities by their owning team ID
   */
  owner?: string | null | undefined;
  /**
   * Boolean to determine whether to return a slimified version of the functionalities object
   */
  lite?: boolean | null | undefined;
  page?: number | null | undefined;
  perPage?: number | null | undefined;
};

/** @internal */
export const ListFunctionalitiesRequest$inboundSchema: z.ZodType<
  ListFunctionalitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  impacted: z.nullable(z.string()).optional(),
  labels: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()).optional(),
  lite: z.nullable(z.boolean()).optional(),
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
  });
});

/** @internal */
export type ListFunctionalitiesRequest$Outbound = {
  query?: string | null | undefined;
  name?: string | null | undefined;
  impacted?: string | null | undefined;
  labels?: string | null | undefined;
  owner?: string | null | undefined;
  lite?: boolean | null | undefined;
  page?: number | null | undefined;
  per_page?: number | null | undefined;
};

/** @internal */
export const ListFunctionalitiesRequest$outboundSchema: z.ZodType<
  ListFunctionalitiesRequest$Outbound,
  z.ZodTypeDef,
  ListFunctionalitiesRequest
> = z.object({
  query: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  impacted: z.nullable(z.string()).optional(),
  labels: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()).optional(),
  lite: z.nullable(z.boolean()).optional(),
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFunctionalitiesRequest$ {
  /** @deprecated use `ListFunctionalitiesRequest$inboundSchema` instead. */
  export const inboundSchema = ListFunctionalitiesRequest$inboundSchema;
  /** @deprecated use `ListFunctionalitiesRequest$outboundSchema` instead. */
  export const outboundSchema = ListFunctionalitiesRequest$outboundSchema;
  /** @deprecated use `ListFunctionalitiesRequest$Outbound` instead. */
  export type Outbound = ListFunctionalitiesRequest$Outbound;
}

export function listFunctionalitiesRequestToJSON(
  listFunctionalitiesRequest: ListFunctionalitiesRequest,
): string {
  return JSON.stringify(
    ListFunctionalitiesRequest$outboundSchema.parse(listFunctionalitiesRequest),
  );
}

export function listFunctionalitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFunctionalitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFunctionalitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFunctionalitiesRequest' from JSON`,
  );
}
