/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteLifecycleMeasurementDefinitionRequest = {
  measurementDefinitionId: string;
};

/** @internal */
export const DeleteLifecycleMeasurementDefinitionRequest$inboundSchema:
  z.ZodType<
    DeleteLifecycleMeasurementDefinitionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    measurement_definition_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "measurement_definition_id": "measurementDefinitionId",
    });
  });

/** @internal */
export type DeleteLifecycleMeasurementDefinitionRequest$Outbound = {
  measurement_definition_id: string;
};

/** @internal */
export const DeleteLifecycleMeasurementDefinitionRequest$outboundSchema:
  z.ZodType<
    DeleteLifecycleMeasurementDefinitionRequest$Outbound,
    z.ZodTypeDef,
    DeleteLifecycleMeasurementDefinitionRequest
  > = z.object({
    measurementDefinitionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      measurementDefinitionId: "measurement_definition_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLifecycleMeasurementDefinitionRequest$ {
  /** @deprecated use `DeleteLifecycleMeasurementDefinitionRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteLifecycleMeasurementDefinitionRequest$inboundSchema;
  /** @deprecated use `DeleteLifecycleMeasurementDefinitionRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteLifecycleMeasurementDefinitionRequest$outboundSchema;
  /** @deprecated use `DeleteLifecycleMeasurementDefinitionRequest$Outbound` instead. */
  export type Outbound = DeleteLifecycleMeasurementDefinitionRequest$Outbound;
}

export function deleteLifecycleMeasurementDefinitionRequestToJSON(
  deleteLifecycleMeasurementDefinitionRequest:
    DeleteLifecycleMeasurementDefinitionRequest,
): string {
  return JSON.stringify(
    DeleteLifecycleMeasurementDefinitionRequest$outboundSchema.parse(
      deleteLifecycleMeasurementDefinitionRequest,
    ),
  );
}

export function deleteLifecycleMeasurementDefinitionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteLifecycleMeasurementDefinitionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteLifecycleMeasurementDefinitionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteLifecycleMeasurementDefinitionRequest' from JSON`,
  );
}
