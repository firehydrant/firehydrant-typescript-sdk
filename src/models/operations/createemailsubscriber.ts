/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateEmailSubscriberRequestBody = {
  /**
   * A comma-separated list of emails to subscribe.
   */
  emails: string;
};

export type CreateEmailSubscriberRequest = {
  nuncConnectionId: string;
  requestBody: CreateEmailSubscriberRequestBody;
};

/** @internal */
export const CreateEmailSubscriberRequestBody$inboundSchema: z.ZodType<
  CreateEmailSubscriberRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  emails: z.string(),
});

/** @internal */
export type CreateEmailSubscriberRequestBody$Outbound = {
  emails: string;
};

/** @internal */
export const CreateEmailSubscriberRequestBody$outboundSchema: z.ZodType<
  CreateEmailSubscriberRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEmailSubscriberRequestBody
> = z.object({
  emails: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmailSubscriberRequestBody$ {
  /** @deprecated use `CreateEmailSubscriberRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEmailSubscriberRequestBody$inboundSchema;
  /** @deprecated use `CreateEmailSubscriberRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateEmailSubscriberRequestBody$outboundSchema;
  /** @deprecated use `CreateEmailSubscriberRequestBody$Outbound` instead. */
  export type Outbound = CreateEmailSubscriberRequestBody$Outbound;
}

export function createEmailSubscriberRequestBodyToJSON(
  createEmailSubscriberRequestBody: CreateEmailSubscriberRequestBody,
): string {
  return JSON.stringify(
    CreateEmailSubscriberRequestBody$outboundSchema.parse(
      createEmailSubscriberRequestBody,
    ),
  );
}

export function createEmailSubscriberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEmailSubscriberRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEmailSubscriberRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEmailSubscriberRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateEmailSubscriberRequest$inboundSchema: z.ZodType<
  CreateEmailSubscriberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  RequestBody: z.lazy(() => CreateEmailSubscriberRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateEmailSubscriberRequest$Outbound = {
  nunc_connection_id: string;
  RequestBody: CreateEmailSubscriberRequestBody$Outbound;
};

/** @internal */
export const CreateEmailSubscriberRequest$outboundSchema: z.ZodType<
  CreateEmailSubscriberRequest$Outbound,
  z.ZodTypeDef,
  CreateEmailSubscriberRequest
> = z.object({
  nuncConnectionId: z.string(),
  requestBody: z.lazy(() => CreateEmailSubscriberRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmailSubscriberRequest$ {
  /** @deprecated use `CreateEmailSubscriberRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEmailSubscriberRequest$inboundSchema;
  /** @deprecated use `CreateEmailSubscriberRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEmailSubscriberRequest$outboundSchema;
  /** @deprecated use `CreateEmailSubscriberRequest$Outbound` instead. */
  export type Outbound = CreateEmailSubscriberRequest$Outbound;
}

export function createEmailSubscriberRequestToJSON(
  createEmailSubscriberRequest: CreateEmailSubscriberRequest,
): string {
  return JSON.stringify(
    CreateEmailSubscriberRequest$outboundSchema.parse(
      createEmailSubscriberRequest,
    ),
  );
}

export function createEmailSubscriberRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEmailSubscriberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEmailSubscriberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEmailSubscriberRequest' from JSON`,
  );
}
