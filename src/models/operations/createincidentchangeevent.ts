/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateIncidentChangeEventRequest = {
  incidentId: string;
  createIncidentChangeEvent: components.CreateIncidentChangeEvent;
};

/** @internal */
export const CreateIncidentChangeEventRequest$inboundSchema: z.ZodType<
  CreateIncidentChangeEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  create_incident_change_event: z.lazy(() =>
    components.CreateIncidentChangeEvent$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "create_incident_change_event": "createIncidentChangeEvent",
  });
});

/** @internal */
export type CreateIncidentChangeEventRequest$Outbound = {
  incident_id: string;
  create_incident_change_event: components.CreateIncidentChangeEvent$Outbound;
};

/** @internal */
export const CreateIncidentChangeEventRequest$outboundSchema: z.ZodType<
  CreateIncidentChangeEventRequest$Outbound,
  z.ZodTypeDef,
  CreateIncidentChangeEventRequest
> = z.object({
  incidentId: z.string(),
  createIncidentChangeEvent: z.lazy(() =>
    components.CreateIncidentChangeEvent$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    createIncidentChangeEvent: "create_incident_change_event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentChangeEventRequest$ {
  /** @deprecated use `CreateIncidentChangeEventRequest$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentChangeEventRequest$inboundSchema;
  /** @deprecated use `CreateIncidentChangeEventRequest$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentChangeEventRequest$outboundSchema;
  /** @deprecated use `CreateIncidentChangeEventRequest$Outbound` instead. */
  export type Outbound = CreateIncidentChangeEventRequest$Outbound;
}

export function createIncidentChangeEventRequestToJSON(
  createIncidentChangeEventRequest: CreateIncidentChangeEventRequest,
): string {
  return JSON.stringify(
    CreateIncidentChangeEventRequest$outboundSchema.parse(
      createIncidentChangeEventRequest,
    ),
  );
}

export function createIncidentChangeEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentChangeEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentChangeEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentChangeEventRequest' from JSON`,
  );
}
