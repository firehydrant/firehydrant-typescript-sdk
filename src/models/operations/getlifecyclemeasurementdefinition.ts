/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetLifecycleMeasurementDefinitionRequest = {
  measurementDefinitionId: string;
};

/** @internal */
export const GetLifecycleMeasurementDefinitionRequest$inboundSchema: z.ZodType<
  GetLifecycleMeasurementDefinitionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  measurement_definition_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "measurement_definition_id": "measurementDefinitionId",
  });
});

/** @internal */
export type GetLifecycleMeasurementDefinitionRequest$Outbound = {
  measurement_definition_id: string;
};

/** @internal */
export const GetLifecycleMeasurementDefinitionRequest$outboundSchema: z.ZodType<
  GetLifecycleMeasurementDefinitionRequest$Outbound,
  z.ZodTypeDef,
  GetLifecycleMeasurementDefinitionRequest
> = z.object({
  measurementDefinitionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    measurementDefinitionId: "measurement_definition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLifecycleMeasurementDefinitionRequest$ {
  /** @deprecated use `GetLifecycleMeasurementDefinitionRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetLifecycleMeasurementDefinitionRequest$inboundSchema;
  /** @deprecated use `GetLifecycleMeasurementDefinitionRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetLifecycleMeasurementDefinitionRequest$outboundSchema;
  /** @deprecated use `GetLifecycleMeasurementDefinitionRequest$Outbound` instead. */
  export type Outbound = GetLifecycleMeasurementDefinitionRequest$Outbound;
}

export function getLifecycleMeasurementDefinitionRequestToJSON(
  getLifecycleMeasurementDefinitionRequest:
    GetLifecycleMeasurementDefinitionRequest,
): string {
  return JSON.stringify(
    GetLifecycleMeasurementDefinitionRequest$outboundSchema.parse(
      getLifecycleMeasurementDefinitionRequest,
    ),
  );
}

export function getLifecycleMeasurementDefinitionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetLifecycleMeasurementDefinitionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetLifecycleMeasurementDefinitionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetLifecycleMeasurementDefinitionRequest' from JSON`,
  );
}
