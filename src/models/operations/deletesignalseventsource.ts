/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSignalsEventSourceRequest = {
  transposerSlug: string;
};

/** @internal */
export const DeleteSignalsEventSourceRequest$inboundSchema: z.ZodType<
  DeleteSignalsEventSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transposer_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transposer_slug": "transposerSlug",
  });
});

/** @internal */
export type DeleteSignalsEventSourceRequest$Outbound = {
  transposer_slug: string;
};

/** @internal */
export const DeleteSignalsEventSourceRequest$outboundSchema: z.ZodType<
  DeleteSignalsEventSourceRequest$Outbound,
  z.ZodTypeDef,
  DeleteSignalsEventSourceRequest
> = z.object({
  transposerSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    transposerSlug: "transposer_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSignalsEventSourceRequest$ {
  /** @deprecated use `DeleteSignalsEventSourceRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSignalsEventSourceRequest$inboundSchema;
  /** @deprecated use `DeleteSignalsEventSourceRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSignalsEventSourceRequest$outboundSchema;
  /** @deprecated use `DeleteSignalsEventSourceRequest$Outbound` instead. */
  export type Outbound = DeleteSignalsEventSourceRequest$Outbound;
}

export function deleteSignalsEventSourceRequestToJSON(
  deleteSignalsEventSourceRequest: DeleteSignalsEventSourceRequest,
): string {
  return JSON.stringify(
    DeleteSignalsEventSourceRequest$outboundSchema.parse(
      deleteSignalsEventSourceRequest,
    ),
  );
}

export function deleteSignalsEventSourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSignalsEventSourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSignalsEventSourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSignalsEventSourceRequest' from JSON`,
  );
}
