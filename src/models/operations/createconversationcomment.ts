/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateConversationCommentRequest = {
  conversationId: string;
  postV1ConversationsConversationIdComments:
    components.PostV1ConversationsConversationIdComments;
};

/** @internal */
export const CreateConversationCommentRequest$inboundSchema: z.ZodType<
  CreateConversationCommentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  conversation_id: z.string(),
  postV1ConversationsConversationIdComments:
    components.PostV1ConversationsConversationIdComments$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
  });
});

/** @internal */
export type CreateConversationCommentRequest$Outbound = {
  conversation_id: string;
  postV1ConversationsConversationIdComments:
    components.PostV1ConversationsConversationIdComments$Outbound;
};

/** @internal */
export const CreateConversationCommentRequest$outboundSchema: z.ZodType<
  CreateConversationCommentRequest$Outbound,
  z.ZodTypeDef,
  CreateConversationCommentRequest
> = z.object({
  conversationId: z.string(),
  postV1ConversationsConversationIdComments:
    components.PostV1ConversationsConversationIdComments$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConversationCommentRequest$ {
  /** @deprecated use `CreateConversationCommentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateConversationCommentRequest$inboundSchema;
  /** @deprecated use `CreateConversationCommentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateConversationCommentRequest$outboundSchema;
  /** @deprecated use `CreateConversationCommentRequest$Outbound` instead. */
  export type Outbound = CreateConversationCommentRequest$Outbound;
}

export function createConversationCommentRequestToJSON(
  createConversationCommentRequest: CreateConversationCommentRequest,
): string {
  return JSON.stringify(
    CreateConversationCommentRequest$outboundSchema.parse(
      createConversationCommentRequest,
    ),
  );
}

export function createConversationCommentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateConversationCommentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateConversationCommentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConversationCommentRequest' from JSON`,
  );
}
