/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of Entitlement
 */
export const Type = {
  Quota: "quota",
  Access: "access",
} as const;
/**
 * Type of Entitlement
 */
export type Type = ClosedEnum<typeof Type>;

export type ListEntitlementsRequest = {
  /**
   * Name of Entitlement
   */
  name?: string | undefined;
  /**
   * Type of Entitlement
   */
  type?: Type | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ListEntitlementsRequest$inboundSchema: z.ZodType<
  ListEntitlementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: Type$inboundSchema.optional(),
});

/** @internal */
export type ListEntitlementsRequest$Outbound = {
  name?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListEntitlementsRequest$outboundSchema: z.ZodType<
  ListEntitlementsRequest$Outbound,
  z.ZodTypeDef,
  ListEntitlementsRequest
> = z.object({
  name: z.string().optional(),
  type: Type$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEntitlementsRequest$ {
  /** @deprecated use `ListEntitlementsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEntitlementsRequest$inboundSchema;
  /** @deprecated use `ListEntitlementsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEntitlementsRequest$outboundSchema;
  /** @deprecated use `ListEntitlementsRequest$Outbound` instead. */
  export type Outbound = ListEntitlementsRequest$Outbound;
}

export function listEntitlementsRequestToJSON(
  listEntitlementsRequest: ListEntitlementsRequest,
): string {
  return JSON.stringify(
    ListEntitlementsRequest$outboundSchema.parse(listEntitlementsRequest),
  );
}

export function listEntitlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEntitlementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEntitlementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEntitlementsRequest' from JSON`,
  );
}
