/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListInfrastructuresRequest = {
  /**
   * A query to search infrastructures by their name
   */
  query?: string | undefined;
  /**
   * Omit for any infrastructure that is added to an incident using the format "incident/{incident_id}"
   */
  omitFor?: string | undefined;
  /**
   * Restrict infrastructure search to given type.
   */
  type?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
};

/** @internal */
export const ListInfrastructuresRequest$inboundSchema: z.ZodType<
  ListInfrastructuresRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  omit_for: z.string().optional(),
  type: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "omit_for": "omitFor",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListInfrastructuresRequest$Outbound = {
  query?: string | undefined;
  omit_for?: string | undefined;
  type?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListInfrastructuresRequest$outboundSchema: z.ZodType<
  ListInfrastructuresRequest$Outbound,
  z.ZodTypeDef,
  ListInfrastructuresRequest
> = z.object({
  query: z.string().optional(),
  omitFor: z.string().optional(),
  type: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    omitFor: "omit_for",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInfrastructuresRequest$ {
  /** @deprecated use `ListInfrastructuresRequest$inboundSchema` instead. */
  export const inboundSchema = ListInfrastructuresRequest$inboundSchema;
  /** @deprecated use `ListInfrastructuresRequest$outboundSchema` instead. */
  export const outboundSchema = ListInfrastructuresRequest$outboundSchema;
  /** @deprecated use `ListInfrastructuresRequest$Outbound` instead. */
  export type Outbound = ListInfrastructuresRequest$Outbound;
}

export function listInfrastructuresRequestToJSON(
  listInfrastructuresRequest: ListInfrastructuresRequest,
): string {
  return JSON.stringify(
    ListInfrastructuresRequest$outboundSchema.parse(listInfrastructuresRequest),
  );
}

export function listInfrastructuresRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInfrastructuresRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInfrastructuresRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInfrastructuresRequest' from JSON`,
  );
}
