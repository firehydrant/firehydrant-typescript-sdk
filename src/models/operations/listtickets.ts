/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A matching strategy for the tags provided
 */
export const ListTicketsTagMatchStrategy = {
  Any: "any",
  MatchAll: "match_all",
  Exclude: "exclude",
} as const;
/**
 * A matching strategy for the tags provided
 */
export type ListTicketsTagMatchStrategy = ClosedEnum<
  typeof ListTicketsTagMatchStrategy
>;

/**
 * Filter tickets by state
 */
export const State = {
  Open: "open",
  InProgress: "in_progress",
  Cancelled: "cancelled",
  Done: "done",
} as const;
/**
 * Filter tickets by state
 */
export type State = ClosedEnum<typeof State>;

export type ListTicketsRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * A comma separated list of tags
   */
  tags?: string | null | undefined;
  /**
   * A matching strategy for the tags provided
   */
  tagMatchStrategy?: ListTicketsTagMatchStrategy | null | undefined;
  /**
   * Filter tickets assigned to this user id
   */
  assignedUser?: string | null | undefined;
  /**
   * Filter tickets by state
   */
  state?: State | null | undefined;
};

/** @internal */
export const ListTicketsTagMatchStrategy$inboundSchema: z.ZodNativeEnum<
  typeof ListTicketsTagMatchStrategy
> = z.nativeEnum(ListTicketsTagMatchStrategy);

/** @internal */
export const ListTicketsTagMatchStrategy$outboundSchema: z.ZodNativeEnum<
  typeof ListTicketsTagMatchStrategy
> = ListTicketsTagMatchStrategy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketsTagMatchStrategy$ {
  /** @deprecated use `ListTicketsTagMatchStrategy$inboundSchema` instead. */
  export const inboundSchema = ListTicketsTagMatchStrategy$inboundSchema;
  /** @deprecated use `ListTicketsTagMatchStrategy$outboundSchema` instead. */
  export const outboundSchema = ListTicketsTagMatchStrategy$outboundSchema;
}

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const ListTicketsRequest$inboundSchema: z.ZodType<
  ListTicketsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  tags: z.nullable(z.string()).optional(),
  tag_match_strategy: z.nullable(ListTicketsTagMatchStrategy$inboundSchema)
    .optional(),
  assigned_user: z.nullable(z.string()).optional(),
  state: z.nullable(State$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "tag_match_strategy": "tagMatchStrategy",
    "assigned_user": "assignedUser",
  });
});

/** @internal */
export type ListTicketsRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  tags?: string | null | undefined;
  tag_match_strategy?: string | null | undefined;
  assigned_user?: string | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const ListTicketsRequest$outboundSchema: z.ZodType<
  ListTicketsRequest$Outbound,
  z.ZodTypeDef,
  ListTicketsRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  tags: z.nullable(z.string()).optional(),
  tagMatchStrategy: z.nullable(ListTicketsTagMatchStrategy$outboundSchema)
    .optional(),
  assignedUser: z.nullable(z.string()).optional(),
  state: z.nullable(State$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    tagMatchStrategy: "tag_match_strategy",
    assignedUser: "assigned_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketsRequest$ {
  /** @deprecated use `ListTicketsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketsRequest$inboundSchema;
  /** @deprecated use `ListTicketsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketsRequest$outboundSchema;
  /** @deprecated use `ListTicketsRequest$Outbound` instead. */
  export type Outbound = ListTicketsRequest$Outbound;
}

export function listTicketsRequestToJSON(
  listTicketsRequest: ListTicketsRequest,
): string {
  return JSON.stringify(
    ListTicketsRequest$outboundSchema.parse(listTicketsRequest),
  );
}

export function listTicketsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketsRequest' from JSON`,
  );
}
