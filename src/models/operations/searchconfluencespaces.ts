/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchConfluenceSpacesRequest = {
  id: string;
  /**
   * Space Key
   */
  keyword?: string | null | undefined;
};

/** @internal */
export const SearchConfluenceSpacesRequest$inboundSchema: z.ZodType<
  SearchConfluenceSpacesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  keyword: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchConfluenceSpacesRequest$Outbound = {
  id: string;
  keyword?: string | null | undefined;
};

/** @internal */
export const SearchConfluenceSpacesRequest$outboundSchema: z.ZodType<
  SearchConfluenceSpacesRequest$Outbound,
  z.ZodTypeDef,
  SearchConfluenceSpacesRequest
> = z.object({
  id: z.string(),
  keyword: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchConfluenceSpacesRequest$ {
  /** @deprecated use `SearchConfluenceSpacesRequest$inboundSchema` instead. */
  export const inboundSchema = SearchConfluenceSpacesRequest$inboundSchema;
  /** @deprecated use `SearchConfluenceSpacesRequest$outboundSchema` instead. */
  export const outboundSchema = SearchConfluenceSpacesRequest$outboundSchema;
  /** @deprecated use `SearchConfluenceSpacesRequest$Outbound` instead. */
  export type Outbound = SearchConfluenceSpacesRequest$Outbound;
}

export function searchConfluenceSpacesRequestToJSON(
  searchConfluenceSpacesRequest: SearchConfluenceSpacesRequest,
): string {
  return JSON.stringify(
    SearchConfluenceSpacesRequest$outboundSchema.parse(
      searchConfluenceSpacesRequest,
    ),
  );
}

export function searchConfluenceSpacesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchConfluenceSpacesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchConfluenceSpacesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchConfluenceSpacesRequest' from JSON`,
  );
}
