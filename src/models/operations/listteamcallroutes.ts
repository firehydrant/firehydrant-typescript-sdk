/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTeamCallRoutesRequest = {
  teamId: string;
};

/** @internal */
export const ListTeamCallRoutesRequest$inboundSchema: z.ZodType<
  ListTeamCallRoutesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  team_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
  });
});

/** @internal */
export type ListTeamCallRoutesRequest$Outbound = {
  team_id: string;
};

/** @internal */
export const ListTeamCallRoutesRequest$outboundSchema: z.ZodType<
  ListTeamCallRoutesRequest$Outbound,
  z.ZodTypeDef,
  ListTeamCallRoutesRequest
> = z.object({
  teamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamCallRoutesRequest$ {
  /** @deprecated use `ListTeamCallRoutesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTeamCallRoutesRequest$inboundSchema;
  /** @deprecated use `ListTeamCallRoutesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTeamCallRoutesRequest$outboundSchema;
  /** @deprecated use `ListTeamCallRoutesRequest$Outbound` instead. */
  export type Outbound = ListTeamCallRoutesRequest$Outbound;
}

export function listTeamCallRoutesRequestToJSON(
  listTeamCallRoutesRequest: ListTeamCallRoutesRequest,
): string {
  return JSON.stringify(
    ListTeamCallRoutesRequest$outboundSchema.parse(listTeamCallRoutesRequest),
  );
}

export function listTeamCallRoutesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTeamCallRoutesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeamCallRoutesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeamCallRoutesRequest' from JSON`,
  );
}
