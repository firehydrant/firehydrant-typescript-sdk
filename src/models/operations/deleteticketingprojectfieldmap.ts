/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTicketingProjectFieldMapRequest = {
  mapId: string;
  ticketingProjectId: string;
};

/** @internal */
export const DeleteTicketingProjectFieldMapRequest$inboundSchema: z.ZodType<
  DeleteTicketingProjectFieldMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  map_id: z.string(),
  ticketing_project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "map_id": "mapId",
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type DeleteTicketingProjectFieldMapRequest$Outbound = {
  map_id: string;
  ticketing_project_id: string;
};

/** @internal */
export const DeleteTicketingProjectFieldMapRequest$outboundSchema: z.ZodType<
  DeleteTicketingProjectFieldMapRequest$Outbound,
  z.ZodTypeDef,
  DeleteTicketingProjectFieldMapRequest
> = z.object({
  mapId: z.string(),
  ticketingProjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    mapId: "map_id",
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTicketingProjectFieldMapRequest$ {
  /** @deprecated use `DeleteTicketingProjectFieldMapRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteTicketingProjectFieldMapRequest$inboundSchema;
  /** @deprecated use `DeleteTicketingProjectFieldMapRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteTicketingProjectFieldMapRequest$outboundSchema;
  /** @deprecated use `DeleteTicketingProjectFieldMapRequest$Outbound` instead. */
  export type Outbound = DeleteTicketingProjectFieldMapRequest$Outbound;
}

export function deleteTicketingProjectFieldMapRequestToJSON(
  deleteTicketingProjectFieldMapRequest: DeleteTicketingProjectFieldMapRequest,
): string {
  return JSON.stringify(
    DeleteTicketingProjectFieldMapRequest$outboundSchema.parse(
      deleteTicketingProjectFieldMapRequest,
    ),
  );
}

export function deleteTicketingProjectFieldMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTicketingProjectFieldMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteTicketingProjectFieldMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTicketingProjectFieldMapRequest' from JSON`,
  );
}
