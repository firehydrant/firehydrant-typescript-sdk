/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AppendFormDataOnSelectedValueGetRequest = {
  slug: string;
  fieldId: string;
  selectedValue: string;
};

/** @internal */
export const AppendFormDataOnSelectedValueGetRequest$inboundSchema: z.ZodType<
  AppendFormDataOnSelectedValueGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  field_id: z.string(),
  selected_value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "field_id": "fieldId",
    "selected_value": "selectedValue",
  });
});

/** @internal */
export type AppendFormDataOnSelectedValueGetRequest$Outbound = {
  slug: string;
  field_id: string;
  selected_value: string;
};

/** @internal */
export const AppendFormDataOnSelectedValueGetRequest$outboundSchema: z.ZodType<
  AppendFormDataOnSelectedValueGetRequest$Outbound,
  z.ZodTypeDef,
  AppendFormDataOnSelectedValueGetRequest
> = z.object({
  slug: z.string(),
  fieldId: z.string(),
  selectedValue: z.string(),
}).transform((v) => {
  return remap$(v, {
    fieldId: "field_id",
    selectedValue: "selected_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppendFormDataOnSelectedValueGetRequest$ {
  /** @deprecated use `AppendFormDataOnSelectedValueGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    AppendFormDataOnSelectedValueGetRequest$inboundSchema;
  /** @deprecated use `AppendFormDataOnSelectedValueGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    AppendFormDataOnSelectedValueGetRequest$outboundSchema;
  /** @deprecated use `AppendFormDataOnSelectedValueGetRequest$Outbound` instead. */
  export type Outbound = AppendFormDataOnSelectedValueGetRequest$Outbound;
}

export function appendFormDataOnSelectedValueGetRequestToJSON(
  appendFormDataOnSelectedValueGetRequest:
    AppendFormDataOnSelectedValueGetRequest,
): string {
  return JSON.stringify(
    AppendFormDataOnSelectedValueGetRequest$outboundSchema.parse(
      appendFormDataOnSelectedValueGetRequest,
    ),
  );
}

export function appendFormDataOnSelectedValueGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AppendFormDataOnSelectedValueGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppendFormDataOnSelectedValueGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppendFormDataOnSelectedValueGetRequest' from JSON`,
  );
}
