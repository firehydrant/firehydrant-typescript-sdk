/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCommentReactionRequest = {
  conversationId: string;
  commentId: string;
  createCommentReaction: components.CreateCommentReaction;
};

/** @internal */
export const CreateCommentReactionRequest$inboundSchema: z.ZodType<
  CreateCommentReactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  conversation_id: z.string(),
  comment_id: z.string(),
  create_comment_reaction: z.lazy(() =>
    components.CreateCommentReaction$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
    "comment_id": "commentId",
    "create_comment_reaction": "createCommentReaction",
  });
});

/** @internal */
export type CreateCommentReactionRequest$Outbound = {
  conversation_id: string;
  comment_id: string;
  create_comment_reaction: components.CreateCommentReaction$Outbound;
};

/** @internal */
export const CreateCommentReactionRequest$outboundSchema: z.ZodType<
  CreateCommentReactionRequest$Outbound,
  z.ZodTypeDef,
  CreateCommentReactionRequest
> = z.object({
  conversationId: z.string(),
  commentId: z.string(),
  createCommentReaction: z.lazy(() =>
    components.CreateCommentReaction$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
    commentId: "comment_id",
    createCommentReaction: "create_comment_reaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCommentReactionRequest$ {
  /** @deprecated use `CreateCommentReactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCommentReactionRequest$inboundSchema;
  /** @deprecated use `CreateCommentReactionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCommentReactionRequest$outboundSchema;
  /** @deprecated use `CreateCommentReactionRequest$Outbound` instead. */
  export type Outbound = CreateCommentReactionRequest$Outbound;
}

export function createCommentReactionRequestToJSON(
  createCommentReactionRequest: CreateCommentReactionRequest,
): string {
  return JSON.stringify(
    CreateCommentReactionRequest$outboundSchema.parse(
      createCommentReactionRequest,
    ),
  );
}

export function createCommentReactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCommentReactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCommentReactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCommentReactionRequest' from JSON`,
  );
}
