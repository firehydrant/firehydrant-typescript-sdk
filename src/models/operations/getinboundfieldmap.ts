/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInboundFieldMapRequest = {
  mapId: string;
  ticketingProjectId: string;
};

/** @internal */
export const GetInboundFieldMapRequest$inboundSchema: z.ZodType<
  GetInboundFieldMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  map_id: z.string(),
  ticketing_project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "map_id": "mapId",
    "ticketing_project_id": "ticketingProjectId",
  });
});

/** @internal */
export type GetInboundFieldMapRequest$Outbound = {
  map_id: string;
  ticketing_project_id: string;
};

/** @internal */
export const GetInboundFieldMapRequest$outboundSchema: z.ZodType<
  GetInboundFieldMapRequest$Outbound,
  z.ZodTypeDef,
  GetInboundFieldMapRequest
> = z.object({
  mapId: z.string(),
  ticketingProjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    mapId: "map_id",
    ticketingProjectId: "ticketing_project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboundFieldMapRequest$ {
  /** @deprecated use `GetInboundFieldMapRequest$inboundSchema` instead. */
  export const inboundSchema = GetInboundFieldMapRequest$inboundSchema;
  /** @deprecated use `GetInboundFieldMapRequest$outboundSchema` instead. */
  export const outboundSchema = GetInboundFieldMapRequest$outboundSchema;
  /** @deprecated use `GetInboundFieldMapRequest$Outbound` instead. */
  export type Outbound = GetInboundFieldMapRequest$Outbound;
}

export function getInboundFieldMapRequestToJSON(
  getInboundFieldMapRequest: GetInboundFieldMapRequest,
): string {
  return JSON.stringify(
    GetInboundFieldMapRequest$outboundSchema.parse(getInboundFieldMapRequest),
  );
}

export function getInboundFieldMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInboundFieldMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInboundFieldMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInboundFieldMapRequest' from JSON`,
  );
}
