/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSignalIngestUrlRequest = {
  /**
   * Team ID to send signals to directly
   */
  teamId?: string | undefined;
  /**
   * Escalation policy ID to send signals to directly. `team_id` is required if this is provided.
   */
  escalationPolicyId?: string | undefined;
  /**
   * On-call schedule ID to send signals to directly. `team_id` is required if this is provided.
   */
  onCallScheduleId?: string | undefined;
  /**
   * User ID to send signals to directly
   */
  userId?: string | undefined;
};

/** @internal */
export const GetSignalIngestUrlRequest$inboundSchema: z.ZodType<
  GetSignalIngestUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  team_id: z.string().optional(),
  escalation_policy_id: z.string().optional(),
  on_call_schedule_id: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "team_id": "teamId",
    "escalation_policy_id": "escalationPolicyId",
    "on_call_schedule_id": "onCallScheduleId",
    "user_id": "userId",
  });
});

/** @internal */
export type GetSignalIngestUrlRequest$Outbound = {
  team_id?: string | undefined;
  escalation_policy_id?: string | undefined;
  on_call_schedule_id?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const GetSignalIngestUrlRequest$outboundSchema: z.ZodType<
  GetSignalIngestUrlRequest$Outbound,
  z.ZodTypeDef,
  GetSignalIngestUrlRequest
> = z.object({
  teamId: z.string().optional(),
  escalationPolicyId: z.string().optional(),
  onCallScheduleId: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    teamId: "team_id",
    escalationPolicyId: "escalation_policy_id",
    onCallScheduleId: "on_call_schedule_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalIngestUrlRequest$ {
  /** @deprecated use `GetSignalIngestUrlRequest$inboundSchema` instead. */
  export const inboundSchema = GetSignalIngestUrlRequest$inboundSchema;
  /** @deprecated use `GetSignalIngestUrlRequest$outboundSchema` instead. */
  export const outboundSchema = GetSignalIngestUrlRequest$outboundSchema;
  /** @deprecated use `GetSignalIngestUrlRequest$Outbound` instead. */
  export type Outbound = GetSignalIngestUrlRequest$Outbound;
}

export function getSignalIngestUrlRequestToJSON(
  getSignalIngestUrlRequest: GetSignalIngestUrlRequest,
): string {
  return JSON.stringify(
    GetSignalIngestUrlRequest$outboundSchema.parse(getSignalIngestUrlRequest),
  );
}

export function getSignalIngestUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSignalIngestUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSignalIngestUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSignalIngestUrlRequest' from JSON`,
  );
}
