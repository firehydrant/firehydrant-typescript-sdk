/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSignalsWebhookTargetRequest = {
  id: string;
  updateSignalsWebhookTarget: components.UpdateSignalsWebhookTarget;
};

/** @internal */
export const UpdateSignalsWebhookTargetRequest$inboundSchema: z.ZodType<
  UpdateSignalsWebhookTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  update_signals_webhook_target: z.lazy(() =>
    components.UpdateSignalsWebhookTarget$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "update_signals_webhook_target": "updateSignalsWebhookTarget",
  });
});

/** @internal */
export type UpdateSignalsWebhookTargetRequest$Outbound = {
  id: string;
  update_signals_webhook_target: components.UpdateSignalsWebhookTarget$Outbound;
};

/** @internal */
export const UpdateSignalsWebhookTargetRequest$outboundSchema: z.ZodType<
  UpdateSignalsWebhookTargetRequest$Outbound,
  z.ZodTypeDef,
  UpdateSignalsWebhookTargetRequest
> = z.object({
  id: z.string(),
  updateSignalsWebhookTarget: z.lazy(() =>
    components.UpdateSignalsWebhookTarget$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    updateSignalsWebhookTarget: "update_signals_webhook_target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSignalsWebhookTargetRequest$ {
  /** @deprecated use `UpdateSignalsWebhookTargetRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSignalsWebhookTargetRequest$inboundSchema;
  /** @deprecated use `UpdateSignalsWebhookTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSignalsWebhookTargetRequest$outboundSchema;
  /** @deprecated use `UpdateSignalsWebhookTargetRequest$Outbound` instead. */
  export type Outbound = UpdateSignalsWebhookTargetRequest$Outbound;
}

export function updateSignalsWebhookTargetRequestToJSON(
  updateSignalsWebhookTargetRequest: UpdateSignalsWebhookTargetRequest,
): string {
  return JSON.stringify(
    UpdateSignalsWebhookTargetRequest$outboundSchema.parse(
      updateSignalsWebhookTargetRequest,
    ),
  );
}

export function updateSignalsWebhookTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSignalsWebhookTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSignalsWebhookTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSignalsWebhookTargetRequest' from JSON`,
  );
}
