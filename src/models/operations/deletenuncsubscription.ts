/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteNuncSubscriptionRequest = {
  unsubscribeToken: string;
};

/** @internal */
export const DeleteNuncSubscriptionRequest$inboundSchema: z.ZodType<
  DeleteNuncSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  unsubscribe_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "unsubscribe_token": "unsubscribeToken",
  });
});

/** @internal */
export type DeleteNuncSubscriptionRequest$Outbound = {
  unsubscribe_token: string;
};

/** @internal */
export const DeleteNuncSubscriptionRequest$outboundSchema: z.ZodType<
  DeleteNuncSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  DeleteNuncSubscriptionRequest
> = z.object({
  unsubscribeToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    unsubscribeToken: "unsubscribe_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNuncSubscriptionRequest$ {
  /** @deprecated use `DeleteNuncSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteNuncSubscriptionRequest$inboundSchema;
  /** @deprecated use `DeleteNuncSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteNuncSubscriptionRequest$outboundSchema;
  /** @deprecated use `DeleteNuncSubscriptionRequest$Outbound` instead. */
  export type Outbound = DeleteNuncSubscriptionRequest$Outbound;
}

export function deleteNuncSubscriptionRequestToJSON(
  deleteNuncSubscriptionRequest: DeleteNuncSubscriptionRequest,
): string {
  return JSON.stringify(
    DeleteNuncSubscriptionRequest$outboundSchema.parse(
      deleteNuncSubscriptionRequest,
    ),
  );
}

export function deleteNuncSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNuncSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNuncSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNuncSubscriptionRequest' from JSON`,
  );
}
