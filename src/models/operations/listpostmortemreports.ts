/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPostMortemReportsRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * Filter the reports by an incident ID
   */
  incidentId?: string | null | undefined;
  /**
   * Filter for reports updated after the given ISO8601 timestamp
   */
  updatedSince?: Date | null | undefined;
};

/** @internal */
export const ListPostMortemReportsRequest$inboundSchema: z.ZodType<
  ListPostMortemReportsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  incident_id: z.nullable(z.string()).optional(),
  updated_since: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "incident_id": "incidentId",
    "updated_since": "updatedSince",
  });
});

/** @internal */
export type ListPostMortemReportsRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  incident_id?: string | null | undefined;
  updated_since?: string | null | undefined;
};

/** @internal */
export const ListPostMortemReportsRequest$outboundSchema: z.ZodType<
  ListPostMortemReportsRequest$Outbound,
  z.ZodTypeDef,
  ListPostMortemReportsRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  incidentId: z.nullable(z.string()).optional(),
  updatedSince: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    incidentId: "incident_id",
    updatedSince: "updated_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPostMortemReportsRequest$ {
  /** @deprecated use `ListPostMortemReportsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPostMortemReportsRequest$inboundSchema;
  /** @deprecated use `ListPostMortemReportsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPostMortemReportsRequest$outboundSchema;
  /** @deprecated use `ListPostMortemReportsRequest$Outbound` instead. */
  export type Outbound = ListPostMortemReportsRequest$Outbound;
}

export function listPostMortemReportsRequestToJSON(
  listPostMortemReportsRequest: ListPostMortemReportsRequest,
): string {
  return JSON.stringify(
    ListPostMortemReportsRequest$outboundSchema.parse(
      listPostMortemReportsRequest,
    ),
  );
}

export function listPostMortemReportsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPostMortemReportsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPostMortemReportsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPostMortemReportsRequest' from JSON`,
  );
}
