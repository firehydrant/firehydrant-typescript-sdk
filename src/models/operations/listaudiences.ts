/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAudiencesRequest = {
  /**
   * Include archived (discarded) audiences
   */
  includeArchived?: boolean | null | undefined;
};

/** @internal */
export const ListAudiencesRequest$inboundSchema: z.ZodType<
  ListAudiencesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_archived: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    "include_archived": "includeArchived",
  });
});

/** @internal */
export type ListAudiencesRequest$Outbound = {
  include_archived: boolean | null;
};

/** @internal */
export const ListAudiencesRequest$outboundSchema: z.ZodType<
  ListAudiencesRequest$Outbound,
  z.ZodTypeDef,
  ListAudiencesRequest
> = z.object({
  includeArchived: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    includeArchived: "include_archived",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAudiencesRequest$ {
  /** @deprecated use `ListAudiencesRequest$inboundSchema` instead. */
  export const inboundSchema = ListAudiencesRequest$inboundSchema;
  /** @deprecated use `ListAudiencesRequest$outboundSchema` instead. */
  export const outboundSchema = ListAudiencesRequest$outboundSchema;
  /** @deprecated use `ListAudiencesRequest$Outbound` instead. */
  export type Outbound = ListAudiencesRequest$Outbound;
}

export function listAudiencesRequestToJSON(
  listAudiencesRequest: ListAudiencesRequest,
): string {
  return JSON.stringify(
    ListAudiencesRequest$outboundSchema.parse(listAudiencesRequest),
  );
}

export function listAudiencesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAudiencesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAudiencesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAudiencesRequest' from JSON`,
  );
}
