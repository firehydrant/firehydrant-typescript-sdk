/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAudienceRequestBody = {
  /**
   * Name of the audience (max 255 characters)
   */
  name?: string | null | undefined;
  /**
   * Description of the audience (max 4000 characters)
   */
  description?: string | null | undefined;
  /**
   * Whether this is the default audience
   */
  default?: boolean | null | undefined;
  /**
   * Whether the audience is active or discarded
   */
  active?: boolean | null | undefined;
  /**
   * The incident detail question (max 255 characters)
   */
  detailsQuestion?: Array<string> | null | undefined;
  /**
   * The prompt to display when collecting this detail
   */
  detailsPrompt?: Array<string> | null | undefined;
  /**
   * Optional unique identifier for this detail
   */
  detailsSlug?: Array<string> | null | undefined;
  /**
   * Position of the question in the list (1-based indexing)
   */
  detailsPosition?: Array<number> | null | undefined;
};

export type UpdateAudienceRequest = {
  /**
   * Unique identifier of the audience
   */
  audienceId: string;
  requestBody?: UpdateAudienceRequestBody | undefined;
};

/** @internal */
export const UpdateAudienceRequestBody$inboundSchema: z.ZodType<
  UpdateAudienceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  default: z.nullable(z.boolean()).optional(),
  active: z.nullable(z.boolean()).optional(),
  "details[question]": z.nullable(z.array(z.string())).optional(),
  "details[prompt]": z.nullable(z.array(z.string())).optional(),
  "details[slug]": z.nullable(z.array(z.string())).optional(),
  "details[position]": z.nullable(z.array(z.number().int())).optional(),
}).transform((v) => {
  return remap$(v, {
    "details[question]": "detailsQuestion",
    "details[prompt]": "detailsPrompt",
    "details[slug]": "detailsSlug",
    "details[position]": "detailsPosition",
  });
});

/** @internal */
export type UpdateAudienceRequestBody$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  default?: boolean | null | undefined;
  active?: boolean | null | undefined;
  "details[question]"?: Array<string> | null | undefined;
  "details[prompt]"?: Array<string> | null | undefined;
  "details[slug]"?: Array<string> | null | undefined;
  "details[position]"?: Array<number> | null | undefined;
};

/** @internal */
export const UpdateAudienceRequestBody$outboundSchema: z.ZodType<
  UpdateAudienceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAudienceRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  default: z.nullable(z.boolean()).optional(),
  active: z.nullable(z.boolean()).optional(),
  detailsQuestion: z.nullable(z.array(z.string())).optional(),
  detailsPrompt: z.nullable(z.array(z.string())).optional(),
  detailsSlug: z.nullable(z.array(z.string())).optional(),
  detailsPosition: z.nullable(z.array(z.number().int())).optional(),
}).transform((v) => {
  return remap$(v, {
    detailsQuestion: "details[question]",
    detailsPrompt: "details[prompt]",
    detailsSlug: "details[slug]",
    detailsPosition: "details[position]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAudienceRequestBody$ {
  /** @deprecated use `UpdateAudienceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateAudienceRequestBody$inboundSchema;
  /** @deprecated use `UpdateAudienceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateAudienceRequestBody$outboundSchema;
  /** @deprecated use `UpdateAudienceRequestBody$Outbound` instead. */
  export type Outbound = UpdateAudienceRequestBody$Outbound;
}

export function updateAudienceRequestBodyToJSON(
  updateAudienceRequestBody: UpdateAudienceRequestBody,
): string {
  return JSON.stringify(
    UpdateAudienceRequestBody$outboundSchema.parse(updateAudienceRequestBody),
  );
}

export function updateAudienceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAudienceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAudienceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAudienceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAudienceRequest$inboundSchema: z.ZodType<
  UpdateAudienceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  audience_id: z.string(),
  RequestBody: z.lazy(() => UpdateAudienceRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "audience_id": "audienceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAudienceRequest$Outbound = {
  audience_id: string;
  RequestBody?: UpdateAudienceRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateAudienceRequest$outboundSchema: z.ZodType<
  UpdateAudienceRequest$Outbound,
  z.ZodTypeDef,
  UpdateAudienceRequest
> = z.object({
  audienceId: z.string(),
  requestBody: z.lazy(() => UpdateAudienceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    audienceId: "audience_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAudienceRequest$ {
  /** @deprecated use `UpdateAudienceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAudienceRequest$inboundSchema;
  /** @deprecated use `UpdateAudienceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAudienceRequest$outboundSchema;
  /** @deprecated use `UpdateAudienceRequest$Outbound` instead. */
  export type Outbound = UpdateAudienceRequest$Outbound;
}

export function updateAudienceRequestToJSON(
  updateAudienceRequest: UpdateAudienceRequest,
): string {
  return JSON.stringify(
    UpdateAudienceRequest$outboundSchema.parse(updateAudienceRequest),
  );
}

export function updateAudienceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAudienceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAudienceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAudienceRequest' from JSON`,
  );
}
