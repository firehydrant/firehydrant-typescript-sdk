/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetConferenceBridgeTranslationRequest = {
  /**
   * The ID of the conference bridge
   */
  id: string;
  /**
   * The language code of the translation
   */
  languageCode: string;
  incidentId: string;
};

/** @internal */
export const GetConferenceBridgeTranslationRequest$inboundSchema: z.ZodType<
  GetConferenceBridgeTranslationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  language_code: z.string(),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "language_code": "languageCode",
    "incident_id": "incidentId",
  });
});

/** @internal */
export type GetConferenceBridgeTranslationRequest$Outbound = {
  id: string;
  language_code: string;
  incident_id: string;
};

/** @internal */
export const GetConferenceBridgeTranslationRequest$outboundSchema: z.ZodType<
  GetConferenceBridgeTranslationRequest$Outbound,
  z.ZodTypeDef,
  GetConferenceBridgeTranslationRequest
> = z.object({
  id: z.string(),
  languageCode: z.string(),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    languageCode: "language_code",
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConferenceBridgeTranslationRequest$ {
  /** @deprecated use `GetConferenceBridgeTranslationRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetConferenceBridgeTranslationRequest$inboundSchema;
  /** @deprecated use `GetConferenceBridgeTranslationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetConferenceBridgeTranslationRequest$outboundSchema;
  /** @deprecated use `GetConferenceBridgeTranslationRequest$Outbound` instead. */
  export type Outbound = GetConferenceBridgeTranslationRequest$Outbound;
}

export function getConferenceBridgeTranslationRequestToJSON(
  getConferenceBridgeTranslationRequest: GetConferenceBridgeTranslationRequest,
): string {
  return JSON.stringify(
    GetConferenceBridgeTranslationRequest$outboundSchema.parse(
      getConferenceBridgeTranslationRequest,
    ),
  );
}

export function getConferenceBridgeTranslationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConferenceBridgeTranslationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetConferenceBridgeTranslationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConferenceBridgeTranslationRequest' from JSON`,
  );
}
