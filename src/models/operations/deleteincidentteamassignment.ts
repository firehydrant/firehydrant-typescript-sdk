/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteIncidentTeamAssignmentRequestBody = {
  /**
   * Team role assignments to unassign from the incident
   */
  roleAssignmentIds?: Array<string> | null | undefined;
};

export type DeleteIncidentTeamAssignmentRequest = {
  incidentId: string;
  teamAssignmentId: string;
  requestBody?: DeleteIncidentTeamAssignmentRequestBody | undefined;
};

/** @internal */
export const DeleteIncidentTeamAssignmentRequestBody$inboundSchema: z.ZodType<
  DeleteIncidentTeamAssignmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_assignment_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "role_assignment_ids": "roleAssignmentIds",
  });
});

/** @internal */
export type DeleteIncidentTeamAssignmentRequestBody$Outbound = {
  role_assignment_ids?: Array<string> | null | undefined;
};

/** @internal */
export const DeleteIncidentTeamAssignmentRequestBody$outboundSchema: z.ZodType<
  DeleteIncidentTeamAssignmentRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteIncidentTeamAssignmentRequestBody
> = z.object({
  roleAssignmentIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    roleAssignmentIds: "role_assignment_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIncidentTeamAssignmentRequestBody$ {
  /** @deprecated use `DeleteIncidentTeamAssignmentRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteIncidentTeamAssignmentRequestBody$inboundSchema;
  /** @deprecated use `DeleteIncidentTeamAssignmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteIncidentTeamAssignmentRequestBody$outboundSchema;
  /** @deprecated use `DeleteIncidentTeamAssignmentRequestBody$Outbound` instead. */
  export type Outbound = DeleteIncidentTeamAssignmentRequestBody$Outbound;
}

export function deleteIncidentTeamAssignmentRequestBodyToJSON(
  deleteIncidentTeamAssignmentRequestBody:
    DeleteIncidentTeamAssignmentRequestBody,
): string {
  return JSON.stringify(
    DeleteIncidentTeamAssignmentRequestBody$outboundSchema.parse(
      deleteIncidentTeamAssignmentRequestBody,
    ),
  );
}

export function deleteIncidentTeamAssignmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteIncidentTeamAssignmentRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteIncidentTeamAssignmentRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteIncidentTeamAssignmentRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteIncidentTeamAssignmentRequest$inboundSchema: z.ZodType<
  DeleteIncidentTeamAssignmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  team_assignment_id: z.string(),
  RequestBody: z.lazy(() =>
    DeleteIncidentTeamAssignmentRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "team_assignment_id": "teamAssignmentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteIncidentTeamAssignmentRequest$Outbound = {
  incident_id: string;
  team_assignment_id: string;
  RequestBody?: DeleteIncidentTeamAssignmentRequestBody$Outbound | undefined;
};

/** @internal */
export const DeleteIncidentTeamAssignmentRequest$outboundSchema: z.ZodType<
  DeleteIncidentTeamAssignmentRequest$Outbound,
  z.ZodTypeDef,
  DeleteIncidentTeamAssignmentRequest
> = z.object({
  incidentId: z.string(),
  teamAssignmentId: z.string(),
  requestBody: z.lazy(() =>
    DeleteIncidentTeamAssignmentRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    teamAssignmentId: "team_assignment_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIncidentTeamAssignmentRequest$ {
  /** @deprecated use `DeleteIncidentTeamAssignmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteIncidentTeamAssignmentRequest$inboundSchema;
  /** @deprecated use `DeleteIncidentTeamAssignmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteIncidentTeamAssignmentRequest$outboundSchema;
  /** @deprecated use `DeleteIncidentTeamAssignmentRequest$Outbound` instead. */
  export type Outbound = DeleteIncidentTeamAssignmentRequest$Outbound;
}

export function deleteIncidentTeamAssignmentRequestToJSON(
  deleteIncidentTeamAssignmentRequest: DeleteIncidentTeamAssignmentRequest,
): string {
  return JSON.stringify(
    DeleteIncidentTeamAssignmentRequest$outboundSchema.parse(
      deleteIncidentTeamAssignmentRequest,
    ),
  );
}

export function deleteIncidentTeamAssignmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIncidentTeamAssignmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteIncidentTeamAssignmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIncidentTeamAssignmentRequest' from JSON`,
  );
}
