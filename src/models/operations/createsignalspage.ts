/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSignalsPageRequest = {
  summary: string;
  targetType: string;
  targetId: string;
  body?: string | null | undefined;
};

/** @internal */
export const CreateSignalsPageRequest$inboundSchema: z.ZodType<
  CreateSignalsPageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.string(),
  target_type: z.string(),
  target_id: z.string(),
  body: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
  });
});

/** @internal */
export type CreateSignalsPageRequest$Outbound = {
  summary: string;
  target_type: string;
  target_id: string;
  body?: string | null | undefined;
};

/** @internal */
export const CreateSignalsPageRequest$outboundSchema: z.ZodType<
  CreateSignalsPageRequest$Outbound,
  z.ZodTypeDef,
  CreateSignalsPageRequest
> = z.object({
  summary: z.string(),
  targetType: z.string(),
  targetId: z.string(),
  body: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignalsPageRequest$ {
  /** @deprecated use `CreateSignalsPageRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSignalsPageRequest$inboundSchema;
  /** @deprecated use `CreateSignalsPageRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSignalsPageRequest$outboundSchema;
  /** @deprecated use `CreateSignalsPageRequest$Outbound` instead. */
  export type Outbound = CreateSignalsPageRequest$Outbound;
}

export function createSignalsPageRequestToJSON(
  createSignalsPageRequest: CreateSignalsPageRequest,
): string {
  return JSON.stringify(
    CreateSignalsPageRequest$outboundSchema.parse(createSignalsPageRequest),
  );
}

export function createSignalsPageRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSignalsPageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSignalsPageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSignalsPageRequest' from JSON`,
  );
}
