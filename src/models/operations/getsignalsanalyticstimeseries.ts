/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String that determines how records are grouped
 */
export const Bucket = {
  Month: "month",
  Week: "week",
  Day: "day",
} as const;
/**
 * String that determines how records are grouped
 */
export type Bucket = ClosedEnum<typeof Bucket>;

/**
 * String that determines how records are grouped
 */
export const GetSignalsAnalyticsTimeseriesQueryParamGroupBy = {
  SignalRules: "signal_rules",
  Teams: "teams",
  Services: "services",
  Environments: "environments",
  Tags: "tags",
} as const;
/**
 * String that determines how records are grouped
 */
export type GetSignalsAnalyticsTimeseriesQueryParamGroupBy = ClosedEnum<
  typeof GetSignalsAnalyticsTimeseriesQueryParamGroupBy
>;

/**
 * String that determines how records are sorted
 */
export const GetSignalsAnalyticsTimeseriesQueryParamSortBy = {
  TotalOpenedAlerts: "total_opened_alerts",
  TotalAckedAlerts: "total_acked_alerts",
  TotalIncidents: "total_incidents",
  AckedPercentage: "acked_percentage",
  IncidentsPercentage: "incidents_percentage",
} as const;
/**
 * String that determines how records are sorted
 */
export type GetSignalsAnalyticsTimeseriesQueryParamSortBy = ClosedEnum<
  typeof GetSignalsAnalyticsTimeseriesQueryParamSortBy
>;

/**
 * String that determines how records are sorted
 */
export const GetSignalsAnalyticsTimeseriesQueryParamSortDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * String that determines how records are sorted
 */
export type GetSignalsAnalyticsTimeseriesQueryParamSortDirection = ClosedEnum<
  typeof GetSignalsAnalyticsTimeseriesQueryParamSortDirection
>;

export type GetSignalsAnalyticsTimeseriesRequest = {
  /**
   * String that determines how records are grouped
   */
  bucket?: Bucket | undefined;
  /**
   * A comma separated list of signal rule IDs
   */
  signalRules?: string | undefined;
  /**
   * A comma separated list of team IDs
   */
  teams?: string | undefined;
  /**
   * A comma separated list of environment IDs
   */
  environments?: string | undefined;
  /**
   * A comma separated list of service IDs
   */
  services?: string | undefined;
  /**
   * A comma separated list of tags
   */
  tags?: string | undefined;
  /**
   * A comma separated list of user IDs
   */
  users?: string | undefined;
  /**
   * String that determines how records are grouped
   */
  groupBy?: GetSignalsAnalyticsTimeseriesQueryParamGroupBy | undefined;
  /**
   * String that determines how records are sorted
   */
  sortBy?: GetSignalsAnalyticsTimeseriesQueryParamSortBy | undefined;
  /**
   * String that determines how records are sorted
   */
  sortDirection?:
    | GetSignalsAnalyticsTimeseriesQueryParamSortDirection
    | undefined;
  /**
   * The start date to return metrics from
   */
  startDate?: Date | undefined;
  /**
   * The end date to return metrics from
   */
  endDate?: Date | undefined;
};

/** @internal */
export const Bucket$inboundSchema: z.ZodNativeEnum<typeof Bucket> = z
  .nativeEnum(Bucket);

/** @internal */
export const Bucket$outboundSchema: z.ZodNativeEnum<typeof Bucket> =
  Bucket$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bucket$ {
  /** @deprecated use `Bucket$inboundSchema` instead. */
  export const inboundSchema = Bucket$inboundSchema;
  /** @deprecated use `Bucket$outboundSchema` instead. */
  export const outboundSchema = Bucket$outboundSchema;
}

/** @internal */
export const GetSignalsAnalyticsTimeseriesQueryParamGroupBy$inboundSchema:
  z.ZodNativeEnum<typeof GetSignalsAnalyticsTimeseriesQueryParamGroupBy> = z
    .nativeEnum(GetSignalsAnalyticsTimeseriesQueryParamGroupBy);

/** @internal */
export const GetSignalsAnalyticsTimeseriesQueryParamGroupBy$outboundSchema:
  z.ZodNativeEnum<typeof GetSignalsAnalyticsTimeseriesQueryParamGroupBy> =
    GetSignalsAnalyticsTimeseriesQueryParamGroupBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsAnalyticsTimeseriesQueryParamGroupBy$ {
  /** @deprecated use `GetSignalsAnalyticsTimeseriesQueryParamGroupBy$inboundSchema` instead. */
  export const inboundSchema =
    GetSignalsAnalyticsTimeseriesQueryParamGroupBy$inboundSchema;
  /** @deprecated use `GetSignalsAnalyticsTimeseriesQueryParamGroupBy$outboundSchema` instead. */
  export const outboundSchema =
    GetSignalsAnalyticsTimeseriesQueryParamGroupBy$outboundSchema;
}

/** @internal */
export const GetSignalsAnalyticsTimeseriesQueryParamSortBy$inboundSchema:
  z.ZodNativeEnum<typeof GetSignalsAnalyticsTimeseriesQueryParamSortBy> = z
    .nativeEnum(GetSignalsAnalyticsTimeseriesQueryParamSortBy);

/** @internal */
export const GetSignalsAnalyticsTimeseriesQueryParamSortBy$outboundSchema:
  z.ZodNativeEnum<typeof GetSignalsAnalyticsTimeseriesQueryParamSortBy> =
    GetSignalsAnalyticsTimeseriesQueryParamSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsAnalyticsTimeseriesQueryParamSortBy$ {
  /** @deprecated use `GetSignalsAnalyticsTimeseriesQueryParamSortBy$inboundSchema` instead. */
  export const inboundSchema =
    GetSignalsAnalyticsTimeseriesQueryParamSortBy$inboundSchema;
  /** @deprecated use `GetSignalsAnalyticsTimeseriesQueryParamSortBy$outboundSchema` instead. */
  export const outboundSchema =
    GetSignalsAnalyticsTimeseriesQueryParamSortBy$outboundSchema;
}

/** @internal */
export const GetSignalsAnalyticsTimeseriesQueryParamSortDirection$inboundSchema:
  z.ZodNativeEnum<typeof GetSignalsAnalyticsTimeseriesQueryParamSortDirection> =
    z.nativeEnum(GetSignalsAnalyticsTimeseriesQueryParamSortDirection);

/** @internal */
export const GetSignalsAnalyticsTimeseriesQueryParamSortDirection$outboundSchema:
  z.ZodNativeEnum<typeof GetSignalsAnalyticsTimeseriesQueryParamSortDirection> =
    GetSignalsAnalyticsTimeseriesQueryParamSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsAnalyticsTimeseriesQueryParamSortDirection$ {
  /** @deprecated use `GetSignalsAnalyticsTimeseriesQueryParamSortDirection$inboundSchema` instead. */
  export const inboundSchema =
    GetSignalsAnalyticsTimeseriesQueryParamSortDirection$inboundSchema;
  /** @deprecated use `GetSignalsAnalyticsTimeseriesQueryParamSortDirection$outboundSchema` instead. */
  export const outboundSchema =
    GetSignalsAnalyticsTimeseriesQueryParamSortDirection$outboundSchema;
}

/** @internal */
export const GetSignalsAnalyticsTimeseriesRequest$inboundSchema: z.ZodType<
  GetSignalsAnalyticsTimeseriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket: Bucket$inboundSchema.optional(),
  signal_rules: z.string().optional(),
  teams: z.string().optional(),
  environments: z.string().optional(),
  services: z.string().optional(),
  tags: z.string().optional(),
  users: z.string().optional(),
  group_by: GetSignalsAnalyticsTimeseriesQueryParamGroupBy$inboundSchema
    .optional(),
  sort_by: GetSignalsAnalyticsTimeseriesQueryParamSortBy$inboundSchema
    .optional(),
  sort_direction:
    GetSignalsAnalyticsTimeseriesQueryParamSortDirection$inboundSchema
      .optional(),
  start_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "signal_rules": "signalRules",
    "group_by": "groupBy",
    "sort_by": "sortBy",
    "sort_direction": "sortDirection",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type GetSignalsAnalyticsTimeseriesRequest$Outbound = {
  bucket?: string | undefined;
  signal_rules?: string | undefined;
  teams?: string | undefined;
  environments?: string | undefined;
  services?: string | undefined;
  tags?: string | undefined;
  users?: string | undefined;
  group_by?: string | undefined;
  sort_by?: string | undefined;
  sort_direction?: string | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const GetSignalsAnalyticsTimeseriesRequest$outboundSchema: z.ZodType<
  GetSignalsAnalyticsTimeseriesRequest$Outbound,
  z.ZodTypeDef,
  GetSignalsAnalyticsTimeseriesRequest
> = z.object({
  bucket: Bucket$outboundSchema.optional(),
  signalRules: z.string().optional(),
  teams: z.string().optional(),
  environments: z.string().optional(),
  services: z.string().optional(),
  tags: z.string().optional(),
  users: z.string().optional(),
  groupBy: GetSignalsAnalyticsTimeseriesQueryParamGroupBy$outboundSchema
    .optional(),
  sortBy: GetSignalsAnalyticsTimeseriesQueryParamSortBy$outboundSchema
    .optional(),
  sortDirection:
    GetSignalsAnalyticsTimeseriesQueryParamSortDirection$outboundSchema
      .optional(),
  startDate: z.date().transform(v => v.toISOString()).optional(),
  endDate: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    signalRules: "signal_rules",
    groupBy: "group_by",
    sortBy: "sort_by",
    sortDirection: "sort_direction",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSignalsAnalyticsTimeseriesRequest$ {
  /** @deprecated use `GetSignalsAnalyticsTimeseriesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetSignalsAnalyticsTimeseriesRequest$inboundSchema;
  /** @deprecated use `GetSignalsAnalyticsTimeseriesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetSignalsAnalyticsTimeseriesRequest$outboundSchema;
  /** @deprecated use `GetSignalsAnalyticsTimeseriesRequest$Outbound` instead. */
  export type Outbound = GetSignalsAnalyticsTimeseriesRequest$Outbound;
}

export function getSignalsAnalyticsTimeseriesRequestToJSON(
  getSignalsAnalyticsTimeseriesRequest: GetSignalsAnalyticsTimeseriesRequest,
): string {
  return JSON.stringify(
    GetSignalsAnalyticsTimeseriesRequest$outboundSchema.parse(
      getSignalsAnalyticsTimeseriesRequest,
    ),
  );
}

export function getSignalsAnalyticsTimeseriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSignalsAnalyticsTimeseriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSignalsAnalyticsTimeseriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSignalsAnalyticsTimeseriesRequest' from JSON`,
  );
}
