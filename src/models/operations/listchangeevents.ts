/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListChangeEventsRequest = {
  page?: number | null | undefined;
  perPage?: number | null | undefined;
  /**
   * The id of a previously saved search.
   */
  savedSearchId?: string | null | undefined;
  /**
   * A text query for change events
   */
  query?: string | null | undefined;
  /**
   * A comma separated list of label key / values in the format of "key=value,key2=value2". To filter change events that have a key (with no specific value), omit the value
   */
  labels?: string | null | undefined;
  /**
   * A comma separated list of environment IDs
   */
  environments?: string | null | undefined;
  /**
   * A comma separated list of service IDs
   */
  services?: string | null | undefined;
  /**
   * The start time to start returning change events from
   */
  startsAt?: string | null | undefined;
  /**
   * The end time to return change events up to
   */
  endsAt?: Date | null | undefined;
};

/** @internal */
export const ListChangeEventsRequest$inboundSchema: z.ZodType<
  ListChangeEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
  saved_search_id: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  labels: z.nullable(z.string()).optional(),
  environments: z.nullable(z.string()).optional(),
  services: z.nullable(z.string()).optional(),
  starts_at: z.nullable(z.string()).optional(),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "saved_search_id": "savedSearchId",
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type ListChangeEventsRequest$Outbound = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  saved_search_id?: string | null | undefined;
  query?: string | null | undefined;
  labels?: string | null | undefined;
  environments?: string | null | undefined;
  services?: string | null | undefined;
  starts_at?: string | null | undefined;
  ends_at?: string | null | undefined;
};

/** @internal */
export const ListChangeEventsRequest$outboundSchema: z.ZodType<
  ListChangeEventsRequest$Outbound,
  z.ZodTypeDef,
  ListChangeEventsRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
  savedSearchId: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  labels: z.nullable(z.string()).optional(),
  environments: z.nullable(z.string()).optional(),
  services: z.nullable(z.string()).optional(),
  startsAt: z.nullable(z.string()).optional(),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    savedSearchId: "saved_search_id",
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChangeEventsRequest$ {
  /** @deprecated use `ListChangeEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListChangeEventsRequest$inboundSchema;
  /** @deprecated use `ListChangeEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListChangeEventsRequest$outboundSchema;
  /** @deprecated use `ListChangeEventsRequest$Outbound` instead. */
  export type Outbound = ListChangeEventsRequest$Outbound;
}

export function listChangeEventsRequestToJSON(
  listChangeEventsRequest: ListChangeEventsRequest,
): string {
  return JSON.stringify(
    ListChangeEventsRequest$outboundSchema.parse(listChangeEventsRequest),
  );
}

export function listChangeEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListChangeEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChangeEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChangeEventsRequest' from JSON`,
  );
}
