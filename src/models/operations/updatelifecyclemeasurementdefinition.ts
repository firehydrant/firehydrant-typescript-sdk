/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateLifecycleMeasurementDefinitionRequestBody = {
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  startsAtMilestoneId?: string | null | undefined;
  endsAtMilestoneId?: string | null | undefined;
};

export type UpdateLifecycleMeasurementDefinitionRequest = {
  measurementDefinitionId: string;
  requestBody?: UpdateLifecycleMeasurementDefinitionRequestBody | undefined;
};

/** @internal */
export const UpdateLifecycleMeasurementDefinitionRequestBody$inboundSchema:
  z.ZodType<
    UpdateLifecycleMeasurementDefinitionRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    starts_at_milestone_id: z.nullable(z.string()).optional(),
    ends_at_milestone_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "starts_at_milestone_id": "startsAtMilestoneId",
      "ends_at_milestone_id": "endsAtMilestoneId",
    });
  });

/** @internal */
export type UpdateLifecycleMeasurementDefinitionRequestBody$Outbound = {
  name?: string | null | undefined;
  slug?: string | null | undefined;
  description?: string | null | undefined;
  starts_at_milestone_id?: string | null | undefined;
  ends_at_milestone_id?: string | null | undefined;
};

/** @internal */
export const UpdateLifecycleMeasurementDefinitionRequestBody$outboundSchema:
  z.ZodType<
    UpdateLifecycleMeasurementDefinitionRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateLifecycleMeasurementDefinitionRequestBody
  > = z.object({
    name: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    startsAtMilestoneId: z.nullable(z.string()).optional(),
    endsAtMilestoneId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      startsAtMilestoneId: "starts_at_milestone_id",
      endsAtMilestoneId: "ends_at_milestone_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLifecycleMeasurementDefinitionRequestBody$ {
  /** @deprecated use `UpdateLifecycleMeasurementDefinitionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateLifecycleMeasurementDefinitionRequestBody$inboundSchema;
  /** @deprecated use `UpdateLifecycleMeasurementDefinitionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateLifecycleMeasurementDefinitionRequestBody$outboundSchema;
  /** @deprecated use `UpdateLifecycleMeasurementDefinitionRequestBody$Outbound` instead. */
  export type Outbound =
    UpdateLifecycleMeasurementDefinitionRequestBody$Outbound;
}

export function updateLifecycleMeasurementDefinitionRequestBodyToJSON(
  updateLifecycleMeasurementDefinitionRequestBody:
    UpdateLifecycleMeasurementDefinitionRequestBody,
): string {
  return JSON.stringify(
    UpdateLifecycleMeasurementDefinitionRequestBody$outboundSchema.parse(
      updateLifecycleMeasurementDefinitionRequestBody,
    ),
  );
}

export function updateLifecycleMeasurementDefinitionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateLifecycleMeasurementDefinitionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateLifecycleMeasurementDefinitionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateLifecycleMeasurementDefinitionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateLifecycleMeasurementDefinitionRequest$inboundSchema:
  z.ZodType<
    UpdateLifecycleMeasurementDefinitionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    measurement_definition_id: z.string(),
    RequestBody: z.lazy(() =>
      UpdateLifecycleMeasurementDefinitionRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "measurement_definition_id": "measurementDefinitionId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type UpdateLifecycleMeasurementDefinitionRequest$Outbound = {
  measurement_definition_id: string;
  RequestBody?:
    | UpdateLifecycleMeasurementDefinitionRequestBody$Outbound
    | undefined;
};

/** @internal */
export const UpdateLifecycleMeasurementDefinitionRequest$outboundSchema:
  z.ZodType<
    UpdateLifecycleMeasurementDefinitionRequest$Outbound,
    z.ZodTypeDef,
    UpdateLifecycleMeasurementDefinitionRequest
  > = z.object({
    measurementDefinitionId: z.string(),
    requestBody: z.lazy(() =>
      UpdateLifecycleMeasurementDefinitionRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      measurementDefinitionId: "measurement_definition_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLifecycleMeasurementDefinitionRequest$ {
  /** @deprecated use `UpdateLifecycleMeasurementDefinitionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateLifecycleMeasurementDefinitionRequest$inboundSchema;
  /** @deprecated use `UpdateLifecycleMeasurementDefinitionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateLifecycleMeasurementDefinitionRequest$outboundSchema;
  /** @deprecated use `UpdateLifecycleMeasurementDefinitionRequest$Outbound` instead. */
  export type Outbound = UpdateLifecycleMeasurementDefinitionRequest$Outbound;
}

export function updateLifecycleMeasurementDefinitionRequestToJSON(
  updateLifecycleMeasurementDefinitionRequest:
    UpdateLifecycleMeasurementDefinitionRequest,
): string {
  return JSON.stringify(
    UpdateLifecycleMeasurementDefinitionRequest$outboundSchema.parse(
      updateLifecycleMeasurementDefinitionRequest,
    ),
  );
}

export function updateLifecycleMeasurementDefinitionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateLifecycleMeasurementDefinitionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateLifecycleMeasurementDefinitionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateLifecycleMeasurementDefinitionRequest' from JSON`,
  );
}
