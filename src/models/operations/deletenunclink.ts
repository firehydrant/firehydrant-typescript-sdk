/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteNuncLinkRequest = {
  nuncConnectionId: string;
  linkId: string;
};

/** @internal */
export const DeleteNuncLinkRequest$inboundSchema: z.ZodType<
  DeleteNuncLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  link_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "link_id": "linkId",
  });
});

/** @internal */
export type DeleteNuncLinkRequest$Outbound = {
  nunc_connection_id: string;
  link_id: string;
};

/** @internal */
export const DeleteNuncLinkRequest$outboundSchema: z.ZodType<
  DeleteNuncLinkRequest$Outbound,
  z.ZodTypeDef,
  DeleteNuncLinkRequest
> = z.object({
  nuncConnectionId: z.string(),
  linkId: z.string(),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    linkId: "link_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNuncLinkRequest$ {
  /** @deprecated use `DeleteNuncLinkRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteNuncLinkRequest$inboundSchema;
  /** @deprecated use `DeleteNuncLinkRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteNuncLinkRequest$outboundSchema;
  /** @deprecated use `DeleteNuncLinkRequest$Outbound` instead. */
  export type Outbound = DeleteNuncLinkRequest$Outbound;
}

export function deleteNuncLinkRequestToJSON(
  deleteNuncLinkRequest: DeleteNuncLinkRequest,
): string {
  return JSON.stringify(
    DeleteNuncLinkRequest$outboundSchema.parse(deleteNuncLinkRequest),
  );
}

export function deleteNuncLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNuncLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNuncLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNuncLinkRequest' from JSON`,
  );
}
