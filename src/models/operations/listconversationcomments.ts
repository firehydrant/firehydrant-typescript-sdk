/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Allows sorting comments by the time they were posted, ascending or descending.
 */
export const Sort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Allows sorting comments by the time they were posted, ascending or descending.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type ListConversationCommentsRequest = {
  /**
   * An ISO8601 timestamp that allows filtering for comments posted before the provided time.
   */
  before?: Date | undefined;
  /**
   * An ISO8601 timestamp that allows filtering for comments posted after the provided time.
   */
  after?: Date | undefined;
  /**
   * Allows sorting comments by the time they were posted, ascending or descending.
   */
  sort?: Sort | undefined;
  conversationId: string;
};

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const ListConversationCommentsRequest$inboundSchema: z.ZodType<
  ListConversationCommentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  before: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  after: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  sort: Sort$inboundSchema.default("asc"),
  conversation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
  });
});

/** @internal */
export type ListConversationCommentsRequest$Outbound = {
  before?: string | undefined;
  after?: string | undefined;
  sort: string;
  conversation_id: string;
};

/** @internal */
export const ListConversationCommentsRequest$outboundSchema: z.ZodType<
  ListConversationCommentsRequest$Outbound,
  z.ZodTypeDef,
  ListConversationCommentsRequest
> = z.object({
  before: z.date().transform(v => v.toISOString()).optional(),
  after: z.date().transform(v => v.toISOString()).optional(),
  sort: Sort$outboundSchema.default("asc"),
  conversationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConversationCommentsRequest$ {
  /** @deprecated use `ListConversationCommentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListConversationCommentsRequest$inboundSchema;
  /** @deprecated use `ListConversationCommentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListConversationCommentsRequest$outboundSchema;
  /** @deprecated use `ListConversationCommentsRequest$Outbound` instead. */
  export type Outbound = ListConversationCommentsRequest$Outbound;
}

export function listConversationCommentsRequestToJSON(
  listConversationCommentsRequest: ListConversationCommentsRequest,
): string {
  return JSON.stringify(
    ListConversationCommentsRequest$outboundSchema.parse(
      listConversationCommentsRequest,
    ),
  );
}

export function listConversationCommentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListConversationCommentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConversationCommentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConversationCommentsRequest' from JSON`,
  );
}
