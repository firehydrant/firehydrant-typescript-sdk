/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetChangeEventRequest = {
  changeEventId: string;
};

/** @internal */
export const GetChangeEventRequest$inboundSchema: z.ZodType<
  GetChangeEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  change_event_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "change_event_id": "changeEventId",
  });
});

/** @internal */
export type GetChangeEventRequest$Outbound = {
  change_event_id: string;
};

/** @internal */
export const GetChangeEventRequest$outboundSchema: z.ZodType<
  GetChangeEventRequest$Outbound,
  z.ZodTypeDef,
  GetChangeEventRequest
> = z.object({
  changeEventId: z.string(),
}).transform((v) => {
  return remap$(v, {
    changeEventId: "change_event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChangeEventRequest$ {
  /** @deprecated use `GetChangeEventRequest$inboundSchema` instead. */
  export const inboundSchema = GetChangeEventRequest$inboundSchema;
  /** @deprecated use `GetChangeEventRequest$outboundSchema` instead. */
  export const outboundSchema = GetChangeEventRequest$outboundSchema;
  /** @deprecated use `GetChangeEventRequest$Outbound` instead. */
  export type Outbound = GetChangeEventRequest$Outbound;
}

export function getChangeEventRequestToJSON(
  getChangeEventRequest: GetChangeEventRequest,
): string {
  return JSON.stringify(
    GetChangeEventRequest$outboundSchema.parse(getChangeEventRequest),
  );
}

export function getChangeEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetChangeEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChangeEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChangeEventRequest' from JSON`,
  );
}
