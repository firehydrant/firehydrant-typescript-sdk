/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ArchiveAudienceRequest = {
  /**
   * Unique identifier of the audience
   */
  audienceId: string;
};

/** @internal */
export const ArchiveAudienceRequest$inboundSchema: z.ZodType<
  ArchiveAudienceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  audience_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "audience_id": "audienceId",
  });
});

/** @internal */
export type ArchiveAudienceRequest$Outbound = {
  audience_id: string;
};

/** @internal */
export const ArchiveAudienceRequest$outboundSchema: z.ZodType<
  ArchiveAudienceRequest$Outbound,
  z.ZodTypeDef,
  ArchiveAudienceRequest
> = z.object({
  audienceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    audienceId: "audience_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArchiveAudienceRequest$ {
  /** @deprecated use `ArchiveAudienceRequest$inboundSchema` instead. */
  export const inboundSchema = ArchiveAudienceRequest$inboundSchema;
  /** @deprecated use `ArchiveAudienceRequest$outboundSchema` instead. */
  export const outboundSchema = ArchiveAudienceRequest$outboundSchema;
  /** @deprecated use `ArchiveAudienceRequest$Outbound` instead. */
  export type Outbound = ArchiveAudienceRequest$Outbound;
}

export function archiveAudienceRequestToJSON(
  archiveAudienceRequest: ArchiveAudienceRequest,
): string {
  return JSON.stringify(
    ArchiveAudienceRequest$outboundSchema.parse(archiveAudienceRequest),
  );
}

export function archiveAudienceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ArchiveAudienceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArchiveAudienceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArchiveAudienceRequest' from JSON`,
  );
}
