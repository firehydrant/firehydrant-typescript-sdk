/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateIncidentRetrospectiveRequestBody = {
  /**
   * The id of the retrospective template to apply.
   */
  retrospectiveTemplateId: string;
};

export type CreateIncidentRetrospectiveRequest = {
  incidentId: string;
  requestBody: CreateIncidentRetrospectiveRequestBody;
};

/** @internal */
export const CreateIncidentRetrospectiveRequestBody$inboundSchema: z.ZodType<
  CreateIncidentRetrospectiveRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrospective_template_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "retrospective_template_id": "retrospectiveTemplateId",
  });
});

/** @internal */
export type CreateIncidentRetrospectiveRequestBody$Outbound = {
  retrospective_template_id: string;
};

/** @internal */
export const CreateIncidentRetrospectiveRequestBody$outboundSchema: z.ZodType<
  CreateIncidentRetrospectiveRequestBody$Outbound,
  z.ZodTypeDef,
  CreateIncidentRetrospectiveRequestBody
> = z.object({
  retrospectiveTemplateId: z.string(),
}).transform((v) => {
  return remap$(v, {
    retrospectiveTemplateId: "retrospective_template_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentRetrospectiveRequestBody$ {
  /** @deprecated use `CreateIncidentRetrospectiveRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateIncidentRetrospectiveRequestBody$inboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateIncidentRetrospectiveRequestBody$outboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveRequestBody$Outbound` instead. */
  export type Outbound = CreateIncidentRetrospectiveRequestBody$Outbound;
}

export function createIncidentRetrospectiveRequestBodyToJSON(
  createIncidentRetrospectiveRequestBody:
    CreateIncidentRetrospectiveRequestBody,
): string {
  return JSON.stringify(
    CreateIncidentRetrospectiveRequestBody$outboundSchema.parse(
      createIncidentRetrospectiveRequestBody,
    ),
  );
}

export function createIncidentRetrospectiveRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentRetrospectiveRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateIncidentRetrospectiveRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentRetrospectiveRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateIncidentRetrospectiveRequest$inboundSchema: z.ZodType<
  CreateIncidentRetrospectiveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  RequestBody: z.lazy(() =>
    CreateIncidentRetrospectiveRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateIncidentRetrospectiveRequest$Outbound = {
  incident_id: string;
  RequestBody: CreateIncidentRetrospectiveRequestBody$Outbound;
};

/** @internal */
export const CreateIncidentRetrospectiveRequest$outboundSchema: z.ZodType<
  CreateIncidentRetrospectiveRequest$Outbound,
  z.ZodTypeDef,
  CreateIncidentRetrospectiveRequest
> = z.object({
  incidentId: z.string(),
  requestBody: z.lazy(() =>
    CreateIncidentRetrospectiveRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentRetrospectiveRequest$ {
  /** @deprecated use `CreateIncidentRetrospectiveRequest$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentRetrospectiveRequest$inboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateIncidentRetrospectiveRequest$outboundSchema;
  /** @deprecated use `CreateIncidentRetrospectiveRequest$Outbound` instead. */
  export type Outbound = CreateIncidentRetrospectiveRequest$Outbound;
}

export function createIncidentRetrospectiveRequestToJSON(
  createIncidentRetrospectiveRequest: CreateIncidentRetrospectiveRequest,
): string {
  return JSON.stringify(
    CreateIncidentRetrospectiveRequest$outboundSchema.parse(
      createIncidentRetrospectiveRequest,
    ),
  );
}

export function createIncidentRetrospectiveRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentRetrospectiveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateIncidentRetrospectiveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentRetrospectiveRequest' from JSON`,
  );
}
