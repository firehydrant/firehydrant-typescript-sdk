/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNuncLinkRequest = {
  nuncConnectionId: string;
  linkId: string;
  updateNuncLink: components.UpdateNuncLink;
};

/** @internal */
export const UpdateNuncLinkRequest$inboundSchema: z.ZodType<
  UpdateNuncLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  link_id: z.string(),
  update_nunc_link: z.lazy(() => components.UpdateNuncLink$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "link_id": "linkId",
    "update_nunc_link": "updateNuncLink",
  });
});

/** @internal */
export type UpdateNuncLinkRequest$Outbound = {
  nunc_connection_id: string;
  link_id: string;
  update_nunc_link: components.UpdateNuncLink$Outbound;
};

/** @internal */
export const UpdateNuncLinkRequest$outboundSchema: z.ZodType<
  UpdateNuncLinkRequest$Outbound,
  z.ZodTypeDef,
  UpdateNuncLinkRequest
> = z.object({
  nuncConnectionId: z.string(),
  linkId: z.string(),
  updateNuncLink: z.lazy(() => components.UpdateNuncLink$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    linkId: "link_id",
    updateNuncLink: "update_nunc_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNuncLinkRequest$ {
  /** @deprecated use `UpdateNuncLinkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNuncLinkRequest$inboundSchema;
  /** @deprecated use `UpdateNuncLinkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNuncLinkRequest$outboundSchema;
  /** @deprecated use `UpdateNuncLinkRequest$Outbound` instead. */
  export type Outbound = UpdateNuncLinkRequest$Outbound;
}

export function updateNuncLinkRequestToJSON(
  updateNuncLinkRequest: UpdateNuncLinkRequest,
): string {
  return JSON.stringify(
    UpdateNuncLinkRequest$outboundSchema.parse(updateNuncLinkRequest),
  );
}

export function updateNuncLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNuncLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNuncLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNuncLinkRequest' from JSON`,
  );
}
