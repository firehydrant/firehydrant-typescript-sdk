/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIncidentUserRequest = {
  incidentId: string;
  userId: string;
};

/** @internal */
export const GetIncidentUserRequest$inboundSchema: z.ZodType<
  GetIncidentUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "user_id": "userId",
  });
});

/** @internal */
export type GetIncidentUserRequest$Outbound = {
  incident_id: string;
  user_id: string;
};

/** @internal */
export const GetIncidentUserRequest$outboundSchema: z.ZodType<
  GetIncidentUserRequest$Outbound,
  z.ZodTypeDef,
  GetIncidentUserRequest
> = z.object({
  incidentId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIncidentUserRequest$ {
  /** @deprecated use `GetIncidentUserRequest$inboundSchema` instead. */
  export const inboundSchema = GetIncidentUserRequest$inboundSchema;
  /** @deprecated use `GetIncidentUserRequest$outboundSchema` instead. */
  export const outboundSchema = GetIncidentUserRequest$outboundSchema;
  /** @deprecated use `GetIncidentUserRequest$Outbound` instead. */
  export type Outbound = GetIncidentUserRequest$Outbound;
}

export function getIncidentUserRequestToJSON(
  getIncidentUserRequest: GetIncidentUserRequest,
): string {
  return JSON.stringify(
    GetIncidentUserRequest$outboundSchema.parse(getIncidentUserRequest),
  );
}

export function getIncidentUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIncidentUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIncidentUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIncidentUserRequest' from JSON`,
  );
}
