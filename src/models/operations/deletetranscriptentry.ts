/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTranscriptEntryRequest = {
  transcriptId: string;
  incidentId: string;
};

/** @internal */
export const DeleteTranscriptEntryRequest$inboundSchema: z.ZodType<
  DeleteTranscriptEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transcript_id: z.string(),
  incident_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transcript_id": "transcriptId",
    "incident_id": "incidentId",
  });
});

/** @internal */
export type DeleteTranscriptEntryRequest$Outbound = {
  transcript_id: string;
  incident_id: string;
};

/** @internal */
export const DeleteTranscriptEntryRequest$outboundSchema: z.ZodType<
  DeleteTranscriptEntryRequest$Outbound,
  z.ZodTypeDef,
  DeleteTranscriptEntryRequest
> = z.object({
  transcriptId: z.string(),
  incidentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    transcriptId: "transcript_id",
    incidentId: "incident_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTranscriptEntryRequest$ {
  /** @deprecated use `DeleteTranscriptEntryRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTranscriptEntryRequest$inboundSchema;
  /** @deprecated use `DeleteTranscriptEntryRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTranscriptEntryRequest$outboundSchema;
  /** @deprecated use `DeleteTranscriptEntryRequest$Outbound` instead. */
  export type Outbound = DeleteTranscriptEntryRequest$Outbound;
}

export function deleteTranscriptEntryRequestToJSON(
  deleteTranscriptEntryRequest: DeleteTranscriptEntryRequest,
): string {
  return JSON.stringify(
    DeleteTranscriptEntryRequest$outboundSchema.parse(
      deleteTranscriptEntryRequest,
    ),
  );
}

export function deleteTranscriptEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTranscriptEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTranscriptEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTranscriptEntryRequest' from JSON`,
  );
}
