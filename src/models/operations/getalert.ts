/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAlertRequest = {
  alertId: string;
};

/** @internal */
export const GetAlertRequest$inboundSchema: z.ZodType<
  GetAlertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  alert_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "alert_id": "alertId",
  });
});

/** @internal */
export type GetAlertRequest$Outbound = {
  alert_id: string;
};

/** @internal */
export const GetAlertRequest$outboundSchema: z.ZodType<
  GetAlertRequest$Outbound,
  z.ZodTypeDef,
  GetAlertRequest
> = z.object({
  alertId: z.string(),
}).transform((v) => {
  return remap$(v, {
    alertId: "alert_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAlertRequest$ {
  /** @deprecated use `GetAlertRequest$inboundSchema` instead. */
  export const inboundSchema = GetAlertRequest$inboundSchema;
  /** @deprecated use `GetAlertRequest$outboundSchema` instead. */
  export const outboundSchema = GetAlertRequest$outboundSchema;
  /** @deprecated use `GetAlertRequest$Outbound` instead. */
  export type Outbound = GetAlertRequest$Outbound;
}

export function getAlertRequestToJSON(
  getAlertRequest: GetAlertRequest,
): string {
  return JSON.stringify(GetAlertRequest$outboundSchema.parse(getAlertRequest));
}

export function getAlertRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAlertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAlertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAlertRequest' from JSON`,
  );
}
