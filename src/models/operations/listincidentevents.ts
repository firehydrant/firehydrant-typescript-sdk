/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIncidentEventsRequest = {
  incidentId: string;
  /**
   * A comma separated list of types of events to filter by
   */
  types?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
};

/** @internal */
export const ListIncidentEventsRequest$inboundSchema: z.ZodType<
  ListIncidentEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  types: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListIncidentEventsRequest$Outbound = {
  incident_id: string;
  types?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListIncidentEventsRequest$outboundSchema: z.ZodType<
  ListIncidentEventsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentEventsRequest
> = z.object({
  incidentId: z.string(),
  types: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentEventsRequest$ {
  /** @deprecated use `ListIncidentEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentEventsRequest$inboundSchema;
  /** @deprecated use `ListIncidentEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentEventsRequest$outboundSchema;
  /** @deprecated use `ListIncidentEventsRequest$Outbound` instead. */
  export type Outbound = ListIncidentEventsRequest$Outbound;
}

export function listIncidentEventsRequestToJSON(
  listIncidentEventsRequest: ListIncidentEventsRequest,
): string {
  return JSON.stringify(
    ListIncidentEventsRequest$outboundSchema.parse(listIncidentEventsRequest),
  );
}

export function listIncidentEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentEventsRequest' from JSON`,
  );
}
