/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIncidentEventsRequest = {
  incidentId: string;
  /**
   * A comma separated list of types of events to filter by. Possible values are:
   *
   * @remarks
   *  - `add_task_list`: Task list was added
   *  - `alert_event`: Someone was paged or took action on a linked alert
   *  - `alert_linked`: An alert was linked to the incident
   *  - `bulk_milestone_update`: When a milestone change occurs with no other changes
   *  - `bulk_update`: When an incident note/update is posted or when impacted components are updated. If other changes occur together with either of these changes (e.g., milestone change), they are all bundled together into a bulk_update
   *  - `change_type`: Updates to associated change events
   *  - `chat_message`: Any chat message event in a linked chat app like Slack or MS Teams
   *  - `children_changed`: When adding or updating child related incidents
   *  - `external_link`: When an external link is added or updated
   *  - `general_update`: Currently only describes Runbook stoppage events
   *  - `generic_chat_message`: When an event or message is manually added to the timeline via the web UI or API
   *  - `incident_attachment`: When attachments or files are added to the timeline
   *  - `generic_resource_change`: Any changes to individual fields within the incident, including custom fields
   *  - `incident_restriction`: When an incident is converted to private
   *  - `incident_status`: Only used when an incident starts and changes to an `active` state
   *  - `note`: When a message is posted to a status page directly and not via `/fh update`
   *  - `role_update`: Any updates to assigned roles
   *  - `runbook_attachment`: Any updates to a runbook
   *  - `runbook_step_execution_update`: Any Runbook step events
   *  - `task_update`: Task update events
   *  - `team_assignment`: Team assignment events
   *  - `ticket_update`: Updates to incident and follow-up tickets
   */
  types?: string | null | undefined;
  page?: number | null | undefined;
  perPage?: number | null | undefined;
};

/** @internal */
export const ListIncidentEventsRequest$inboundSchema: z.ZodType<
  ListIncidentEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  types: z.nullable(z.string()).optional(),
  page: z.nullable(z.number().int()).optional(),
  per_page: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListIncidentEventsRequest$Outbound = {
  incident_id: string;
  types?: string | null | undefined;
  page?: number | null | undefined;
  per_page?: number | null | undefined;
};

/** @internal */
export const ListIncidentEventsRequest$outboundSchema: z.ZodType<
  ListIncidentEventsRequest$Outbound,
  z.ZodTypeDef,
  ListIncidentEventsRequest
> = z.object({
  incidentId: z.string(),
  types: z.nullable(z.string()).optional(),
  page: z.nullable(z.number().int()).optional(),
  perPage: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIncidentEventsRequest$ {
  /** @deprecated use `ListIncidentEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIncidentEventsRequest$inboundSchema;
  /** @deprecated use `ListIncidentEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIncidentEventsRequest$outboundSchema;
  /** @deprecated use `ListIncidentEventsRequest$Outbound` instead. */
  export type Outbound = ListIncidentEventsRequest$Outbound;
}

export function listIncidentEventsRequestToJSON(
  listIncidentEventsRequest: ListIncidentEventsRequest,
): string {
  return JSON.stringify(
    ListIncidentEventsRequest$outboundSchema.parse(listIncidentEventsRequest),
  );
}

export function listIncidentEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIncidentEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIncidentEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIncidentEventsRequest' from JSON`,
  );
}
