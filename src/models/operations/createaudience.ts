/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAudienceRequest = {
  /**
   * Name of the audience (max 255 characters)
   */
  name: string;
  /**
   * Description of the audience (max 4000 characters)
   */
  description: string;
  /**
   * Whether this is the default audience
   */
  default?: boolean | null | undefined;
  /**
   * The incident detail question (max 255 characters)
   */
  detailsQuestion: Array<string>;
  /**
   * The prompt to display when collecting this detail
   */
  detailsPrompt: Array<string>;
  /**
   * Optional unique identifier for this detail
   */
  detailsSlug?: Array<string> | null | undefined;
};

/** @internal */
export const CreateAudienceRequest$inboundSchema: z.ZodType<
  CreateAudienceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  default: z.nullable(z.boolean().default(false)),
  "details[question]": z.array(z.string()),
  "details[prompt]": z.array(z.string()),
  "details[slug]": z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "details[question]": "detailsQuestion",
    "details[prompt]": "detailsPrompt",
    "details[slug]": "detailsSlug",
  });
});

/** @internal */
export type CreateAudienceRequest$Outbound = {
  name: string;
  description: string;
  default: boolean | null;
  "details[question]": Array<string>;
  "details[prompt]": Array<string>;
  "details[slug]"?: Array<string> | null | undefined;
};

/** @internal */
export const CreateAudienceRequest$outboundSchema: z.ZodType<
  CreateAudienceRequest$Outbound,
  z.ZodTypeDef,
  CreateAudienceRequest
> = z.object({
  name: z.string(),
  description: z.string(),
  default: z.nullable(z.boolean().default(false)),
  detailsQuestion: z.array(z.string()),
  detailsPrompt: z.array(z.string()),
  detailsSlug: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    detailsQuestion: "details[question]",
    detailsPrompt: "details[prompt]",
    detailsSlug: "details[slug]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAudienceRequest$ {
  /** @deprecated use `CreateAudienceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAudienceRequest$inboundSchema;
  /** @deprecated use `CreateAudienceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAudienceRequest$outboundSchema;
  /** @deprecated use `CreateAudienceRequest$Outbound` instead. */
  export type Outbound = CreateAudienceRequest$Outbound;
}

export function createAudienceRequestToJSON(
  createAudienceRequest: CreateAudienceRequest,
): string {
  return JSON.stringify(
    CreateAudienceRequest$outboundSchema.parse(createAudienceRequest),
  );
}

export function createAudienceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAudienceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAudienceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAudienceRequest' from JSON`,
  );
}
