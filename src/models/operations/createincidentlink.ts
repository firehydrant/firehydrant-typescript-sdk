/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateIncidentLinkRequest = {
  incidentId: string;
  createIncidentLink: components.CreateIncidentLink;
};

/** @internal */
export const CreateIncidentLinkRequest$inboundSchema: z.ZodType<
  CreateIncidentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  create_incident_link: z.lazy(() =>
    components.CreateIncidentLink$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "create_incident_link": "createIncidentLink",
  });
});

/** @internal */
export type CreateIncidentLinkRequest$Outbound = {
  incident_id: string;
  create_incident_link: components.CreateIncidentLink$Outbound;
};

/** @internal */
export const CreateIncidentLinkRequest$outboundSchema: z.ZodType<
  CreateIncidentLinkRequest$Outbound,
  z.ZodTypeDef,
  CreateIncidentLinkRequest
> = z.object({
  incidentId: z.string(),
  createIncidentLink: z.lazy(() =>
    components.CreateIncidentLink$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    createIncidentLink: "create_incident_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIncidentLinkRequest$ {
  /** @deprecated use `CreateIncidentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = CreateIncidentLinkRequest$inboundSchema;
  /** @deprecated use `CreateIncidentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = CreateIncidentLinkRequest$outboundSchema;
  /** @deprecated use `CreateIncidentLinkRequest$Outbound` instead. */
  export type Outbound = CreateIncidentLinkRequest$Outbound;
}

export function createIncidentLinkRequestToJSON(
  createIncidentLinkRequest: CreateIncidentLinkRequest,
): string {
  return JSON.stringify(
    CreateIncidentLinkRequest$outboundSchema.parse(createIncidentLinkRequest),
  );
}

export function createIncidentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIncidentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateIncidentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIncidentLinkRequest' from JSON`,
  );
}
