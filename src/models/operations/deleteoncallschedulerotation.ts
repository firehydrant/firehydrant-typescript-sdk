/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteOnCallScheduleRotationRequest = {
  rotationId: string;
  teamId: string;
  scheduleId: string;
};

/** @internal */
export const DeleteOnCallScheduleRotationRequest$inboundSchema: z.ZodType<
  DeleteOnCallScheduleRotationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  rotation_id: z.string(),
  team_id: z.string(),
  schedule_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "rotation_id": "rotationId",
    "team_id": "teamId",
    "schedule_id": "scheduleId",
  });
});

/** @internal */
export type DeleteOnCallScheduleRotationRequest$Outbound = {
  rotation_id: string;
  team_id: string;
  schedule_id: string;
};

/** @internal */
export const DeleteOnCallScheduleRotationRequest$outboundSchema: z.ZodType<
  DeleteOnCallScheduleRotationRequest$Outbound,
  z.ZodTypeDef,
  DeleteOnCallScheduleRotationRequest
> = z.object({
  rotationId: z.string(),
  teamId: z.string(),
  scheduleId: z.string(),
}).transform((v) => {
  return remap$(v, {
    rotationId: "rotation_id",
    teamId: "team_id",
    scheduleId: "schedule_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOnCallScheduleRotationRequest$ {
  /** @deprecated use `DeleteOnCallScheduleRotationRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteOnCallScheduleRotationRequest$inboundSchema;
  /** @deprecated use `DeleteOnCallScheduleRotationRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteOnCallScheduleRotationRequest$outboundSchema;
  /** @deprecated use `DeleteOnCallScheduleRotationRequest$Outbound` instead. */
  export type Outbound = DeleteOnCallScheduleRotationRequest$Outbound;
}

export function deleteOnCallScheduleRotationRequestToJSON(
  deleteOnCallScheduleRotationRequest: DeleteOnCallScheduleRotationRequest,
): string {
  return JSON.stringify(
    DeleteOnCallScheduleRotationRequest$outboundSchema.parse(
      deleteOnCallScheduleRotationRequest,
    ),
  );
}

export function deleteOnCallScheduleRotationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOnCallScheduleRotationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteOnCallScheduleRotationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOnCallScheduleRotationRequest' from JSON`,
  );
}
