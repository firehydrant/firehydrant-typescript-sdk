/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteEmailSubscriberRequest = {
  nuncConnectionId: string;
  /**
   * A list of subscriber IDs to unsubscribe.
   */
  subscriberIds: string;
};

/** @internal */
export const DeleteEmailSubscriberRequest$inboundSchema: z.ZodType<
  DeleteEmailSubscriberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nunc_connection_id: z.string(),
  subscriber_ids: z.string(),
}).transform((v) => {
  return remap$(v, {
    "nunc_connection_id": "nuncConnectionId",
    "subscriber_ids": "subscriberIds",
  });
});

/** @internal */
export type DeleteEmailSubscriberRequest$Outbound = {
  nunc_connection_id: string;
  subscriber_ids: string;
};

/** @internal */
export const DeleteEmailSubscriberRequest$outboundSchema: z.ZodType<
  DeleteEmailSubscriberRequest$Outbound,
  z.ZodTypeDef,
  DeleteEmailSubscriberRequest
> = z.object({
  nuncConnectionId: z.string(),
  subscriberIds: z.string(),
}).transform((v) => {
  return remap$(v, {
    nuncConnectionId: "nunc_connection_id",
    subscriberIds: "subscriber_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEmailSubscriberRequest$ {
  /** @deprecated use `DeleteEmailSubscriberRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteEmailSubscriberRequest$inboundSchema;
  /** @deprecated use `DeleteEmailSubscriberRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteEmailSubscriberRequest$outboundSchema;
  /** @deprecated use `DeleteEmailSubscriberRequest$Outbound` instead. */
  export type Outbound = DeleteEmailSubscriberRequest$Outbound;
}

export function deleteEmailSubscriberRequestToJSON(
  deleteEmailSubscriberRequest: DeleteEmailSubscriberRequest,
): string {
  return JSON.stringify(
    DeleteEmailSubscriberRequest$outboundSchema.parse(
      deleteEmailSubscriberRequest,
    ),
  );
}

export function deleteEmailSubscriberRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteEmailSubscriberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteEmailSubscriberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteEmailSubscriberRequest' from JSON`,
  );
}
