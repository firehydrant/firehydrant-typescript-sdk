/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTicketRequest = {
  ticketId: string;
  updateTicket: components.UpdateTicket;
};

/** @internal */
export const UpdateTicketRequest$inboundSchema: z.ZodType<
  UpdateTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket_id: z.string(),
  update_ticket: z.lazy(() => components.UpdateTicket$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "ticket_id": "ticketId",
    "update_ticket": "updateTicket",
  });
});

/** @internal */
export type UpdateTicketRequest$Outbound = {
  ticket_id: string;
  update_ticket: components.UpdateTicket$Outbound;
};

/** @internal */
export const UpdateTicketRequest$outboundSchema: z.ZodType<
  UpdateTicketRequest$Outbound,
  z.ZodTypeDef,
  UpdateTicketRequest
> = z.object({
  ticketId: z.string(),
  updateTicket: z.lazy(() => components.UpdateTicket$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    ticketId: "ticket_id",
    updateTicket: "update_ticket",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTicketRequest$ {
  /** @deprecated use `UpdateTicketRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTicketRequest$inboundSchema;
  /** @deprecated use `UpdateTicketRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTicketRequest$outboundSchema;
  /** @deprecated use `UpdateTicketRequest$Outbound` instead. */
  export type Outbound = UpdateTicketRequest$Outbound;
}

export function updateTicketRequestToJSON(
  updateTicketRequest: UpdateTicketRequest,
): string {
  return JSON.stringify(
    UpdateTicketRequest$outboundSchema.parse(updateTicketRequest),
  );
}

export function updateTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTicketRequest' from JSON`,
  );
}
