/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAiIncidentSummaryVoteStatusRequest = {
  incidentId: string;
  generatedSummaryId: string;
};

/** @internal */
export const GetAiIncidentSummaryVoteStatusRequest$inboundSchema: z.ZodType<
  GetAiIncidentSummaryVoteStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.string(),
  generated_summary_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "generated_summary_id": "generatedSummaryId",
  });
});

/** @internal */
export type GetAiIncidentSummaryVoteStatusRequest$Outbound = {
  incident_id: string;
  generated_summary_id: string;
};

/** @internal */
export const GetAiIncidentSummaryVoteStatusRequest$outboundSchema: z.ZodType<
  GetAiIncidentSummaryVoteStatusRequest$Outbound,
  z.ZodTypeDef,
  GetAiIncidentSummaryVoteStatusRequest
> = z.object({
  incidentId: z.string(),
  generatedSummaryId: z.string(),
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    generatedSummaryId: "generated_summary_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAiIncidentSummaryVoteStatusRequest$ {
  /** @deprecated use `GetAiIncidentSummaryVoteStatusRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAiIncidentSummaryVoteStatusRequest$inboundSchema;
  /** @deprecated use `GetAiIncidentSummaryVoteStatusRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAiIncidentSummaryVoteStatusRequest$outboundSchema;
  /** @deprecated use `GetAiIncidentSummaryVoteStatusRequest$Outbound` instead. */
  export type Outbound = GetAiIncidentSummaryVoteStatusRequest$Outbound;
}

export function getAiIncidentSummaryVoteStatusRequestToJSON(
  getAiIncidentSummaryVoteStatusRequest: GetAiIncidentSummaryVoteStatusRequest,
): string {
  return JSON.stringify(
    GetAiIncidentSummaryVoteStatusRequest$outboundSchema.parse(
      getAiIncidentSummaryVoteStatusRequest,
    ),
  );
}

export function getAiIncidentSummaryVoteStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAiIncidentSummaryVoteStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAiIncidentSummaryVoteStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAiIncidentSummaryVoteStatusRequest' from JSON`,
  );
}
