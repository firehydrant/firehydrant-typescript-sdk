/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAuditEventsRequest = {
  /**
   * Cursor for pagination.
   */
  cursor?: string | null | undefined;
  /**
   * Query string to filter audit events, concatenated with AND keyword.
   *
   * @remarks
   * Available filters with example:
   *   - event.occurred_at < 2023-01-01T00:00:00Z
   *   - event.key = signals.on_call_rotation.generate
   *   - event.actor.kind = user
   *   - event.actor.id = 00000000-0000-0000-0000-000000000000
   *   - resource.kind = incident
   *   - resource.id = 00000000-0000-0000-0000-000000000000
   *   - parent_id = 00000000-0000-0000-0000-000000000000
   * Valid query looks like (without quotes):
   *   event.occurred_at < 2023-01-01T00:00:00Z AND event.key = signals.on_call_rotation.generate
   */
  filter?: string | null | undefined;
  /**
   * Number of records to display in a single page, maximum is 100 entries. Smaller number is recommended for better performance.
   */
  limit?: number | null | undefined;
};

/** @internal */
export const ListAuditEventsRequest$inboundSchema: z.ZodType<
  ListAuditEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  filter: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(20)),
});

/** @internal */
export type ListAuditEventsRequest$Outbound = {
  cursor?: string | null | undefined;
  filter?: string | null | undefined;
  limit: number | null;
};

/** @internal */
export const ListAuditEventsRequest$outboundSchema: z.ZodType<
  ListAuditEventsRequest$Outbound,
  z.ZodTypeDef,
  ListAuditEventsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  filter: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(20)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditEventsRequest$ {
  /** @deprecated use `ListAuditEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAuditEventsRequest$inboundSchema;
  /** @deprecated use `ListAuditEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAuditEventsRequest$outboundSchema;
  /** @deprecated use `ListAuditEventsRequest$Outbound` instead. */
  export type Outbound = ListAuditEventsRequest$Outbound;
}

export function listAuditEventsRequestToJSON(
  listAuditEventsRequest: ListAuditEventsRequest,
): string {
  return JSON.stringify(
    ListAuditEventsRequest$outboundSchema.parse(listAuditEventsRequest),
  );
}

export function listAuditEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAuditEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuditEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuditEventsRequest' from JSON`,
  );
}
